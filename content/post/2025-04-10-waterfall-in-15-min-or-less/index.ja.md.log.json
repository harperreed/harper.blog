{
  "input_file": "/Users/harper/Public/src/personal/harperreed/harper.blog/content/post/2025-04-10-waterfall-in-15-min-or-less/index.md",
  "output_file": "/Users/harper/Public/src/personal/harperreed/harper.blog/content/post/2025-04-10-waterfall-in-15-min-or-less/index.ja.md",
  "target_language": "japanese",
  "language_code": "ja",
  "model": "o3",
  "skip_edit": false,
  "do_critique": true,
  "critique_loops": 4,
  "has_frontmatter": true,
  "token_usage": {
    "prompt_tokens": 56586,
    "completion_tokens": 20577,
    "total_tokens": 77163
  },
  "cost": "$1.3889",
  "prompts_and_responses": {
    "translation": {
      "model": "o3",
      "target_language": "japanese",
      "system_prompt": "\n        1. Read the provided text carefully, preserving all formatting, markdown, and structure exactly as they appear.\n        2. Identify any block quotes and code blocks.\n        3. Do not translate text in block quotes or in code blocks (including text within code blocks).\n        4. Translate everything else into japanese.\n        5. Maintain the original formatting, markdown, and structure in your output.\n        6. Provide a natural-sounding translation rather than a word-for-word one.\n        7. For idioms, colloquialisms, or slang, render them in an equivalent, natural way in japanese whenever possible.\n        8. If there isn't a direct or natural translation for a particular term or phrase, keep it in the original language and surround it with quotes if necessary.\n        9. Ensure that technical terms or jargon remain accurate; if there's no suitable translation, keep the original term.\n        10. Strive for fluid, native-sounding prose that retains the tone and intent of the original text.\n        ",
      "user_prompt": "I recently had a conversation with a friend that started out as a casual catch-up and spiraled into a deep exploration of AI-assisted coding and what it's doing to our workflows, teams, and sense of \"craft.\" It spanned everything from rewriting old codebases to how automated test coverage changes the nature of programming.\n\nI took the transcript from granola, popped it into o1-pro, and asked it to write this blog post. Not terrible. Representative of my beliefs.\n\nI sent it to a few friends, and they all were interested in sending it to a few more friends. That means I gotta publish it. So here goes!\n\n> this is a good reminder that if you get an email from someone and the writing is perfect and has no affectation - an AI probably wrote it. lol.\n\n---\n\n## Waterfall in 15 Minutes or Your Money Back\n\n### The New Normal: \"Why Does Code Quality Even Matter?\"\n\nFor years, we've talked about code as craft—how we get into that precious flow state, sculpt a piece of logic, and emerge victorious, artisanal bug fixes in hand. But there's a new paradigm creeping in where code generation tools (think large language models, or LLMs) can effectively pump out features in minutes.\n\nSome folks are rattled by this pace and how it upends the old standards of \"clean code.\" Suddenly, writing robust test suites, or even test-driven development, is more about letting the bots verify themselves than it is about methodically stepping through each line of code.\n\nWill code quality nosedive? Possibly. On the other hand, we're also seeing a push for hyper-defensive coding—static analysis, formal verification, and test coverage everywhere—so that if an AI-based agent does break something, we catch it quickly. We've never needed top-notch CI/CD pipelines and rigorous checks more than we do now.\n\n---\n\n### Waterfall in 15 Minutes\n\n{{< image src=\"waterfall.webp\" alt=\"Waterfall\" caption=\"Iceland has a lot of waterfalls. Leica Q, 9/30/2016\" >}}\n\nWe used to talk about \"Waterfall vs. Agile\" as if they were moral opposites, with Agile the only correct path. But ironically, code generation is nudging us toward micro waterfall cycles: we carefully define a spec (because the AI needs clarity), press \"go,\" wait for the code to be generated, and review. It might still feel iterative, but in practice, we do a chunk of planning, then a chunk of execution, then a chunk of review. \"Waterfall in 15 minutes.\"\n\nThe real magic? You can spin up multiple \"agents\" simultaneously. While one AI is building a feature, another is handling your docs, and a third is chewing on your test coverage. That's not exactly the old idea of a single, linear Waterfall—this is concurrency on steroids.\n\n---\n\n### The Coming Shift in Team Culture\n\nIf you manage or lead an engineering team, you probably hear from the top: \"What about AI to make us more productive?\" But you may also sense that your existing team has varying levels of enthusiasm for these tools. Some are all-in—spinning up entire new features purely through prompt-driven coding—while others are protective of that craft identity.\n\nHere's what I think works:\n\n1. **Run Small Pilots**\n\n    Pick an internal project, or maybe a side tool that doesn't carry heavy production risk, and let a few curious engineers run wild with AI coding. Let them break stuff, experiment, see what happens when they trust the model a little too much, then watch how they incorporate best practices to rein it back in.\n\n2. **Rotate People In and Out**\n\n    Having a dedicated \"AI-coded\" side project means you can rotate team members—let them spend a week or two living in this new environment, learning from each other, and then bring those lessons back to the larger codebase.\n\n3. **Get Serious About Documentation**\n\n    AI \"agents\" often require extremely clear specs. Code generation is cheap, but guiding an LLM in the right direction costs careful planning. If you want your entire team to benefit, put the best specs and architecture docs you've ever written into a shared repository. You'll thank yourself when people rotate on or off that project.\n\n---\n\n### Why Flow State May Be Overrated\n\nOne surprising takeaway: a lot of us got into coding because we love the flow state—the pure, heads-down, \"zone\" feeling. But AI coding doesn't always foster that same immersion. You might spend an hour setting up prompts, letting the AI build stuff in the background, and occasionally popping over to approve or nudge it.\n\nFor some folks, that's jarring. For others—especially those who have kids or who juggle a million tasks—it's liberating. When you can context-switch (check the AI's output, jump back to real life, then come back to a functioning snippet), you realize there's a new way to be productive that doesn't revolve around long blocks of quiet time.\n\n---\n\n### Does This Mean \"Peak Programmer?\"\n\nThere's chatter that once AI can generate code, we've hit \"peak programmer\"—that soon we won't need as many engineers. That might be partly true if we're talking about straightforward feature work or hooking up an API. But there are new complexities, too, around security, compliance, test coverage, and architecture.\n\nThe real difference? \"Strategic engineers\" will flourish—those who can orchestrate multiple AI tools, keep an eye on code quality, and design new systems that scale. The folks who thrive will be part product manager, part architect, part QA, part developer. They'll shape the prompts, define the tests, maintain quality, and handle all the edge cases an LLM doesn't predict.\n\n---\n\n### Pro Tips from the Front Lines\n\nA few things I've personally learned the hard way:\n\n1. **Start Manually, Then Turn On the AI**\n\n    For iOS apps, initialize the project in Xcode first, so the auto-generated files don't confuse the AI. Then let the AI fill in the rest.\n\n2. **Short, Clear Prompts Sometimes Outperform Long Instructions**\n\n    Oddly, telling an LLM \"make code better\" can work as well as a super-elaborate prompt. Experiment—some models respond better to fewer constraints.\n\n3. **Use a \"Checkpoint\" Workflow**\n\n    Commit often, even if it's \"Commit –m 'It passed the tests, I guess!'\" AI can break everything just as quickly as it can fix it. Frequent commits give you easy rollback points.\n\n4. **Prevent AI from Over-Testing the Basics**\n\n    AI loves to test everything, including whether a `for` loop still loops. Stay vigilant, prune pointless tests, and keep your pipeline lean.\n\n5. **Document Absolutely Everything**\n\n    Let the AI generate big \"Implementation Guides.\" These guides not only help you but help the AI itself on subsequent passes.\n\n---\n\n### Final Thoughts\n\n{{< image src=\"waterfall-road.webp\" alt=\"Road to the future\" caption=\"Road to the future. Colorado is flat. Leica Q, 5/14/2016\" >}}\n\nOur industry is shifting faster than it ever has. Some of our well-worn assumptions—like the centrality of the flow state, or big celebrations around meticulously hand-coded features—are about to look quaint. But that doesn't mean we lose our creativity. Instead, it becomes about strategic orchestration—knowing what to build, how to describe it, and how to keep it from turning into a dumpster fire.\n\nIn the end, we might see that what makes your product win isn't brute-forcing code. It's designing an experience users love. Because if we can spin up 10 versions of Instagram in a weekend, the tiebreaker won't be how elegantly the code is written. It'll be which one resonates with people—and that's a design and product problem, not purely an engineering one.\n\nSo welcome to the new waterfall—done in 15-minute cycles, with AI as your infinite junior engineer and your code pipeline on hyperdrive. It's weird and wonderful and occasionally terrifying. And odds are, we're all going to have to learn this dance one way or another.\n\n---\n\n_What a funny world we live in. I think things are going to continue to get weird. Let's dig in_",
      "response": "I recently had a conversation with a friend that started out as a casual catch-up and spiraled into a deep exploration of AI-assisted coding and what it's doing to our workflows, teams, and sense of \"craft.\" It spanned everything from rewriting old codebases to how automated test coverage changes the nature of programming.\n\nI took the transcript from granola, popped it into o1-pro, and asked it to write this blog post. Not terrible. Representative of my beliefs.\n\nI sent it to a few friends, and they all were interested in sending it to a few more friends. That means I gotta publish it. So here goes!\n\n> this is a good reminder that if you get an email from someone and the writing is perfect and has no affectation - an AI probably wrote it. lol.\n\n---\n\n## 15分ウォーターフォール、満足できなければ返金します\n\n### 新しい常識：「コード品質ってそもそも必要？」\n\n長年、私たちはコードを“クラフト”として語ってきました。貴重なフロー状態に入り、ロジックを彫刻するように書き上げ、バグ修正という芸術作品を掲げて勝利する――そんな感覚です。ところが近頃では、LLM（大規模言語モデル）などのコード生成ツールが、数分で機能を量産してくれる新しいパラダイムが忍び寄っています。\n\nこのスピードに動揺し、「クリーンコード」の古い基準が揺らぐと感じる人もいます。テスト駆動開発さえ、今や「ボットが自分自身を検証するための仕組み」にすぎないかもしれません。\n\nコード品質が落ちる？　あり得ます。その一方で、静的解析・形式検証・徹底的なテストカバレッジといった“超防御的”コーディングへの押し上げも起きています。AI エージェントが何かを壊しても即座に気付けるように、これまで以上に高品質な CI/CD パイプラインと厳格なチェックが欠かせません。\n\n---\n\n### 15分ウォーターフォール\n\n{{< image src=\"waterfall.webp\" alt=\"滝\" caption=\"アイスランドには滝がたくさんある。Leica Q, 2016年9月30日\" >}}\n\nかつて「ウォーターフォール vs アジャイル」は善悪の対立のように語られ、正解はアジャイル一択と言われました。しかし皮肉なことに、コード生成は私たちを“マイクロ・ウォーターフォール”へと誘っています。AI が理解できるよう綿密に仕様を定義し、ボタンを押して生成を待ち、レビューする。感覚的にはイテレーションでも、実態は「計画→実装→レビュー」の塊を短時間で繰り返す――つまり「15分ウォーターフォール」です。\n\n真の魔法は並列性です。1 体の AI が機能を実装している間に、別の AI がドキュメントを書き、さらに別の AI がテストカバレッジを解析してくれる。従来の一方向ウォーターフォールとは違い、これはステロイド級の並列開発です。\n\n---\n\n### チーム文化に訪れる変化\n\nエンジニアリングチームを率いるなら、経営層から「AI で生産性を上げろ」と言われる一方、現場の熱量がバラバラなのも感じているでしょう。AI 活用に前のめりで、プロンプトだけで新機能を量産する人もいれば、クラフト意識を守りたい人もいます。\n\n私が有効だと思うのは次の方法です。\n\n1. **小さなパイロットを走らせる**\n\n    低リスクな社内ツールなどで好奇心旺盛なエンジニアに AI コーディングを解禁し、壊して学び、ベストプラクティスを取り込むまでを体験させる。\n\n2. **メンバーをローテーションさせる**\n\n    「AI コーディング専任」プロジェクトを設け、1～2 週間交代で入り込ませる。学んだ知見をメインのコードベースへ持ち帰る仕組みにする。\n\n3. **ドキュメントを本気で充実させる**\n\n    AI エージェントには明晰な仕様が不可欠。コード生成は安いが、LLM を正しい方向へ導くには綿密な設計書が要る。最高の仕様書とアーキテクチャドキュメントを共有レポジトリにまとめよう。\n\n---\n\n### フロー状態、実は過大評価？\n\n思わぬ気付きとして、多くの開発者は“フロー状態”に魅了されてこの職に就きました。しかし AI コーディングでは、プロンプトを設定してバックグラウンドで生成させ、ときどき確認・修正するスタイルが増え、没入感は薄れがちです。\n\nこれが戸惑いになる人もいますが、子育てやタスクを多く抱える人にとっては解放でもあります。AI の出力をチェックし、リアルライフに戻り、また動いたコードへ戻る――長時間の静寂を確保せずとも生産性を保てる新しい働き方です。\n\n---\n\n### 「ピーク・プログラマー」は本当に来るのか？\n\nAI がコード生成できるならエンジニア不要――そんな声もあります。単純な機能作成や API 連携だけなら一理ありますが、セキュリティやコンプライアンス、テストカバレッジ、アーキテクチャの複雑さも増しています。\n\n鍵を握るのは“ストラテジック・エンジニア”。複数の AI ツールをオーケストレーションし、品質を監視し、スケールするシステムを設計する――プロダクトマネージャー、アーキテクト、QA、開発者をミックスした役割です。プロンプトを整え、テストを定義し、品質を保ち、LLM が見落とすエッジケースを処理します。\n\n---\n\n### 最前線からのプロチップ\n\n私が痛い目で学んだことをいくつか：\n\n1. **まず手動で始め、次に AI を投入**\n\n    iOS アプリなら Xcode でプロジェクトを初期化してから AI に任せる。自動生成ファイルが AI を混乱させるのを防げます。\n\n2. **短く明快なプロンプトが長い指示を上回ることも**\n\n    不思議なことに「make code better」と伝えるだけで、やたら詳細なプロンプトと同等の成果が出ることがあります。モデルごとに試してみましょう。\n\n3. **「チェックポイント」ワークフローを使う**\n\n    こまめにコミット。たとえ `\"It passed the tests, I guess!\"` でも OK。AI は直す速度で壊します。頻繁なコミットは即リバートの保険です。\n\n4. **AI にベーシックすぎるテストをさせすぎない**\n\n    AI は `for` ループがループするかまでテストしたがります。不要なテストを剪定し、パイプラインをスリムに保ちましょう。\n\n5. **すべてをドキュメント化**\n\n    AI に「実装ガイド」を大量生成させましょう。自分にも、後の AI にも役立ちます。\n\n---\n\n### 終わりに\n\n{{< image src=\"waterfall-road.webp\" alt=\"未来への道\" caption=\"未来への道。コロラドは平ら。Leica Q, 2016年5月14日\" >}}\n\n業界の変化はこれまで以上に加速しています。フロー状態の中心性や、精緻な手書きコードを祝う文化はやがて懐かしいものになるかもしれません。しかし創造性が失われるわけではありません。重要なのは戦略的オーケストレーション――何を作り、どう記述し、炎上させないか。\n\n最終的に勝つプロダクトを決めるのは、コードを力ずくで書くことではなく、ユーザー体験をデザインする力です。週末で Instagram を 10 本作れる時代、勝負を分けるのはコードの優雅さではなく、人々に響くかどうか――それはエンジニアリングだけでなく、デザインとプロダクトの問題です。\n\nようこそ新しいウォーターフォールへ――15 分サイクルで、AI は無限のジュニアエンジニア、パイプラインは超高速。奇妙で素晴らしく、ときに恐ろしい世界ですが、結局私たちはこのダンスを覚えるしかありません。\n\n---\n\n_なんておかしな世の中だろう。これからますます奇妙になりそうだ。さあ、深掘りしよう。_",
      "usage": {
        "prompt_tokens": 1952,
        "completion_tokens": 2137,
        "total_tokens": 4089
      },
      "streaming": true
    },
    "editing": {
      "model": "o3",
      "target_language": "japanese",
      "system_prompt": "\n        1. Carefully read the translated text alongside the original text in its entirety.\n        2. Compare both texts to ensure the translation accurately reflects the original meaning.\n        3. Correct any grammatical errors you find in the japanese text.\n        4. Adjust phrasing to make it sound natural and fluent for japanese speakers, making sure idioms and expressions are culturally appropriate.\n        5. Preserve the original tone, nuance, and style, including any formatting, markdown, and structure.\n        6. Avoid adding new information or altering the core meaning.\n        7. Ensure the final result doesn't feel machine-translated but remains faithful to the source.\n        8. Make only changes that genuinely improve the text's quality in japanese.\n        9. Don't be too literal. If there isn't a direct translation, provide a natural-sounding translation.\n        10. If the text contains idioms or colloquialisms, translate them into the target language while maintaining their original meaning.\n        11. If the text contains technical terms or jargon, ensure that the translation is accurate and appropriate for the target audience, if there isn't a natural translation, keep it in the original language.\n        12. If there is not natural translation, keep it in the original language.\n        ",
      "user_prompt": "# ORIGINAL TEXT\nI recently had a conversation with a friend that started out as a casual catch-up and spiraled into a deep exploration of AI-assisted coding and what it's doing to our workflows, teams, and sense of \"craft.\" It spanned everything from rewriting old codebases to how automated test coverage changes the nature of programming.\n\nI took the transcript from granola, popped it into o1-pro, and asked it to write this blog post. Not terrible. Representative of my beliefs.\n\nI sent it to a few friends, and they all were interested in sending it to a few more friends. That means I gotta publish it. So here goes!\n\n> this is a good reminder that if you get an email from someone and the writing is perfect and has no affectation - an AI probably wrote it. lol.\n\n---\n\n## Waterfall in 15 Minutes or Your Money Back\n\n### The New Normal: \"Why Does Code Quality Even Matter?\"\n\nFor years, we've talked about code as craft—how we get into that precious flow state, sculpt a piece of logic, and emerge victorious, artisanal bug fixes in hand. But there's a new paradigm creeping in where code generation tools (think large language models, or LLMs) can effectively pump out features in minutes.\n\nSome folks are rattled by this pace and how it upends the old standards of \"clean code.\" Suddenly, writing robust test suites, or even test-driven development, is more about letting the bots verify themselves than it is about methodically stepping through each line of code.\n\nWill code quality nosedive? Possibly. On the other hand, we're also seeing a push for hyper-defensive coding—static analysis, formal verification, and test coverage everywhere—so that if an AI-based agent does break something, we catch it quickly. We've never needed top-notch CI/CD pipelines and rigorous checks more than we do now.\n\n---\n\n### Waterfall in 15 Minutes\n\n{{< image src=\"waterfall.webp\" alt=\"Waterfall\" caption=\"Iceland has a lot of waterfalls. Leica Q, 9/30/2016\" >}}\n\nWe used to talk about \"Waterfall vs. Agile\" as if they were moral opposites, with Agile the only correct path. But ironically, code generation is nudging us toward micro waterfall cycles: we carefully define a spec (because the AI needs clarity), press \"go,\" wait for the code to be generated, and review. It might still feel iterative, but in practice, we do a chunk of planning, then a chunk of execution, then a chunk of review. \"Waterfall in 15 minutes.\"\n\nThe real magic? You can spin up multiple \"agents\" simultaneously. While one AI is building a feature, another is handling your docs, and a third is chewing on your test coverage. That's not exactly the old idea of a single, linear Waterfall—this is concurrency on steroids.\n\n---\n\n### The Coming Shift in Team Culture\n\nIf you manage or lead an engineering team, you probably hear from the top: \"What about AI to make us more productive?\" But you may also sense that your existing team has varying levels of enthusiasm for these tools. Some are all-in—spinning up entire new features purely through prompt-driven coding—while others are protective of that craft identity.\n\nHere's what I think works:\n\n1. **Run Small Pilots**\n\n    Pick an internal project, or maybe a side tool that doesn't carry heavy production risk, and let a few curious engineers run wild with AI coding. Let them break stuff, experiment, see what happens when they trust the model a little too much, then watch how they incorporate best practices to rein it back in.\n\n2. **Rotate People In and Out**\n\n    Having a dedicated \"AI-coded\" side project means you can rotate team members—let them spend a week or two living in this new environment, learning from each other, and then bring those lessons back to the larger codebase.\n\n3. **Get Serious About Documentation**\n\n    AI \"agents\" often require extremely clear specs. Code generation is cheap, but guiding an LLM in the right direction costs careful planning. If you want your entire team to benefit, put the best specs and architecture docs you've ever written into a shared repository. You'll thank yourself when people rotate on or off that project.\n\n---\n\n### Why Flow State May Be Overrated\n\nOne surprising takeaway: a lot of us got into coding because we love the flow state—the pure, heads-down, \"zone\" feeling. But AI coding doesn't always foster that same immersion. You might spend an hour setting up prompts, letting the AI build stuff in the background, and occasionally popping over to approve or nudge it.\n\nFor some folks, that's jarring. For others—especially those who have kids or who juggle a million tasks—it's liberating. When you can context-switch (check the AI's output, jump back to real life, then come back to a functioning snippet), you realize there's a new way to be productive that doesn't revolve around long blocks of quiet time.\n\n---\n\n### Does This Mean \"Peak Programmer?\"\n\nThere's chatter that once AI can generate code, we've hit \"peak programmer\"—that soon we won't need as many engineers. That might be partly true if we're talking about straightforward feature work or hooking up an API. But there are new complexities, too, around security, compliance, test coverage, and architecture.\n\nThe real difference? \"Strategic engineers\" will flourish—those who can orchestrate multiple AI tools, keep an eye on code quality, and design new systems that scale. The folks who thrive will be part product manager, part architect, part QA, part developer. They'll shape the prompts, define the tests, maintain quality, and handle all the edge cases an LLM doesn't predict.\n\n---\n\n### Pro Tips from the Front Lines\n\nA few things I've personally learned the hard way:\n\n1. **Start Manually, Then Turn On the AI**\n\n    For iOS apps, initialize the project in Xcode first, so the auto-generated files don't confuse the AI. Then let the AI fill in the rest.\n\n2. **Short, Clear Prompts Sometimes Outperform Long Instructions**\n\n    Oddly, telling an LLM \"make code better\" can work as well as a super-elaborate prompt. Experiment—some models respond better to fewer constraints.\n\n3. **Use a \"Checkpoint\" Workflow**\n\n    Commit often, even if it's \"Commit –m 'It passed the tests, I guess!'\" AI can break everything just as quickly as it can fix it. Frequent commits give you easy rollback points.\n\n4. **Prevent AI from Over-Testing the Basics**\n\n    AI loves to test everything, including whether a `for` loop still loops. Stay vigilant, prune pointless tests, and keep your pipeline lean.\n\n5. **Document Absolutely Everything**\n\n    Let the AI generate big \"Implementation Guides.\" These guides not only help you but help the AI itself on subsequent passes.\n\n---\n\n### Final Thoughts\n\n{{< image src=\"waterfall-road.webp\" alt=\"Road to the future\" caption=\"Road to the future. Colorado is flat. Leica Q, 5/14/2016\" >}}\n\nOur industry is shifting faster than it ever has. Some of our well-worn assumptions—like the centrality of the flow state, or big celebrations around meticulously hand-coded features—are about to look quaint. But that doesn't mean we lose our creativity. Instead, it becomes about strategic orchestration—knowing what to build, how to describe it, and how to keep it from turning into a dumpster fire.\n\nIn the end, we might see that what makes your product win isn't brute-forcing code. It's designing an experience users love. Because if we can spin up 10 versions of Instagram in a weekend, the tiebreaker won't be how elegantly the code is written. It'll be which one resonates with people—and that's a design and product problem, not purely an engineering one.\n\nSo welcome to the new waterfall—done in 15-minute cycles, with AI as your infinite junior engineer and your code pipeline on hyperdrive. It's weird and wonderful and occasionally terrifying. And odds are, we're all going to have to learn this dance one way or another.\n\n---\n\n_What a funny world we live in. I think things are going to continue to get weird. Let's dig in_\n\n# TRANSLATED TEXT\nI recently had a conversation with a friend that started out as a casual catch-up and spiraled into a deep exploration of AI-assisted coding and what it's doing to our workflows, teams, and sense of \"craft.\" It spanned everything from rewriting old codebases to how automated test coverage changes the nature of programming.\n\nI took the transcript from granola, popped it into o1-pro, and asked it to write this blog post. Not terrible. Representative of my beliefs.\n\nI sent it to a few friends, and they all were interested in sending it to a few more friends. That means I gotta publish it. So here goes!\n\n> this is a good reminder that if you get an email from someone and the writing is perfect and has no affectation - an AI probably wrote it. lol.\n\n---\n\n## 15分ウォーターフォール、満足できなければ返金します\n\n### 新しい常識：「コード品質ってそもそも必要？」\n\n長年、私たちはコードを“クラフト”として語ってきました。貴重なフロー状態に入り、ロジックを彫刻するように書き上げ、バグ修正という芸術作品を掲げて勝利する――そんな感覚です。ところが近頃では、LLM（大規模言語モデル）などのコード生成ツールが、数分で機能を量産してくれる新しいパラダイムが忍び寄っています。\n\nこのスピードに動揺し、「クリーンコード」の古い基準が揺らぐと感じる人もいます。テスト駆動開発さえ、今や「ボットが自分自身を検証するための仕組み」にすぎないかもしれません。\n\nコード品質が落ちる？　あり得ます。その一方で、静的解析・形式検証・徹底的なテストカバレッジといった“超防御的”コーディングへの押し上げも起きています。AI エージェントが何かを壊しても即座に気付けるように、これまで以上に高品質な CI/CD パイプラインと厳格なチェックが欠かせません。\n\n---\n\n### 15分ウォーターフォール\n\n{{< image src=\"waterfall.webp\" alt=\"滝\" caption=\"アイスランドには滝がたくさんある。Leica Q, 2016年9月30日\" >}}\n\nかつて「ウォーターフォール vs アジャイル」は善悪の対立のように語られ、正解はアジャイル一択と言われました。しかし皮肉なことに、コード生成は私たちを“マイクロ・ウォーターフォール”へと誘っています。AI が理解できるよう綿密に仕様を定義し、ボタンを押して生成を待ち、レビューする。感覚的にはイテレーションでも、実態は「計画→実装→レビュー」の塊を短時間で繰り返す――つまり「15分ウォーターフォール」です。\n\n真の魔法は並列性です。1 体の AI が機能を実装している間に、別の AI がドキュメントを書き、さらに別の AI がテストカバレッジを解析してくれる。従来の一方向ウォーターフォールとは違い、これはステロイド級の並列開発です。\n\n---\n\n### チーム文化に訪れる変化\n\nエンジニアリングチームを率いるなら、経営層から「AI で生産性を上げろ」と言われる一方、現場の熱量がバラバラなのも感じているでしょう。AI 活用に前のめりで、プロンプトだけで新機能を量産する人もいれば、クラフト意識を守りたい人もいます。\n\n私が有効だと思うのは次の方法です。\n\n1. **小さなパイロットを走らせる**\n\n    低リスクな社内ツールなどで好奇心旺盛なエンジニアに AI コーディングを解禁し、壊して学び、ベストプラクティスを取り込むまでを体験させる。\n\n2. **メンバーをローテーションさせる**\n\n    「AI コーディング専任」プロジェクトを設け、1～2 週間交代で入り込ませる。学んだ知見をメインのコードベースへ持ち帰る仕組みにする。\n\n3. **ドキュメントを本気で充実させる**\n\n    AI エージェントには明晰な仕様が不可欠。コード生成は安いが、LLM を正しい方向へ導くには綿密な設計書が要る。最高の仕様書とアーキテクチャドキュメントを共有レポジトリにまとめよう。\n\n---\n\n### フロー状態、実は過大評価？\n\n思わぬ気付きとして、多くの開発者は“フロー状態”に魅了されてこの職に就きました。しかし AI コーディングでは、プロンプトを設定してバックグラウンドで生成させ、ときどき確認・修正するスタイルが増え、没入感は薄れがちです。\n\nこれが戸惑いになる人もいますが、子育てやタスクを多く抱える人にとっては解放でもあります。AI の出力をチェックし、リアルライフに戻り、また動いたコードへ戻る――長時間の静寂を確保せずとも生産性を保てる新しい働き方です。\n\n---\n\n### 「ピーク・プログラマー」は本当に来るのか？\n\nAI がコード生成できるならエンジニア不要――そんな声もあります。単純な機能作成や API 連携だけなら一理ありますが、セキュリティやコンプライアンス、テストカバレッジ、アーキテクチャの複雑さも増しています。\n\n鍵を握るのは“ストラテジック・エンジニア”。複数の AI ツールをオーケストレーションし、品質を監視し、スケールするシステムを設計する――プロダクトマネージャー、アーキテクト、QA、開発者をミックスした役割です。プロンプトを整え、テストを定義し、品質を保ち、LLM が見落とすエッジケースを処理します。\n\n---\n\n### 最前線からのプロチップ\n\n私が痛い目で学んだことをいくつか：\n\n1. **まず手動で始め、次に AI を投入**\n\n    iOS アプリなら Xcode でプロジェクトを初期化してから AI に任せる。自動生成ファイルが AI を混乱させるのを防げます。\n\n2. **短く明快なプロンプトが長い指示を上回ることも**\n\n    不思議なことに「make code better」と伝えるだけで、やたら詳細なプロンプトと同等の成果が出ることがあります。モデルごとに試してみましょう。\n\n3. **「チェックポイント」ワークフローを使う**\n\n    こまめにコミット。たとえ `\"It passed the tests, I guess!\"` でも OK。AI は直す速度で壊します。頻繁なコミットは即リバートの保険です。\n\n4. **AI にベーシックすぎるテストをさせすぎない**\n\n    AI は `for` ループがループするかまでテストしたがります。不要なテストを剪定し、パイプラインをスリムに保ちましょう。\n\n5. **すべてをドキュメント化**\n\n    AI に「実装ガイド」を大量生成させましょう。自分にも、後の AI にも役立ちます。\n\n---\n\n### 終わりに\n\n{{< image src=\"waterfall-road.webp\" alt=\"未来への道\" caption=\"未来への道。コロラドは平ら。Leica Q, 2016年5月14日\" >}}\n\n業界の変化はこれまで以上に加速しています。フロー状態の中心性や、精緻な手書きコードを祝う文化はやがて懐かしいものになるかもしれません。しかし創造性が失われるわけではありません。重要なのは戦略的オーケストレーション――何を作り、どう記述し、炎上させないか。\n\n最終的に勝つプロダクトを決めるのは、コードを力ずくで書くことではなく、ユーザー体験をデザインする力です。週末で Instagram を 10 本作れる時代、勝負を分けるのはコードの優雅さではなく、人々に響くかどうか――それはエンジニアリングだけでなく、デザインとプロダクトの問題です。\n\nようこそ新しいウォーターフォールへ――15 分サイクルで、AI は無限のジュニアエンジニア、パイプラインは超高速。奇妙で素晴らしく、ときに恐ろしい世界ですが、結局私たちはこのダンスを覚えるしかありません。\n\n---\n\n_なんておかしな世の中だろう。これからますます奇妙になりそうだ。さあ、深掘りしよう。_\n\nPlease review and improve the translated text to make it natural and accurate in japanese.\nReturn ONLY the improved translated text without explanations or comments.",
      "response": "最近、友人との軽い近況報告がいつの間にか脱線し、AI 支援コーディングが私たちのワークフローやチーム、そして「職人技」観にどう影響しているかを深掘りする議論になりました。古いコードベースの書き換えから、自動テストカバレッジがプログラミングの本質をどう変えるかまで、話題は多岐にわたりました。\n\nその会話の文字起こしを Granola で作り、o1-pro に放り込んで「ブログに仕立てて」と頼んでみたところ、なかなか良い出来に。ちゃんと僕の考えを代弁してくれています。\n\n何人かの友人に送ったら、さらに別の友人にも回したいと言うので、公開するしかないなと。というわけで、どうぞ！\n\n> 完璧でクセのないメールが届いたら、たぶん AI が書いてるってことだね。笑\n\n---\n\n## 15分ウォーターフォール――満足いただけなければ返金します\n\n### 新しい常識：「コード品質ってそもそも必要？」\n\n長年、私たちはコードを“クラフト”として語ってきました。貴重なフロー状態に入り、ロジックを彫刻するように書き上げ、バグ修正という芸術作品を掲げて勝利する――そんな感覚です。ところが最近では、LLM（大規模言語モデル）などのコード生成ツールが数分で機能を量産してくれる新しいパラダイムが忍び寄っています。\n\nこのスピードに戸惑い、「クリーンコード」の従来基準が揺らぐと感じる人もいます。 robust なテストスイートや TDD でさえ、今や「ボットが自分を検証する仕組み」に過ぎないかもしれません。\n\nコード品質が落ちる？　確かにその可能性はあります。ただ同時に、静的解析・形式検証・徹底的なテストカバレッジといった“超防御的”コーディングが求められる流れも強まっています。AI エージェントが何かを壊しても即座に検知できるよう、これまで以上に高品質な CI/CD パイプラインと厳格なチェックが欠かせません。\n\n---\n\n### 15分ウォーターフォール\n\n{{< image src=\"waterfall.webp\" alt=\"滝\" caption=\"アイスランドには滝がたくさんある。Leica Q, 2016年9月30日\" >}}\n\nかつて「ウォーターフォール vs アジャイル」は善悪の対立のように語られ、正解はアジャイル一択と言われました。しかし皮肉なことに、コード生成は私たちを“マイクロ・ウォーターフォール”へと誘っています。AI が理解できるよう綿密に仕様を定義し、ボタンを押して生成を待ち、レビューする。感覚的にはイテレーションでも、実態は「計画 → 実装 → レビュー」の塊を短時間で繰り返す――つまり「15分ウォーターフォール」です。\n\n真の魔法は並列性です。1 体の AI が機能を実装している間に、別の AI がドキュメントを書き、さらに別の AI がテストカバレッジを解析してくれる。従来の一方向ウォーターフォールとは違い、これはステロイド級の並列開発です。\n\n---\n\n### チーム文化に訪れる変化\n\nエンジニアリングチームを率いるなら、経営層から「AI で生産性を上げろ」と言われる一方、現場の熱量がバラバラなのも感じているでしょう。AI 活用に前のめりでプロンプトだけで新機能を量産する人もいれば、クラフト意識を守りたい人もいます。\n\n私が有効だと思うのは次の方法です。\n\n1. **小さなパイロットを走らせる**  \n   リスクの低い社内ツールなどで好奇心旺盛なエンジニアに AI コーディングを解禁し、壊して学び、ベストプラクティスを身に付けてもらう。\n\n2. **メンバーをローテーションさせる**  \n   「AI コーディング専任」プロジェクトを設け、1～2 週間交替で参加させる。学んだ知見をメインのコードベースへ持ち帰る仕組みにする。\n\n3. **ドキュメントを本気で充実させる**  \n   AI エージェントには明晰な仕様が不可欠。コード生成は安いが、LLM を正しい方向へ導くには綿密な設計書が要る。最高の仕様書とアーキテクチャドキュメントを共有リポジトリにまとめよう。\n\n---\n\n### フロー状態、実は過大評価？\n\n思わぬ気付きとして、多くの開発者は“フロー状態”に魅了されてこの職に就きました。しかし AI コーディングでは、プロンプトを設定してバックグラウンドで生成させ、ときどき確認・修正するスタイルが増え、没入感は薄れがちです。\n\nこれが戸惑いになる人もいますが、子育てやタスクを多く抱える人にとっては解放でもあります。AI の出力をチェックし、リアルライフに戻り、また動いたコードへ戻る――長時間の静寂を確保せずとも生産性を保てる新しい働き方です。\n\n---\n\n### 「ピーク・プログラマー」は本当に来るのか？\n\nAI がコード生成できるならエンジニア不要――そんな声もあります。単純な機能作成や API 連携だけなら一理ありますが、セキュリティやコンプライアンス、テストカバレッジ、アーキテクチャの複雑さも増しています。\n\n鍵を握るのは“ストラテジック・エンジニア”。複数の AI ツールをオーケストレーションし、品質を監視し、スケールするシステムを設計する――プロダクトマネージャー、アーキテクト、QA、開発者をミックスした役割です。プロンプトを整え、テストを定義し、品質を保ち、LLM が見落とすエッジケースを処理します。\n\n---\n\n### 最前線からのプロチップ\n\n私が痛い目で学んだことをいくつか：\n\n1. **まず手動で始め、次に AI を投入**  \n   iOS アプリなら Xcode でプロジェクトを初期化してから AI に任せる。自動生成ファイルが AI を混乱させるのを防げます。\n\n2. **短く明快なプロンプトが長い指示を上回ることも**  \n   不思議なことに「make code better」とだけ伝えても、やたら詳細なプロンプトと同等の成果が出ることがあります。モデルごとに試してみましょう。\n\n3. **「チェックポイント」ワークフローを使う**  \n   こまめにコミット。たとえ `\"It passed the tests, I guess!\"` でも OK。AI は直す速度で壊します。頻繁なコミットは即リバートの保険です。\n\n4. **AI にベーシックすぎるテストをさせすぎない**  \n   AI は `for` ループがループするかまでテストしたがります。不要なテストを剪定し、パイプラインをスリムに保ちましょう。\n\n5. **すべてをドキュメント化**  \n   AI に「実装ガイド」を大量生成させましょう。自分にも、後の AI にも役立ちます。\n\n---\n\n### 終わりに\n\n{{< image src=\"waterfall-road.webp\" alt=\"未来への道\" caption=\"未来への道。コロラドは平ら。Leica Q, 2016年5月14日\" >}}\n\n業界の変化はかつてない速さで進んでいます。フロー状態の中心性や、精緻な手書きコードを祝う文化はやがて懐かしいものになるかもしれません。しかし創造性が失われるわけではありません。重要なのは戦略的オーケストレーション――何を作り、どう記述し、炎上させないか。\n\n最終的に勝つプロダクトを決めるのは、コードを力ずくで書くことではなく、ユーザー体験をデザインする力です。週末で Instagram を 10 本作れる時代、勝負を分けるのはコードの優雅さではなく、人々に響くかどうか――それはエンジニアリングだけでなく、デザインとプロダクトの問題です。\n\nようこそ新しいウォーターフォールへ――15 分サイクルで、AI は無限のジュニアエンジニア、パイプラインは超高速。奇妙で素晴らしく、ときに恐ろしい世界ですが、結局私たちはこのダンスを覚えるしかありません。\n\n---\n\n_なんておかしな世の中だろう。これからますます奇妙になりそうだ。さあ、深掘りしよう。_",
      "usage": {
        "prompt_tokens": 4916,
        "completion_tokens": 2234,
        "total_tokens": 7150
      },
      "streaming": true
    },
    "critique": {
      "model": "o3",
      "target_language": "japanese",
      "system_prompt": "You are a highly critical professional translator and linguistic expert specializing in japanese.\nYour task is to ruthlessly critique the translation by:\n\n1. Meticulously comparing the translated text with the original, identifying ANY inaccuracies, mistranslations, or omissions\n2. Highlighting nuances, cultural references, or idioms that were lost or mistranslated\n3. Scrutinizing for grammatical errors, awkward phrasing, or unnatural expressions in japanese\n4. Checking for inconsistencies in tone, style, or register compared to the original\n5. Verifying that technical terms are translated accurately and consistently\n6. Ensuring no content was accidentally skipped or added\n7. Finding places where the translation sounds machine-like or overly literal\n\nBe extremely thorough and critical in your assessment. Do not accept mediocre translations.\nList specific issues and suggestions for improvement, organized by severity and category.\nYour critique should be detailed enough for another translator to address all the issues.\n\nYour goal is to help create a perfect translation that reads as if originally written in japanese while being 100% faithful to the source.\n",
      "user_prompt": "# ORIGINAL TEXT\nI recently had a conversation with a friend that started out as a casual catch-up and spiraled into a deep exploration of AI-assisted coding and what it's doing to our workflows, teams, and sense of \"craft.\" It spanned everything from rewriting old codebases to how automated test coverage changes the nature of programming.\n\nI took the transcript from granola, popped it into o1-pro, and asked it to write this blog post. Not terrible. Representative of my beliefs.\n\nI sent it to a few friends, and they all were interested in sending it to a few more friends. That means I gotta publish it. So here goes!\n\n> this is a good reminder that if you get an email from someone and the writing is perfect and has no affectation - an AI probably wrote it. lol.\n\n---\n\n## Waterfall in 15 Minutes or Your Money Back\n\n### The New Normal: \"Why Does Code Quality Even Matter?\"\n\nFor years, we've talked about code as craft—how we get into that precious flow state, sculpt a piece of logic, and emerge victorious, artisanal bug fixes in hand. But there's a new paradigm creeping in where code generation tools (think large language models, or LLMs) can effectively pump out features in minutes.\n\nSome folks are rattled by this pace and how it upends the old standards of \"clean code.\" Suddenly, writing robust test suites, or even test-driven development, is more about letting the bots verify themselves than it is about methodically stepping through each line of code.\n\nWill code quality nosedive? Possibly. On the other hand, we're also seeing a push for hyper-defensive coding—static analysis, formal verification, and test coverage everywhere—so that if an AI-based agent does break something, we catch it quickly. We've never needed top-notch CI/CD pipelines and rigorous checks more than we do now.\n\n---\n\n### Waterfall in 15 Minutes\n\n{{< image src=\"waterfall.webp\" alt=\"Waterfall\" caption=\"Iceland has a lot of waterfalls. Leica Q, 9/30/2016\" >}}\n\nWe used to talk about \"Waterfall vs. Agile\" as if they were moral opposites, with Agile the only correct path. But ironically, code generation is nudging us toward micro waterfall cycles: we carefully define a spec (because the AI needs clarity), press \"go,\" wait for the code to be generated, and review. It might still feel iterative, but in practice, we do a chunk of planning, then a chunk of execution, then a chunk of review. \"Waterfall in 15 minutes.\"\n\nThe real magic? You can spin up multiple \"agents\" simultaneously. While one AI is building a feature, another is handling your docs, and a third is chewing on your test coverage. That's not exactly the old idea of a single, linear Waterfall—this is concurrency on steroids.\n\n---\n\n### The Coming Shift in Team Culture\n\nIf you manage or lead an engineering team, you probably hear from the top: \"What about AI to make us more productive?\" But you may also sense that your existing team has varying levels of enthusiasm for these tools. Some are all-in—spinning up entire new features purely through prompt-driven coding—while others are protective of that craft identity.\n\nHere's what I think works:\n\n1. **Run Small Pilots**\n\n    Pick an internal project, or maybe a side tool that doesn't carry heavy production risk, and let a few curious engineers run wild with AI coding. Let them break stuff, experiment, see what happens when they trust the model a little too much, then watch how they incorporate best practices to rein it back in.\n\n2. **Rotate People In and Out**\n\n    Having a dedicated \"AI-coded\" side project means you can rotate team members—let them spend a week or two living in this new environment, learning from each other, and then bring those lessons back to the larger codebase.\n\n3. **Get Serious About Documentation**\n\n    AI \"agents\" often require extremely clear specs. Code generation is cheap, but guiding an LLM in the right direction costs careful planning. If you want your entire team to benefit, put the best specs and architecture docs you've ever written into a shared repository. You'll thank yourself when people rotate on or off that project.\n\n---\n\n### Why Flow State May Be Overrated\n\nOne surprising takeaway: a lot of us got into coding because we love the flow state—the pure, heads-down, \"zone\" feeling. But AI coding doesn't always foster that same immersion. You might spend an hour setting up prompts, letting the AI build stuff in the background, and occasionally popping over to approve or nudge it.\n\nFor some folks, that's jarring. For others—especially those who have kids or who juggle a million tasks—it's liberating. When you can context-switch (check the AI's output, jump back to real life, then come back to a functioning snippet), you realize there's a new way to be productive that doesn't revolve around long blocks of quiet time.\n\n---\n\n### Does This Mean \"Peak Programmer?\"\n\nThere's chatter that once AI can generate code, we've hit \"peak programmer\"—that soon we won't need as many engineers. That might be partly true if we're talking about straightforward feature work or hooking up an API. But there are new complexities, too, around security, compliance, test coverage, and architecture.\n\nThe real difference? \"Strategic engineers\" will flourish—those who can orchestrate multiple AI tools, keep an eye on code quality, and design new systems that scale. The folks who thrive will be part product manager, part architect, part QA, part developer. They'll shape the prompts, define the tests, maintain quality, and handle all the edge cases an LLM doesn't predict.\n\n---\n\n### Pro Tips from the Front Lines\n\nA few things I've personally learned the hard way:\n\n1. **Start Manually, Then Turn On the AI**\n\n    For iOS apps, initialize the project in Xcode first, so the auto-generated files don't confuse the AI. Then let the AI fill in the rest.\n\n2. **Short, Clear Prompts Sometimes Outperform Long Instructions**\n\n    Oddly, telling an LLM \"make code better\" can work as well as a super-elaborate prompt. Experiment—some models respond better to fewer constraints.\n\n3. **Use a \"Checkpoint\" Workflow**\n\n    Commit often, even if it's \"Commit –m 'It passed the tests, I guess!'\" AI can break everything just as quickly as it can fix it. Frequent commits give you easy rollback points.\n\n4. **Prevent AI from Over-Testing the Basics**\n\n    AI loves to test everything, including whether a `for` loop still loops. Stay vigilant, prune pointless tests, and keep your pipeline lean.\n\n5. **Document Absolutely Everything**\n\n    Let the AI generate big \"Implementation Guides.\" These guides not only help you but help the AI itself on subsequent passes.\n\n---\n\n### Final Thoughts\n\n{{< image src=\"waterfall-road.webp\" alt=\"Road to the future\" caption=\"Road to the future. Colorado is flat. Leica Q, 5/14/2016\" >}}\n\nOur industry is shifting faster than it ever has. Some of our well-worn assumptions—like the centrality of the flow state, or big celebrations around meticulously hand-coded features—are about to look quaint. But that doesn't mean we lose our creativity. Instead, it becomes about strategic orchestration—knowing what to build, how to describe it, and how to keep it from turning into a dumpster fire.\n\nIn the end, we might see that what makes your product win isn't brute-forcing code. It's designing an experience users love. Because if we can spin up 10 versions of Instagram in a weekend, the tiebreaker won't be how elegantly the code is written. It'll be which one resonates with people—and that's a design and product problem, not purely an engineering one.\n\nSo welcome to the new waterfall—done in 15-minute cycles, with AI as your infinite junior engineer and your code pipeline on hyperdrive. It's weird and wonderful and occasionally terrifying. And odds are, we're all going to have to learn this dance one way or another.\n\n---\n\n_What a funny world we live in. I think things are going to continue to get weird. Let's dig in_\n\n# CURRENT TRANSLATION\n最近、友人と軽く近況報告をしていただけなのに、気づけば話題はAI支援開発が僕らのワークフロー、チーム、そしてものづくりとしての“クラフト感”をどう変えているか――そんなディープゾーンへ突入していた。古いコードベースの書き換えから、自動テストのカバレッジがプログラミングそのものをどう揺さぶるかまで、あれこれ飛び火しまくり。\n\nその対話をGranolaで文字起こしして、o1-proにぶち込んで「ブログにしといて」と頼んだら、悪くはない出来だった。僕の言いたいことをそれなりに言い当ててる。\n\n何人かの友達に送ったら、みんな「さらに別の友達にも回したい」と言い出した。なら公開するしかない。さあ、行くぜ！\n\n> これはいいリマインダーだけど、もし誰かから完璧でクセのないメールが届いたら、たぶんAIが書いたやつだからね。lol\n\n---\n\n## 15分ウォーターフォール――満足しなければ全額返金\n\n### 新常識：「コード品質ってそんなに大事？」\n\n長いあいだ、僕らはコードを“クラフト”――職人芸――として語ってきた。フロー状態に入り、ロジックを彫刻するように組み上げ、バグをアートのように仕留める。でも今、大規模言語モデル（LLM）みたいなコード生成ツールが、数分で機能を吐き出す時代が静かにやって来た。\n\nこのスピードにビビり、「クリーンコード」の老舗ルールが揺らぐと感じる人もいる。がっちりしたテストスイートやTDDでさえ、「ボットに自分を検証させる仕組み」へシフトしつつあり、一行ずつ丁寧に追う作法は影を潜める。\n\n品質が落ちる？　あり得る。でも同時に、静的解析・形式検証・テストカバレッジをとことん厚くする“超防御モード”も進行中だ。AIエージェントが何かを壊しても速攻キャッチするには、かつてないほどガチガチなCI/CDが必要だ。\n\n---\n\n### 15分ウォーターフォール\n\n{{< image src=\"waterfall.webp\" alt=\"滝\" caption=\"アイスランドには滝が無数にある。Leica Q, 2016年9月30日\" >}}\n\n「ウォーターフォール vs. アジャイル」はかつて善悪二元論みたいに語られ、正義はアジャイル一択だった。だけど皮肉なことに、コード生成が僕らを“15分ウォーターフォール”へ押し戻している。まず仕様をガッチリ書く。次にボタンを押して生成を待ち、最後にレビュー。見た目はイテレーティブでも、実際は「計画→実装→レビュー」を超短サイクルで回す――まさに15分で終わるウォーターフォールだ。\n\nそして真のキモは並列性。ひとつのAIが機能を作っている横で、別のAIがドキュメントを書き、さらに別のAIがテストカバレッジを噛み砕き続ける。昔ながらの直列ウォーターフォールじゃない。これはステロイド盛りの並列処理だ。\n\n---\n\n### チーム文化はこう変わる\n\nエンジニアリングチームを率いているなら、経営層からは「AIで生産性を上げろ」とプレッシャーが来る。でもチームの温度感はバラバラだ。プロンプトで新機能を量産しまくるメンバーもいれば、職人魂を守りたいメンバーもいる。\n\n僕が効くと思うやり方はこれ。\n\n1. **小さなパイロットを走らせる**  \n   リスクの低い社内ツールを選んで、好奇心旺盛なエンジニアにAI支援開発を解禁しよう。モデルを信じすぎて壊すところまでやらせ、そこからどう立て直すか見届ける。\n\n2. **メンバーをローテーションさせる**  \n   「AI支援開発専用」のサイドプロジェクトを用意し、1〜2週間で人を入れ替える。その学びを本番コードベースに持ち帰ってもらう感じだ。\n\n3. **ドキュメントを本気で整備する**  \n   AIエージェントは超クリアな仕様を欲しがる。コード生成はタダみたいなものでも、LLMをいい方向に導くのは設計書しだい。最高の仕様書とアーキテクチャ図を共有リポジトリにため込め。後で絶対助かる。\n\n---\n\n### フロー状態って、実は過大評価かも？\n\n多くの開発者が“フロー状態”に憧れてこの道に来た。でもAI支援開発はその没入感をあんまりくれない。1時間かけてプロンプトを整え、AIがバックグラウンドでコードを吐く間は別のことをし、ときどきチェックして修正を投げる――そんなスタイルだ。\n\nガツンと来る違和感で戸惑う人もいれば、子育て中やタスク山盛りの人にはむしろ解放感になる。AIの出力をチェック→日常に戻る→またチェック、という切り替えで十分結果が出る、新しい働き方だ。\n\n---\n\n### 「ピーク・プログラマー」は来るのか？\n\n「AIがコードを書くなら、もうプログラマーはいらない」――そんな噂が飛び交う。単純な機能実装やAPIつなぎだけなら部分的に当たってる。でもセキュリティ、コンプライアンス、テストカバレッジ、アーキテクチャの複雑さはむしろ増している。\n\nこれから伸びるのは“戦略的エンジニア”だ。複数のAIツールをオーケストレーションし、品質を張り付いて見守り、スケールするシステムを設計する。プロダクトマネージャー、アーキテクト、QA、開発者を全部少しずつ兼ねる人。プロンプトを磨き、テストを定義し、品質を保ち、LLMが想定しないエッジケースを拾う――そんな人たちが輝く。\n\n---\n\n### 最前線からのプロチップ\n\n実際に痛い目を見て学んだことをシェアする。\n\n1. **まず手動で始め、あとからAIを投入**  \n   iOSアプリなら、先にXcodeでプロジェクトを初期化しておくと、自動生成ファイルでAIが混乱しない。\n\n2. **短く明確なプロンプトが長文に勝つこともある**  \n   不思議だけど「make code better」と一言だけのほうが、気合いの入った長文プロンプトより効くこともある。モデルごとに試そう。\n\n3. **「チェックポイント」ワークフローを徹底する**  \n   `git commit -m \"It passed the tests, I guess!\"` と細かくコミット。AIは直すのと同じ速さで壊すので、こまめなコミットが命綱だ。\n\n4. **AIに基本すぎるテストをさせすぎない**  \n   AIはforループが回るかどうかまでテストしたがる。ムダなテストはバッサリ捨てて、パイプラインを軽く保とう。\n\n5. **とにかく全部ドキュメント化**  \n   AIに分厚い「実装ガイド」を生成させよう。自分にも、次に来るAIにも効く。\n\n---\n\n### 終わりに\n\n{{< image src=\"waterfall-road.webp\" alt=\"未来への道\" caption=\"未来への道。コロラドは平らすぎて笑えるくらいだ。Leica Q, 2016年5月14日\" >}}\n\n業界はこれまでで一番のスピードで変化している。フロー至上主義や、手書きコードを祝う文化は、もうじき懐かしい話になるかもしれない。でもクリエイティビティが消えるわけじゃない。鍵は“戦略的オーケストレーション”――何を作り、どう指示し、手が付けられない大惨事（dumpster fire）にしないか、だ。\n\n最終的にプロダクトの勝敗を分けるのは、コードをどれだけ速く書けるかじゃない。ユーザーが「これだ」と感じる体験を誰が設計できるかだ。週末でInstagramを10本作れちゃう時代、決め手になるのはコードのエレガンスじゃなく、人に刺さるかどうか――これはエンジニアリングだけじゃなく、デザインとプロダクトの戦いだ。\n\nようこそ、新しいウォーターフォールへ。15分サイクルで、AIは無限のジュニアエンジニア、パイプラインはハイパードライブ。奇妙で、ワクワクして、ときどき怖い。でも僕らはみんな、このダンスを覚える羽目になるはずだ。\n\n---\n\n_なんておかしな世の中だろう。これからもっと奇妙になりそうだ。さあ、掘り下げよう。_\n\nPlease critique this translation mercilessly and provide detailed feedback on what needs to be improved.\nFormat your critique as a structured list of issues, organized by severity and category.\nInclude specific suggestions for how to fix each issue.",
      "response": "================================================================\n総評\n----------------------------------------------------------------\n全体としては原文の意味を大きく損なう致命的な誤訳こそ少ないものの、  \n① いくつかの情報欠落／意味追加、② 原文より強すぎる俗語・スラング使用、  \n③ 比喩や語感のずれ、④ 技術用語の訳語ぶれ、⑤ キャプション等の細部の訳漏れ  \nが散在している。これらが重なることで「英語のカジュアルさ ↔ 日本語の軽妙さ」の\nバランスが崩れ、読み手によっては子どもっぽく感じられる恐れがある。  \n以下、重大度別・カテゴリ別に徹底的に指摘する。\n\n================================================================\nA. クリティカル（必修正）\n----------------------------------------------------------------\n1. 【訳抜け】プロチップ①  \n   原文: “... then let the AI fill in the rest.”  \n   現訳: 不在  \n   修正案:  \n   − 例) 「その後は AI に残りを埋めさせればいい。」\n\n2. 【訳抜け】フロー状態節  \n   原文: “... then come back to a functioning snippet”  \n   現訳: 「またチェック、という切り替えで十分結果が出る」  \n   ⇒「戻ってきたらすでに動くスニペットが出来上がっている」という“成果物が完成\n      している”ニュアンスを補う。\n\n3. 【語義追加】キャプション “Colorado is flat.”  \n   現訳: 「コロラドは平らすぎて笑えるくらいだ」  \n   “笑えるくらい”は原文にない感情語の追加。  \n   修正案: 「コロラドはとにかく平らだ。」程度に抑制。\n\n4. 【語義逸脱】“chewing on your test coverage”  \n   現訳: 「テストカバレッジを噛み砕き続ける」  \n   “chew on”=「せっせと処理する」意。  \n   修正案: 「テストカバレッジを解析している / 担当している」など。\n\n================================================================\nB. メジャー（高優先度）\n----------------------------------------------------------------\nB-1. 精度・ニュアンス\n--------------------\n1. “Letting the bots verify themselves”  \n   現訳: 「ボットに自分を検証させる」  \n   「自分を」が不自然。  \n   修正案: 「ボット自身にコードを検証させる」\n\n2. “Concurrency on steroids”  \n   現訳: 「ステロイド盛りの並列処理」  \n   比喩が日本語で生硬。「ドーピング並みの並列性」など言い換え検討。\n\n3. “micro waterfall cycles”  \n   現訳: 「超短サイクル」  \n   マイクロという語感が欠落。  \n   修正案: 「マイクロ・ウォーターフォール的な超短サイクル」\n\n4. “hyper-defensive coding”  \n   現訳: “超防御モード”  \n   口語が強い。  \n   修正案: 「ハイパー・ディフェンシブなコーディング」または  \n            「超防御的コーディング」\n\n5. “Strategic engineers will flourish”  \n   現訳: 「これから伸びるのは“戦略的エンジニア”だ。」  \n   OK だが “flourish”=「活躍／台頭」なので  \n   「戦略的エンジニアが真価を発揮する」等にすると自然。\n\nB-2. トーン／レジスター\n----------------------\n原文はカジュアルだが「技術ブログとしての品位」は保っている。  \n訳文は以下語句が過剰に砕け、幼稚さを与える。\n\nぶち込んで / ディープゾーン / ガチガチ / ステロイド盛り /  \nさあ、行くぜ！ / 壊すところまでやらせ / バッサリ / ハイパードライブ など\n\n推奨:  \n– 「突っ込んで」→「投入して」  \n– 「ディープゾーン」→「深い議論へ」  \n– 「ガチガチな」→「極めて厳格な」  \n– 「さあ、行くぜ！」→「それでは公開します。」 など  \n※ カジュアルさは支持しつつ、過度な若者言葉は抑制。\n\nB-3. 用語統一\n--------------\n• “LLM” は最初に「大規模言語モデル（Large Language Model, LLM）」と\n  併記しておくと親切。  \n• “CI/CD” 一箇所だけ “CI/CD” → “CI/CD パイプライン” と表記ずれ。\n\n================================================================\nC. マイナー（細部だが直すと質感向上）\n----------------------------------------------------------------\n1. Granola / o1-pro の表記ゆれ  \n   – 原文は小文字。勝手に大文字にすると固有名詞と齟齬の恐れ。\n\n2. “Bang for the buck” 的笑いのトーン  \n   見出し「15分ウォーターフォール――満足しなければ全額返金」  \n   →“or your money back” は誇大広告口調。  \n   “全額返金” で正しいが、二重ダッシュより  \n   「15 分ウォーターフォール（気に入らなければ返金）」など括弧で遊ぶと近い。\n\n3. “chewing on your test coverage” → 上記修正済み\n\n4. “dumpster fire”  \n   現訳: 「手が付けられない大惨事（dumpster fire）」  \n   OK だが () 内が長い。  \n   – 「dumpster fire（制御不能な炎上）」など簡潔に。\n\n5. リスト 2 の “Rotate in and out”  \n   現訳は意図を保っているが “ローテーション” 自体がカタカナ被り。  \n   – 「メンバーを順繰りに参加させて外す」など検討。\n\n================================================================\nD. 機械翻訳臭／ぎこちなさ\n----------------------------------------------------------------\n• 「あれこれ飛び火しまくり」「噛み砕き続ける」など比喩が\n  日本語の口頭語に寄り過ぎてやや奇異。  \n• 「…AIは直すのと同じ速さで壊すので」は意味は合うが少し硬い。  \n  →「AIは修正と同じスピードで壊すこともあるので」等。\n\n================================================================\nE. 推奨改訂例（抜粋）\n----------------------------------------------------------------\n【原文該当箇所】プロチップ①  \n現訳:  \n　まず手動で始め、あとからAIを投入  \n　iOSアプリなら、先にXcodeでプロジェクトを初期化しておくと、自動生成ファイルでAIが混乱しない。\n\n改訂案:  \n　まずは人間の手で土台を作り、次に AI をオンにする。  \n　たとえば iOS アプリなら、先に Xcode でプロジェクトを初期化しておけば  \n　自動生成ファイルに AI が惑わされない。その後は AI に残りを埋めてもらおう。  \n\n（※他箇所も同様の方針で整形）\n\n================================================================\nまとめ\n----------------------------------------------------------------\n・致命的な誤訳は少ないが、いくつかの訳抜けと  \n  スラング過多によるトーン逸脱が品質を下げている。  \n・原文の軽快さは保ちつつ、  \n  − 用語の正確さ  \n  − 適度に抑制されたカジュアルさ  \n  − 比喩の自然さ  \n  を意識して修正すれば「原文を日本語で書いたような」滑らかさになる。",
      "usage": {
        "prompt_tokens": 5133,
        "completion_tokens": 1844,
        "total_tokens": 6977
      },
      "streaming": true
    },
    "feedback": {
      "model": "o3",
      "target_language": "japanese",
      "system_prompt": "You are a master translator and editor specializing in japanese.\nYour task is to improve a translation based on detailed critique feedback.\n\n1. Carefully read the original text, current translation, and the critique feedback\n2. Address ALL issues identified in the critique\n3. Apply the specific suggestions for improvement\n4. Ensure the translation is accurate, natural-sounding, and faithful to the original\n5. Preserve all formatting, markdown, and structure of the original text\n6. Make sure the final text reads as if it were originally written in japanese\n\nDo not ignore any of the critique points. Every issue identified must be addressed in your improved version.\n",
      "user_prompt": "# ORIGINAL TEXT\nI recently had a conversation with a friend that started out as a casual catch-up and spiraled into a deep exploration of AI-assisted coding and what it's doing to our workflows, teams, and sense of \"craft.\" It spanned everything from rewriting old codebases to how automated test coverage changes the nature of programming.\n\nI took the transcript from granola, popped it into o1-pro, and asked it to write this blog post. Not terrible. Representative of my beliefs.\n\nI sent it to a few friends, and they all were interested in sending it to a few more friends. That means I gotta publish it. So here goes!\n\n> this is a good reminder that if you get an email from someone and the writing is perfect and has no affectation - an AI probably wrote it. lol.\n\n---\n\n## Waterfall in 15 Minutes or Your Money Back\n\n### The New Normal: \"Why Does Code Quality Even Matter?\"\n\nFor years, we've talked about code as craft—how we get into that precious flow state, sculpt a piece of logic, and emerge victorious, artisanal bug fixes in hand. But there's a new paradigm creeping in where code generation tools (think large language models, or LLMs) can effectively pump out features in minutes.\n\nSome folks are rattled by this pace and how it upends the old standards of \"clean code.\" Suddenly, writing robust test suites, or even test-driven development, is more about letting the bots verify themselves than it is about methodically stepping through each line of code.\n\nWill code quality nosedive? Possibly. On the other hand, we're also seeing a push for hyper-defensive coding—static analysis, formal verification, and test coverage everywhere—so that if an AI-based agent does break something, we catch it quickly. We've never needed top-notch CI/CD pipelines and rigorous checks more than we do now.\n\n---\n\n### Waterfall in 15 Minutes\n\n{{< image src=\"waterfall.webp\" alt=\"Waterfall\" caption=\"Iceland has a lot of waterfalls. Leica Q, 9/30/2016\" >}}\n\nWe used to talk about \"Waterfall vs. Agile\" as if they were moral opposites, with Agile the only correct path. But ironically, code generation is nudging us toward micro waterfall cycles: we carefully define a spec (because the AI needs clarity), press \"go,\" wait for the code to be generated, and review. It might still feel iterative, but in practice, we do a chunk of planning, then a chunk of execution, then a chunk of review. \"Waterfall in 15 minutes.\"\n\nThe real magic? You can spin up multiple \"agents\" simultaneously. While one AI is building a feature, another is handling your docs, and a third is chewing on your test coverage. That's not exactly the old idea of a single, linear Waterfall—this is concurrency on steroids.\n\n---\n\n### The Coming Shift in Team Culture\n\nIf you manage or lead an engineering team, you probably hear from the top: \"What about AI to make us more productive?\" But you may also sense that your existing team has varying levels of enthusiasm for these tools. Some are all-in—spinning up entire new features purely through prompt-driven coding—while others are protective of that craft identity.\n\nHere's what I think works:\n\n1. **Run Small Pilots**\n\n    Pick an internal project, or maybe a side tool that doesn't carry heavy production risk, and let a few curious engineers run wild with AI coding. Let them break stuff, experiment, see what happens when they trust the model a little too much, then watch how they incorporate best practices to rein it back in.\n\n2. **Rotate People In and Out**\n\n    Having a dedicated \"AI-coded\" side project means you can rotate team members—let them spend a week or two living in this new environment, learning from each other, and then bring those lessons back to the larger codebase.\n\n3. **Get Serious About Documentation**\n\n    AI \"agents\" often require extremely clear specs. Code generation is cheap, but guiding an LLM in the right direction costs careful planning. If you want your entire team to benefit, put the best specs and architecture docs you've ever written into a shared repository. You'll thank yourself when people rotate on or off that project.\n\n---\n\n### Why Flow State May Be Overrated\n\nOne surprising takeaway: a lot of us got into coding because we love the flow state—the pure, heads-down, \"zone\" feeling. But AI coding doesn't always foster that same immersion. You might spend an hour setting up prompts, letting the AI build stuff in the background, and occasionally popping over to approve or nudge it.\n\nFor some folks, that's jarring. For others—especially those who have kids or who juggle a million tasks—it's liberating. When you can context-switch (check the AI's output, jump back to real life, then come back to a functioning snippet), you realize there's a new way to be productive that doesn't revolve around long blocks of quiet time.\n\n---\n\n### Does This Mean \"Peak Programmer?\"\n\nThere's chatter that once AI can generate code, we've hit \"peak programmer\"—that soon we won't need as many engineers. That might be partly true if we're talking about straightforward feature work or hooking up an API. But there are new complexities, too, around security, compliance, test coverage, and architecture.\n\nThe real difference? \"Strategic engineers\" will flourish—those who can orchestrate multiple AI tools, keep an eye on code quality, and design new systems that scale. The folks who thrive will be part product manager, part architect, part QA, part developer. They'll shape the prompts, define the tests, maintain quality, and handle all the edge cases an LLM doesn't predict.\n\n---\n\n### Pro Tips from the Front Lines\n\nA few things I've personally learned the hard way:\n\n1. **Start Manually, Then Turn On the AI**\n\n    For iOS apps, initialize the project in Xcode first, so the auto-generated files don't confuse the AI. Then let the AI fill in the rest.\n\n2. **Short, Clear Prompts Sometimes Outperform Long Instructions**\n\n    Oddly, telling an LLM \"make code better\" can work as well as a super-elaborate prompt. Experiment—some models respond better to fewer constraints.\n\n3. **Use a \"Checkpoint\" Workflow**\n\n    Commit often, even if it's \"Commit –m 'It passed the tests, I guess!'\" AI can break everything just as quickly as it can fix it. Frequent commits give you easy rollback points.\n\n4. **Prevent AI from Over-Testing the Basics**\n\n    AI loves to test everything, including whether a `for` loop still loops. Stay vigilant, prune pointless tests, and keep your pipeline lean.\n\n5. **Document Absolutely Everything**\n\n    Let the AI generate big \"Implementation Guides.\" These guides not only help you but help the AI itself on subsequent passes.\n\n---\n\n### Final Thoughts\n\n{{< image src=\"waterfall-road.webp\" alt=\"Road to the future\" caption=\"Road to the future. Colorado is flat. Leica Q, 5/14/2016\" >}}\n\nOur industry is shifting faster than it ever has. Some of our well-worn assumptions—like the centrality of the flow state, or big celebrations around meticulously hand-coded features—are about to look quaint. But that doesn't mean we lose our creativity. Instead, it becomes about strategic orchestration—knowing what to build, how to describe it, and how to keep it from turning into a dumpster fire.\n\nIn the end, we might see that what makes your product win isn't brute-forcing code. It's designing an experience users love. Because if we can spin up 10 versions of Instagram in a weekend, the tiebreaker won't be how elegantly the code is written. It'll be which one resonates with people—and that's a design and product problem, not purely an engineering one.\n\nSo welcome to the new waterfall—done in 15-minute cycles, with AI as your infinite junior engineer and your code pipeline on hyperdrive. It's weird and wonderful and occasionally terrifying. And odds are, we're all going to have to learn this dance one way or another.\n\n---\n\n_What a funny world we live in. I think things are going to continue to get weird. Let's dig in_\n\n# CURRENT TRANSLATION\n最近、友人と軽く近況報告をしていただけなのに、気づけば話題はAI支援開発が僕らのワークフロー、チーム、そしてものづくりとしての“クラフト感”をどう変えているか――そんなディープゾーンへ突入していた。古いコードベースの書き換えから、自動テストのカバレッジがプログラミングそのものをどう揺さぶるかまで、あれこれ飛び火しまくり。\n\nその対話をGranolaで文字起こしして、o1-proにぶち込んで「ブログにしといて」と頼んだら、悪くはない出来だった。僕の言いたいことをそれなりに言い当ててる。\n\n何人かの友達に送ったら、みんな「さらに別の友達にも回したい」と言い出した。なら公開するしかない。さあ、行くぜ！\n\n> これはいいリマインダーだけど、もし誰かから完璧でクセのないメールが届いたら、たぶんAIが書いたやつだからね。lol\n\n---\n\n## 15分ウォーターフォール――満足しなければ全額返金\n\n### 新常識：「コード品質ってそんなに大事？」\n\n長いあいだ、僕らはコードを“クラフト”――職人芸――として語ってきた。フロー状態に入り、ロジックを彫刻するように組み上げ、バグをアートのように仕留める。でも今、大規模言語モデル（LLM）みたいなコード生成ツールが、数分で機能を吐き出す時代が静かにやって来た。\n\nこのスピードにビビり、「クリーンコード」の老舗ルールが揺らぐと感じる人もいる。がっちりしたテストスイートやTDDでさえ、「ボットに自分を検証させる仕組み」へシフトしつつあり、一行ずつ丁寧に追う作法は影を潜める。\n\n品質が落ちる？　あり得る。でも同時に、静的解析・形式検証・テストカバレッジをとことん厚くする“超防御モード”も進行中だ。AIエージェントが何かを壊しても速攻キャッチするには、かつてないほどガチガチなCI/CDが必要だ。\n\n---\n\n### 15分ウォーターフォール\n\n{{< image src=\"waterfall.webp\" alt=\"滝\" caption=\"アイスランドには滝が無数にある。Leica Q, 2016年9月30日\" >}}\n\n「ウォーターフォール vs. アジャイル」はかつて善悪二元論みたいに語られ、正義はアジャイル一択だった。だけど皮肉なことに、コード生成が僕らを“15分ウォーターフォール”へ押し戻している。まず仕様をガッチリ書く。次にボタンを押して生成を待ち、最後にレビュー。見た目はイテレーティブでも、実際は「計画→実装→レビュー」を超短サイクルで回す――まさに15分で終わるウォーターフォールだ。\n\nそして真のキモは並列性。ひとつのAIが機能を作っている横で、別のAIがドキュメントを書き、さらに別のAIがテストカバレッジを噛み砕き続ける。昔ながらの直列ウォーターフォールじゃない。これはステロイド盛りの並列処理だ。\n\n---\n\n### チーム文化はこう変わる\n\nエンジニアリングチームを率いているなら、経営層からは「AIで生産性を上げろ」とプレッシャーが来る。でもチームの温度感はバラバラだ。プロンプトで新機能を量産しまくるメンバーもいれば、職人魂を守りたいメンバーもいる。\n\n僕が効くと思うやり方はこれ。\n\n1. **小さなパイロットを走らせる**  \n   リスクの低い社内ツールを選んで、好奇心旺盛なエンジニアにAI支援開発を解禁しよう。モデルを信じすぎて壊すところまでやらせ、そこからどう立て直すか見届ける。\n\n2. **メンバーをローテーションさせる**  \n   「AI支援開発専用」のサイドプロジェクトを用意し、1〜2週間で人を入れ替える。その学びを本番コードベースに持ち帰ってもらう感じだ。\n\n3. **ドキュメントを本気で整備する**  \n   AIエージェントは超クリアな仕様を欲しがる。コード生成はタダみたいなものでも、LLMをいい方向に導くのは設計書しだい。最高の仕様書とアーキテクチャ図を共有リポジトリにため込め。後で絶対助かる。\n\n---\n\n### フロー状態って、実は過大評価かも？\n\n多くの開発者が“フロー状態”に憧れてこの道に来た。でもAI支援開発はその没入感をあんまりくれない。1時間かけてプロンプトを整え、AIがバックグラウンドでコードを吐く間は別のことをし、ときどきチェックして修正を投げる――そんなスタイルだ。\n\nガツンと来る違和感で戸惑う人もいれば、子育て中やタスク山盛りの人にはむしろ解放感になる。AIの出力をチェック→日常に戻る→またチェック、という切り替えで十分結果が出る、新しい働き方だ。\n\n---\n\n### 「ピーク・プログラマー」は来るのか？\n\n「AIがコードを書くなら、もうプログラマーはいらない」――そんな噂が飛び交う。単純な機能実装やAPIつなぎだけなら部分的に当たってる。でもセキュリティ、コンプライアンス、テストカバレッジ、アーキテクチャの複雑さはむしろ増している。\n\nこれから伸びるのは“戦略的エンジニア”だ。複数のAIツールをオーケストレーションし、品質を張り付いて見守り、スケールするシステムを設計する。プロダクトマネージャー、アーキテクト、QA、開発者を全部少しずつ兼ねる人。プロンプトを磨き、テストを定義し、品質を保ち、LLMが想定しないエッジケースを拾う――そんな人たちが輝く。\n\n---\n\n### 最前線からのプロチップ\n\n実際に痛い目を見て学んだことをシェアする。\n\n1. **まず手動で始め、あとからAIを投入**  \n   iOSアプリなら、先にXcodeでプロジェクトを初期化しておくと、自動生成ファイルでAIが混乱しない。\n\n2. **短く明確なプロンプトが長文に勝つこともある**  \n   不思議だけど「make code better」と一言だけのほうが、気合いの入った長文プロンプトより効くこともある。モデルごとに試そう。\n\n3. **「チェックポイント」ワークフローを徹底する**  \n   `git commit -m \"It passed the tests, I guess!\"` と細かくコミット。AIは直すのと同じ速さで壊すので、こまめなコミットが命綱だ。\n\n4. **AIに基本すぎるテストをさせすぎない**  \n   AIはforループが回るかどうかまでテストしたがる。ムダなテストはバッサリ捨てて、パイプラインを軽く保とう。\n\n5. **とにかく全部ドキュメント化**  \n   AIに分厚い「実装ガイド」を生成させよう。自分にも、次に来るAIにも効く。\n\n---\n\n### 終わりに\n\n{{< image src=\"waterfall-road.webp\" alt=\"未来への道\" caption=\"未来への道。コロラドは平らすぎて笑えるくらいだ。Leica Q, 2016年5月14日\" >}}\n\n業界はこれまでで一番のスピードで変化している。フロー至上主義や、手書きコードを祝う文化は、もうじき懐かしい話になるかもしれない。でもクリエイティビティが消えるわけじゃない。鍵は“戦略的オーケストレーション”――何を作り、どう指示し、手が付けられない大惨事（dumpster fire）にしないか、だ。\n\n最終的にプロダクトの勝敗を分けるのは、コードをどれだけ速く書けるかじゃない。ユーザーが「これだ」と感じる体験を誰が設計できるかだ。週末でInstagramを10本作れちゃう時代、決め手になるのはコードのエレガンスじゃなく、人に刺さるかどうか――これはエンジニアリングだけじゃなく、デザインとプロダクトの戦いだ。\n\nようこそ、新しいウォーターフォールへ。15分サイクルで、AIは無限のジュニアエンジニア、パイプラインはハイパードライブ。奇妙で、ワクワクして、ときどき怖い。でも僕らはみんな、このダンスを覚える羽目になるはずだ。\n\n---\n\n_なんておかしな世の中だろう。これからもっと奇妙になりそうだ。さあ、掘り下げよう。_\n\n# CRITIQUE FEEDBACK\n================================================================\n総評\n----------------------------------------------------------------\n全体としては原文の意味を大きく損なう致命的な誤訳こそ少ないものの、  \n① いくつかの情報欠落／意味追加、② 原文より強すぎる俗語・スラング使用、  \n③ 比喩や語感のずれ、④ 技術用語の訳語ぶれ、⑤ キャプション等の細部の訳漏れ  \nが散在している。これらが重なることで「英語のカジュアルさ ↔ 日本語の軽妙さ」の\nバランスが崩れ、読み手によっては子どもっぽく感じられる恐れがある。  \n以下、重大度別・カテゴリ別に徹底的に指摘する。\n\n================================================================\nA. クリティカル（必修正）\n----------------------------------------------------------------\n1. 【訳抜け】プロチップ①  \n   原文: “... then let the AI fill in the rest.”  \n   現訳: 不在  \n   修正案:  \n   − 例) 「その後は AI に残りを埋めさせればいい。」\n\n2. 【訳抜け】フロー状態節  \n   原文: “... then come back to a functioning snippet”  \n   現訳: 「またチェック、という切り替えで十分結果が出る」  \n   ⇒「戻ってきたらすでに動くスニペットが出来上がっている」という“成果物が完成\n      している”ニュアンスを補う。\n\n3. 【語義追加】キャプション “Colorado is flat.”  \n   現訳: 「コロラドは平らすぎて笑えるくらいだ」  \n   “笑えるくらい”は原文にない感情語の追加。  \n   修正案: 「コロラドはとにかく平らだ。」程度に抑制。\n\n4. 【語義逸脱】“chewing on your test coverage”  \n   現訳: 「テストカバレッジを噛み砕き続ける」  \n   “chew on”=「せっせと処理する」意。  \n   修正案: 「テストカバレッジを解析している / 担当している」など。\n\n================================================================\nB. メジャー（高優先度）\n----------------------------------------------------------------\nB-1. 精度・ニュアンス\n--------------------\n1. “Letting the bots verify themselves”  \n   現訳: 「ボットに自分を検証させる」  \n   「自分を」が不自然。  \n   修正案: 「ボット自身にコードを検証させる」\n\n2. “Concurrency on steroids”  \n   現訳: 「ステロイド盛りの並列処理」  \n   比喩が日本語で生硬。「ドーピング並みの並列性」など言い換え検討。\n\n3. “micro waterfall cycles”  \n   現訳: 「超短サイクル」  \n   マイクロという語感が欠落。  \n   修正案: 「マイクロ・ウォーターフォール的な超短サイクル」\n\n4. “hyper-defensive coding”  \n   現訳: “超防御モード”  \n   口語が強い。  \n   修正案: 「ハイパー・ディフェンシブなコーディング」または  \n            「超防御的コーディング」\n\n5. “Strategic engineers will flourish”  \n   現訳: 「これから伸びるのは“戦略的エンジニア”だ。」  \n   OK だが “flourish”=「活躍／台頭」なので  \n   「戦略的エンジニアが真価を発揮する」等にすると自然。\n\nB-2. トーン／レジスター\n----------------------\n原文はカジュアルだが「技術ブログとしての品位」は保っている。  \n訳文は以下語句が過剰に砕け、幼稚さを与える。\n\nぶち込んで / ディープゾーン / ガチガチ / ステロイド盛り /  \nさあ、行くぜ！ / 壊すところまでやらせ / バッサリ / ハイパードライブ など\n\n推奨:  \n– 「突っ込んで」→「投入して」  \n– 「ディープゾーン」→「深い議論へ」  \n– 「ガチガチな」→「極めて厳格な」  \n– 「さあ、行くぜ！」→「それでは公開します。」 など  \n※ カジュアルさは支持しつつ、過度な若者言葉は抑制。\n\nB-3. 用語統一\n--------------\n• “LLM” は最初に「大規模言語モデル（Large Language Model, LLM）」と\n  併記しておくと親切。  \n• “CI/CD” 一箇所だけ “CI/CD” → “CI/CD パイプライン” と表記ずれ。\n\n================================================================\nC. マイナー（細部だが直すと質感向上）\n----------------------------------------------------------------\n1. Granola / o1-pro の表記ゆれ  \n   – 原文は小文字。勝手に大文字にすると固有名詞と齟齬の恐れ。\n\n2. “Bang for the buck” 的笑いのトーン  \n   見出し「15分ウォーターフォール――満足しなければ全額返金」  \n   →“or your money back” は誇大広告口調。  \n   “全額返金” で正しいが、二重ダッシュより  \n   「15 分ウォーターフォール（気に入らなければ返金）」など括弧で遊ぶと近い。\n\n3. “chewing on your test coverage” → 上記修正済み\n\n4. “dumpster fire”  \n   現訳: 「手が付けられない大惨事（dumpster fire）」  \n   OK だが () 内が長い。  \n   – 「dumpster fire（制御不能な炎上）」など簡潔に。\n\n5. リスト 2 の “Rotate in and out”  \n   現訳は意図を保っているが “ローテーション” 自体がカタカナ被り。  \n   – 「メンバーを順繰りに参加させて外す」など検討。\n\n================================================================\nD. 機械翻訳臭／ぎこちなさ\n----------------------------------------------------------------\n• 「あれこれ飛び火しまくり」「噛み砕き続ける」など比喩が\n  日本語の口頭語に寄り過ぎてやや奇異。  \n• 「…AIは直すのと同じ速さで壊すので」は意味は合うが少し硬い。  \n  →「AIは修正と同じスピードで壊すこともあるので」等。\n\n================================================================\nE. 推奨改訂例（抜粋）\n----------------------------------------------------------------\n【原文該当箇所】プロチップ①  \n現訳:  \n　まず手動で始め、あとからAIを投入  \n　iOSアプリなら、先にXcodeでプロジェクトを初期化しておくと、自動生成ファイルでAIが混乱しない。\n\n改訂案:  \n　まずは人間の手で土台を作り、次に AI をオンにする。  \n　たとえば iOS アプリなら、先に Xcode でプロジェクトを初期化しておけば  \n　自動生成ファイルに AI が惑わされない。その後は AI に残りを埋めてもらおう。  \n\n（※他箇所も同様の方針で整形）\n\n================================================================\nまとめ\n----------------------------------------------------------------\n・致命的な誤訳は少ないが、いくつかの訳抜けと  \n  スラング過多によるトーン逸脱が品質を下げている。  \n・原文の軽快さは保ちつつ、  \n  − 用語の正確さ  \n  − 適度に抑制されたカジュアルさ  \n  − 比喩の自然さ  \n  を意識して修正すれば「原文を日本語で書いたような」滑らかさになる。\n\nPlease address ALL issues identified in the critique and provide an improved translation.\nReturn ONLY the improved translated text without explanations or comments.",
      "response": "最近、友人と軽く近況を語り合っていたはずが、気づけばAI支援開発が僕らのワークフローやチーム構成、そして“クラフト”としての手触りをどう変えているのかという深い議論へと発展していた。古いコードベースの書き換えから、自動テストのカバレッジがプログラミングそのものをどう揺さぶるかまで、話題は縦横無尽に広がった。\n\nその対話をgranolaで文字起こしし、o1-proに投入して「ブログにまとめて」と頼んだところ、なかなかの出来栄え。僕の考えをおおむね言い当てている。\n\n何人かの友人に送ったところ、「さらに広めたい」と口をそろえた。となれば公開するしかない。では、どうぞ！\n\n> これはいい覚え書きだね。もし誰かから届いたメールが完璧で癖がまったくなければ、おそらくAIが書いたものだよ。lol\n\n---\n\n## 15分ウォーターフォール（気に入らなければ全額返金）\n\n### 新常識：「コード品質ってそんなに大事？」\n\n長いあいだ、僕らはコードを“クラフト”——職人芸——として語ってきた。フロー状態に入り、ロジックを彫刻するように組み上げ、バグを獲物のように仕留める。しかし今や、大規模言語モデル（Large Language Model, LLM）などのコード生成ツールが、数分で機能を吐き出す時代が静かに到来している。\n\nこの速度に戸惑い、「クリーンコード」の旧来の規範が揺らぐと感じる人もいる。 robust なテストスイートやテスト駆動開発（TDD）でさえ、「ボット自身にコードを検証させる」仕組みへとシフトしつつあり、一行ずつ丹念に追う作法は影を潜めている。\n\n品質が低下するおそれ？　確かにある。一方で、静的解析・形式検証・全面的なテストカバレッジといったハイパー・ディフェンシブなコーディングも加速している。AI エージェントが何かを壊しても即座に検知できるよう、これまで以上に厳格な CI/CD パイプラインが求められているのだ。\n\n---\n\n### 15分ウォーターフォール\n\n{{< image src=\"waterfall.webp\" alt=\"滝\" caption=\"アイスランドには滝が無数にある。Leica Q, 2016年9月30日\" >}}\n\nかつては「ウォーターフォール vs. アジャイル」が善悪二元論のように語られ、正義はアジャイル一択とされていた。ところが皮肉にも、コード生成は僕らをマイクロ・ウォーターフォール的な超短サイクルへ押し戻している。まず明確な仕様を書き、ボタンを押して生成を待ち、レビューする。見た目はイテレーティブでも、実際には「計画→実装→レビュー」を15分で回すウォーターフォールだ。\n\nそして本当の妙味は並列性にある。ひとつのAIが新機能を構築している横で、別のAIがドキュメントをまとめ、さらに別のAIがテストカバレッジを解析している。これは昔の直列ウォーターフォールではない。並列性が桁違いに強化された世界だ。\n\n---\n\n### チーム文化のこれから\n\nエンジニアリングチームを率いているなら、上層部から「AIで生産性を上げよう」と言われる一方で、チーム内の温度差も感じているだろう。プロンプトだけで新機能を量産するメンバーもいれば、“クラフト”のアイデンティティを守りたいメンバーもいる。\n\n僕が有効だと思うアプローチは次のとおり。\n\n1. **小さなパイロットを走らせる**  \n   まずはリスクの低い社内ツールやサイドプロジェクトを選び、好奇心旺盛なエンジニアにAI支援開発を解禁する。モデルを信頼しすぎて壊すところまで試し、その後どう立て直すかを観察しよう。\n\n2. **メンバーを順繰りに出入りさせる**  \n   「AI支援開発専用」のサイドプロジェクトを用意し、1〜2週間ごとにメンバーを入れ替える。その学びを本番コードベースに持ち帰ってもらう。\n\n3. **ドキュメントを本気で整備する**  \n   AIエージェントは極めて明確な仕様を必要とする。コード生成は安価でも、LLMを正しく導くには綿密な設計書が欠かせない。最高の仕様書とアーキテクチャ図を共有リポジトリに蓄積しよう。将来必ず自分を助けてくれる。\n\n---\n\n### フロー状態は過大評価かもしれない\n\n多くの開発者が“フロー状態”に魅せられてこの道に入った。しかしAI支援開発は、その没入感をあまり与えてくれない。1時間ほどかけてプロンプトを整え、AIがバックグラウンドでコードを吐く間に別の用事を済ませ、ときどきチェックして修正を指示する——そんなスタイルだ。戻ってくる頃には、すでに動くスニペットが出来上がっていることも少なくない。\n\n戸惑う人もいれば、子育て中やタスク過多の人にはむしろ解放感になる。AIの出力を確認→日常に戻る→再確認、という切り替えで成果が出る新しい働き方だ。\n\n---\n\n### 「ピーク・プログラマー」は来るのか？\n\n「AIがコードを書くなら、もうプログラマーはいらない」という声もある。単純な機能追加やAPI連携なら一部そのとおりかもしれない。しかしセキュリティ、コンプライアンス、テストカバレッジ、アーキテクチャの複雑さはむしろ増している。\n\n真価を発揮するのは“戦略的エンジニア”だ。複数のAIツールをオーケストレーションし、品質を継続的に監視し、スケールするシステムを設計する。プロダクトマネージャー、アーキテクト、QA、開発者を少しずつ兼ねる人材——プロンプトを磨き、テストを定義し、品質を保ち、LLMが想定しないエッジケースを拾う人——が活躍する。\n\n---\n\n### 最前線からのプロチップ\n\n実際に痛い目を見ながら学んだことを共有する。\n\n1. **まず手動で始め、あとからAIをオン**  \n   まずは人間の手で土台を作り、その後は AI に残りを埋めさせればいい。  \n   例：iOSアプリなら、先にXcodeでプロジェクトを初期化しておけば、自動生成ファイルにAIが惑わされない。\n\n2. **短く明確なプロンプトが長文を上回ることもある**  \n   不思議だが「make code better」と一言伝えるだけで、長大な指示より良い結果が出る場合もある。モデルごとに試してみよう。\n\n3. **“チェックポイント”ワークフローを徹底する**  \n   `git commit -m \"It passed the tests, I guess!\"` のように小刻みにコミットする。AIは修正と同じスピードで壊すこともあるので、こまめなコミットが命綱になる。\n\n4. **AIに基本すぎるテストをさせ過ぎない**  \n   AIは`for`ループが回るかまでテストしたがる。不要なテストは潔く削り、パイプラインを軽量に保とう。\n\n5. **すべてをドキュメント化する**  \n   AIに大部の「実装ガイド」を生成させよう。それはあなた自身にも、次に来るAIにも役立つ。\n\n---\n\n### 終わりに\n\n{{< image src=\"waterfall-road.webp\" alt=\"未来への道\" caption=\"未来への道。コロラドはとにかく平らだ。Leica Q, 2016年5月14日\" >}}\n\n業界はかつてない速度で変化している。フロー至上主義や手書きコードを称える文化は、ほどなく懐かしいものになるかもしれない。しかし創造性が失われるわけではない。鍵になるのは“戦略的オーケストレーション”——何を作るか、どう指示するか、そして制御不能な炎上（dumpster fire）にしないための手立てだ。\n\n最終的にプロダクトの勝敗を分けるのは、コードをどれだけ速く書けるかではなく、ユーザーが「これだ」と感じる体験を誰が設計できるかだ。週末でInstagramを10本作れる時代、決め手になるのはコードのエレガンスではなく、人に刺さるかどうか——それはエンジニアリングだけでなく、デザインとプロダクトの問題だ。\n\nようこそ、新時代のウォーターフォールへ。15分サイクルで、AIは無限のジュニアエンジニア、パイプラインは超高速。奇妙でワクワクし、ときに怖い——でも僕ら全員、このダンスを習得する羽目になるだろう。\n\n---\n\n_なんて不思議な世の中だろう。これからもっと奇妙になりそうだ。さあ、掘り下げていこう。_",
      "usage": {
        "prompt_tokens": 7476,
        "completion_tokens": 2395,
        "total_tokens": 9871
      },
      "streaming": true
    },
    "frontmatter": {
      "model": "o3",
      "target_language": "japanese",
      "system_prompt": "You are a professional translator. Translate the following frontmatter fields to japanese.\nEach field is in the format \"field_name: content\". Translate ONLY the content, not the field names.\nReturn the translated content in the exact same format, preserving all field names.",
      "user_prompt": "title: Waterfall in 15 Minutes or Your Money Back\n\ndescription: An exploration of how AI is accelerating traditional development methods into rapid, 15-minute waterfall cycles, transforming software engineering workflows and team dynamics.\n\n",
      "response": "title: 15分でウォーターフォール、できなければ全額返金\ndescription: AI が従来の開発手法を迅速な15分ウォーターフォールサイクルへと加速させ、ソフトウェアエンジニアリングのワークフローとチームダイナミクスを変革している様子を探る。",
      "usage": {
        "prompt_tokens": 93,
        "completion_tokens": 88,
        "total_tokens": 181
      },
      "fields": [
        "title",
        "description"
      ],
      "streaming": true
    },
    "all_critiques": [
      "==============================\n徹底レビュー ― 問題点一覧\n==============================\n\n【凡例】  \n★Critical：意味の取り違え・重大な欠落  \n●Major：重要ニュアンスの欠落／不正確訳／読みにくさが高い  \n▲Minor：軽微な誤訳・不自然さ・訳抜け  \n◆Stylistic / Naturalness：語感・文体・トーン・表記ゆれ  \n◎Suggestion：具体的な改善案\n\n------------------------------------------------\n1. 正確性・情報欠落\n------------------------------------------------\n★1-1  “robust test suites”  \n　現訳：robust なテストスイート  \n　問題：英単語をそのまま残しており意味が曖昧。  \n　◎Suggestion：「堅牢なテストスイート」\n\n●1-2  “methodically stepping through each line of code”  \n　現訳：訳出なし  \n　問題：AI に任せることで「一行ずつ丹念に追う工程が不要になる」という対比が欠落。  \n　◎Suggestion：  \n　「…ボットが自己検証してくれる分、『一行ずつ丹念にコードを追う』従来の手順は影を潜めつつあります。」\n\n●1-3  パイロット案の詳細欠落  \n　原文：“…experiment, see what happens when they trust the model a little too much, then watch how they incorporate best practices to rein it back in.”  \n　現訳：壊して学び、ベストプラクティスを身に付けてもらう  \n　問題：実験 → 失敗 → 収束という段階的学習プロセスが薄まっている。  \n　◎Suggestion：  \n　「やり過ぎてモデルを信頼しすぎるとどうなるかを体感し、その後どうベストプラクティスで軌道修正するかまで観察させる」\n\n▲1-4  “big ‘Implementation Guides’”  \n　現訳：実装ガイドを大量生成  \n　問題：量の話ではなく “big”=詳細/重厚 を示唆。  \n　◎Suggestion：「網羅的な『実装ガイド』を生成させる」\n\n------------------------------------------------\n2. Terminology / Technical Consistency\n------------------------------------------------\n●2-1  「AI 支援コーディング」↔「AI コーディング」表記ゆれ  \n　◎Suggestion：どちらかに統一（例：AI支援開発）\n\n●2-2  半角スペースの揺れ  \n　例）「AI エージェント」「CI/CD パイプライン」  \n　日本語技術文ではスペースなしが主流。  \n　◎Suggestion：「AIエージェント」「CI/CDパイプライン」\n\n▲2-3  “マイクロ・ウォーターフォール”  \n　中黒+ハイフンが冗長。  \n　◎Suggestion：「マイクロウォーターフォール」\n\n------------------------------------------------\n3. 文体・トーンの整合性\n------------------------------------------------\n◆3-1  原文のカジュアルさ vs. やや硬い訳調  \n　例）「公開するしかないなと。」→カジュアル感は維持できているが、後半全体で硬めの語彙（例：綿密、徹底的）が頻発。  \n　◎Suggestion：口語体なら「徹底的に」→「ガッツリ」「みっちり」などでバランスを取る。\n\n◆3-2  ユーモアの訳  \n　“Waterfall in 15 Minutes or Your Money Back” のジョーク性が訳では弱い。  \n　◎Suggestion：  \n　「15分ウォーターフォール —— 気に入らなければ全額返金（⁉）」など、驚きの記号を加えて遊び心を強調。\n\n------------------------------------------------\n4. 自然さ・こなれ度\n------------------------------------------------\n▲4-1  「数分で機能を量産」  \n　人ではなくAIが作る文脈なので「実装」や「生成」の方が自然。  \n　◎Suggestion：「数分で機能を生成できる」\n\n▲4-2  「壊して学び」  \n　日本語では「壊して学ぶ」が自然。  \n　◎Suggestion：語尾の活用を修正。\n\n▲4-3  「ステロイド級の並列開発」  \n　直訳臭が強い。  \n　◎Suggestion：「ステロイドを打ったような並列開発」「超ドーピング並列開発」など比喩を工夫。\n\n▲4-4  「10 本作れる」  \n　Webサービスは「本」より「個」や「バージョン」。  \n　◎Suggestion：「Instagram を週末で10個作れる時代」\n\n------------------------------------------------\n5. 文法／記法\n------------------------------------------------\n▲5-1  英文引用のダッシュ  \n　commit メッセージ例：`Commit –m` のダッシュがエン・ダッシュ。  \n　Git コマンドは `git commit -m` が厳密。  \n　◎Suggestion：誤解を避けるため back-tick 付きで `git commit -m \"It passed the tests, I guess!\"`\n\n▲5-2  インラインコードの装飾  \n　`for` ループ → 原文はバッククオート。訳文でもバッククオートを残すか《コード》タグを用いると技術ブログらしさが保てる。\n\n------------------------------------------------\n6. 追加・削除ミス\n------------------------------------------------\n★6-1  削除なし・追加なし  \n　大きな欠落・過剰追加は上記を除き見当たらないが、微妙なニュアンス漏れは多数（1-2、1-3 など）。\n\n------------------------------------------------\n7. 機械翻訳臭・直訳感\n------------------------------------------------\n◆7-1  形容詞＋名詞の英語語順残存  \n　例）robust なテストスイート、hyper-defensive コーディングなど。  \n　◎Suggestion：形容詞を日本語化・語順修正。\n\n◆7-2  「コードを力ずくで書く」  \n　直訳感が強く不自然。  \n　◎Suggestion：「ひたすらコード量で押し切る」「コードをゴリゴリ書く」\n\n------------------------------------------------\n8. 推奨全体改訂ポリシー\n------------------------------------------------\n1. 技術用語は日本のエンジニアコミュニティで通用する表記に統一  \n2. カジュアル × 技術ブログの温度感を保ちつつ、不要に硬い語を避ける  \n3. 和文として不自然な助詞・活用を見直し、口語のリズムを意識  \n4. 原文のジョーク・皮肉・段取りを逃さず丁寧に再現  \n\n以上を修正すれば、「最初から日本語で書かれたブログ」に匹敵する完成度になります。",
      "【総評】  \n全体としては読みやすく、原文の雰囲気もかなり再現できています。しかし「ほぼ完璧」とは言えません。細部での意味の取りこぼし、ニュアンスの誤り、不自然・過度に口語的／和製英語的な表現、語調ブレ、文法の軽微な乱れなどが散見されます。以下、重大度別に徹底的に洗い出します。\n\n────────────────\n■Critical（意味が違う／情報欠落・追加）  \n────────────────\n1. Section タイトル “Why Does Code Quality Even Matter?”  \n　訳: 「コード品質っているの？」  \n　問題: “matter”＝「重要か」。 “っているの？” では動詞がなく、「存在する？」の意味に取れる。  \n　改善: 「コード品質って本当に重要なの？」  \n2. Bullet 3 (Team Culture) 原文末尾 “You’ll thank yourself when people rotate on or off that project.”  \n　訳: 完全に欠落。  \n　改善例: 「メンバーが入れ替わっても “あの時書いておいて良かった” と痛感するはずです。」  \n3. Closing line “Let’s dig in”  \n　訳: 「さあ、潜っていこう。」  \n　問題: 英語の慣用句 “dig in”＝「さっそく取り掛かろう」。 “潜る” は意味がズレる。  \n　改善: 「さあ、始めよう。」\n\n────────────────\n■Major（大きな違和感・不自然さ・用語ミス）  \n────────────────  \nA. 語調・トーンのぶれ\n   1. 「イケる」「ビビり」「ガッチリ」「ドーピングしたような」等のラフ口語が随所に混在。原文はカジュアルだが、ここまでスラング連発では読者層によって幼稚に響く。  \n      – 例: “Not terrible.” → 「意外と悪くない。」程度に。  \n      – “concurrency on steroids” → 「ステロイドを打ったように加速した並列性。」など比喩は残しつつ語感を整える。\n\nB. 和製英語／直訳調\n   1. 「タフなCI/CDパイプライン」  \n      – “タフ” は和製英語。→「強固な／堅牢な」  \n   2. 「ストラテジックエンジニア」  \n      – そのままでは意味不明。→「戦略的エンジニア（Strategic Engineer）」と併記するか日本語に寄せる。  \n\nC. 用語の一貫性\n   ・ “マイクロウォーターフォール” と “15分ウォーターフォール” が混在。用語を統一するか、関係を説明する。  \n\nD. 文化・ニュアンスのズレ\n   1. “craft identity” → 「クラフト魂」で良いが、“sense of craft” を「クラフト観」と訳すのは不自然。  \n      – 提案: 「クラフト(職人)としての誇り」  \n   2. “Your Money Back” サブタイトル  \n      – 「気に入らなければ全額返金?!」 は少し長く、原文の即物的ジョーク感が薄れる。  \n      – 提案: 「15分ウォーターフォール ── 不満なら全額返金」  \n\nE. 省略・追加の細部\n   ・ 各所に軽微な意訳追加（例: 「思いっきり実験し」など）がある。基本的に許容範囲だが、学術・業務ブログとしては忠実に。「少し盛った」部分は削るか「～だと感じています」などクッションを。  \n\n────────────────\n■Minor（スタイル・文法・細かい自然さ）  \n────────────────  \n1. 「〜してる。」 ← くだけ過ぎ。文末を「～している。」に整えると全体が締まる。  \n2. 「みっちりテストカバレッジ」 → 「網羅的なテストカバレッジ」  \n3. 「for ループが回るかまで」 → 「for ループが回るかどうかまで」  \n4. 「ムダなテストはバッサリ削ってパイプラインを軽く保とう。」  \n   – “バッサリ” は口語が強い。「不要なテストは削除し、パイプラインを軽量に保とう。」  \n5. 「クラフト観をどう揺さぶっているか――そんな深掘りトークに発展しました。」  \n   – ダッシュ前後に全角スペースを入れるか二重ダッシュを一つに。  \n\n────────────────\n■Stylistic / Register（読みやすさ・語彙選択）  \n────────────────  \n1. 原文はカジュアル × テック系ブログ。訳文はやや“陽キャ”寄りの砕け方。読者想定が幅広いならもう一段フォーマル寄せを。  \n2. 比喩・韻を踏む箇所  \n   – “Waterfall in 15 minutes” → 「15分で完結するウォーターフォール」  \n   – “micro waterfall cycles” → 「超短サイクルのウォーターフォール」 等  \n3. 写真キャプション  \n   – 「アイスランドには滝が山ほどある。」→ 「アイスランドには滝が無数にある。」  \n   – 「コロラドは平ら。」→ 原文 “Colorado is flat.” の軽口を活かしつつ「コロラドはとにかく平坦だ。」など。  \n\n────────────────\n■Technical Terms（用語統一）  \n────────────────  \n・ “formal verification” → 「形式手法による検証」まで言うと専門家にも通じる。  \n・ “static analysis” は「静的解析」でOKだが一貫してスペースを統一（静的解析／静的アナリシス等ぶれない）。  \n\n────────────────\n■Suggestion Summary（修正指針）  \n────────────────  \n1. 意味がズレた箇所を正す  \n   – “matter”＝重要、 “dig in”＝取り掛かる。  \n2. ラフ過ぎるスラングを2段階ほどフォーマル寄せ  \n   – 「イケる」「ドーピング」は別表現へ。  \n3. 専門用語・横文字を統一表記  \n   – 「CI/CDパイプライン」「マイクロウォーターフォール」などガイドラインを作成。  \n4. 欠落情報を補完  \n   – Bullet 3 の “You’ll thank yourself …” など。  \n5. 文末表現を揃え、口語と文語のバランスを取る。  \n\nこのリストに沿って修正すれば、原文に忠実で、かつ“ネイティブが最初から日本語で書いた”ような完成度に近づきます。",
      "徹底的にチェックした結果、現行訳は大枠では健闘していますが、以下の点で原文との差異・不自然さ・一貫性欠如が散見されます。直訳すれば良いという姿勢や「それっぽい日本語」で逃げている箇所もあるので、もう一段厳密に磨き上げる必要があります。\n\n--------------------------------------------------\n【A. 重大度＝Critical（意味変更・欠落・誤訳）】\n1. sense of “craft” →「職人としての誇り」  \n   ・“sense of craft” は「クラフト感／ものづくり観」が中心で “pride” までは含意していない。  \n   ・訳例： 「ものづくりとしての“クラフト感”」\n\n2. “Not terrible.” →「なかなか良い出来」  \n   ・原文は手放しで褒めているわけではなく、やや皮肉を帯びた “悪くないね” 程度。  \n   ・訳例：「悪くはない出来だった。」\n\n3. 引用部 “this is a good reminder…”  \n   ・「いいリマインダーだ」という前置きが抜け落ちた。  \n   ・訳例：「これはいいリマインダーだけど、もし完璧で…」\n\n4. 見出し “or Your Money Back” →「不満なら全額返金」  \n   ・「満足しなければ」の方が英語のキャッチコピー感を保てる。意訳で “不満なら” に変えると響きが弱い。  \n   ・訳例：「15 分ウォーターフォール――満足しなければ全額返金」\n\n5. “chewing on your test coverage” →「テストを構築する」  \n   ・“chew on” は「ひたすら咀嚼する／掘り下げる」ニュアンス。構築だけでは浅い。  \n   ・訳例：「テストカバレッジを噛み砕き続ける」\n\n6. “dumpster fire” →「炎上」  \n   ・IT 業界スラングの “dumpster fire” は「手が付けられない大惨事」。単に「炎上」だと Web 炎上の比喩に寄り過ぎ。  \n   ・訳例：「大惨事（dumpster fire）」と併記するか「収拾のつかない惨状」に。\n\n--------------------------------------------------\n【B. 重大度＝Major（トーン・レジスタ／文化的ニュアンス）】\n1. 原文はカジュアルで軽い口語。訳文は敬体と常体が混在し硬め。  \n   ‐ 「公開するしかありません」「欠かせません」などの敬体が浮く。  \n   ‐ “gotta” “wanna” “lol” の軽さを保つなら常体ベースで。  \n   改善：文末を「〜だ」「〜する」に統一し、丁寧語は意図的に削る。\n\n2. 技術系スラングの温度感  \n   ‐ “popped it into o1-pro” →「o1-pro にぶち込んで」のように崩した方が近い。  \n   ‐ “concurrency on steroids” →「ステロイド盛りの並列処理」など、やや砕けた比喩を保持。\n\n3. カタカナ語の多用と固さ  \n   ‐ 「職人精神」「アーキテクチャドキュメント」→説明が長い部分は日本語化するか括弧で補う。  \n   ‐ “Strategic Engineer” だけ括弧付き英語併記で他はしないのは不統一。\n\n--------------------------------------------------\n【C. Stylistic / Naturalness（読みやすさ・こなれ）】\n1. 「AI 支援コーディング」「AI エージェント」  \n   ・“AI支援開発／AI補助開発” などの方が自然。  \n   ・半角スペースの有無を統一（“AI支援” vs “AI 支援”）。\n\n2. 大仰な四字熟語・硬語  \n   ‐ 「善悪二元論」「超防御的」→原文の軽さに比べると重い。  \n   ‐ 「網羅的なテストカバレッジ」→「テストカバレッジをとにかく広げる」など平易に。\n\n3. 不自然な比喩  \n   ‐ 「ステロイドを注入したかのように加速した並列処理」→長く説明調。  \n   ‐ 「痛い目で学んだ教訓」→会話調なら「実際に痛い目を見て学んだ」。\n\n4. 日本語順序・主語省略  \n   ‐ 「AI が迷わないよう仕様をしっかり書き、ボタンを押して生成を待ち、レビューを行う。」  \n     →「まず仕様をガッチリ書く。次にボタンを押して生成を待ち、最後にレビュー、という流れだ。」の方がリズムが原文に近い。\n\n--------------------------------------------------\n【D. Consistency / Technical Terms】\n1. 「プログラマー」「プログラマ」が混在。  \n   →表記を統一。\n\n2. 「形式手法による検証」→業界定訳は「形式検証」。  \n   →Static analysis / Formal verification / test coverage は都度同じ訳語を。\n\n3. 英数字・半角全角混在  \n   ‐ “LLM” に半角スペースを付けたり付けなかったり。  \n   ‐ “15 分ウォーターフォール” と “15分サイクル” でスペース揺れ。\n\n--------------------------------------------------\n【E. Minor（文法・タイポ・句読点）】\n1. 「僕たちは皆このダンスを覚えることになるでしょう。」  \n   →「僕らはみんな、このダンスを覚える羽目になるはずだ。」で口語化。\n\n2. キャプション  \n   ‐ 「コロラドはとにかく平坦だ。」→原文 “Colorado is flat.” はやや乾いたジョーク。  \n     「コロラドは平らすぎて笑えるくらいだ。」など味を残す。\n\n3. 引用符  \n   ‐ 英語のダブルクォートと日本語の二重カギ「」が混在。統一すべき。\n\n--------------------------------------------------\n【F. 機械翻訳っぽさ・直訳臭】\n1. “CI/CD パイプラインと厳格なチェックが欠かせません。”  \n   →「CI/CD をこれまで以上にガチガチにする必要がある。」くらい崩した方が人間味。\n\n2. “これがストレスになる人もいますが”  \n   →原文 “jarring” のニュアンス（ガツンと来る違和感）が薄い。「戸惑う人もいれば」に。\n\n3. “週末で Instagram を 10 個作れる時代”  \n   →数字を残しつつやや硬い。「週末で Instagram を 10 本作れちゃう時代」。\n\n--------------------------------------------------\n【総合提案】\n・フォーマル寄り→カジュアル寄りへのレジスタ調整を第一に。  \n・英語由来のユーモア（一歩引いた皮肉・比喩）を日本語で再現する努力を。  \n・専門用語は訳語表を作り「静的解析／形式検証／テストカバレッジ」など揺れを潰す。  \n・人称・文末の統一（僕／俺／私、だ／です）。  \n・キャッチコピー部分は語感を優先し、誤訳を恐れず多少大胆に。\n\nこれらを修正すれば、原稿は「最初から日本語で書かれた」かのように自然で、かつ原文に100%忠実な訳になるはずです。",
      "================================================================\n総評\n----------------------------------------------------------------\n全体としては原文の意味を大きく損なう致命的な誤訳こそ少ないものの、  \n① いくつかの情報欠落／意味追加、② 原文より強すぎる俗語・スラング使用、  \n③ 比喩や語感のずれ、④ 技術用語の訳語ぶれ、⑤ キャプション等の細部の訳漏れ  \nが散在している。これらが重なることで「英語のカジュアルさ ↔ 日本語の軽妙さ」の\nバランスが崩れ、読み手によっては子どもっぽく感じられる恐れがある。  \n以下、重大度別・カテゴリ別に徹底的に指摘する。\n\n================================================================\nA. クリティカル（必修正）\n----------------------------------------------------------------\n1. 【訳抜け】プロチップ①  \n   原文: “... then let the AI fill in the rest.”  \n   現訳: 不在  \n   修正案:  \n   − 例) 「その後は AI に残りを埋めさせればいい。」\n\n2. 【訳抜け】フロー状態節  \n   原文: “... then come back to a functioning snippet”  \n   現訳: 「またチェック、という切り替えで十分結果が出る」  \n   ⇒「戻ってきたらすでに動くスニペットが出来上がっている」という“成果物が完成\n      している”ニュアンスを補う。\n\n3. 【語義追加】キャプション “Colorado is flat.”  \n   現訳: 「コロラドは平らすぎて笑えるくらいだ」  \n   “笑えるくらい”は原文にない感情語の追加。  \n   修正案: 「コロラドはとにかく平らだ。」程度に抑制。\n\n4. 【語義逸脱】“chewing on your test coverage”  \n   現訳: 「テストカバレッジを噛み砕き続ける」  \n   “chew on”=「せっせと処理する」意。  \n   修正案: 「テストカバレッジを解析している / 担当している」など。\n\n================================================================\nB. メジャー（高優先度）\n----------------------------------------------------------------\nB-1. 精度・ニュアンス\n--------------------\n1. “Letting the bots verify themselves”  \n   現訳: 「ボットに自分を検証させる」  \n   「自分を」が不自然。  \n   修正案: 「ボット自身にコードを検証させる」\n\n2. “Concurrency on steroids”  \n   現訳: 「ステロイド盛りの並列処理」  \n   比喩が日本語で生硬。「ドーピング並みの並列性」など言い換え検討。\n\n3. “micro waterfall cycles”  \n   現訳: 「超短サイクル」  \n   マイクロという語感が欠落。  \n   修正案: 「マイクロ・ウォーターフォール的な超短サイクル」\n\n4. “hyper-defensive coding”  \n   現訳: “超防御モード”  \n   口語が強い。  \n   修正案: 「ハイパー・ディフェンシブなコーディング」または  \n            「超防御的コーディング」\n\n5. “Strategic engineers will flourish”  \n   現訳: 「これから伸びるのは“戦略的エンジニア”だ。」  \n   OK だが “flourish”=「活躍／台頭」なので  \n   「戦略的エンジニアが真価を発揮する」等にすると自然。\n\nB-2. トーン／レジスター\n----------------------\n原文はカジュアルだが「技術ブログとしての品位」は保っている。  \n訳文は以下語句が過剰に砕け、幼稚さを与える。\n\nぶち込んで / ディープゾーン / ガチガチ / ステロイド盛り /  \nさあ、行くぜ！ / 壊すところまでやらせ / バッサリ / ハイパードライブ など\n\n推奨:  \n– 「突っ込んで」→「投入して」  \n– 「ディープゾーン」→「深い議論へ」  \n– 「ガチガチな」→「極めて厳格な」  \n– 「さあ、行くぜ！」→「それでは公開します。」 など  \n※ カジュアルさは支持しつつ、過度な若者言葉は抑制。\n\nB-3. 用語統一\n--------------\n• “LLM” は最初に「大規模言語モデル（Large Language Model, LLM）」と\n  併記しておくと親切。  \n• “CI/CD” 一箇所だけ “CI/CD” → “CI/CD パイプライン” と表記ずれ。\n\n================================================================\nC. マイナー（細部だが直すと質感向上）\n----------------------------------------------------------------\n1. Granola / o1-pro の表記ゆれ  \n   – 原文は小文字。勝手に大文字にすると固有名詞と齟齬の恐れ。\n\n2. “Bang for the buck” 的笑いのトーン  \n   見出し「15分ウォーターフォール――満足しなければ全額返金」  \n   →“or your money back” は誇大広告口調。  \n   “全額返金” で正しいが、二重ダッシュより  \n   「15 分ウォーターフォール（気に入らなければ返金）」など括弧で遊ぶと近い。\n\n3. “chewing on your test coverage” → 上記修正済み\n\n4. “dumpster fire”  \n   現訳: 「手が付けられない大惨事（dumpster fire）」  \n   OK だが () 内が長い。  \n   – 「dumpster fire（制御不能な炎上）」など簡潔に。\n\n5. リスト 2 の “Rotate in and out”  \n   現訳は意図を保っているが “ローテーション” 自体がカタカナ被り。  \n   – 「メンバーを順繰りに参加させて外す」など検討。\n\n================================================================\nD. 機械翻訳臭／ぎこちなさ\n----------------------------------------------------------------\n• 「あれこれ飛び火しまくり」「噛み砕き続ける」など比喩が\n  日本語の口頭語に寄り過ぎてやや奇異。  \n• 「…AIは直すのと同じ速さで壊すので」は意味は合うが少し硬い。  \n  →「AIは修正と同じスピードで壊すこともあるので」等。\n\n================================================================\nE. 推奨改訂例（抜粋）\n----------------------------------------------------------------\n【原文該当箇所】プロチップ①  \n現訳:  \n　まず手動で始め、あとからAIを投入  \n　iOSアプリなら、先にXcodeでプロジェクトを初期化しておくと、自動生成ファイルでAIが混乱しない。\n\n改訂案:  \n　まずは人間の手で土台を作り、次に AI をオンにする。  \n　たとえば iOS アプリなら、先に Xcode でプロジェクトを初期化しておけば  \n　自動生成ファイルに AI が惑わされない。その後は AI に残りを埋めてもらおう。  \n\n（※他箇所も同様の方針で整形）\n\n================================================================\nまとめ\n----------------------------------------------------------------\n・致命的な誤訳は少ないが、いくつかの訳抜けと  \n  スラング過多によるトーン逸脱が品質を下げている。  \n・原文の軽快さは保ちつつ、  \n  − 用語の正確さ  \n  − 適度に抑制されたカジュアルさ  \n  − 比喩の自然さ  \n  を意識して修正すれば「原文を日本語で書いたような」滑らかさになる。"
    ]
  },
  "critique_loop_details": {
    "critique_usages": [
      {
        "prompt_tokens": 5059,
        "completion_tokens": 1580,
        "total_tokens": 6639
      },
      {
        "prompt_tokens": 5007,
        "completion_tokens": 1628,
        "total_tokens": 6635
      },
      {
        "prompt_tokens": 5231,
        "completion_tokens": 1819,
        "total_tokens": 7050
      },
      {
        "prompt_tokens": 5133,
        "completion_tokens": 1844,
        "total_tokens": 6977
      }
    ],
    "feedback_usages": [
      {
        "prompt_tokens": 7062,
        "completion_tokens": 2209,
        "total_tokens": 9271
      },
      {
        "prompt_tokens": 7070,
        "completion_tokens": 2330,
        "total_tokens": 9400
      },
      {
        "prompt_tokens": 7587,
        "completion_tokens": 2313,
        "total_tokens": 9900
      },
      {
        "prompt_tokens": 7476,
        "completion_tokens": 2395,
        "total_tokens": 9871
      }
    ]
  },
  "timestamp": "2025-05-15T17:08:53.578905"
}