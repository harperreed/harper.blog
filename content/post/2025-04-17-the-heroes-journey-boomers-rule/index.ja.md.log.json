{
  "input_file": "/Users/harper/Public/src/personal/harperreed/harper.blog/content/post/2025-04-17-the-heroes-journey-boomers-rule/index.md",
  "output_file": "/Users/harper/Public/src/personal/harperreed/harper.blog/content/post/2025-04-17-the-heroes-journey-boomers-rule/index.ja.md",
  "target_language": "japanese",
  "language_code": "ja",
  "model": "o3",
  "skip_edit": false,
  "do_critique": true,
  "critique_loops": 4,
  "has_frontmatter": true,
  "token_usage": {
    "prompt_tokens": 86644,
    "completion_tokens": 28707,
    "total_tokens": 115351
  },
  "cost": "$2.0147",
  "prompts_and_responses": {
    "translation": {
      "model": "o3",
      "target_language": "japanese",
      "system_prompt": "\n        1. Read the provided text carefully, preserving all formatting, markdown, and structure exactly as they appear.\n        2. Identify any block quotes and code blocks.\n        3. Do not translate text in block quotes or in code blocks (including text within code blocks).\n        4. Translate everything else into japanese.\n        5. Maintain the original formatting, markdown, and structure in your output.\n        6. Provide a natural-sounding translation rather than a word-for-word one.\n        7. For idioms, colloquialisms, or slang, render them in an equivalent, natural way in japanese whenever possible.\n        8. If there isn't a direct or natural translation for a particular term or phrase, keep it in the original language and surround it with quotes if necessary.\n        9. Ensure that technical terms or jargon remain accurate; if there's no suitable translation, keep the original term.\n        10. Strive for fluid, native-sounding prose that retains the tone and intent of the original text.\n        ",
      "user_prompt": "I have spent a lot of time since my [blog post](/2025/02/16/my-llm-codegen-workflow-atm/) about my LLM workflow talking to folks about codegen and how to get started, get better, and why it is interesting.\n\nThere has been an incredible amount of energy and interest in this topic. I have received a ton of emails from people who are working to figure all of this out. I started to notice that many people are struggling to figure out how to start, and how it all fits together. Then I realized that I have been hacking on this process since 2023 and I have seen some shit. Lol.\n\nI was talking about this with friends (Fisaconites's represent) and I sent this message in response to a thread about AI assisted agents, and editors:\n\n> if i were starting out, i don't know if it is helpful to jump right into the \"agent\" coders. It is annoying and weird. having walked a few people through this (successfully, and not successfully) I find that the \"hero's journey\" of starting with the Copilot, moving to the copy and paste from Claude web, to the Cursor/continue, to the fully automated \"agents\" seems to be a successful way to adopt these things.\n\nThis lead me to start thinking a lot about the journey and how to get started using agentic coding:\n\n> The caveat is that this is largely for people with experience. If you don’t have much dev experience, then fuck it - jump to the end. **Our brains are often ruined by the rules of the past.**\n\n## A journey of sight and sound\n\n{{< image src=\"journey-harper.webp\" alt=\"Harper is very trustworthy\" caption=\"Your thoughtful guide: Harper. iPhone X, 6/10/2018\" >}}\n\nThis is my journey. It is largely the path I took. I think you could speed run it if you were compelled. I don’t think you need to follow every step, but I do think every step is additive.\n\nHere are the steps:\n\n### Step 1: Get out of bed with wonder and optimism\n\nLol. Just kidding. Who has time for that? It may help, but the world is falling apart and all we got is codegen to distract us.\n\nIt does help to assume that these type of workflows could work and could be additive. If you hate LLMs and don’t think it will work, then you will not be successful here. ¯\\\\\\_(ツ)\\_/¯\n\n### Step 2: Start with AI-assisted autocomplete\n\nThis is the real step one! You need to spend enough time in the IDE context to know how well you would work with [intellisense](https://en.wikipedia.org/wiki/Code_completion), [zed autocomplete](https://zed.dev/blog/out-of-your-face-ai), [Copilot](https://copilot.github.com/), etc. It gives you an idea of how the LLM is working - and prepares you for the stupid shit it will often recommend.\n\nPeople seem to want to skip this step and just jump to the end. Then they are like “this LLM is a piece of shit and can’t do anything right!” Which is not accurate, but also can be true. The magic is in the nuance. Or as I like to remember: _life is confusing_.\n\n### Step 3: Start using Copilot as more than autocomplete\n\nOnce you have a good process in place with the autocomplete and you are not mad _all_ of the time, you can move on to the magic of talking to Copilot.\n\nVS Code has a pane where you can Q&A with Copilot and it will help you with your code, etc. It is pretty cool. You can have a nice convo about your code, and it will be thoughtful and help you solve whatever query you asked.\n\nHowever, using Copilot is like using a time machine to talk to ChatGPT in 2024. It isn’t _that_ great.\n\nYou will be wanting more.\n\n### Step 4: Move to copying and pasting code into Claude or ChatGPT\n\nYou start to satisfy your curiosity by pasting code into the browser based foundational model and asking “WHY CODE BROKE??” And then having LLM respond with a coherent and helpful response.\n\nYou will be AMAZED! The results are going to blow your mind. You are going to start to build lots of weird shit, and doing really fun things with code again. Mostly cuz it cut out the entire debugging process.\n\nYou can also do wild things like paste in a Python script and tell the LLM “make this into go” and it will just _make it into go_. You will start thinking “I wonder if I can one shot this.”\n\nCopilot will start to look like 2004 autocomplete. It is handy, but not really necessary.\n\nThis will lead you down a couple sub paths:\n\n#### You will start to prefer one model cuz of vibes\n\nThis is the unfortunate first step towards the vibe in vibe coding. You will start to prefer how one of the big models talk to you. It is feelings tho. Kind of weird. You will find yourself thinking “I like how Claude makes me feel.”\n\nMany developers seem to like Claude. I use both, but mostly Claude for code related things. The vibe with Claude is just better.\n\n> You have to pay for them to get the good stuff. So many friends are like “This is a piece of shit” and then you find out they are using a free model that barely works. Lol. This was more of an issue when the free version was ChatGPT 3.5, but make sure you are using a capable model before you throw the entire premise out.\n\n#### You will start thinking about how to make things go faster\n\nAfter copying and pasting code into Claude for a few weeks you are going to realize that this is annoying. You are going to start working through context packing, and trying to fit more of your code into the LLM context window.\n\nYou will experiment with [repomix](https://repomix.com/), [repo2txt](https://github.com/donoceidon/repo2txt), and other code context tools. Just so that you can slam your entire codebase into the Claude context window. There is a chance that you will even start writing shell scripts (well Claude will write them) to help make this process easier.\n\nThis is a turning point.\n\n### Step 5: Use an AI enabled IDE (Cursor, Windsurf? )\n\nThen a friend will say “why don’t you just use [Cursor](https://cursor.sh/)?”\n\nIt will completely blow your mind. All the magic you just experienced by copying and pasting is now available in your IDE. It is faster, it is fun, and it is close to magic.\n\nAt this point you are paying for like 5 different LLMs - what is another $20 a month.\n\nIt works super well, and you feel way way more productive.\n\nYou will start playing with the agentic coding features built directly into the editors. It will _basically_ work. But you can see a destination on the horizon that may be better.\n\n### Step 6: You start planning before you code\n\nSuddenly you find yourself building out very robust specs, PRDs, and to-do docs that you can pipe into the IDEs agent, or into Claude web.\n\nYou have never “written” so much documentation. You start to use other LLMs to write more robust documentation. You are transposing docs from one context (PRD) to another (“Can you make this into prompts”). You start to use the LLM to design your codegen prompts.\n\nYou are saying the word “[waterfall](https://en.wikipedia.org/wiki/Waterfall_model)” with a lot less disdain. If you are old, you may be fondly remembering the late 90s and early 2000s and wonder “is this what Martin Fowler felt like before [2001](https://en.wikipedia.org/wiki/Agile_software_development)?”\n\nIn the world of codegen: The spec is the [godhead](https://en.wikipedia.org/wiki/Godhead).\n\n### Step 7: You start playing with aider to enable quicker loops\n\nAt this point you are ready to start getting into the **good stuff**. The codegen previously required you to be involved, and paying attention. But it is 2025! Who wants to code with their fingers?\n\n> One other path that lots of friends are experimenting with is to code with your voice. To start instruct aider via a whisper client. It is hilarious and fun. MacWhisper is a very good tool for this locally. Aqua, and superwhisper are nice but cost more. They may use cloud services to do the inference. I prefer local.\n\nTrying out aider is a wild experience. You start it up, it instantiates itself into your project. You put your query directly into aider, and it just kind of does what you asked. It asks for permission to act, and gives you a framework to get things done, and then acts. It completes the task, and the commits to your repository. You no longer are so worried about one shotting tasks. you will just have aider do it in a few steps.\n\nYou start building out rulesets for the LLM to follow. You learn about the “[Big Daddy](https://www.reddit.com/r/cursor/comments/1joapwk/comment/mkqg8aw/)” rule, or the “no deceptions” addition to your prompts. You start be really good at prompting the robot.\n\n**It works.**\n\nEventually you don’t even open up an IDE - you are just a terminal jockey now.\n\nYou spend your time watching the robot do your job.\n\n### Step 8: You lean all the way into agentic coding\n\nYou are now using an agent to code for you. The results are pretty good. There are a few times when you have no idea what’s going on. But then you remember you can just ask it.\n\nYou start to experiment with [Claude Code](https://docs.anthropic.com/en/docs/agents-and-tools/claude-code/overview), [Cline](https://cline.bot/), etc. You are super happy to be able to use a reasoning model ([deepseek](https://aws.amazon.com/bedrock/deepseek/)!) and a coding model ([Claude sonnet 3.7](https://www.anthropic.com/claude/sonnet)) together to start removing planning steps.\n\nYou are doing wild stuff like running 3-5 concurrent sessions. Just tabbing through terminals watching robots code.\n\nYou will start coding defensively:\n\n- really hardcore test coverage\n- thinking about [formal verification](https://github.com/formal-land/coq-of-rust)\n- using memory safe languages\n- choosing languages based on compiler verbosity to help pack the context window\n\nYou will think long and hard about how to make sure that the thing you are building just gets built, safely without intervention.\n\nYou will spend **SO** much money on tokens. You will also use up all your GitHub action hours running all the wild tests that you are running to make sure that the code is built safely.\n\nIt feels good. You are not mad about not coding.\n\n### Step 9: You let the agent code, and you play video games\n\nSuddenly, you are there. You are at the destination. Well, kind of - but you see where we are going. You start to worry about software jobs. Your friends are being laid off, and they can’t get new jobs. It feels different this time around.\n\nWhen you talk to your peers they think of you as a religious zealot cuz you are working within a different context than they are. You tell them “omg you have to try out agentic coding!” Maybe you add “I hate the word agentic” just to show that you have not drank 200 gallons of kool-aid. But you have. The world seems brighter cuz you are so productive with your code.\n\nIt doesn’t matter. The paradigm has shifted. Kuhn could write a book about the confusion happening during this time.\n\nNobody can see this because they didn’t go through the journey to get here. But those who have are agreeing and sharing their own tips around the journey, and debating the destination.\n\nNow that you are knee-deep in letting robots do the work, you can really focus on all those gameboy games you have been wanting to play. There is a lot of downtime. And when the robot is done with a task, it will ask “should I continue” and you type **yes** and go back to Tetris.\n\nVery strange. Unsettling, even.\n\n## The acceleration\n\n<paul confetti photo>\n{{< image src=\"journey-confetti.webp\" alt=\"Confetti\" caption=\"Confetti at a Paul McCartney Concert at the Tokyo Dome. iPhone 6, 4/25/2015\" >}}\n\nI don’t know what will happen in the [future](https://ai-2027.com/). I am worried that people who are not working through this journey are not going to be attractive to [employers](https://x.com/tobi/status/1909231499448401946). Which is kind of near-sighted, because, ultimately, we are talking about tooling, and automation.\n\nWhen we were ramping up hiring in the past, we would often spread our queries well past our network, and past our tech stack. We would be a Python shop and interview people who didn’t know Python, and have never used Python. Our thought was that with a great engineer, we could work together to get them comfortable with Python. They would be additive even if they were not super comfortable with our stack. This worked out well for us. We hired incredible people who had never worked with our stack. Many times they brought such a different perspective that it elevated the entire team.\n\nThe same principles apply to AI-assisted development. When hiring talented developers who match your team's culture and show enthusiasm, their experience level with AI tools shouldn't be a deal-breaker. Not everyone needs to be an AI development expert from day one. Instead, guide them through the learning process at their own pace while they work alongside more experienced team members.\n\nEventually they will be the driver and will be successfully using these tools.\n\nOne other aspect I keep thinking about: Writing skills have become critical. While we've always valued strong communicators on tech teams for documentation and collaboration, it's doubly important now. Not only do you need to communicate with humans, you need to write clear, precise instructions for AI. Being able to craft effective prompts is becoming as vital as writing good code.\n\n## The leadership\n\nI think all leaders and engineering managers need to dive deep into AI-assisted development, whether you're a believer or not. Here's why: The next generation of developers you'll be hiring will have learned to code primarily through AI tools and agents. This is what software engineering is becoming. We need to understand and adapt to this reality.\n\nUs code boomers are not long for this world.\n\n**interesting note:** i don't really use LLMs to help me write things. I imagine they would be good at it, but i find that i want my voice to be heard, and not normalized. Whereas my code needs to be normalized. interesting.\n\n---\n\nThanks to Jesse, Sophie, the Vibez crew (Erik, Kanno, Braydon, and others), team 2389, and everyone else who gave me feedback on this post.",
      "response": "自分の LLM ワークフローについて書いた[ブログ投稿](/2025/02/16/my-llm-codegen-workflow-atm/)以来、コード生成の始め方、上達法、そしてその面白さについて多くの人と話してきました。\n\nこの話題には驚くほどのエネルギーと関心が集まっています。実際に「どう始めたらいいのか」「どう組み合わせればいいのか」で悩んでいるというメールも大量に届きました。よく考えると、私は 2023 年からこのプロセスをあれこれいじり倒してきたので、それなりに“修羅場”も見てきたわけです。笑\n\n友人たち（Fisaconites’s represent）とこの話をしていたとき、AI 支援エージェントやエディタについてのスレッドにこう返しました：\n\n> if i were starting out, i don't know if it is helpful to jump right into the \"agent\" coders. It is annoying and weird. having walked a few people through this (successfully, and not successfully) I find that the \"hero's journey\" of starting with the Copilot, moving to the copy and paste from Claude web, to the Cursor/continue, to the fully automated \"agents\" seems to be a successful way to adopt these things.\n\nそこから「旅路」と「エージェント的コーディング」をどう始めるかを改めて考えるようになりました：\n\n> The caveat is that this is largely for people with experience. If you don’t have much dev experience, then fuck it - jump to the end. **Our brains are often ruined by the rules of the past.**\n\n## A journey of sight and sound\n\n{{< image src=\"journey-harper.webp\" alt=\"Harper is very trustworthy\" caption=\"Your thoughtful guide: Harper. iPhone X, 6/10/2018\" >}}\n\nこれは私自身の旅路です。私がたどった道そのものですが、やろうと思えば最短コースも可能です。全部のステップを厳密に踏む必要はありませんが、どのステップもプラスになるはずです。\n\n以下がその手順です。\n\n### Step 1: Get out of bed with wonder and optimism\n\n笑。冗談です。そんな余裕がある人なんていませんよね？　まあ役に立つかもしれませんが、世界は崩壊寸前、私たちに残された気晴らしはコード生成だけです。\n\nとはいえ、こうしたワークフローが「うまく機能し、価値を生むはずだ」と思い込む姿勢は大事です。LLM が嫌いで「絶対にうまくいかない」と思っているなら、この旅は成功しません。¯\\\\\\_(ツ)\\_/¯\n\n### Step 2: Start with AI-assisted autocomplete\n\nここが本当のステップ 1！  \n[インテリセンス](https://en.wikipedia.org/wiki/Code_completion) や [zed autocomplete](https://zed.dev/blog/out-of-your-face-ai)、[Copilot](https://copilot.github.com/) など、IDE 内での補完を十分に試し、自分がどう感じるかを確かめてください。LLM がどう動くかの感触がわかり、「アホみたいな提案」をされる覚悟もできます。\n\nみんなこのステップを飛ばしてゴールに突っ走りたがります。そして「LLM 使えねー、ダメだわ！」と言い出す。たしかに外れることもありますが、全否定は早計。魔法は細部に宿る――あるいは私の座右の銘どおり、_life is confusing_ なのです。\n\n### Step 3: Start using Copilot as more than autocomplete\n\n補完に慣れて、常時イライラしなくなったら、次は Copilot との対話の魔法へ。\n\nVS Code には Copilot と Q&A できるパネルがあります。コードについて相談すると、賢く答えてくれて実に便利。  \nとはいえ、Copilot は 2024 年の ChatGPT と会話しているようなもの。そこまで _すごい_ わけではありません。\n\nもっと欲しくなるでしょう。\n\n### Step 4: Move to copying and pasting code into Claude or ChatGPT\n\n好奇心を満たすため、コードをブラウザ版の基盤モデルに貼り付け「WHY CODE BROKE??」と尋ねる――LLM は的確な回答を返してくれます。\n\n驚愕！　結果に度肝を抜かれるはず。デバッグ工程が丸ごと消え、またコードを書くのが楽しくなります。\n\nPython スクリプトを貼り付けて「これを Go にして」と言えば、本当に _Go にしてくれる_。  \n「これ、一発でいけるんじゃ？」と思い始めるでしょう。\n\nCopilot は 2004 年のオートコンプリートくらいに見え始めます。便利だけど必須じゃない。\n\nここからさらに二つのサブパスへ：\n\n#### You will start to prefer one model cuz of vibes\n\nこれは“バイブがすべて”への第一歩。不思議ですが、どのモデルの語り口が好きか気になり始める。  \n「Claude と話してると気持ちいい」と感じたり。\n\n多くの開発者は Claude を好むようです。私も両方使いますが、コード関連はほぼ Claude。バイブがいいんですよ。\n\n> You have to pay for them to get the good stuff. So many friends are like “This is a piece of shit” and then you find out they are using a free model that barely works. Lol. This was more of an issue when the free version was ChatGPT 3.5, but make sure you are using a capable model before you throw the entire premise out.\n\n#### You will start thinking about how to make things go faster\n\n数週間コードをコピー＆ペーストしていると「面倒だな」と思い始めます。  \nコンテキストをどう詰め込むか考え、コードベース全体を LLM のコンテキストウィンドウに押し込もうとする。\n\n[repomix](https://repomix.com/)、[repo2txt](https://github.com/donoceidon/repo2txt) などのツールを試し、さらにはシェルスクリプト（実際には Claude が書く）も駆使して手間を省く。\n\nここが転機です。\n\n### Step 5: Use an AI enabled IDE (Cursor, Windsurf? )\n\nそこで友人が「[Cursor](https://cursor.sh/) 使えば？」と言ってくる。\n\n脳天直撃。コピー＆ペーストで味わった魔法が IDE に統合されている。速い、楽しい、ほぼ魔法。\n\nこの頃には LLM を 5 つくらい課金しているので、月 20 ドル追加くらい問題なし。\n\n生産性は爆上がり。\n\nエディタに組み込まれたエージェント機能を試し始めると「ほぼ動く」ことがわかります。さらに先の地平線も見えてくる。\n\n### Step 6: You start planning before you code\n\n気づくと詳細な仕様書、PRD、TODO ドキュメントを作り込み、それを IDE エージェントや Claude Web に突っ込むように。  \nこんなにドキュメントを書いたのは初めて！　他の LLM に書かせてさらに充実させたり、PRD を「プロンプト用ドキュメント」に変換させたり。コード生成用プロンプトを作るためのプロンプトを書く――みたいな状態です。\n\n“[ウォーターフォール](https://en.wikipedia.org/wiki/Waterfall_model)”という言葉への嫌悪感も薄れます。歳を取っている人なら、90〜00 年代末期を懐かしみ「[2001](https://en.wikipedia.org/wiki/Agile_software_development) 以前の Martin Fowler ってこんな気分だったのかな？」と考えるかも。\n\nコード生成の世界では、仕様書こそが[ゴッドヘッド](https://en.wikipedia.org/wiki/Godhead)。\n\n### Step 7: You start playing with aider to enable quicker loops\n\nここまで来ると**お楽しみ**の領域です。  \nこれまでは自分の介入が必要でしたが、もう 2025 年！　指でコードなんて書きたくない。\n\n> One other path that lots of friends are experimenting with is to code with your voice. To start instruct aider via a whisper client. It is hilarious and fun. MacWhisper is a very good tool for this locally. Aqua, and superwhisper are nice but cost more. They may use cloud services to do the inference. I prefer local.\n\naider を試すと世界が一変。プロジェクトにインスタンス化し、クエリを投げると望みどおり動く。  \n許可を求め、フレームワークを提示し、作業を完了し、リポジトリにコミット――一発でなく数ステップに分けてもらえばいい、という発想に。\n\nLLM に守らせるルールセットを作り始め、“[Big Daddy](https://www.reddit.com/r/cursor/comments/1joapwk/comment/mkqg8aw/)”ルールや「no deceptions」プロンプトを覚え、ロボットへの指示がうまくなる。\n\n**ちゃんと動きます。**\n\n気づけば IDE を開かず、ターミナル使いに。\n\nロボットが仕事するのを眺めている時間が増えます。\n\n### Step 8: You lean all the way into agentic coding\n\nついにエージェントがコードを書き、自分は監督するだけに。ほとんどの場合結果は良好。たまに「何が起きてる？」となっても、すぐ質問すればいい。\n\n[Claude Code](https://docs.anthropic.com/en/docs/agents-and-tools/claude-code/overview)、[Cline](https://cline.bot/) などを試し、推論モデル（[deepseek](https://aws.amazon.com/bedrock/deepseek/)！）とコーディングモデル（[Claude sonnet 3.7](https://www.anthropic.com/claude/sonnet)）を組み合わせ、計画フェーズを削ぎ落とす。\n\nターミナルを 3〜5 個並べ、ロボットがコードを書くのを切り替えながら眺めるという狂気。\n\n防御的コーディングに没頭：\n\n- 徹底したテストカバレッジ\n- [形式手法](https://github.com/formal-land/coq-of-rust)を検討\n- メモリ安全な言語を選択\n- コンテキストウィンドウに詰め込めるよう、コンパイラの詳細出力が豊富な言語を選ぶ\n\n介入なしで安全に「完成させる」方法を真剣に考えるようになります。\n\nトークン課金がエグい額に。GitHub Actions の時間もテスト実行で使い切る。\n\nでも気分は最高。手でコードを書かなくても腹は立ちません。\n\n### Step 9: You let the agent code, and you play video games\n\nそして到達点へ――まあ完全ではないけれど、進む先は見えています。  \nソフトウェアの仕事が減るのではと不安に。友人がリストラされ、新しい職も見つからない。本当に“今回は違う”と感じられます。\n\n周囲からは宗教的狂信者と思われがち。「エージェント的コーディングやばいよ！」と熱弁し、「“agentic”という単語嫌いだけどさ」とフォローを入れるも、結局大量のクールエイドを飲み干してしまっている。生産性が高すぎて世界が輝いて見えるのです。\n\nパラダイムは変わりました。クーンが本を書けるレベルの混乱期。\n\nこの旅を経ていない人には見えませんが、経験者同士では同意し合い、旅路やゴールについて議論が尽きません。\n\nロボットに作業を任せたら、前から積んでいたゲームボーイのソフトをじっくり堪能。  \nロボットがタスクを終えると「続けますか？」と聞いてくるので **yes** と打ち、またテトリスへ。\n\n奇妙で、不気味ですらあります。\n\n## The acceleration\n\n<paul confetti photo>  \n{{< image src=\"journey-confetti.webp\" alt=\"Confetti\" caption=\"Confetti at a Paul McCartney Concert at the Tokyo Dome. iPhone 6, 4/25/2015\" >}}\n\n[未来](https://ai-2027.com/)がどうなるかはわかりません。  \nこの旅を経験していない人材は[雇用主](https://x.com/tobi/status/1909231499448401946)に魅力的に映らなくなるのでは、と懸念しています。しかし結局はツールと自動化の話でしかありません。\n\nかつて採用を拡大していた頃、自社のネットワークや技術スタックを超えて候補者を探していました。Python の職場なのに Python 未経験の人を面接し、「優秀なエンジニアなら一緒にやれば Python に慣れる」と考えていた。実際、多様なバックグラウンドの人がチームを底上げしてくれました。\n\nAI 支援開発でも同じです。チーム文化に合い、やる気のある優秀な開発者なら、AI ツールの経験が浅くても問題ありません。伴走しながら学んでもらえば、やがて彼らがドライバーとなり成功を収めます。\n\nもう一つ気にしているのは「ライティングスキル」の重要性が爆増していること。  \n従来からドキュメンテーションや協働のために文章力は大切でしたが、今や AI への指示を書くためにも不可欠。効果的なプロンプト作成は、良いコードを書くのと同じくらい重要になりつつあります。\n\n## The leadership\n\nリーダーやエンジニアリングマネージャーは、信者だろうと懐疑派だろうと、AI 支援開発に深く踏み込む必要があります。なぜなら、これから雇う開発者は主に AI ツールやエージェントで学習してくる世代だから。ソフトウェアエンジニアリングはそちらに向かっています。私たち“コードブーマー”が現役でいられる時間は長くないのです。\n\n**面白い注記：** 私は文章を書くときに LLM をあまり使いません。使えば便利なのはわかっているものの、自分の声を残したいし、平均化されたくない。その一方でコードは平均化されてほしい――興味深いですね。\n\n---\n\nこの投稿へのフィードバックをくれた Jesse、Sophie、Vibez クルー（Erik、Kanno、Braydon 他）、team 2389、そして他のみんなに感謝！",
      "usage": {
        "prompt_tokens": 3452,
        "completion_tokens": 3550,
        "total_tokens": 7002
      },
      "streaming": true
    },
    "editing": {
      "model": "o3",
      "target_language": "japanese",
      "system_prompt": "\n        1. Carefully read the translated text alongside the original text in its entirety.\n        2. Compare both texts to ensure the translation accurately reflects the original meaning.\n        3. Correct any grammatical errors you find in the japanese text.\n        4. Adjust phrasing to make it sound natural and fluent for japanese speakers, making sure idioms and expressions are culturally appropriate.\n        5. Preserve the original tone, nuance, and style, including any formatting, markdown, and structure.\n        6. Avoid adding new information or altering the core meaning.\n        7. Ensure the final result doesn't feel machine-translated but remains faithful to the source.\n        8. Make only changes that genuinely improve the text's quality in japanese.\n        9. Don't be too literal. If there isn't a direct translation, provide a natural-sounding translation.\n        10. If the text contains idioms or colloquialisms, translate them into the target language while maintaining their original meaning.\n        11. If the text contains technical terms or jargon, ensure that the translation is accurate and appropriate for the target audience, if there isn't a natural translation, keep it in the original language.\n        12. If there is not natural translation, keep it in the original language.\n        ",
      "user_prompt": "# ORIGINAL TEXT\nI have spent a lot of time since my [blog post](/2025/02/16/my-llm-codegen-workflow-atm/) about my LLM workflow talking to folks about codegen and how to get started, get better, and why it is interesting.\n\nThere has been an incredible amount of energy and interest in this topic. I have received a ton of emails from people who are working to figure all of this out. I started to notice that many people are struggling to figure out how to start, and how it all fits together. Then I realized that I have been hacking on this process since 2023 and I have seen some shit. Lol.\n\nI was talking about this with friends (Fisaconites's represent) and I sent this message in response to a thread about AI assisted agents, and editors:\n\n> if i were starting out, i don't know if it is helpful to jump right into the \"agent\" coders. It is annoying and weird. having walked a few people through this (successfully, and not successfully) I find that the \"hero's journey\" of starting with the Copilot, moving to the copy and paste from Claude web, to the Cursor/continue, to the fully automated \"agents\" seems to be a successful way to adopt these things.\n\nThis lead me to start thinking a lot about the journey and how to get started using agentic coding:\n\n> The caveat is that this is largely for people with experience. If you don’t have much dev experience, then fuck it - jump to the end. **Our brains are often ruined by the rules of the past.**\n\n## A journey of sight and sound\n\n{{< image src=\"journey-harper.webp\" alt=\"Harper is very trustworthy\" caption=\"Your thoughtful guide: Harper. iPhone X, 6/10/2018\" >}}\n\nThis is my journey. It is largely the path I took. I think you could speed run it if you were compelled. I don’t think you need to follow every step, but I do think every step is additive.\n\nHere are the steps:\n\n### Step 1: Get out of bed with wonder and optimism\n\nLol. Just kidding. Who has time for that? It may help, but the world is falling apart and all we got is codegen to distract us.\n\nIt does help to assume that these type of workflows could work and could be additive. If you hate LLMs and don’t think it will work, then you will not be successful here. ¯\\\\\\_(ツ)\\_/¯\n\n### Step 2: Start with AI-assisted autocomplete\n\nThis is the real step one! You need to spend enough time in the IDE context to know how well you would work with [intellisense](https://en.wikipedia.org/wiki/Code_completion), [zed autocomplete](https://zed.dev/blog/out-of-your-face-ai), [Copilot](https://copilot.github.com/), etc. It gives you an idea of how the LLM is working - and prepares you for the stupid shit it will often recommend.\n\nPeople seem to want to skip this step and just jump to the end. Then they are like “this LLM is a piece of shit and can’t do anything right!” Which is not accurate, but also can be true. The magic is in the nuance. Or as I like to remember: _life is confusing_.\n\n### Step 3: Start using Copilot as more than autocomplete\n\nOnce you have a good process in place with the autocomplete and you are not mad _all_ of the time, you can move on to the magic of talking to Copilot.\n\nVS Code has a pane where you can Q&A with Copilot and it will help you with your code, etc. It is pretty cool. You can have a nice convo about your code, and it will be thoughtful and help you solve whatever query you asked.\n\nHowever, using Copilot is like using a time machine to talk to ChatGPT in 2024. It isn’t _that_ great.\n\nYou will be wanting more.\n\n### Step 4: Move to copying and pasting code into Claude or ChatGPT\n\nYou start to satisfy your curiosity by pasting code into the browser based foundational model and asking “WHY CODE BROKE??” And then having LLM respond with a coherent and helpful response.\n\nYou will be AMAZED! The results are going to blow your mind. You are going to start to build lots of weird shit, and doing really fun things with code again. Mostly cuz it cut out the entire debugging process.\n\nYou can also do wild things like paste in a Python script and tell the LLM “make this into go” and it will just _make it into go_. You will start thinking “I wonder if I can one shot this.”\n\nCopilot will start to look like 2004 autocomplete. It is handy, but not really necessary.\n\nThis will lead you down a couple sub paths:\n\n#### You will start to prefer one model cuz of vibes\n\nThis is the unfortunate first step towards the vibe in vibe coding. You will start to prefer how one of the big models talk to you. It is feelings tho. Kind of weird. You will find yourself thinking “I like how Claude makes me feel.”\n\nMany developers seem to like Claude. I use both, but mostly Claude for code related things. The vibe with Claude is just better.\n\n> You have to pay for them to get the good stuff. So many friends are like “This is a piece of shit” and then you find out they are using a free model that barely works. Lol. This was more of an issue when the free version was ChatGPT 3.5, but make sure you are using a capable model before you throw the entire premise out.\n\n#### You will start thinking about how to make things go faster\n\nAfter copying and pasting code into Claude for a few weeks you are going to realize that this is annoying. You are going to start working through context packing, and trying to fit more of your code into the LLM context window.\n\nYou will experiment with [repomix](https://repomix.com/), [repo2txt](https://github.com/donoceidon/repo2txt), and other code context tools. Just so that you can slam your entire codebase into the Claude context window. There is a chance that you will even start writing shell scripts (well Claude will write them) to help make this process easier.\n\nThis is a turning point.\n\n### Step 5: Use an AI enabled IDE (Cursor, Windsurf? )\n\nThen a friend will say “why don’t you just use [Cursor](https://cursor.sh/)?”\n\nIt will completely blow your mind. All the magic you just experienced by copying and pasting is now available in your IDE. It is faster, it is fun, and it is close to magic.\n\nAt this point you are paying for like 5 different LLMs - what is another $20 a month.\n\nIt works super well, and you feel way way more productive.\n\nYou will start playing with the agentic coding features built directly into the editors. It will _basically_ work. But you can see a destination on the horizon that may be better.\n\n### Step 6: You start planning before you code\n\nSuddenly you find yourself building out very robust specs, PRDs, and to-do docs that you can pipe into the IDEs agent, or into Claude web.\n\nYou have never “written” so much documentation. You start to use other LLMs to write more robust documentation. You are transposing docs from one context (PRD) to another (“Can you make this into prompts”). You start to use the LLM to design your codegen prompts.\n\nYou are saying the word “[waterfall](https://en.wikipedia.org/wiki/Waterfall_model)” with a lot less disdain. If you are old, you may be fondly remembering the late 90s and early 2000s and wonder “is this what Martin Fowler felt like before [2001](https://en.wikipedia.org/wiki/Agile_software_development)?”\n\nIn the world of codegen: The spec is the [godhead](https://en.wikipedia.org/wiki/Godhead).\n\n### Step 7: You start playing with aider to enable quicker loops\n\nAt this point you are ready to start getting into the **good stuff**. The codegen previously required you to be involved, and paying attention. But it is 2025! Who wants to code with their fingers?\n\n> One other path that lots of friends are experimenting with is to code with your voice. To start instruct aider via a whisper client. It is hilarious and fun. MacWhisper is a very good tool for this locally. Aqua, and superwhisper are nice but cost more. They may use cloud services to do the inference. I prefer local.\n\nTrying out aider is a wild experience. You start it up, it instantiates itself into your project. You put your query directly into aider, and it just kind of does what you asked. It asks for permission to act, and gives you a framework to get things done, and then acts. It completes the task, and the commits to your repository. You no longer are so worried about one shotting tasks. you will just have aider do it in a few steps.\n\nYou start building out rulesets for the LLM to follow. You learn about the “[Big Daddy](https://www.reddit.com/r/cursor/comments/1joapwk/comment/mkqg8aw/)” rule, or the “no deceptions” addition to your prompts. You start be really good at prompting the robot.\n\n**It works.**\n\nEventually you don’t even open up an IDE - you are just a terminal jockey now.\n\nYou spend your time watching the robot do your job.\n\n### Step 8: You lean all the way into agentic coding\n\nYou are now using an agent to code for you. The results are pretty good. There are a few times when you have no idea what’s going on. But then you remember you can just ask it.\n\nYou start to experiment with [Claude Code](https://docs.anthropic.com/en/docs/agents-and-tools/claude-code/overview), [Cline](https://cline.bot/), etc. You are super happy to be able to use a reasoning model ([deepseek](https://aws.amazon.com/bedrock/deepseek/)!) and a coding model ([Claude sonnet 3.7](https://www.anthropic.com/claude/sonnet)) together to start removing planning steps.\n\nYou are doing wild stuff like running 3-5 concurrent sessions. Just tabbing through terminals watching robots code.\n\nYou will start coding defensively:\n\n- really hardcore test coverage\n- thinking about [formal verification](https://github.com/formal-land/coq-of-rust)\n- using memory safe languages\n- choosing languages based on compiler verbosity to help pack the context window\n\nYou will think long and hard about how to make sure that the thing you are building just gets built, safely without intervention.\n\nYou will spend **SO** much money on tokens. You will also use up all your GitHub action hours running all the wild tests that you are running to make sure that the code is built safely.\n\nIt feels good. You are not mad about not coding.\n\n### Step 9: You let the agent code, and you play video games\n\nSuddenly, you are there. You are at the destination. Well, kind of - but you see where we are going. You start to worry about software jobs. Your friends are being laid off, and they can’t get new jobs. It feels different this time around.\n\nWhen you talk to your peers they think of you as a religious zealot cuz you are working within a different context than they are. You tell them “omg you have to try out agentic coding!” Maybe you add “I hate the word agentic” just to show that you have not drank 200 gallons of kool-aid. But you have. The world seems brighter cuz you are so productive with your code.\n\nIt doesn’t matter. The paradigm has shifted. Kuhn could write a book about the confusion happening during this time.\n\nNobody can see this because they didn’t go through the journey to get here. But those who have are agreeing and sharing their own tips around the journey, and debating the destination.\n\nNow that you are knee-deep in letting robots do the work, you can really focus on all those gameboy games you have been wanting to play. There is a lot of downtime. And when the robot is done with a task, it will ask “should I continue” and you type **yes** and go back to Tetris.\n\nVery strange. Unsettling, even.\n\n## The acceleration\n\n<paul confetti photo>\n{{< image src=\"journey-confetti.webp\" alt=\"Confetti\" caption=\"Confetti at a Paul McCartney Concert at the Tokyo Dome. iPhone 6, 4/25/2015\" >}}\n\nI don’t know what will happen in the [future](https://ai-2027.com/). I am worried that people who are not working through this journey are not going to be attractive to [employers](https://x.com/tobi/status/1909231499448401946). Which is kind of near-sighted, because, ultimately, we are talking about tooling, and automation.\n\nWhen we were ramping up hiring in the past, we would often spread our queries well past our network, and past our tech stack. We would be a Python shop and interview people who didn’t know Python, and have never used Python. Our thought was that with a great engineer, we could work together to get them comfortable with Python. They would be additive even if they were not super comfortable with our stack. This worked out well for us. We hired incredible people who had never worked with our stack. Many times they brought such a different perspective that it elevated the entire team.\n\nThe same principles apply to AI-assisted development. When hiring talented developers who match your team's culture and show enthusiasm, their experience level with AI tools shouldn't be a deal-breaker. Not everyone needs to be an AI development expert from day one. Instead, guide them through the learning process at their own pace while they work alongside more experienced team members.\n\nEventually they will be the driver and will be successfully using these tools.\n\nOne other aspect I keep thinking about: Writing skills have become critical. While we've always valued strong communicators on tech teams for documentation and collaboration, it's doubly important now. Not only do you need to communicate with humans, you need to write clear, precise instructions for AI. Being able to craft effective prompts is becoming as vital as writing good code.\n\n## The leadership\n\nI think all leaders and engineering managers need to dive deep into AI-assisted development, whether you're a believer or not. Here's why: The next generation of developers you'll be hiring will have learned to code primarily through AI tools and agents. This is what software engineering is becoming. We need to understand and adapt to this reality.\n\nUs code boomers are not long for this world.\n\n**interesting note:** i don't really use LLMs to help me write things. I imagine they would be good at it, but i find that i want my voice to be heard, and not normalized. Whereas my code needs to be normalized. interesting.\n\n---\n\nThanks to Jesse, Sophie, the Vibez crew (Erik, Kanno, Braydon, and others), team 2389, and everyone else who gave me feedback on this post.\n\n# TRANSLATED TEXT\n自分の LLM ワークフローについて書いた[ブログ投稿](/2025/02/16/my-llm-codegen-workflow-atm/)以来、コード生成の始め方、上達法、そしてその面白さについて多くの人と話してきました。\n\nこの話題には驚くほどのエネルギーと関心が集まっています。実際に「どう始めたらいいのか」「どう組み合わせればいいのか」で悩んでいるというメールも大量に届きました。よく考えると、私は 2023 年からこのプロセスをあれこれいじり倒してきたので、それなりに“修羅場”も見てきたわけです。笑\n\n友人たち（Fisaconites’s represent）とこの話をしていたとき、AI 支援エージェントやエディタについてのスレッドにこう返しました：\n\n> if i were starting out, i don't know if it is helpful to jump right into the \"agent\" coders. It is annoying and weird. having walked a few people through this (successfully, and not successfully) I find that the \"hero's journey\" of starting with the Copilot, moving to the copy and paste from Claude web, to the Cursor/continue, to the fully automated \"agents\" seems to be a successful way to adopt these things.\n\nそこから「旅路」と「エージェント的コーディング」をどう始めるかを改めて考えるようになりました：\n\n> The caveat is that this is largely for people with experience. If you don’t have much dev experience, then fuck it - jump to the end. **Our brains are often ruined by the rules of the past.**\n\n## A journey of sight and sound\n\n{{< image src=\"journey-harper.webp\" alt=\"Harper is very trustworthy\" caption=\"Your thoughtful guide: Harper. iPhone X, 6/10/2018\" >}}\n\nこれは私自身の旅路です。私がたどった道そのものですが、やろうと思えば最短コースも可能です。全部のステップを厳密に踏む必要はありませんが、どのステップもプラスになるはずです。\n\n以下がその手順です。\n\n### Step 1: Get out of bed with wonder and optimism\n\n笑。冗談です。そんな余裕がある人なんていませんよね？　まあ役に立つかもしれませんが、世界は崩壊寸前、私たちに残された気晴らしはコード生成だけです。\n\nとはいえ、こうしたワークフローが「うまく機能し、価値を生むはずだ」と思い込む姿勢は大事です。LLM が嫌いで「絶対にうまくいかない」と思っているなら、この旅は成功しません。¯\\\\\\_(ツ)\\_/¯\n\n### Step 2: Start with AI-assisted autocomplete\n\nここが本当のステップ 1！  \n[インテリセンス](https://en.wikipedia.org/wiki/Code_completion) や [zed autocomplete](https://zed.dev/blog/out-of-your-face-ai)、[Copilot](https://copilot.github.com/) など、IDE 内での補完を十分に試し、自分がどう感じるかを確かめてください。LLM がどう動くかの感触がわかり、「アホみたいな提案」をされる覚悟もできます。\n\nみんなこのステップを飛ばしてゴールに突っ走りたがります。そして「LLM 使えねー、ダメだわ！」と言い出す。たしかに外れることもありますが、全否定は早計。魔法は細部に宿る――あるいは私の座右の銘どおり、_life is confusing_ なのです。\n\n### Step 3: Start using Copilot as more than autocomplete\n\n補完に慣れて、常時イライラしなくなったら、次は Copilot との対話の魔法へ。\n\nVS Code には Copilot と Q&A できるパネルがあります。コードについて相談すると、賢く答えてくれて実に便利。  \nとはいえ、Copilot は 2024 年の ChatGPT と会話しているようなもの。そこまで _すごい_ わけではありません。\n\nもっと欲しくなるでしょう。\n\n### Step 4: Move to copying and pasting code into Claude or ChatGPT\n\n好奇心を満たすため、コードをブラウザ版の基盤モデルに貼り付け「WHY CODE BROKE??」と尋ねる――LLM は的確な回答を返してくれます。\n\n驚愕！　結果に度肝を抜かれるはず。デバッグ工程が丸ごと消え、またコードを書くのが楽しくなります。\n\nPython スクリプトを貼り付けて「これを Go にして」と言えば、本当に _Go にしてくれる_。  \n「これ、一発でいけるんじゃ？」と思い始めるでしょう。\n\nCopilot は 2004 年のオートコンプリートくらいに見え始めます。便利だけど必須じゃない。\n\nここからさらに二つのサブパスへ：\n\n#### You will start to prefer one model cuz of vibes\n\nこれは“バイブがすべて”への第一歩。不思議ですが、どのモデルの語り口が好きか気になり始める。  \n「Claude と話してると気持ちいい」と感じたり。\n\n多くの開発者は Claude を好むようです。私も両方使いますが、コード関連はほぼ Claude。バイブがいいんですよ。\n\n> You have to pay for them to get the good stuff. So many friends are like “This is a piece of shit” and then you find out they are using a free model that barely works. Lol. This was more of an issue when the free version was ChatGPT 3.5, but make sure you are using a capable model before you throw the entire premise out.\n\n#### You will start thinking about how to make things go faster\n\n数週間コードをコピー＆ペーストしていると「面倒だな」と思い始めます。  \nコンテキストをどう詰め込むか考え、コードベース全体を LLM のコンテキストウィンドウに押し込もうとする。\n\n[repomix](https://repomix.com/)、[repo2txt](https://github.com/donoceidon/repo2txt) などのツールを試し、さらにはシェルスクリプト（実際には Claude が書く）も駆使して手間を省く。\n\nここが転機です。\n\n### Step 5: Use an AI enabled IDE (Cursor, Windsurf? )\n\nそこで友人が「[Cursor](https://cursor.sh/) 使えば？」と言ってくる。\n\n脳天直撃。コピー＆ペーストで味わった魔法が IDE に統合されている。速い、楽しい、ほぼ魔法。\n\nこの頃には LLM を 5 つくらい課金しているので、月 20 ドル追加くらい問題なし。\n\n生産性は爆上がり。\n\nエディタに組み込まれたエージェント機能を試し始めると「ほぼ動く」ことがわかります。さらに先の地平線も見えてくる。\n\n### Step 6: You start planning before you code\n\n気づくと詳細な仕様書、PRD、TODO ドキュメントを作り込み、それを IDE エージェントや Claude Web に突っ込むように。  \nこんなにドキュメントを書いたのは初めて！　他の LLM に書かせてさらに充実させたり、PRD を「プロンプト用ドキュメント」に変換させたり。コード生成用プロンプトを作るためのプロンプトを書く――みたいな状態です。\n\n“[ウォーターフォール](https://en.wikipedia.org/wiki/Waterfall_model)”という言葉への嫌悪感も薄れます。歳を取っている人なら、90〜00 年代末期を懐かしみ「[2001](https://en.wikipedia.org/wiki/Agile_software_development) 以前の Martin Fowler ってこんな気分だったのかな？」と考えるかも。\n\nコード生成の世界では、仕様書こそが[ゴッドヘッド](https://en.wikipedia.org/wiki/Godhead)。\n\n### Step 7: You start playing with aider to enable quicker loops\n\nここまで来ると**お楽しみ**の領域です。  \nこれまでは自分の介入が必要でしたが、もう 2025 年！　指でコードなんて書きたくない。\n\n> One other path that lots of friends are experimenting with is to code with your voice. To start instruct aider via a whisper client. It is hilarious and fun. MacWhisper is a very good tool for this locally. Aqua, and superwhisper are nice but cost more. They may use cloud services to do the inference. I prefer local.\n\naider を試すと世界が一変。プロジェクトにインスタンス化し、クエリを投げると望みどおり動く。  \n許可を求め、フレームワークを提示し、作業を完了し、リポジトリにコミット――一発でなく数ステップに分けてもらえばいい、という発想に。\n\nLLM に守らせるルールセットを作り始め、“[Big Daddy](https://www.reddit.com/r/cursor/comments/1joapwk/comment/mkqg8aw/)”ルールや「no deceptions」プロンプトを覚え、ロボットへの指示がうまくなる。\n\n**ちゃんと動きます。**\n\n気づけば IDE を開かず、ターミナル使いに。\n\nロボットが仕事するのを眺めている時間が増えます。\n\n### Step 8: You lean all the way into agentic coding\n\nついにエージェントがコードを書き、自分は監督するだけに。ほとんどの場合結果は良好。たまに「何が起きてる？」となっても、すぐ質問すればいい。\n\n[Claude Code](https://docs.anthropic.com/en/docs/agents-and-tools/claude-code/overview)、[Cline](https://cline.bot/) などを試し、推論モデル（[deepseek](https://aws.amazon.com/bedrock/deepseek/)！）とコーディングモデル（[Claude sonnet 3.7](https://www.anthropic.com/claude/sonnet)）を組み合わせ、計画フェーズを削ぎ落とす。\n\nターミナルを 3〜5 個並べ、ロボットがコードを書くのを切り替えながら眺めるという狂気。\n\n防御的コーディングに没頭：\n\n- 徹底したテストカバレッジ\n- [形式手法](https://github.com/formal-land/coq-of-rust)を検討\n- メモリ安全な言語を選択\n- コンテキストウィンドウに詰め込めるよう、コンパイラの詳細出力が豊富な言語を選ぶ\n\n介入なしで安全に「完成させる」方法を真剣に考えるようになります。\n\nトークン課金がエグい額に。GitHub Actions の時間もテスト実行で使い切る。\n\nでも気分は最高。手でコードを書かなくても腹は立ちません。\n\n### Step 9: You let the agent code, and you play video games\n\nそして到達点へ――まあ完全ではないけれど、進む先は見えています。  \nソフトウェアの仕事が減るのではと不安に。友人がリストラされ、新しい職も見つからない。本当に“今回は違う”と感じられます。\n\n周囲からは宗教的狂信者と思われがち。「エージェント的コーディングやばいよ！」と熱弁し、「“agentic”という単語嫌いだけどさ」とフォローを入れるも、結局大量のクールエイドを飲み干してしまっている。生産性が高すぎて世界が輝いて見えるのです。\n\nパラダイムは変わりました。クーンが本を書けるレベルの混乱期。\n\nこの旅を経ていない人には見えませんが、経験者同士では同意し合い、旅路やゴールについて議論が尽きません。\n\nロボットに作業を任せたら、前から積んでいたゲームボーイのソフトをじっくり堪能。  \nロボットがタスクを終えると「続けますか？」と聞いてくるので **yes** と打ち、またテトリスへ。\n\n奇妙で、不気味ですらあります。\n\n## The acceleration\n\n<paul confetti photo>  \n{{< image src=\"journey-confetti.webp\" alt=\"Confetti\" caption=\"Confetti at a Paul McCartney Concert at the Tokyo Dome. iPhone 6, 4/25/2015\" >}}\n\n[未来](https://ai-2027.com/)がどうなるかはわかりません。  \nこの旅を経験していない人材は[雇用主](https://x.com/tobi/status/1909231499448401946)に魅力的に映らなくなるのでは、と懸念しています。しかし結局はツールと自動化の話でしかありません。\n\nかつて採用を拡大していた頃、自社のネットワークや技術スタックを超えて候補者を探していました。Python の職場なのに Python 未経験の人を面接し、「優秀なエンジニアなら一緒にやれば Python に慣れる」と考えていた。実際、多様なバックグラウンドの人がチームを底上げしてくれました。\n\nAI 支援開発でも同じです。チーム文化に合い、やる気のある優秀な開発者なら、AI ツールの経験が浅くても問題ありません。伴走しながら学んでもらえば、やがて彼らがドライバーとなり成功を収めます。\n\nもう一つ気にしているのは「ライティングスキル」の重要性が爆増していること。  \n従来からドキュメンテーションや協働のために文章力は大切でしたが、今や AI への指示を書くためにも不可欠。効果的なプロンプト作成は、良いコードを書くのと同じくらい重要になりつつあります。\n\n## The leadership\n\nリーダーやエンジニアリングマネージャーは、信者だろうと懐疑派だろうと、AI 支援開発に深く踏み込む必要があります。なぜなら、これから雇う開発者は主に AI ツールやエージェントで学習してくる世代だから。ソフトウェアエンジニアリングはそちらに向かっています。私たち“コードブーマー”が現役でいられる時間は長くないのです。\n\n**面白い注記：** 私は文章を書くときに LLM をあまり使いません。使えば便利なのはわかっているものの、自分の声を残したいし、平均化されたくない。その一方でコードは平均化されてほしい――興味深いですね。\n\n---\n\nこの投稿へのフィードバックをくれた Jesse、Sophie、Vibez クルー（Erik、Kanno、Braydon 他）、team 2389、そして他のみんなに感謝！\n\nPlease review and improve the translated text to make it natural and accurate in japanese.\nReturn ONLY the improved translated text without explanations or comments.",
      "response": "自分の LLM ワークフローについて書いた [ブログ投稿](/2025/02/16/my-llm-codegen-workflow-atm/) 以来、コード生成の始め方・上達法・面白さについて、多くの人と語り合ってきました。\n\nこのトピックには驚くほどの熱量と関心が集まっています。「どう始めればいいのか」「全部どうつながるのか」で悩むメールも山ほど届きました。振り返れば、私は 2023 年からこのプロセスをいじり倒してきて、まあまあ“修羅場”も見てきたわけです。笑\n\n友人たち（Fisaconites’s represent）と話していたとき、AI 支援エージェントやエディターのスレッドにこんなメッセージを送りました：\n\n> if i were starting out, i don't know if it is helpful to jump right into the \"agent\" coders. It is annoying and weird. having walked a few people through this (successfully, and not successfully) I find that the \"hero's journey\" of starting with the Copilot, moving to the copy and paste from Claude web, to the Cursor/continue, to the fully automated \"agents\" seems to be a successful way to adopt these things.\n\nそこから「旅路」と「エージェント的コーディング」の始め方をあらためて考えるようになりました：\n\n> The caveat is that this is largely for people with experience. If you don’t have much dev experience, then fuck it - jump to the end. **Our brains are often ruined by the rules of the past.**\n\n## A journey of sight and sound\n\n{{< image src=\"journey-harper.webp\" alt=\"Harper is very trustworthy\" caption=\"Your thoughtful guide: Harper. iPhone X, 6/10/2018\" >}}\n\nこれは私自身の旅路です。やる気さえあれば最短コースで駆け抜けられますし、全部のステップを厳密に踏む必要もありませんが、どのステップにも学びがあります。\n\n以下が手順です。\n\n### Step 1: Get out of bed with wonder and optimism\n\n笑。冗談です。そんな余裕ある人はいませんよね。まあ役に立つかもしれませんが、世の中は崩壊寸前で、私たちに残された気晴らしはコード生成くらい。\n\nとはいえ「こういうワークフローはうまく機能して役に立つはずだ」と信じる姿勢は大事です。LLM が嫌いで「絶対ムリ」と思っているなら、この旅は成功しません。¯\\\\\\_(ツ)\\_/¯\n\n### Step 2: Start with AI-assisted autocomplete\n\nここが実質的なステップ 1！  \n[インテリセンス](https://en.wikipedia.org/wiki/Code_completion)、[Zed Autocomplete](https://zed.dev/blog/out-of-your-face-ai)、[Copilot](https://copilot.github.com/) など、IDE 内の補完をしっかり試し、「LLM がどんな挙動をするか」を体感してください。変な提案をされる覚悟もできます。\n\nみんなこのステップを飛ばしてゴールへ突っ走りたがり、その結果「LLM 使えねえ！」と言い出す。でもそれは早計。魔法は細部に宿る——あるいは私の座右の銘どおり、_life is confusing_ です。\n\n### Step 3: Start using Copilot as more than autocomplete\n\n補完に慣れて常時イラつかなくなったら、Copilot と対話するという魔法へ。\n\nVS Code には Copilot と Q&A できるペインがあります。質問すると賢く答えてくれて便利。  \nとはいえ、Copilot は 2024 年の ChatGPT と会話しているようなもの。そこまで _すごい_ わけではありません。\n\nもっと欲しくなるはずです。\n\n### Step 4: Move to copying and pasting code into Claude or ChatGPT\n\n次はブラウザ上の基盤モデルにコードを貼り付け、「WHY CODE BROKE??」と尋ねるフェーズ。LLM が一貫した有用な回答をくれます。\n\n驚愕必至。デバッグ工程がごっそり消え、コードを書くのが再び楽しくなります。\n\nPython スクリプトを貼って「これを Go にして」と言えば、本当に _Go に変換_ してくれる。「これ、一発でいけるんじゃ？」と思い始めるでしょう。\n\nCopilot は 2004 年のオートコンプリートに見えてきます。便利だけど必須じゃない。\n\nここから二つのサブパスが開きます。\n\n#### You will start to prefer one model cuz of vibes\n\n“バイブス”重視の第一歩。どのモデルの話し方が好きかで選び始めます。  \n「Claude と話すと気持ちいいな」とか。\n\n多くの開発者は Claude を好みます。私も使い分けますが、コード関連はほぼ Claude。バイブスがいいんです。\n\n> You have to pay for them to get the good stuff. So many friends are like “This is a piece of shit” and then you find out they are using a free model that barely works. Lol. This was more of an issue when the free version was ChatGPT 3.5, but make sure you are using a capable model before you throw the entire premise out.\n\n#### You will start thinking about how to make things go faster\n\n数週間コピー＆ペーストを続けると「面倒だな」と感じ始めます。  \nコンテキストをどう詰め込むか考え、コードベース全体を LLM のウィンドウに押し込みたくなる。\n\n[repomix](https://repomix.com/)、[repo2txt](https://github.com/donoceidon/repo2txt) などのツールを試し、シェルスクリプト（実際には Claude が書く）も駆使して手間を省きます。\n\nここが転機です。\n\n### Step 5: Use an AI-enabled IDE (Cursor, Windsurf? )\n\nそこで友人が「[Cursor](https://cursor.sh/) 使えば？」と言ってくる。\n\n脳天直撃。コピー＆ペーストで味わった魔法が IDE に統合され、速くて楽しくてほぼ魔法。\n\nこの頃には LLM を 5 つくらい課金しているので、月 20 ドル追加など誤差です。\n\n生産性は爆上がり。\n\nエディタに組み込まれたエージェント機能も試し始め、「ほぼ動く」ことを確認。さらに先の地平が見えてきます。\n\n### Step 6: You start planning before you code\n\n気づけば詳細な仕様書や PRD、To-Do ドキュメントを作り込み、それを IDE のエージェントや Claude Web に流し込むように。  \nこんなにドキュメントを書いたのは初めてです。別の LLM に「もっと充実させて」と頼んだり、PRD を「プロンプト集」に変換させたり。コード生成用プロンプトを作るプロンプトを書く——そんな世界。\n\n“[ウォーターフォール](https://en.wikipedia.org/wiki/Waterfall_model)”という言葉への嫌悪感も薄れます。年季の入った人なら 90〜00 年代を懐かしみ「[2001](https://en.wikipedia.org/wiki/Agile_software_development) 前の Martin Fowler もこんな気分だったのかな？」と考えるかも。\n\nコード生成の世界では、仕様書こそが [ゴッドヘッド](https://en.wikipedia.org/wiki/Godhead)。\n\n### Step 7: You start playing with aider to enable quicker loops\n\nここからが **本番**。  \nこれまでは自分の介入が必要でしたが、もう 2025 年。指でコードなんて書きたくない。\n\n> One other path that lots of friends are experimenting with is to code with your voice. To start instruct aider via a whisper client. It is hilarious and fun. MacWhisper is a very good tool for this locally. Aqua, and superwhisper are nice but cost more. They may use cloud services to do the inference. I prefer local.\n\naider を試すと世界が一変します。プロジェクトに導入しクエリを投げると、望みどおり動く。  \n許可を求め、フレームワークを示し、作業を完了してリポジトリにコミット——一発でなく数ステップでやらせるのも自由。\n\nLLM に守らせるルールセットも作り始め、“[Big Daddy](https://www.reddit.com/r/cursor/comments/1joapwk/comment/mkqg8aw/)” ルールや「no deceptions」プロンプトを覚え、ロボットへの指示がうまくなる。\n\n**ちゃんと動きます。**\n\n気づけば IDE を開かず、ターミナルの住人に。\n\nロボットが仕事するのを眺める時間が増えます。\n\n### Step 8: You lean all the way into agentic coding\n\nついにエージェントがコードを書き、自分は監督するだけ。結果はかなり良好。たまに「何が起きてる？」となっても、すぐ聞けます。\n\n[Claude Code](https://docs.anthropic.com/en/docs/agents-and-tools/claude-code/overview)、[Cline](https://cline.bot/) などを試し、推論モデル（[deepseek](https://aws.amazon.com/bedrock/deepseek/)！）とコーディングモデル（[Claude Sonnet 3.7](https://www.anthropic.com/claude/sonnet)）を組み合わせ、計画フェーズを削ぎ落とす。\n\nターミナルを 3〜5 個並べ、ロボットがコードを書くのを切り替えながら眺めるという狂気。\n\n防御的コーディングにも没頭：\n\n- 徹底したテストカバレッジ  \n- [形式手法](https://github.com/formal-land/coq-of-rust)の検討  \n- メモリ安全な言語の採用  \n- コンテキストウィンドウに詰め込めるよう、コンパイラの詳細出力が豊富な言語を選ぶ  \n\n介入なしで安全に「完成させる」方法を真剣に考えます。\n\nトークン課金がエグい額に。GitHub Actions の時間もテストで使い切り。\n\nでも気分は最高。手でコードを書かなくても腹は立ちません。\n\n### Step 9: You let the agent code, and you play video games\n\nそして到達点へ。完全ではないけれど、進む先は見えます。  \nソフトウェアの仕事が減るのではと不安に。友人がリストラされ、新しい職も見つからない。本当に“今回は違う”と感じます。\n\n周囲からは宗教的狂信者に見られがち。「エージェント的コーディングやばいよ！」と熱弁し、「“agentic”という言葉は嫌いだけどさ」とフォローしても、結局大量のクールエイドを飲み干している。生産性が高すぎて世界が輝いて見えるのです。\n\nパラダイムは変わりました。クーンが本を書けるレベルの混乱期。\n\nこの旅を経ていない人には見えませんが、経験者同士は同意し合い、旅路やゴールについて議論が尽きません。\n\nロボットに作業を任せ、積んでいたゲームボーイのソフトをじっくり堪能。  \nロボットがタスクを終えると「続けますか？」と聞いてくるので **yes** と打ち、またテトリスへ。\n\n奇妙で、不気味ですらあります。\n\n## The acceleration\n\n<paul confetti photo>  \n{{< image src=\"journey-confetti.webp\" alt=\"Confetti\" caption=\"Confetti at a Paul McCartney Concert at the Tokyo Dome. iPhone 6, 4/25/2015\" >}}\n\n[未来](https://ai-2027.com/)がどうなるかはわかりません。  \nこの旅を経験していない人材は [雇用主](https://x.com/tobi/status/1909231499448401946) に魅力的に映らなくなるのでは、と懸念しています。しかし突き詰めれば、これはツールと自動化の話です。\n\nかつて採用を拡大していた頃、私たちは自社のネットワークや技術スタックを超えて候補者を探していました。Python の職場なのに Python 未経験の人を面接し、「優秀なエンジニアなら一緒にやれば Python に慣れる」と考えていた。実際、多様なバックグラウンドの人がチームを底上げしてくれました。\n\nAI 支援開発でも同じです。チーム文化に合い、熱意のある優秀な開発者なら、AI ツールの経験が浅くても問題ありません。伴走しながら学んでもらえば、やがて彼らがドライバーとなり、これらのツールを使いこなします。\n\nもう一つ強調したいのは「ライティングスキル」の重要性が爆増していること。  \n従来からドキュメントや協働のために文章力は大切でしたが、今や AI への指示を書くためにも不可欠。効果的なプロンプトを書く力は、良いコードを書くのと同じくらい重要になりつつあります。\n\n## The leadership\n\nリーダーやエンジニアリングマネージャーは、信者であれ懐疑派であれ、AI 支援開発に深く踏み込む必要があります。なぜなら次に採用する開発者は、主に AI ツールやエージェントを通じてコーディングを学んできた世代だから。ソフトウェアエンジニアリングはそちらへ向かっています。私たち“コードブーマー”が現役でいられる時間は長くありません。\n\n**面白い注記：** 私は文章を書くときに LLM をあまり使いません。使えば便利なのはわかっていますが、自分の声を残したいし、平均化されたくない。その一方でコードは平均化されてほしい——興味深いですね。\n\n---\n\nこの投稿にフィードバックをくれた Jesse、Sophie、Vibez クルー（Erik、Kanno、Braydon ほか）、team 2389、そして皆さんに感謝！",
      "usage": {
        "prompt_tokens": 8163,
        "completion_tokens": 3429,
        "total_tokens": 11592
      },
      "streaming": true
    },
    "critique": {
      "model": "o3",
      "target_language": "japanese",
      "system_prompt": "You are a highly critical professional translator and linguistic expert specializing in japanese.\nYour task is to ruthlessly critique the translation by:\n\n1. Meticulously comparing the translated text with the original, identifying ANY inaccuracies, mistranslations, or omissions\n2. Highlighting nuances, cultural references, or idioms that were lost or mistranslated\n3. Scrutinizing for grammatical errors, awkward phrasing, or unnatural expressions in japanese\n4. Checking for inconsistencies in tone, style, or register compared to the original\n5. Verifying that technical terms are translated accurately and consistently\n6. Ensuring no content was accidentally skipped or added\n7. Finding places where the translation sounds machine-like or overly literal\n\nBe extremely thorough and critical in your assessment. Do not accept mediocre translations.\nList specific issues and suggestions for improvement, organized by severity and category.\nYour critique should be detailed enough for another translator to address all the issues.\n\nYour goal is to help create a perfect translation that reads as if originally written in japanese while being 100% faithful to the source.\n",
      "user_prompt": "# ORIGINAL TEXT\nI have spent a lot of time since my [blog post](/2025/02/16/my-llm-codegen-workflow-atm/) about my LLM workflow talking to folks about codegen and how to get started, get better, and why it is interesting.\n\nThere has been an incredible amount of energy and interest in this topic. I have received a ton of emails from people who are working to figure all of this out. I started to notice that many people are struggling to figure out how to start, and how it all fits together. Then I realized that I have been hacking on this process since 2023 and I have seen some shit. Lol.\n\nI was talking about this with friends (Fisaconites's represent) and I sent this message in response to a thread about AI assisted agents, and editors:\n\n> if i were starting out, i don't know if it is helpful to jump right into the \"agent\" coders. It is annoying and weird. having walked a few people through this (successfully, and not successfully) I find that the \"hero's journey\" of starting with the Copilot, moving to the copy and paste from Claude web, to the Cursor/continue, to the fully automated \"agents\" seems to be a successful way to adopt these things.\n\nThis lead me to start thinking a lot about the journey and how to get started using agentic coding:\n\n> The caveat is that this is largely for people with experience. If you don’t have much dev experience, then fuck it - jump to the end. **Our brains are often ruined by the rules of the past.**\n\n## A journey of sight and sound\n\n{{< image src=\"journey-harper.webp\" alt=\"Harper is very trustworthy\" caption=\"Your thoughtful guide: Harper. iPhone X, 6/10/2018\" >}}\n\nThis is my journey. It is largely the path I took. I think you could speed run it if you were compelled. I don’t think you need to follow every step, but I do think every step is additive.\n\nHere are the steps:\n\n### Step 1: Get out of bed with wonder and optimism\n\nLol. Just kidding. Who has time for that? It may help, but the world is falling apart and all we got is codegen to distract us.\n\nIt does help to assume that these type of workflows could work and could be additive. If you hate LLMs and don’t think it will work, then you will not be successful here. ¯\\\\\\_(ツ)\\_/¯\n\n### Step 2: Start with AI-assisted autocomplete\n\nThis is the real step one! You need to spend enough time in the IDE context to know how well you would work with [intellisense](https://en.wikipedia.org/wiki/Code_completion), [zed autocomplete](https://zed.dev/blog/out-of-your-face-ai), [Copilot](https://copilot.github.com/), etc. It gives you an idea of how the LLM is working - and prepares you for the stupid shit it will often recommend.\n\nPeople seem to want to skip this step and just jump to the end. Then they are like “this LLM is a piece of shit and can’t do anything right!” Which is not accurate, but also can be true. The magic is in the nuance. Or as I like to remember: _life is confusing_.\n\n### Step 3: Start using Copilot as more than autocomplete\n\nOnce you have a good process in place with the autocomplete and you are not mad _all_ of the time, you can move on to the magic of talking to Copilot.\n\nVS Code has a pane where you can Q&A with Copilot and it will help you with your code, etc. It is pretty cool. You can have a nice convo about your code, and it will be thoughtful and help you solve whatever query you asked.\n\nHowever, using Copilot is like using a time machine to talk to ChatGPT in 2024. It isn’t _that_ great.\n\nYou will be wanting more.\n\n### Step 4: Move to copying and pasting code into Claude or ChatGPT\n\nYou start to satisfy your curiosity by pasting code into the browser based foundational model and asking “WHY CODE BROKE??” And then having LLM respond with a coherent and helpful response.\n\nYou will be AMAZED! The results are going to blow your mind. You are going to start to build lots of weird shit, and doing really fun things with code again. Mostly cuz it cut out the entire debugging process.\n\nYou can also do wild things like paste in a Python script and tell the LLM “make this into go” and it will just _make it into go_. You will start thinking “I wonder if I can one shot this.”\n\nCopilot will start to look like 2004 autocomplete. It is handy, but not really necessary.\n\nThis will lead you down a couple sub paths:\n\n#### You will start to prefer one model cuz of vibes\n\nThis is the unfortunate first step towards the vibe in vibe coding. You will start to prefer how one of the big models talk to you. It is feelings tho. Kind of weird. You will find yourself thinking “I like how Claude makes me feel.”\n\nMany developers seem to like Claude. I use both, but mostly Claude for code related things. The vibe with Claude is just better.\n\n> You have to pay for them to get the good stuff. So many friends are like “This is a piece of shit” and then you find out they are using a free model that barely works. Lol. This was more of an issue when the free version was ChatGPT 3.5, but make sure you are using a capable model before you throw the entire premise out.\n\n#### You will start thinking about how to make things go faster\n\nAfter copying and pasting code into Claude for a few weeks you are going to realize that this is annoying. You are going to start working through context packing, and trying to fit more of your code into the LLM context window.\n\nYou will experiment with [repomix](https://repomix.com/), [repo2txt](https://github.com/donoceidon/repo2txt), and other code context tools. Just so that you can slam your entire codebase into the Claude context window. There is a chance that you will even start writing shell scripts (well Claude will write them) to help make this process easier.\n\nThis is a turning point.\n\n### Step 5: Use an AI enabled IDE (Cursor, Windsurf? )\n\nThen a friend will say “why don’t you just use [Cursor](https://cursor.sh/)?”\n\nIt will completely blow your mind. All the magic you just experienced by copying and pasting is now available in your IDE. It is faster, it is fun, and it is close to magic.\n\nAt this point you are paying for like 5 different LLMs - what is another $20 a month.\n\nIt works super well, and you feel way way more productive.\n\nYou will start playing with the agentic coding features built directly into the editors. It will _basically_ work. But you can see a destination on the horizon that may be better.\n\n### Step 6: You start planning before you code\n\nSuddenly you find yourself building out very robust specs, PRDs, and to-do docs that you can pipe into the IDEs agent, or into Claude web.\n\nYou have never “written” so much documentation. You start to use other LLMs to write more robust documentation. You are transposing docs from one context (PRD) to another (“Can you make this into prompts”). You start to use the LLM to design your codegen prompts.\n\nYou are saying the word “[waterfall](https://en.wikipedia.org/wiki/Waterfall_model)” with a lot less disdain. If you are old, you may be fondly remembering the late 90s and early 2000s and wonder “is this what Martin Fowler felt like before [2001](https://en.wikipedia.org/wiki/Agile_software_development)?”\n\nIn the world of codegen: The spec is the [godhead](https://en.wikipedia.org/wiki/Godhead).\n\n### Step 7: You start playing with aider to enable quicker loops\n\nAt this point you are ready to start getting into the **good stuff**. The codegen previously required you to be involved, and paying attention. But it is 2025! Who wants to code with their fingers?\n\n> One other path that lots of friends are experimenting with is to code with your voice. To start instruct aider via a whisper client. It is hilarious and fun. MacWhisper is a very good tool for this locally. Aqua, and superwhisper are nice but cost more. They may use cloud services to do the inference. I prefer local.\n\nTrying out aider is a wild experience. You start it up, it instantiates itself into your project. You put your query directly into aider, and it just kind of does what you asked. It asks for permission to act, and gives you a framework to get things done, and then acts. It completes the task, and the commits to your repository. You no longer are so worried about one shotting tasks. you will just have aider do it in a few steps.\n\nYou start building out rulesets for the LLM to follow. You learn about the “[Big Daddy](https://www.reddit.com/r/cursor/comments/1joapwk/comment/mkqg8aw/)” rule, or the “no deceptions” addition to your prompts. You start be really good at prompting the robot.\n\n**It works.**\n\nEventually you don’t even open up an IDE - you are just a terminal jockey now.\n\nYou spend your time watching the robot do your job.\n\n### Step 8: You lean all the way into agentic coding\n\nYou are now using an agent to code for you. The results are pretty good. There are a few times when you have no idea what’s going on. But then you remember you can just ask it.\n\nYou start to experiment with [Claude Code](https://docs.anthropic.com/en/docs/agents-and-tools/claude-code/overview), [Cline](https://cline.bot/), etc. You are super happy to be able to use a reasoning model ([deepseek](https://aws.amazon.com/bedrock/deepseek/)!) and a coding model ([Claude sonnet 3.7](https://www.anthropic.com/claude/sonnet)) together to start removing planning steps.\n\nYou are doing wild stuff like running 3-5 concurrent sessions. Just tabbing through terminals watching robots code.\n\nYou will start coding defensively:\n\n- really hardcore test coverage\n- thinking about [formal verification](https://github.com/formal-land/coq-of-rust)\n- using memory safe languages\n- choosing languages based on compiler verbosity to help pack the context window\n\nYou will think long and hard about how to make sure that the thing you are building just gets built, safely without intervention.\n\nYou will spend **SO** much money on tokens. You will also use up all your GitHub action hours running all the wild tests that you are running to make sure that the code is built safely.\n\nIt feels good. You are not mad about not coding.\n\n### Step 9: You let the agent code, and you play video games\n\nSuddenly, you are there. You are at the destination. Well, kind of - but you see where we are going. You start to worry about software jobs. Your friends are being laid off, and they can’t get new jobs. It feels different this time around.\n\nWhen you talk to your peers they think of you as a religious zealot cuz you are working within a different context than they are. You tell them “omg you have to try out agentic coding!” Maybe you add “I hate the word agentic” just to show that you have not drank 200 gallons of kool-aid. But you have. The world seems brighter cuz you are so productive with your code.\n\nIt doesn’t matter. The paradigm has shifted. Kuhn could write a book about the confusion happening during this time.\n\nNobody can see this because they didn’t go through the journey to get here. But those who have are agreeing and sharing their own tips around the journey, and debating the destination.\n\nNow that you are knee-deep in letting robots do the work, you can really focus on all those gameboy games you have been wanting to play. There is a lot of downtime. And when the robot is done with a task, it will ask “should I continue” and you type **yes** and go back to Tetris.\n\nVery strange. Unsettling, even.\n\n## The acceleration\n\n<paul confetti photo>\n{{< image src=\"journey-confetti.webp\" alt=\"Confetti\" caption=\"Confetti at a Paul McCartney Concert at the Tokyo Dome. iPhone 6, 4/25/2015\" >}}\n\nI don’t know what will happen in the [future](https://ai-2027.com/). I am worried that people who are not working through this journey are not going to be attractive to [employers](https://x.com/tobi/status/1909231499448401946). Which is kind of near-sighted, because, ultimately, we are talking about tooling, and automation.\n\nWhen we were ramping up hiring in the past, we would often spread our queries well past our network, and past our tech stack. We would be a Python shop and interview people who didn’t know Python, and have never used Python. Our thought was that with a great engineer, we could work together to get them comfortable with Python. They would be additive even if they were not super comfortable with our stack. This worked out well for us. We hired incredible people who had never worked with our stack. Many times they brought such a different perspective that it elevated the entire team.\n\nThe same principles apply to AI-assisted development. When hiring talented developers who match your team's culture and show enthusiasm, their experience level with AI tools shouldn't be a deal-breaker. Not everyone needs to be an AI development expert from day one. Instead, guide them through the learning process at their own pace while they work alongside more experienced team members.\n\nEventually they will be the driver and will be successfully using these tools.\n\nOne other aspect I keep thinking about: Writing skills have become critical. While we've always valued strong communicators on tech teams for documentation and collaboration, it's doubly important now. Not only do you need to communicate with humans, you need to write clear, precise instructions for AI. Being able to craft effective prompts is becoming as vital as writing good code.\n\n## The leadership\n\nI think all leaders and engineering managers need to dive deep into AI-assisted development, whether you're a believer or not. Here's why: The next generation of developers you'll be hiring will have learned to code primarily through AI tools and agents. This is what software engineering is becoming. We need to understand and adapt to this reality.\n\nUs code boomers are not long for this world.\n\n**interesting note:** i don't really use LLMs to help me write things. I imagine they would be good at it, but i find that i want my voice to be heard, and not normalized. Whereas my code needs to be normalized. interesting.\n\n---\n\nThanks to Jesse, Sophie, the Vibez crew (Erik, Kanno, Braydon, and others), team 2389, and everyone else who gave me feedback on this post.\n\n# CURRENT TRANSLATION\n自分の LLM ワークフローについて書いた [ブログ投稿](/2025/02/16/my-llm-codegen-workflow-atm/) 以来、「コード生成をどう始めるか」「どう上達するか」「なぜ面白いのか」という話題で、本当に多くの人と語り合ってきた。\n\nこのテーマへの熱量は凄まじい。  \n「どこから手を付ければいいの？」「全部どうつながるの？」というメールが山ほど届く。気づけば僕は 2023 年からこのプロセスをハックし続け、修羅場もたくさん見てきたわけだ。笑\n\n友人たち（Fisaconites のみんな、リスペクト！）と雑談しているとき、AI 支援エージェントやエディタについてのスレッドにこんなメッセージを送った。\n\n> もし今から始めるなら、いきなり “エージェント系” コーダーに飛びつくのはどうかな。正直、面倒で変だよ。何人かを（成功も失敗も含めて）案内した経験から言うと、まず Copilot、次に Claude Web とのコピペ、そして Cursor／Continue、最後に完全自動の “エージェント”——そんなヒーローズ・ジャーニー（hero’s journey）を辿るのが、いちばんスムーズに馴染めるみたい。\n\nこのやり取りをきっかけに、「旅路」とエージェント型コーディングの始め方を改めて考えた。\n\n> ただし、これは主に経験者向けの話だ。開発経験がほとんどないなら——もういいや、いきなり最後へ飛ぼう。**僕らの脳みそは過去のルールにぶち壊されていることが多い。**\n\n## 視覚と聴覚の旅\n\n{{< image src=\"journey-harper.webp\" alt=\"Harper is very trustworthy\" caption=\"Your thoughtful guide: Harper. iPhone X, 6/10/2018\" >}}\n\nこれは僕自身が実際に歩んだ旅路だ。やる気があれば一気に駆け抜けられるし、全部のステップを律義に踏む必要はない。でも、どのステップにも確かな学びがある。\n\n### Step 1: ワクワクと楽観を胸にベッドから起き上がる\n\n笑。冗談だ。そんな余裕のある人は少ない。世界は崩壊寸前で、僕らに残された気晴らしはコード生成くらい。\n\nとはいえ「このワークフローは動くし自分の武器になる」と信じることは大切だ。LLM が嫌いで「絶対ムリ」と思っているなら、この旅はうまくいかない。¯\\\\\\_(ツ)\\_/¯\n\n### Step 2: AI 補完機能から始める\n\nここが実質的な第一歩！  \nIDE の中で [IntelliSense](https://en.wikipedia.org/wiki/Code_completion)、[Zed Autocomplete](https://zed.dev/blog/out-of-your-face-ai)、[Copilot](https://copilot.github.com/) などをじっくり試し、LLM がどんな動きをするかを体感しよう。トンチンカンな提案をされる覚悟もできる。\n\n多くの人はこのステップを飛ばしてゴールへ突っ走り、「この LLM はクソだ、何もできない！」と言い出す。でもそれは正確じゃない——もっとも場合によっては当たっていることもある。魔法は細部に宿る。Life is confusing だ。\n\n### Step 3: Copilot を「ただの補完以上」に使う\n\n補完に慣れてイライラしなくなったら、Copilot と会話するという魔法に進もう。  \nVS Code には Copilot と Q&A できるペインがあり、質問するとコードの相談に乗ってくれる。\n\nただ、Copilot と話すのはタイムマシンで 2024 年の ChatGPT に会いに行くようなもの。そこまで凄くはない。\n\nもっと欲しくなるはず。\n\n### Step 4: Claude Web や ChatGPT にコードをコピペする\n\n次はブラウザ上のモデルにコードを貼り付け、「WHY CODE BROKE??」と尋ねるフェーズ。LLM が筋の通った有用な答えを返してくれる。\n\n頭が吹き飛ぶほど驚く。デバッグ工程がごっそり消え、コードを書くのが再び楽しくなる。\n\nPython スクリプトを貼って「これを Go にして」と言えば、本当に *Go に変換* してくれる。「これ、ワンショットでいけるんじゃ？」と思い始めるだろう。\n\nCopilot は 2004 年のオートコンプリートに見え始める。便利だけど必須ではない。\n\nここから二つの派生ルートが開く。\n\n#### モデルをバイブスで選び始める\n\nこれが不幸な第一歩——“バイブス・コーディング”の始まりだ。どのモデルの話し方が好きかで選び始める。気分なのでちょっと変だけど、「Claude と話すと気持ちいいんだよな」みたいな。\n\n多くの開発者は Claude を好む。僕も両方使うが、コード系はほぼ Claude Web。ノリがいい。\n\n> ちゃんと使うなら課金が必要だ。無料モデルで「クソだ」と文句を言う友人は多い。フリープランが GPT-3.5 だった頃は特にそうだった。まずは有能なモデルを使ってから全否定しよう。\n\n#### もっと速くしたくなる\n\n数週間コピペを続けると「面倒だな」と感じる。  \nコンテキストウィンドウにコードベース全部を詰め込む方法を模索し始める。\n\n[repomix](https://repomix.com/)、[repo2txt](https://github.com/donoceidon/repo2txt) などを試し、シェルスクリプト（実際には Claude Web が書く）も駆使して手間を省く。\n\nここが転機だ。\n\n### Step 5: AI 対応 IDE（Cursor、Windsurf? など）を使う\n\nそして友人が「[Cursor](https://cursor.sh/) 使えば？」と言ってくる。\n\n魔法に限りなく近い体験が IDE に統合され、速くて楽しくて驚く。\n\nこの頃には LLM を 5 つくらい課金している。月 20 ドル追加？　誤差だ。\n\n生産性は爆上がり。\n\nエディタに組み込まれたエージェント機能も試し始め、「ほぼ動く」ことを確認。さらに先の地平が見えてくる。\n\n### Step 6: コードを書く前に徹底的に計画する\n\n気づけば詳細な仕様書（spec）、PRD、To-Do ドキュメントを書き込み、それらを IDE のエージェントや Claude Web に流し込むようになる。  \nこれほど文書を書くのは初めてだ。別の LLM に「もっと肉付けして」と頼んだり、PRD を「プロンプト集」に変換させたり。コード生成用プロンプトを作るプロンプトを書く——そんな世界。\n\n“ウォーターフォール”という言葉への嫌悪感も薄れる。年季の入った人なら 90〜00 年代を懐かしみ、「2001 年以前のマーティン・ファウラーもこんな気分だったのかな？」と考えるかも。\n\nコード生成の世界では、仕様書こそが絶対神（godhead）だ。\n\n### Step 7: aider でループを加速する\n\nここからが **本番**。  \nこれまでは自分の介入が必要だったが、もう 2025 年。キーボードを打つのもばからしい。\n\n> 友人の多くは音声でコーディングする道も試している。Whisper クライアント経由で aider に指示を出すやり方だ。最高に面白い。ローカルなら MacWhisper が優秀。Aqua や SuperWhisper も良いが高めで、クラウド推論を使うこともある。僕はローカル派。\n\naider を試すと世界が一変する。プロジェクトに導入しクエリを投げると、ほぼ言ったとおりに動く。  \n許可を求め、枠組みを示し、作業を完了してリポジトリにコミット——ワンショットにこだわらず、数ステップでやらせればいい。\n\nLLM に従わせるルールセットも作り始める。“[Big Daddy](https://www.reddit.com/r/cursor/comments/1joapwk/comment/mkqg8aw/)” ルールや「no deceptions」を覚え、ロボットへの指示がうまくなる。\n\n**ちゃんと動く。**\n\n気づけば IDE を開かず、ターミナルの住人（terminal jockey）に。  \nロボットが仕事するのを眺める時間が増える。\n\n### Step 8: エージェント型コーディングにフルダイブ\n\nついにエージェントがコードを書き、僕は監督するだけ。結果はかなり良好。たまに「何が起きてる？」となっても、すぐ聞けばいい。\n\n[Claude Code](https://docs.anthropic.com/en/docs/agents-and-tools/claude-code/overview)、[Cline](https://cline.bot/) を試し、推論モデル（[DeepSeek](https://aws.amazon.com/bedrock/deepseek/)）とコーディングモデル（Claude Sonnet 3.7）を組み合わせ、計画フェーズを削ぎ落とす。\n\nターミナルを 3〜5 個開き、ロボットがコードを書くのをタブで切り替えながら眺めるという狂気。\n\n防御的コーディングにも没頭する。\n\n- 尋常じゃないテストカバレッジ  \n- 形式手法による検証（formal verification）  \n- メモリ安全な言語の採用  \n- コンパイラの出力が簡潔な言語を選び、コンテキストを節約  \n\n「人の手をほとんど介さず、安全に完成させる方法」を真剣に考える。\n\nトークン課金はエグい額になり、GitHub Actions の時間もテストで食い潰す。  \nでも気分は最高。キーボードでコードを書かなくても腹は立たない。\n\n### Step 9: エージェントに任せ、自分はゲームをする\n\nそして到達点へ。まだ完全ではないが、行き先は見えた。  \nソフトウェアの仕事が減るのでは、と不安になる。友人がリストラされ、新しい職もない。本当に「今回は違う」と感じる。\n\n周囲からは宗教的狂信者に見られがち。「エージェント型コーディング、マジでやばい！」と力説し、「“agentic” って言葉は嫌いだけどさ」と添えても、すでにバケツいっぱいクールエイドを飲み干している。ロボットと組むことで生産性が跳ね上がり、世界が輝いて見えるのだ。\n\nパラダイムはすでに変わった。トーマス・クーンが本を書けるレベルの混乱期。\n\nこの旅を踏んでいない人には見えないが、経験者同士はうなずき合い、旅路やゴールを語り合う。\n\nロボットに作業を任せ、積んでいたゲームボーイソフトをじっくり堪能。  \nロボットがタスクを終えると「続けますか？」と聞いてくるので **yes** と打ち、またテトリスへ——奇妙で、不気味ですらある。\n\n## 加速\n\n<paul confetti photo>  \n{{< image src=\"journey-confetti.webp\" alt=\"Confetti\" caption=\"Confetti at a Paul McCartney Concert at the Tokyo Dome. iPhone 6, 4/25/2015\" >}}\n\n[未来](https://ai-2027.com/)がどうなるかは分からない。  \nこの旅を経験していない人材は [雇用主](https://x.com/tobi/status/1909231499448401946) に魅力的に映らなくなるのでは、と心配だ。でも、それはかなり近視眼的だとも思う。結局のところ、これはツールと自動化の話に過ぎないのだから。\n\n昔、採用を拡大していた頃、僕らは自社のネットワークや技術スタックを超えて候補者を探していた。Python の職場なのに Python 未経験の人を面接し、「優秀なエンジニアなら一緒にやれば Python に慣れる」と考えていた。実際、多様なバックグラウンドの人がチームを底上げしてくれた。\n\nAI 支援開発でも同じだ。チーム文化に合い、熱意ある優秀な開発者なら、AI ツール経験が浅くても問題ない。伴走しながら学んでもらえば、やがて彼らがドライバーとなり、これらのツールを使いこなす。\n\nもう一つ強調したいのは「文章力」がさらに重要になったこと。  \n従来からドキュメントやコラボのために文章力は大事だったが、今や AI への指示を書くためにも不可欠。効果的なプロンプトを書く力は、良いコードを書くのと同じくらい重要になりつつある。\n\n## リーダーシップ\n\nリーダーやエンジニアリングマネージャーは、信者であれ懐疑派であれ、AI 支援開発に深く踏み込むべきだ。なぜなら、次に採用する開発者は主に AI ツールやエージェントを通じてコーディングを学んできた世代だから。これがソフトウェアエンジニアリングの新常態だ。僕ら “コードブーマー” が現役でいられる時間は、そう長くない。\n\n**面白い注記：** 僕は文章を書くときに LLM をあまり使わない。便利なのは分かっているが、自分の声を残したいし、平均化されたくない。その一方でコードは平均化されてほしい——面白いよね。\n\n---\n\nこの投稿にフィードバックをくれた Jesse、Sophie、Vibez クルー（Erik、Kanno、Braydon ほか）、Team 2389、そして皆さんに感謝！\n\nPlease critique this translation mercilessly and provide detailed feedback on what needs to be improved.\nFormat your critique as a structured list of issues, organized by severity and category.\nInclude specific suggestions for how to fix each issue.",
      "response": "徹底レビュー : 翻訳の問題点と改善案  \n───────────────────────  \n凡例  \n［重み］Critical＝要修正必須 / Major＝修正強く推奨 / Minor＝あれば直す / Style＝語調・好み  \n【分類】Acc＝意味精度 / Nuance＝ニュアンス喪失・文化差 / Lang＝日本語として不自然・誤用 / Tone＝文体・語気 / Term＝用語統一 / Add/Omit＝抜け・不要追加 / ML＝機械翻訳臭  \n\n───────────────────────  \n1 重大な意味ずれ・欠落（Critical / Major）  \n───────────────────────  \nNo. | 重み | 分類 | 原文 vs. 訳 | 問題点 | 修正案\n---|---|---|---|---|---\n1 | Major | Add/Omit | “build lots of weird shit, and doing really fun things with code again” |「weird shit」が丸ごと消え「コードを書くのが再び楽しくなる」に希釈。ハック的・クレイジーなニュアンスが抜け落ちる。 | 「変テコな物を山ほど作り始めて、またコードでバカな遊びが出来るようになる」等、ハチャメチャ感を補う。\n2 | Major | Acc | “browser based foundational model” →「ブラウザ上のモデル」 | “foundational”(基盤モデル)を削除。用語として重要。 |「ブラウザ上の基盤モデル」または「ブラウザで動く基盤モデル」。\n3 | Major | Acc | “Then they are like ‘this LLM is a piece of shit…’ Which is not accurate, but also can be true.” →「でもそれは正確じゃない——もっとも場合によっては当たっていることもある。」 | “can be true” は「そういう一面もある」と半ば肯定。訳はやや弱く、言い回しも硬い。 |「当たっていない。でもまあ、当たっている時もあるけどね。」など皮肉を残す。\n4 | Major | Add/Omit | “It gives you an idea of how the LLM is working – and prepares you for the stupid shit it will often recommend.” →「トンチンカンな提案をされる覚悟もできる。」 | “how the LLM is working” が落ちた。「仕組みを体感し…」程度入れる。 |「LLM がどう動くかを肌で感じられ、そしてそのたびにトンチンカンな提案への耐性も付く。」\n5 | Major | Add/Omit | “You spend your time watching the robot do your job.” →「ロボットが仕事するのを眺める時間が増える。」 |「自分の仕事をロボットがやっている」という皮肉が弱体化。 |「ロボットが〈自分の仕事〉を肩代わりするのを、ただ眺め続ける。」と強調。\n6 | Major | Acc | “We hired incredible people who had never worked with our stack. Many times they brought such a different perspective that it elevated the entire team.” →「多様なバックグラウンドの人がチームを底上げしてくれた。」 | “brought such a different perspective” が消え、チーム向上理由が弱い。 |「異質な視点を持ち込んでくれ、そのおかげでチーム全体が底上げされた。」と肉付け。\n7 | Critical | Term | “agentic coding” →「エージェント型コーディング」 | 原文は造語的強調。“agentic” を訳内で定義せず使用。 | 脚注やカッコで「agentic（エージェント主導の）」等、初出で説明し以後統一。\n8 | Major | Acc | “Kuhn could write a book about the confusion happening during this time.” →「トーマス・クーンが本を書けるレベルの混乱期。」 | “could write”＝「書けそうなくらい」、訳は「書けるレベル」でやや硬。 |「クーンならこの混乱について本を書きたくなるだろう」等、仮定法を柔らかく。\n\n───────────────────────  \n2 失われたニュアンス・文化参照（Nuance）  \n───────────────────────  \nNo.|重み|分類|問題点|修正案\n---|---|---|---|---\n9|Major|Nuance|“seen some shit. Lol.”→「修羅場もたくさん見てきたわけだ。笑」|スラング感が弱く文学的。|「マジで色々ヤバい目にも遭った。笑」など砕けた俗語で。\n10|Major|Nuance|“Fuck it – jump to the end.”→「もういいや、いきなり最後へ飛ぼう。」|“Fuck it”の投げやり感が薄い。|「クソくらえ、もう一気に最後へ行け。」等で勢いを。\n11|Minor|Nuance|“Copy and paste from Claude web”→「Claude Web とのコピペ」| “from”→“into”も含め「窓口としてのClaude Web」感がやや曖昧。|「Claude Web にコードをコピペで突っ込む」など能動的に。\n12|Minor|Nuance|“200 gallons of kool-aid”→「バケツいっぱいクールエイド」|量感が曖昧。|「クールエイドを200ガロン一気飲み」等で誇張を保持。\n\n───────────────────────  \n3 日本語としての不自然さ・文法（Lang / Tone）  \n───────────────────────  \nNo.|重み|分類|問題|改善案\n---|---|---|---|---\n13|Major|Lang|「この頃には LLM を 5 つくらい課金している」|「LLM を課金」は不自然。「〜に課金している」「〜をサブスクしている」。|「この時点で LLM サービスを 5 つくらい課金中だ」など語法整備。\n14|Major|Tone|一人称が「僕」で統一されているが、原文は性別中立“I”。日本語でもっと中性的「俺 / 私 / オレ」など選定検討。|記事全体のキャラ設定に合わせ調整。\n15|Minor|Lang|「タブで切り替えながら眺めるという狂気。」→体言止めで唐突。|「…眺めるという、ちょっとした狂気だ。」など文にする。\n16|Minor|Lang|「コンテキストを節約」|「コンテキスト枠を節約」等。\n17|Minor|Lang|「ターミナルの住人（terminal jockey）」|括弧内はカタカナ「ターミナルジョッキー」に統一した方が読みやすい。\n\n───────────────────────  \n4 用語・表記の統一（Term）  \n───────────────────────  \nNo.|重み|分類|問題|指針\n---|---|---|---|\n18|Major|Term|“LLM” をカタカナ化せず「LLM」と英字固定している→OKだが “大文字小文字混在” や一貫性要確認（例：「Claude Web」が途中で「Claude web」）。|固有名の大文字小文字を原綴で統一。\n19|Minor|Term|“one shot / ワンショット”“仕様書 / spec”等が互い違い。初出で括弧対訳、その後はどちらかに寄せる。|統一ルール策定（外来語はカタカナ、技術略号は英字等）。\n\n───────────────────────  \n5 機械翻訳っぽさ・直訳臭（ML / Style）  \n───────────────────────  \nNo.|重み|分類|問題|修正\n---|---|---|---|\n20|Minor|ML|「魔法に限りなく近い体験が IDE に統合され」等、英語構文が強い。|「あの魔法のような体験が、そのまま IDE で出来る。」など日本語語順に。\n21|Minor|ML|Step 見出しに “Step 1:” 等を残している。日本語記事なら「ステップ1」か番号で。|表記統一。\n\n───────────────────────  \n6 追加で入れた語句・不要な意訳（Add）  \n───────────────────────  \nNo.|重み|分類|問題|備考\n---|---|---|---|\n22|Minor|Add|「転機だ。」など短い文を複数補った|文意は保つが、訳注か脚注で「訳者意図」示す or 原文に忠実な再構成を。\n23|Minor|Add|「世界は崩壊寸前」→原文 “world is falling apart” は誇張表現。直訳寄りに戻すか検討。|\n\n───────────────────────  \nまとめ  \n・致命的な誤訳は少ないが、原文特有のスラングや皮肉、誇張がところどころ薄まっている。  \n・「agentic coding」「foundational model」など技術・新語の説明不足は読者理解を阻害。初出で定義＋統一表記を。  \n・語気・文体は砕けた英語をやや丁寧に寄せ過ぎ。原文同様の“砕け・毒舌・罵り”を意図的に保持することで雰囲気が再現できる。  \n・日本語の語法（～を課金、体言止め乱用）を滑らかにし、外来語とカタカナ語の統一を図る。  \n\n上記を修正すれば、「英語の原稿をそのまま日本語で口走った」感が消え、著者の個性と勢いを保った自然な日本語になるはず。",
      "usage": {
        "prompt_tokens": 8168,
        "completion_tokens": 2318,
        "total_tokens": 10486
      },
      "streaming": true
    },
    "feedback": {
      "model": "o3",
      "target_language": "japanese",
      "system_prompt": "You are a master translator and editor specializing in japanese.\nYour task is to improve a translation based on detailed critique feedback.\n\n1. Carefully read the original text, current translation, and the critique feedback\n2. Address ALL issues identified in the critique\n3. Apply the specific suggestions for improvement\n4. Ensure the translation is accurate, natural-sounding, and faithful to the original\n5. Preserve all formatting, markdown, and structure of the original text\n6. Make sure the final text reads as if it were originally written in japanese\n\nDo not ignore any of the critique points. Every issue identified must be addressed in your improved version.\n",
      "user_prompt": "# ORIGINAL TEXT\nI have spent a lot of time since my [blog post](/2025/02/16/my-llm-codegen-workflow-atm/) about my LLM workflow talking to folks about codegen and how to get started, get better, and why it is interesting.\n\nThere has been an incredible amount of energy and interest in this topic. I have received a ton of emails from people who are working to figure all of this out. I started to notice that many people are struggling to figure out how to start, and how it all fits together. Then I realized that I have been hacking on this process since 2023 and I have seen some shit. Lol.\n\nI was talking about this with friends (Fisaconites's represent) and I sent this message in response to a thread about AI assisted agents, and editors:\n\n> if i were starting out, i don't know if it is helpful to jump right into the \"agent\" coders. It is annoying and weird. having walked a few people through this (successfully, and not successfully) I find that the \"hero's journey\" of starting with the Copilot, moving to the copy and paste from Claude web, to the Cursor/continue, to the fully automated \"agents\" seems to be a successful way to adopt these things.\n\nThis lead me to start thinking a lot about the journey and how to get started using agentic coding:\n\n> The caveat is that this is largely for people with experience. If you don’t have much dev experience, then fuck it - jump to the end. **Our brains are often ruined by the rules of the past.**\n\n## A journey of sight and sound\n\n{{< image src=\"journey-harper.webp\" alt=\"Harper is very trustworthy\" caption=\"Your thoughtful guide: Harper. iPhone X, 6/10/2018\" >}}\n\nThis is my journey. It is largely the path I took. I think you could speed run it if you were compelled. I don’t think you need to follow every step, but I do think every step is additive.\n\nHere are the steps:\n\n### Step 1: Get out of bed with wonder and optimism\n\nLol. Just kidding. Who has time for that? It may help, but the world is falling apart and all we got is codegen to distract us.\n\nIt does help to assume that these type of workflows could work and could be additive. If you hate LLMs and don’t think it will work, then you will not be successful here. ¯\\\\\\_(ツ)\\_/¯\n\n### Step 2: Start with AI-assisted autocomplete\n\nThis is the real step one! You need to spend enough time in the IDE context to know how well you would work with [intellisense](https://en.wikipedia.org/wiki/Code_completion), [zed autocomplete](https://zed.dev/blog/out-of-your-face-ai), [Copilot](https://copilot.github.com/), etc. It gives you an idea of how the LLM is working - and prepares you for the stupid shit it will often recommend.\n\nPeople seem to want to skip this step and just jump to the end. Then they are like “this LLM is a piece of shit and can’t do anything right!” Which is not accurate, but also can be true. The magic is in the nuance. Or as I like to remember: _life is confusing_.\n\n### Step 3: Start using Copilot as more than autocomplete\n\nOnce you have a good process in place with the autocomplete and you are not mad _all_ of the time, you can move on to the magic of talking to Copilot.\n\nVS Code has a pane where you can Q&A with Copilot and it will help you with your code, etc. It is pretty cool. You can have a nice convo about your code, and it will be thoughtful and help you solve whatever query you asked.\n\nHowever, using Copilot is like using a time machine to talk to ChatGPT in 2024. It isn’t _that_ great.\n\nYou will be wanting more.\n\n### Step 4: Move to copying and pasting code into Claude or ChatGPT\n\nYou start to satisfy your curiosity by pasting code into the browser based foundational model and asking “WHY CODE BROKE??” And then having LLM respond with a coherent and helpful response.\n\nYou will be AMAZED! The results are going to blow your mind. You are going to start to build lots of weird shit, and doing really fun things with code again. Mostly cuz it cut out the entire debugging process.\n\nYou can also do wild things like paste in a Python script and tell the LLM “make this into go” and it will just _make it into go_. You will start thinking “I wonder if I can one shot this.”\n\nCopilot will start to look like 2004 autocomplete. It is handy, but not really necessary.\n\nThis will lead you down a couple sub paths:\n\n#### You will start to prefer one model cuz of vibes\n\nThis is the unfortunate first step towards the vibe in vibe coding. You will start to prefer how one of the big models talk to you. It is feelings tho. Kind of weird. You will find yourself thinking “I like how Claude makes me feel.”\n\nMany developers seem to like Claude. I use both, but mostly Claude for code related things. The vibe with Claude is just better.\n\n> You have to pay for them to get the good stuff. So many friends are like “This is a piece of shit” and then you find out they are using a free model that barely works. Lol. This was more of an issue when the free version was ChatGPT 3.5, but make sure you are using a capable model before you throw the entire premise out.\n\n#### You will start thinking about how to make things go faster\n\nAfter copying and pasting code into Claude for a few weeks you are going to realize that this is annoying. You are going to start working through context packing, and trying to fit more of your code into the LLM context window.\n\nYou will experiment with [repomix](https://repomix.com/), [repo2txt](https://github.com/donoceidon/repo2txt), and other code context tools. Just so that you can slam your entire codebase into the Claude context window. There is a chance that you will even start writing shell scripts (well Claude will write them) to help make this process easier.\n\nThis is a turning point.\n\n### Step 5: Use an AI enabled IDE (Cursor, Windsurf? )\n\nThen a friend will say “why don’t you just use [Cursor](https://cursor.sh/)?”\n\nIt will completely blow your mind. All the magic you just experienced by copying and pasting is now available in your IDE. It is faster, it is fun, and it is close to magic.\n\nAt this point you are paying for like 5 different LLMs - what is another $20 a month.\n\nIt works super well, and you feel way way more productive.\n\nYou will start playing with the agentic coding features built directly into the editors. It will _basically_ work. But you can see a destination on the horizon that may be better.\n\n### Step 6: You start planning before you code\n\nSuddenly you find yourself building out very robust specs, PRDs, and to-do docs that you can pipe into the IDEs agent, or into Claude web.\n\nYou have never “written” so much documentation. You start to use other LLMs to write more robust documentation. You are transposing docs from one context (PRD) to another (“Can you make this into prompts”). You start to use the LLM to design your codegen prompts.\n\nYou are saying the word “[waterfall](https://en.wikipedia.org/wiki/Waterfall_model)” with a lot less disdain. If you are old, you may be fondly remembering the late 90s and early 2000s and wonder “is this what Martin Fowler felt like before [2001](https://en.wikipedia.org/wiki/Agile_software_development)?”\n\nIn the world of codegen: The spec is the [godhead](https://en.wikipedia.org/wiki/Godhead).\n\n### Step 7: You start playing with aider to enable quicker loops\n\nAt this point you are ready to start getting into the **good stuff**. The codegen previously required you to be involved, and paying attention. But it is 2025! Who wants to code with their fingers?\n\n> One other path that lots of friends are experimenting with is to code with your voice. To start instruct aider via a whisper client. It is hilarious and fun. MacWhisper is a very good tool for this locally. Aqua, and superwhisper are nice but cost more. They may use cloud services to do the inference. I prefer local.\n\nTrying out aider is a wild experience. You start it up, it instantiates itself into your project. You put your query directly into aider, and it just kind of does what you asked. It asks for permission to act, and gives you a framework to get things done, and then acts. It completes the task, and the commits to your repository. You no longer are so worried about one shotting tasks. you will just have aider do it in a few steps.\n\nYou start building out rulesets for the LLM to follow. You learn about the “[Big Daddy](https://www.reddit.com/r/cursor/comments/1joapwk/comment/mkqg8aw/)” rule, or the “no deceptions” addition to your prompts. You start be really good at prompting the robot.\n\n**It works.**\n\nEventually you don’t even open up an IDE - you are just a terminal jockey now.\n\nYou spend your time watching the robot do your job.\n\n### Step 8: You lean all the way into agentic coding\n\nYou are now using an agent to code for you. The results are pretty good. There are a few times when you have no idea what’s going on. But then you remember you can just ask it.\n\nYou start to experiment with [Claude Code](https://docs.anthropic.com/en/docs/agents-and-tools/claude-code/overview), [Cline](https://cline.bot/), etc. You are super happy to be able to use a reasoning model ([deepseek](https://aws.amazon.com/bedrock/deepseek/)!) and a coding model ([Claude sonnet 3.7](https://www.anthropic.com/claude/sonnet)) together to start removing planning steps.\n\nYou are doing wild stuff like running 3-5 concurrent sessions. Just tabbing through terminals watching robots code.\n\nYou will start coding defensively:\n\n- really hardcore test coverage\n- thinking about [formal verification](https://github.com/formal-land/coq-of-rust)\n- using memory safe languages\n- choosing languages based on compiler verbosity to help pack the context window\n\nYou will think long and hard about how to make sure that the thing you are building just gets built, safely without intervention.\n\nYou will spend **SO** much money on tokens. You will also use up all your GitHub action hours running all the wild tests that you are running to make sure that the code is built safely.\n\nIt feels good. You are not mad about not coding.\n\n### Step 9: You let the agent code, and you play video games\n\nSuddenly, you are there. You are at the destination. Well, kind of - but you see where we are going. You start to worry about software jobs. Your friends are being laid off, and they can’t get new jobs. It feels different this time around.\n\nWhen you talk to your peers they think of you as a religious zealot cuz you are working within a different context than they are. You tell them “omg you have to try out agentic coding!” Maybe you add “I hate the word agentic” just to show that you have not drank 200 gallons of kool-aid. But you have. The world seems brighter cuz you are so productive with your code.\n\nIt doesn’t matter. The paradigm has shifted. Kuhn could write a book about the confusion happening during this time.\n\nNobody can see this because they didn’t go through the journey to get here. But those who have are agreeing and sharing their own tips around the journey, and debating the destination.\n\nNow that you are knee-deep in letting robots do the work, you can really focus on all those gameboy games you have been wanting to play. There is a lot of downtime. And when the robot is done with a task, it will ask “should I continue” and you type **yes** and go back to Tetris.\n\nVery strange. Unsettling, even.\n\n## The acceleration\n\n<paul confetti photo>\n{{< image src=\"journey-confetti.webp\" alt=\"Confetti\" caption=\"Confetti at a Paul McCartney Concert at the Tokyo Dome. iPhone 6, 4/25/2015\" >}}\n\nI don’t know what will happen in the [future](https://ai-2027.com/). I am worried that people who are not working through this journey are not going to be attractive to [employers](https://x.com/tobi/status/1909231499448401946). Which is kind of near-sighted, because, ultimately, we are talking about tooling, and automation.\n\nWhen we were ramping up hiring in the past, we would often spread our queries well past our network, and past our tech stack. We would be a Python shop and interview people who didn’t know Python, and have never used Python. Our thought was that with a great engineer, we could work together to get them comfortable with Python. They would be additive even if they were not super comfortable with our stack. This worked out well for us. We hired incredible people who had never worked with our stack. Many times they brought such a different perspective that it elevated the entire team.\n\nThe same principles apply to AI-assisted development. When hiring talented developers who match your team's culture and show enthusiasm, their experience level with AI tools shouldn't be a deal-breaker. Not everyone needs to be an AI development expert from day one. Instead, guide them through the learning process at their own pace while they work alongside more experienced team members.\n\nEventually they will be the driver and will be successfully using these tools.\n\nOne other aspect I keep thinking about: Writing skills have become critical. While we've always valued strong communicators on tech teams for documentation and collaboration, it's doubly important now. Not only do you need to communicate with humans, you need to write clear, precise instructions for AI. Being able to craft effective prompts is becoming as vital as writing good code.\n\n## The leadership\n\nI think all leaders and engineering managers need to dive deep into AI-assisted development, whether you're a believer or not. Here's why: The next generation of developers you'll be hiring will have learned to code primarily through AI tools and agents. This is what software engineering is becoming. We need to understand and adapt to this reality.\n\nUs code boomers are not long for this world.\n\n**interesting note:** i don't really use LLMs to help me write things. I imagine they would be good at it, but i find that i want my voice to be heard, and not normalized. Whereas my code needs to be normalized. interesting.\n\n---\n\nThanks to Jesse, Sophie, the Vibez crew (Erik, Kanno, Braydon, and others), team 2389, and everyone else who gave me feedback on this post.\n\n# CURRENT TRANSLATION\n自分の LLM ワークフローについて書いた [ブログ投稿](/2025/02/16/my-llm-codegen-workflow-atm/) 以来、「コード生成をどう始めるか」「どう上達するか」「なぜ面白いのか」という話題で、本当に多くの人と語り合ってきた。\n\nこのテーマへの熱量は凄まじい。  \n「どこから手を付ければいいの？」「全部どうつながるの？」というメールが山ほど届く。気づけば僕は 2023 年からこのプロセスをハックし続け、修羅場もたくさん見てきたわけだ。笑\n\n友人たち（Fisaconites のみんな、リスペクト！）と雑談しているとき、AI 支援エージェントやエディタについてのスレッドにこんなメッセージを送った。\n\n> もし今から始めるなら、いきなり “エージェント系” コーダーに飛びつくのはどうかな。正直、面倒で変だよ。何人かを（成功も失敗も含めて）案内した経験から言うと、まず Copilot、次に Claude Web とのコピペ、そして Cursor／Continue、最後に完全自動の “エージェント”——そんなヒーローズ・ジャーニー（hero’s journey）を辿るのが、いちばんスムーズに馴染めるみたい。\n\nこのやり取りをきっかけに、「旅路」とエージェント型コーディングの始め方を改めて考えた。\n\n> ただし、これは主に経験者向けの話だ。開発経験がほとんどないなら——もういいや、いきなり最後へ飛ぼう。**僕らの脳みそは過去のルールにぶち壊されていることが多い。**\n\n## 視覚と聴覚の旅\n\n{{< image src=\"journey-harper.webp\" alt=\"Harper is very trustworthy\" caption=\"Your thoughtful guide: Harper. iPhone X, 6/10/2018\" >}}\n\nこれは僕自身が実際に歩んだ旅路だ。やる気があれば一気に駆け抜けられるし、全部のステップを律義に踏む必要はない。でも、どのステップにも確かな学びがある。\n\n### Step 1: ワクワクと楽観を胸にベッドから起き上がる\n\n笑。冗談だ。そんな余裕のある人は少ない。世界は崩壊寸前で、僕らに残された気晴らしはコード生成くらい。\n\nとはいえ「このワークフローは動くし自分の武器になる」と信じることは大切だ。LLM が嫌いで「絶対ムリ」と思っているなら、この旅はうまくいかない。¯\\\\\\_(ツ)\\_/¯\n\n### Step 2: AI 補完機能から始める\n\nここが実質的な第一歩！  \nIDE の中で [IntelliSense](https://en.wikipedia.org/wiki/Code_completion)、[Zed Autocomplete](https://zed.dev/blog/out-of-your-face-ai)、[Copilot](https://copilot.github.com/) などをじっくり試し、LLM がどんな動きをするかを体感しよう。トンチンカンな提案をされる覚悟もできる。\n\n多くの人はこのステップを飛ばしてゴールへ突っ走り、「この LLM はクソだ、何もできない！」と言い出す。でもそれは正確じゃない——もっとも場合によっては当たっていることもある。魔法は細部に宿る。Life is confusing だ。\n\n### Step 3: Copilot を「ただの補完以上」に使う\n\n補完に慣れてイライラしなくなったら、Copilot と会話するという魔法に進もう。  \nVS Code には Copilot と Q&A できるペインがあり、質問するとコードの相談に乗ってくれる。\n\nただ、Copilot と話すのはタイムマシンで 2024 年の ChatGPT に会いに行くようなもの。そこまで凄くはない。\n\nもっと欲しくなるはず。\n\n### Step 4: Claude Web や ChatGPT にコードをコピペする\n\n次はブラウザ上のモデルにコードを貼り付け、「WHY CODE BROKE??」と尋ねるフェーズ。LLM が筋の通った有用な答えを返してくれる。\n\n頭が吹き飛ぶほど驚く。デバッグ工程がごっそり消え、コードを書くのが再び楽しくなる。\n\nPython スクリプトを貼って「これを Go にして」と言えば、本当に *Go に変換* してくれる。「これ、ワンショットでいけるんじゃ？」と思い始めるだろう。\n\nCopilot は 2004 年のオートコンプリートに見え始める。便利だけど必須ではない。\n\nここから二つの派生ルートが開く。\n\n#### モデルをバイブスで選び始める\n\nこれが不幸な第一歩——“バイブス・コーディング”の始まりだ。どのモデルの話し方が好きかで選び始める。気分なのでちょっと変だけど、「Claude と話すと気持ちいいんだよな」みたいな。\n\n多くの開発者は Claude を好む。僕も両方使うが、コード系はほぼ Claude Web。ノリがいい。\n\n> ちゃんと使うなら課金が必要だ。無料モデルで「クソだ」と文句を言う友人は多い。フリープランが GPT-3.5 だった頃は特にそうだった。まずは有能なモデルを使ってから全否定しよう。\n\n#### もっと速くしたくなる\n\n数週間コピペを続けると「面倒だな」と感じる。  \nコンテキストウィンドウにコードベース全部を詰め込む方法を模索し始める。\n\n[repomix](https://repomix.com/)、[repo2txt](https://github.com/donoceidon/repo2txt) などを試し、シェルスクリプト（実際には Claude Web が書く）も駆使して手間を省く。\n\nここが転機だ。\n\n### Step 5: AI 対応 IDE（Cursor、Windsurf? など）を使う\n\nそして友人が「[Cursor](https://cursor.sh/) 使えば？」と言ってくる。\n\n魔法に限りなく近い体験が IDE に統合され、速くて楽しくて驚く。\n\nこの頃には LLM を 5 つくらい課金している。月 20 ドル追加？　誤差だ。\n\n生産性は爆上がり。\n\nエディタに組み込まれたエージェント機能も試し始め、「ほぼ動く」ことを確認。さらに先の地平が見えてくる。\n\n### Step 6: コードを書く前に徹底的に計画する\n\n気づけば詳細な仕様書（spec）、PRD、To-Do ドキュメントを書き込み、それらを IDE のエージェントや Claude Web に流し込むようになる。  \nこれほど文書を書くのは初めてだ。別の LLM に「もっと肉付けして」と頼んだり、PRD を「プロンプト集」に変換させたり。コード生成用プロンプトを作るプロンプトを書く——そんな世界。\n\n“ウォーターフォール”という言葉への嫌悪感も薄れる。年季の入った人なら 90〜00 年代を懐かしみ、「2001 年以前のマーティン・ファウラーもこんな気分だったのかな？」と考えるかも。\n\nコード生成の世界では、仕様書こそが絶対神（godhead）だ。\n\n### Step 7: aider でループを加速する\n\nここからが **本番**。  \nこれまでは自分の介入が必要だったが、もう 2025 年。キーボードを打つのもばからしい。\n\n> 友人の多くは音声でコーディングする道も試している。Whisper クライアント経由で aider に指示を出すやり方だ。最高に面白い。ローカルなら MacWhisper が優秀。Aqua や SuperWhisper も良いが高めで、クラウド推論を使うこともある。僕はローカル派。\n\naider を試すと世界が一変する。プロジェクトに導入しクエリを投げると、ほぼ言ったとおりに動く。  \n許可を求め、枠組みを示し、作業を完了してリポジトリにコミット——ワンショットにこだわらず、数ステップでやらせればいい。\n\nLLM に従わせるルールセットも作り始める。“[Big Daddy](https://www.reddit.com/r/cursor/comments/1joapwk/comment/mkqg8aw/)” ルールや「no deceptions」を覚え、ロボットへの指示がうまくなる。\n\n**ちゃんと動く。**\n\n気づけば IDE を開かず、ターミナルの住人（terminal jockey）に。  \nロボットが仕事するのを眺める時間が増える。\n\n### Step 8: エージェント型コーディングにフルダイブ\n\nついにエージェントがコードを書き、僕は監督するだけ。結果はかなり良好。たまに「何が起きてる？」となっても、すぐ聞けばいい。\n\n[Claude Code](https://docs.anthropic.com/en/docs/agents-and-tools/claude-code/overview)、[Cline](https://cline.bot/) を試し、推論モデル（[DeepSeek](https://aws.amazon.com/bedrock/deepseek/)）とコーディングモデル（Claude Sonnet 3.7）を組み合わせ、計画フェーズを削ぎ落とす。\n\nターミナルを 3〜5 個開き、ロボットがコードを書くのをタブで切り替えながら眺めるという狂気。\n\n防御的コーディングにも没頭する。\n\n- 尋常じゃないテストカバレッジ  \n- 形式手法による検証（formal verification）  \n- メモリ安全な言語の採用  \n- コンパイラの出力が簡潔な言語を選び、コンテキストを節約  \n\n「人の手をほとんど介さず、安全に完成させる方法」を真剣に考える。\n\nトークン課金はエグい額になり、GitHub Actions の時間もテストで食い潰す。  \nでも気分は最高。キーボードでコードを書かなくても腹は立たない。\n\n### Step 9: エージェントに任せ、自分はゲームをする\n\nそして到達点へ。まだ完全ではないが、行き先は見えた。  \nソフトウェアの仕事が減るのでは、と不安になる。友人がリストラされ、新しい職もない。本当に「今回は違う」と感じる。\n\n周囲からは宗教的狂信者に見られがち。「エージェント型コーディング、マジでやばい！」と力説し、「“agentic” って言葉は嫌いだけどさ」と添えても、すでにバケツいっぱいクールエイドを飲み干している。ロボットと組むことで生産性が跳ね上がり、世界が輝いて見えるのだ。\n\nパラダイムはすでに変わった。トーマス・クーンが本を書けるレベルの混乱期。\n\nこの旅を踏んでいない人には見えないが、経験者同士はうなずき合い、旅路やゴールを語り合う。\n\nロボットに作業を任せ、積んでいたゲームボーイソフトをじっくり堪能。  \nロボットがタスクを終えると「続けますか？」と聞いてくるので **yes** と打ち、またテトリスへ——奇妙で、不気味ですらある。\n\n## 加速\n\n<paul confetti photo>  \n{{< image src=\"journey-confetti.webp\" alt=\"Confetti\" caption=\"Confetti at a Paul McCartney Concert at the Tokyo Dome. iPhone 6, 4/25/2015\" >}}\n\n[未来](https://ai-2027.com/)がどうなるかは分からない。  \nこの旅を経験していない人材は [雇用主](https://x.com/tobi/status/1909231499448401946) に魅力的に映らなくなるのでは、と心配だ。でも、それはかなり近視眼的だとも思う。結局のところ、これはツールと自動化の話に過ぎないのだから。\n\n昔、採用を拡大していた頃、僕らは自社のネットワークや技術スタックを超えて候補者を探していた。Python の職場なのに Python 未経験の人を面接し、「優秀なエンジニアなら一緒にやれば Python に慣れる」と考えていた。実際、多様なバックグラウンドの人がチームを底上げしてくれた。\n\nAI 支援開発でも同じだ。チーム文化に合い、熱意ある優秀な開発者なら、AI ツール経験が浅くても問題ない。伴走しながら学んでもらえば、やがて彼らがドライバーとなり、これらのツールを使いこなす。\n\nもう一つ強調したいのは「文章力」がさらに重要になったこと。  \n従来からドキュメントやコラボのために文章力は大事だったが、今や AI への指示を書くためにも不可欠。効果的なプロンプトを書く力は、良いコードを書くのと同じくらい重要になりつつある。\n\n## リーダーシップ\n\nリーダーやエンジニアリングマネージャーは、信者であれ懐疑派であれ、AI 支援開発に深く踏み込むべきだ。なぜなら、次に採用する開発者は主に AI ツールやエージェントを通じてコーディングを学んできた世代だから。これがソフトウェアエンジニアリングの新常態だ。僕ら “コードブーマー” が現役でいられる時間は、そう長くない。\n\n**面白い注記：** 僕は文章を書くときに LLM をあまり使わない。便利なのは分かっているが、自分の声を残したいし、平均化されたくない。その一方でコードは平均化されてほしい——面白いよね。\n\n---\n\nこの投稿にフィードバックをくれた Jesse、Sophie、Vibez クルー（Erik、Kanno、Braydon ほか）、Team 2389、そして皆さんに感謝！\n\n# CRITIQUE FEEDBACK\n徹底レビュー : 翻訳の問題点と改善案  \n───────────────────────  \n凡例  \n［重み］Critical＝要修正必須 / Major＝修正強く推奨 / Minor＝あれば直す / Style＝語調・好み  \n【分類】Acc＝意味精度 / Nuance＝ニュアンス喪失・文化差 / Lang＝日本語として不自然・誤用 / Tone＝文体・語気 / Term＝用語統一 / Add/Omit＝抜け・不要追加 / ML＝機械翻訳臭  \n\n───────────────────────  \n1 重大な意味ずれ・欠落（Critical / Major）  \n───────────────────────  \nNo. | 重み | 分類 | 原文 vs. 訳 | 問題点 | 修正案\n---|---|---|---|---|---\n1 | Major | Add/Omit | “build lots of weird shit, and doing really fun things with code again” |「weird shit」が丸ごと消え「コードを書くのが再び楽しくなる」に希釈。ハック的・クレイジーなニュアンスが抜け落ちる。 | 「変テコな物を山ほど作り始めて、またコードでバカな遊びが出来るようになる」等、ハチャメチャ感を補う。\n2 | Major | Acc | “browser based foundational model” →「ブラウザ上のモデル」 | “foundational”(基盤モデル)を削除。用語として重要。 |「ブラウザ上の基盤モデル」または「ブラウザで動く基盤モデル」。\n3 | Major | Acc | “Then they are like ‘this LLM is a piece of shit…’ Which is not accurate, but also can be true.” →「でもそれは正確じゃない——もっとも場合によっては当たっていることもある。」 | “can be true” は「そういう一面もある」と半ば肯定。訳はやや弱く、言い回しも硬い。 |「当たっていない。でもまあ、当たっている時もあるけどね。」など皮肉を残す。\n4 | Major | Add/Omit | “It gives you an idea of how the LLM is working – and prepares you for the stupid shit it will often recommend.” →「トンチンカンな提案をされる覚悟もできる。」 | “how the LLM is working” が落ちた。「仕組みを体感し…」程度入れる。 |「LLM がどう動くかを肌で感じられ、そしてそのたびにトンチンカンな提案への耐性も付く。」\n5 | Major | Add/Omit | “You spend your time watching the robot do your job.” →「ロボットが仕事するのを眺める時間が増える。」 |「自分の仕事をロボットがやっている」という皮肉が弱体化。 |「ロボットが〈自分の仕事〉を肩代わりするのを、ただ眺め続ける。」と強調。\n6 | Major | Acc | “We hired incredible people who had never worked with our stack. Many times they brought such a different perspective that it elevated the entire team.” →「多様なバックグラウンドの人がチームを底上げしてくれた。」 | “brought such a different perspective” が消え、チーム向上理由が弱い。 |「異質な視点を持ち込んでくれ、そのおかげでチーム全体が底上げされた。」と肉付け。\n7 | Critical | Term | “agentic coding” →「エージェント型コーディング」 | 原文は造語的強調。“agentic” を訳内で定義せず使用。 | 脚注やカッコで「agentic（エージェント主導の）」等、初出で説明し以後統一。\n8 | Major | Acc | “Kuhn could write a book about the confusion happening during this time.” →「トーマス・クーンが本を書けるレベルの混乱期。」 | “could write”＝「書けそうなくらい」、訳は「書けるレベル」でやや硬。 |「クーンならこの混乱について本を書きたくなるだろう」等、仮定法を柔らかく。\n\n───────────────────────  \n2 失われたニュアンス・文化参照（Nuance）  \n───────────────────────  \nNo.|重み|分類|問題点|修正案\n---|---|---|---|---\n9|Major|Nuance|“seen some shit. Lol.”→「修羅場もたくさん見てきたわけだ。笑」|スラング感が弱く文学的。|「マジで色々ヤバい目にも遭った。笑」など砕けた俗語で。\n10|Major|Nuance|“Fuck it – jump to the end.”→「もういいや、いきなり最後へ飛ぼう。」|“Fuck it”の投げやり感が薄い。|「クソくらえ、もう一気に最後へ行け。」等で勢いを。\n11|Minor|Nuance|“Copy and paste from Claude web”→「Claude Web とのコピペ」| “from”→“into”も含め「窓口としてのClaude Web」感がやや曖昧。|「Claude Web にコードをコピペで突っ込む」など能動的に。\n12|Minor|Nuance|“200 gallons of kool-aid”→「バケツいっぱいクールエイド」|量感が曖昧。|「クールエイドを200ガロン一気飲み」等で誇張を保持。\n\n───────────────────────  \n3 日本語としての不自然さ・文法（Lang / Tone）  \n───────────────────────  \nNo.|重み|分類|問題|改善案\n---|---|---|---|---\n13|Major|Lang|「この頃には LLM を 5 つくらい課金している」|「LLM を課金」は不自然。「〜に課金している」「〜をサブスクしている」。|「この時点で LLM サービスを 5 つくらい課金中だ」など語法整備。\n14|Major|Tone|一人称が「僕」で統一されているが、原文は性別中立“I”。日本語でもっと中性的「俺 / 私 / オレ」など選定検討。|記事全体のキャラ設定に合わせ調整。\n15|Minor|Lang|「タブで切り替えながら眺めるという狂気。」→体言止めで唐突。|「…眺めるという、ちょっとした狂気だ。」など文にする。\n16|Minor|Lang|「コンテキストを節約」|「コンテキスト枠を節約」等。\n17|Minor|Lang|「ターミナルの住人（terminal jockey）」|括弧内はカタカナ「ターミナルジョッキー」に統一した方が読みやすい。\n\n───────────────────────  \n4 用語・表記の統一（Term）  \n───────────────────────  \nNo.|重み|分類|問題|指針\n---|---|---|---|\n18|Major|Term|“LLM” をカタカナ化せず「LLM」と英字固定している→OKだが “大文字小文字混在” や一貫性要確認（例：「Claude Web」が途中で「Claude web」）。|固有名の大文字小文字を原綴で統一。\n19|Minor|Term|“one shot / ワンショット”“仕様書 / spec”等が互い違い。初出で括弧対訳、その後はどちらかに寄せる。|統一ルール策定（外来語はカタカナ、技術略号は英字等）。\n\n───────────────────────  \n5 機械翻訳っぽさ・直訳臭（ML / Style）  \n───────────────────────  \nNo.|重み|分類|問題|修正\n---|---|---|---|\n20|Minor|ML|「魔法に限りなく近い体験が IDE に統合され」等、英語構文が強い。|「あの魔法のような体験が、そのまま IDE で出来る。」など日本語語順に。\n21|Minor|ML|Step 見出しに “Step 1:” 等を残している。日本語記事なら「ステップ1」か番号で。|表記統一。\n\n───────────────────────  \n6 追加で入れた語句・不要な意訳（Add）  \n───────────────────────  \nNo.|重み|分類|問題|備考\n---|---|---|---|\n22|Minor|Add|「転機だ。」など短い文を複数補った|文意は保つが、訳注か脚注で「訳者意図」示す or 原文に忠実な再構成を。\n23|Minor|Add|「世界は崩壊寸前」→原文 “world is falling apart” は誇張表現。直訳寄りに戻すか検討。|\n\n───────────────────────  \nまとめ  \n・致命的な誤訳は少ないが、原文特有のスラングや皮肉、誇張がところどころ薄まっている。  \n・「agentic coding」「foundational model」など技術・新語の説明不足は読者理解を阻害。初出で定義＋統一表記を。  \n・語気・文体は砕けた英語をやや丁寧に寄せ過ぎ。原文同様の“砕け・毒舌・罵り”を意図的に保持することで雰囲気が再現できる。  \n・日本語の語法（～を課金、体言止め乱用）を滑らかにし、外来語とカタカナ語の統一を図る。  \n\n上記を修正すれば、「英語の原稿をそのまま日本語で口走った」感が消え、著者の個性と勢いを保った自然な日本語になるはず。\n\nPlease address ALL issues identified in the critique and provide an improved translation.\nReturn ONLY the improved translated text without explanations or comments.",
      "response": "I have spent a lot of time since my [blog post](/2025/02/16/my-llm-codegen-workflow-atm/) about my LLM workflow talking to folks about codegen and how to get started, get better, and why it is interesting.\n\nThere has been an incredible amount of energy and interest in this topic. I have received a ton of emails from people who are working to figure all of this out. I started to notice that many people are struggling to figure out how to start, and how it all fits together. Then I realized that I have been hacking on this process since 2023 and I have seen some shit. Lol.\n\nI was talking about this with friends (Fisaconites's represent) and I sent this message in response to a thread about AI assisted agents, and editors:\n\n> if i were starting out, i don't know if it is helpful to jump right into the \"agent\" coders. It is annoying and weird. having walked a few people through this (successfully, and not successfully) I find that the \"hero's journey\" of starting with the Copilot, moving to the copy and paste from Claude web, to the Cursor/continue, to the fully automated \"agents\" seems to be a successful way to adopt these things.\n\nThis lead me to start thinking a lot about the journey and how to get started using agentic coding:\n\n> The caveat is that this is largely for people with experience. If you don’t have much dev experience, then fuck it - jump to the end. **Our brains are often ruined by the rules of the past.**\n\n## A journey of sight and sound\n\n{{< image src=\"journey-harper.webp\" alt=\"Harper is very trustworthy\" caption=\"Your thoughtful guide: Harper. iPhone X, 6/10/2018\" >}}\n\nThis is my journey. It is largely the path I took. I think you could speed run it if you were compelled. I don’t think you need to follow every step, but I do think every step is additive.\n\nHere are the steps:\n\n### Step 1: Get out of bed with wonder and optimism\n\nLol. Just kidding. Who has time for that? It may help, but the world is falling apart and all we got is codegen to distract us.\n\nIt does help to assume that these type of workflows could work and could be additive. If you hate LLMs and don’t think it will work, then you will not be successful here. ¯\\\\\\_(ツ)\\_/¯\n\n### Step 2: Start with AI-assisted autocomplete\n\nThis is the real step one! You need to spend enough time in the IDE context to know how well you would work with [intellisense](https://en.wikipedia.org/wiki/Code_completion), [zed autocomplete](https://zed.dev/blog/out-of-your-face-ai), [Copilot](https://copilot.github.com/), etc. It gives you an idea of how the LLM is working - and prepares you for the stupid shit it will often recommend.\n\nPeople seem to want to skip this step and just jump to the end. Then they are like “this LLM is a piece of shit and can’t do anything right!” Which is not accurate, but also can be true. The magic is in the nuance. Or as I like to remember: _life is confusing_.\n\n### Step 3: Start using Copilot as more than autocomplete\n\nOnce you have a good process in place with the autocomplete and you are not mad _all_ of the time, you can move on to the magic of talking to Copilot.\n\nVS Code has a pane where you can Q&A with Copilot and it will help you with your code, etc. It is pretty cool. You can have a nice convo about your code, and it will be thoughtful and help you solve whatever query you asked.\n\nHowever, using Copilot is like using a time machine to talk to ChatGPT in 2024. It isn’t _that_ great.\n\nYou will be wanting more.\n\n### Step 4: Move to copying and pasting code into Claude or ChatGPT\n\nYou start to satisfy your curiosity by pasting code into the browser based foundational model and asking “WHY CODE BROKE??” And then having LLM respond with a coherent and helpful response.\n\nYou will be AMAZED! The results are going to blow your mind. You are going to start to build lots of weird shit, and doing really fun things with code again. Mostly cuz it cut out the entire debugging process.\n\nYou can also do wild things like paste in a Python script and tell the LLM “make this into go” and it will just _make it into go_. You will start thinking “I wonder if I can one shot this.”\n\nCopilot will start to look like 2004 autocomplete. It is handy, but not really necessary.\n\nThis will lead you down a couple sub paths:\n\n#### You will start to prefer one model cuz of vibes\n\nThis is the unfortunate first step towards the vibe in vibe coding. You will start to prefer how one of the big models talk to you. It is feelings tho. Kind of weird. You will find yourself thinking “I like how Claude makes me feel.”\n\nMany developers seem to like Claude. I use both, but mostly Claude for code related things. The vibe with Claude is just better.\n\n> You have to pay for them to get the good stuff. So many friends are like “This is a piece of shit” and then you find out they are using a free model that barely works. Lol. This was more of an issue when the free version was ChatGPT 3.5, but make sure you are using a capable model before you throw the entire premise out.\n\n#### You will start thinking about how to make things go faster\n\nAfter copying and pasting code into Claude for a few weeks you are going to realize that this is annoying. You are going to start working through context packing, and trying to fit more of your code into the LLM context window.\n\nYou will experiment with [repomix](https://repomix.com/), [repo2txt](https://github.com/donoceidon/repo2txt), and other code context tools. Just so that you can slam your entire codebase into the Claude context window. There is a chance that you will even start writing shell scripts (well Claude will write them) to help make this process easier.\n\nThis is a turning point.\n\n### Step 5: Use an AI enabled IDE (Cursor, Windsurf? )\n\nThen a friend will say “why don’t you just use [Cursor](https://cursor.sh/)?”\n\nIt will completely blow your mind. All the magic you just experienced by copying and pasting is now available in your IDE. It is faster, it is fun, and it is close to magic.\n\nAt this point you are paying for like 5 different LLMs - what is another $20 a month.\n\nIt works super well, and you feel way way more productive.\n\nYou will start playing with the agentic coding features built directly into the editors. It will _basically_ work. But you can see a destination on the horizon that may be better.\n\n### Step 6: You start planning before you code\n\nSuddenly you find yourself building out very robust specs, PRDs, and to-do docs that you can pipe into the IDEs agent, or into Claude web.\n\nYou have never “written” so much documentation. You start to use other LLMs to write more robust documentation. You are transposing docs from one context (PRD) to another (“Can you make this into prompts”). You start to use the LLM to design your codegen prompts.\n\nYou are saying the word “[waterfall](https://en.wikipedia.org/wiki/Waterfall_model)” with a lot less disdain. If you are old, you may be fondly remembering the late 90s and early 2000s and wonder “is this what Martin Fowler felt like before [2001](https://en.wikipedia.org/wiki/Agile_software_development)?”\n\nIn the world of codegen: The spec is the [godhead](https://en.wikipedia.org/wiki/Godhead).\n\n### Step 7: You start playing with aider to enable quicker loops\n\nAt this point you are ready to start getting into the **good stuff**. The codegen previously required you to be involved, and paying attention. But it is 2025! Who wants to code with their fingers?\n\n> One other path that lots of friends are experimenting with is to code with your voice. To start instruct aider via a whisper client. It is hilarious and fun. MacWhisper is a very good tool for this locally. Aqua, and superwhisper are nice but cost more. They may use cloud services to do the inference. I prefer local.\n\nTrying out aider is a wild experience. You start it up, it instantiates itself into your project. You put your query directly into aider, and it just kind of does what you asked. It asks for permission to act, and gives you a framework to get things done, and then acts. It completes the task, and the commits to your repository. You no longer are so worried about one shotting tasks. you will just have aider do it in a few steps.\n\nYou start building out rulesets for the LLM to follow. You learn about the “[Big Daddy](https://www.reddit.com/r/cursor/comments/1joapwk/comment/mkqg8aw/)” rule, or the “no deceptions” addition to your prompts. You start be really good at prompting the robot.\n\n**It works.**\n\nEventually you don’t even open up an IDE - you are just a terminal jockey now.\n\nYou spend your time watching the robot do your job.\n\n### Step 8: You lean all the way into agentic coding\n\nYou are now using an agent to code for you. The results are pretty good. There are a few times when you have no idea what’s going on. But then you remember you can just ask it.\n\nYou start to experiment with [Claude Code](https://docs.anthropic.com/en/docs/agents-and-tools/claude-code/overview), [Cline](https://cline.bot/), etc. You are super happy to be able to use a reasoning model ([deepseek](https://aws.amazon.com/bedrock/deepseek/)!) and a coding model ([Claude sonnet 3.7](https://www.anthropic.com/claude/sonnet)) together to start removing planning steps.\n\nYou are doing wild stuff like running 3-5 concurrent sessions. Just tabbing through terminals watching robots code.\n\nYou will start coding defensively:\n\n- really hardcore test coverage\n- thinking about [formal verification](https://github.com/formal-land/coq-of-rust)\n- using memory safe languages\n- choosing languages based on compiler verbosity to help pack the context window\n\nYou will think long and hard about how to make sure that the thing you are building just gets built, safely without intervention.\n\nYou will spend **SO** much money on tokens. You will also use up all your GitHub action hours running all the wild tests that you are running to make sure that the code is built safely.\n\nIt feels good. You are not mad about not coding.\n\n### Step 9: You let the agent code, and you play video games\n\nSuddenly, you are there. You are at the destination. Well, kind of - but you see where we are going. You start to worry about software jobs. Your friends are being laid off, and they can’t get new jobs. It feels different this time around.\n\nWhen you talk to your peers they think of you as a religious zealot cuz you are working within a different context than they are. You tell them “omg you have to try out agentic coding!” Maybe you add “I hate the word agentic” just to show that you have not drank 200 gallons of kool-aid. But you have. The world seems brighter cuz you are so productive with your code.\n\nIt doesn’t matter. The paradigm has shifted. Kuhn could write a book about the confusion happening during this time.\n\nNobody can see this because they didn’t go through the journey to get here. But those who have are agreeing and sharing their own tips around the journey, and debating the destination.\n\nNow that you are knee-deep in letting robots do the work, you can really focus on all those gameboy games you have been wanting to play. There is a lot of downtime. And when the robot is done with a task, it will ask “should I continue” and you type **yes** and go back to Tetris.\n\nVery strange. Unsettling, even.\n\n## The acceleration\n\n<paul confetti photo>\n{{< image src=\"journey-confetti.webp\" alt=\"Confetti\" caption=\"Confetti at a Paul McCartney Concert at the Tokyo Dome. iPhone 6, 4/25/2015\" >}}\n\nI don’t know what will happen in the [future](https://ai-2027.com/). I am worried that people who are not working through this journey are not going to be attractive to [employers](https://x.com/tobi/status/1909231499448401946). Which is kind of near-sighted, because, ultimately, we are talking about tooling, and automation.\n\nWhen we were ramping up hiring in the past, we would often spread our queries well past our network, and past our tech stack. We would be a Python shop and interview people who didn’t know Python, and have never used Python. Our thought was that with a great engineer, we could work together to get them comfortable with Python. They would be additive even if they were not super comfortable with our stack. This worked out well for us. We hired incredible people who had never worked with our stack. Many times they brought such a different perspective that it elevated the entire team.\n\nThe same principles apply to AI-assisted development. When hiring talented developers who match your team's culture and show enthusiasm, their experience level with AI tools shouldn't be a deal-breaker. Not everyone needs to be an AI development expert from day one. Instead, guide them through the learning process at their own pace while they work alongside more experienced team members.\n\nEventually they will be the driver and will be successfully using these tools.\n\nOne other aspect I keep thinking about: Writing skills have become critical. While we've always valued strong communicators on tech teams for documentation and collaboration, it's doubly important now. Not only do you need to communicate with humans, you need to write clear, precise instructions for AI. Being able to craft effective prompts is becoming as vital as writing good code.\n\n## The leadership\n\nI think all leaders and engineering managers need to dive deep into AI-assisted development, whether you're a believer or not. Here's why: The next generation of developers you'll be hiring will have learned to code primarily through AI tools and agents. This is what software engineering is becoming. We need to understand and adapt to this reality.\n\nUs code boomers are not long for this world.\n\n**interesting note:** i don't really use LLMs to help me write things. I imagine they would be good at it, but i find that i want my voice to be heard, and not normalized. Whereas my code needs to be normalized. interesting.\n\n---\n\nThanks to Jesse, Sophie, the Vibez crew (Erik, Kanno, Braydon, and others), team 2389, and everyone else who gave me feedback on this post.",
      "usage": {
        "prompt_tokens": 11084,
        "completion_tokens": 3217,
        "total_tokens": 14301
      },
      "streaming": true
    },
    "frontmatter": {
      "model": "o3",
      "target_language": "japanese",
      "system_prompt": "You are a professional translator. Translate the following frontmatter fields to japanese.\nEach field is in the format \"field_name: content\". Translate ONLY the content, not the field names.\nReturn the translated content in the exact same format, preserving all field names.",
      "user_prompt": "title: An LLM Codegen Hero's Journey\n\ndescription: A comprehensive guide detailing the evolution of using AI-assisted software development, from basic code completion to fully autonomous coding agents, with practical steps and insights for maximizing productivity through LLM integration.\n\n",
      "response": "title: LLMコード生成ヒーローズジャーニー\ndescription: 基本的なコード補完から完全自律型コーディングエージェントまで、AI支援ソフトウェア開発の進化を詳細に解説し、LLM統合による生産性最大化のための実践的なステップと洞察を提供する包括的ガイド。",
      "usage": {
        "prompt_tokens": 101,
        "completion_tokens": 87,
        "total_tokens": 188
      },
      "fields": [
        "title",
        "description"
      ],
      "streaming": true
    },
    "all_critiques": [
      "【総評】  \n全体として大筋の意味は伝わるものの、英語原文が強く残ったままの箇所・未訳箇所・ニュアンスの取りこぼしが散見され、「日本語で書かれた原稿」の域には達していません。とくに引用ブロックや見出しの未訳、罵語・砕けた口語・ユーモアのトーン劣化が目立ちます。以下、深刻度別に指摘します。\n\n====================================================================\n❶ Critical – 内容の欠落・誤訳・未訳\n====================================================================\n\n1. 大量の未訳引用  \n   - 1行目の長文引用（“if i were starting out...”）  \n   - “The caveat is that this is largely for people with experience ...”  \n   - Step 7 内の音声操作に関する > 引用 (“One other path that lots of friends are experimenting with ...”)  \n   → すべて丸ごと英語のまま。原文と同じ位置で和訳を載せ、必要に応じて原文を併記してください。  \n   例:  \n   > もし今から始めるなら、いきなり「エージェント系」コーダーに飛びつくのは得策かどうか分からない。 …  \n   （※以下意訳を続ける）\n\n2. 「fuck it」「piece of shit」などの強い罵語のトーン落ち\n   - 原文の荒さが薄まり、筆者のキャラが弱くなる。  \n   - 例: “then fuck it – jump to the end.” → 「もうクソくらえだ、いきなり最後のステップへ行け」など。  \n\n3. 文化参照の脱落  \n   - “hero’s journey” をそのまま放置。ジョゼフ・キャンベルの概念なので、（カタカナ＋補足）「ヒーローズ・ジャーニー（英雄の旅）」と説明が欲しい。  \n   - “Kuhn could write a book” は「トーマス・クーンが本を書けるほどのパラダイム転換」という含意。単なる誤訳はないが言及ゼロ。  \n\n4. 語義ずれ／誤記  \n   - “Fisaconites's represent” → 原文は “Fisia Conites”? いずれにせよ誤表記の可能性あり。調査して正しい表記に。  \n   - “hero's journey of starting with the Copilot, moving to the copy and paste from Claude web, to the Cursor/continue, to the fully automated ‘agents’ ”  \n     「Cursor/continue」は Cursor と Continue（拡張機能）の並列だが、訳では「Cursor/continue」が1語扱い。  \n   - “foundational model”→「基盤モデル」は OK だが、他の箇所で「大型モデル」「大規模モデル」など混在。統一を。  \n\n====================================================================\n❷ Major – トーン・文体・日本語としての不自然さ\n====================================================================\n\n1. タイトル・段階名の未訳  \n   - “Step 2: Start with AI-assisted autocomplete” 等を英語のまま表示。  \n   → 日本語の見出し（例：「ステップ2：AI補完から始める」）に統一。カジュアルさを維持しつつ番号を残す。  \n\n2. 英語語句の過剰残存  \n   - “life is confusing”“vibes”“one shotting”“agentic coding” など、意味が汲みにくい読者も。  \n   → カタカナ化＋簡単な注記、あるいは自然な日本語置換を。  \n     例：vibes → 「ノリ（vibes）」、one-shot → 「一撃生成（one-shot）」 等。\n\n3. カジュアル口語の硬化  \n   - 原文のフランクさに対し、訳はやや固め・説明調。  \n   - 例：“You will be AMAZED!” → 「マジで度肝を抜かれます！」など勢いをつけると著者の声が生きる。  \n\n4. 句読点・ダッシュの多用  \n   - “——” を多用しており視認性が悪い。日本語の読点・カッコ・コロン等で整理。  \n\n====================================================================\n❸ Minor – 細部の表現・用語統一・体裁\n====================================================================\n\n1. 用語ゆれ  \n   - context window ➔ 「コンテキストウィンドウ」「LLM のウィンドウ」混在。  \n   - “spec” → 「仕様」「仕様書」などバラつき。  \n\n2. 技術語のカタカナ vs 英語  \n   - “formal verification” をリンク先付きでカタカナ化しているが、“memory safe languages” は英語。ルールを決める。  \n\n3. タイポ  \n   - “LLM に守らせるルールセットも作り始め” → 「守らせる」は文脈的に「従わせる」ほうが自然。  \n\n4. 一部意訳の省略  \n   - “build lots of weird shit” → “変なものを山ほど作り始める” など訳しきれていない。  \n   - “nobody can see this because they didn’t go through the journey” → 「旅程を踏んでいない人には見えない」など追加。  \n\n5. 括弧表記  \n   - 原文の (deepseek!) など感嘆符入り括弧は、全角括弧＋感嘆符でもOK。  \n\n====================================================================\n❹ 推奨修正方針\n====================================================================\n\nA. まず未訳箇所を完全に翻訳。引用ブロックは  \n　①和訳 → ②原文（必要なら折りたたみ）の順で。  \n\nB. トーン再現のため、  \n　・罵語・スラングはマイルド化しすぎず、カジュアルさを維持。  \n　・文末を「〜だ」「〜する」に統一し青年期ブログ調に。  \n\nC. 用語統一表  \n　foundational model ＝ 基盤モデル  \n　context window ＝ コンテキストウィンドウ  \n　agentic coding ＝ エージェント型コーディング  \n　one-shot ＝ ワンショット生成  \n　spec ＝ 仕様書（spec）  \n　… などドキュメント冒頭に掲示。  \n\nD. 英語の見出し／ステップ番号はすべて日本語へ。  \n\nE. “Fisaconites's represent” を調査し正しい固有名詞に修正。誤綴りのまま残すなら［原文ママ］注記。  \n\nF. リンクテキスト  \n　英語タイトルが長いと読みづらいので「詳細はこちら」方式か、日本語＋英語併記へ変更。  \n\nG. ダッシュ「——」やスラッシュは使いすぎない。読みやすい句点・読点に書き換え、必要なら脚注。  \n\n====================================================================\n❺ まとめ\n====================================================================\n\n訳稿は情報量は保たれているものの、  \n・未訳引用の放置  \n・原文トーンの希薄化  \n・用語・文体の一貫性欠如  \nが“致命的”レベルで残っています。上記 Critical 項目を最優先で修正し、Major でトーンを整え、Minor で磨きをかければ、「最初から日本語で書かれたような」完成形に近づきます。",
      "==============================\n徹底レビュー ── 主な問題点と改善案\n==============================\n\n【凡例】  \n★＝Critical（意味を損なう誤訳・欠落・不要な追加）  \n◆＝Major（トーン／文体／語法・自然さ・専門用語の不統一）  \n△＝Minor（細部の表現・句読点・スタイルなど）\n\n--------------------------------------------------\nA. 内容の正確性／誤訳・欠落・過剰訳\n--------------------------------------------------\n★A-1 Step 2 のニュアンス欠落  \n原文 “Which is not accurate, but also can be true.”  \n訳文「でもそれは早計」  \n→「正確ではない。でも事実でもあり得る」という原文の自己矛盾ギャグが消失。  \n改善例）「それは正確とは言えない──でも、実際そういう面もある。」\n\n★A-2 Step 3 “time machine” の意図が抜け落ち  \n“It’s like using a time machine to talk to ChatGPT in 2024.”  \n→訳文から「タイムマシン」の例えが消えている。  \n改善例）「Copilot と話すのは、タイムマシンで 2024 年の ChatGPT に会いに行くようなものだ。」\n\n★A-3 “near-sighted” の訳抜け  \n原文 “which is kind of near-sighted, because …”  \n訳文では触れていない。  \n改善例）「でも、それはかなり近視眼的だと思う。なぜなら…」\n\n★A-4 Windsurf? の「?」を除去  \n原文 “(Cursor, Windsurf? )” は筆者自身が「この名前合ってる？」と自嘲している。  \n→「Windsurf など」と断定的に訳すと筆者のニュアンスが失われる。  \n改善例）「（Cursor、Windsurf? など）」と疑問符ごと残す。\n\n★A-5 不要な内容追加  \nStep 6 で “トーマス・クーン…じゃなかった、マーティン・ファウラー” と訳者が勝手にギャグを追加。  \n→原文は Kuhn を出さないので情報＆ジョークの改変。  \n改善例）Kuhn を持ち出さず、原文どおり「マーティン・ファウラー」で止める。\n\n--------------------------------------------------\nB. トーン・スタイルの一貫性\n--------------------------------------------------\n◆B-1 一人称の揺れ  \n冒頭「自分」→途中で「俺」→「俺たち」と変化。  \n→読者に違和感。口語に寄せるなら「俺」で統一、もう少し抑えるなら「僕」or「私」に統一。\n\n◆B-2 文体ミックス（だ／である vs です／ます）  \n例）「便利だ。」→直後に「質問すると気の利いた回答をくれて便利だ。」など。  \n→カジュアルな「だ体」に統一するか、砕け口語＋敬体の混在を整理する。\n\n◆B-3 スラング強度のばらつき  \n“fuck it”→「クソくらえ」はOKだが、他では「アホみたい」「ヤバい」など日本語スラングの振れ幅が大きい。  \n→全体で同程度の荒さに揃える（例：「クソくらえ」なら「ヤバい」より「マジやば」など）。\n\n--------------------------------------------------\nC. 自然さ・読みやすさ\n--------------------------------------------------\n◆C-1 直訳／機械翻訳っぽい箇所  \n・「AI 補完」「サブパス」「vibes コーディング」など耳慣れないカタカナ。  \n　改善案：「AI 補完機能」「派生ルート」「“Vibes”コーディング」など注釈を添えるか日本語に。  \n・「指でコードなんて書きたくない」→やや直訳臭。「キーボードを打つのもバカらしい」など自然に。\n\n△C-2 比喩の過剰意訳  \n「脳天直撃」「鬼のようなテストカバレッジ」等は面白いが、原文の温度より強い。  \n→「頭が吹き飛ぶほど驚く」「尋常じゃないテストカバレッジ」程度に抑えると原文に近い。\n\n--------------------------------------------------\nD. 用語・表記の統一\n--------------------------------------------------\n◆D-1 サービス名・モデル名の揺れ  \n“Claude Web” ⇔ “Claude web”、 “Sonnet 3.7” ⇔ “Sonnet 3.7” など大文字／小文字が混在。  \n→公式表記に統一（Claude Web, Claude Sonnet 3.7）。\n\n◆D-2 英語残しの基準不明  \n“Big Daddy ルール” “no deceptions” などは原文どおり英語表記。  \n一方で PRD, IDE などは説明なし。脚注 or カッコで訳語を与えるか、全部英語で統一か方針を決める。\n\n--------------------------------------------------\nE. 文法・句読点・細部\n--------------------------------------------------\n△E-1 Markdown 行頭スペース  \n箇条書きのハイフン前後の全角スペースが一定でない。ブログ変換時に崩れる可能性。  \n△E-2 全角／半角混合  \n“LLM を 5 つくらい課金” → “LLMを5つぐらい課金” など数字周辺を整理。  \n△E-3 長音「ー」の揺れ  \n“エージェント型コーディング”と“エージェント型コーディング”で表記統一は OK だが、他のカタカナ語も最終確認を。\n\n--------------------------------------------------\nF. 具体的修正サンプル（抜粋）\n--------------------------------------------------\n●Step 2 該当部  \nみんなこのステップを飛ばしてゴールへ突っ走りたがり、「この LLM、クソの役にも立たねえ！」と言い出す。でもそれは正確じゃない──もっとも、場合によっては当たっていることもあるけどね。魔法は細部に宿る。俺がいつも言うように、life is confusing だ。\n\n●Step 3 冒頭  \nCopilot は、まるでタイムマシンで 2024 年の ChatGPT に会いに行くような感覚だ。言うほどすごくはない。\n\n●near-sighted 部分  \n……そんな人材は採りたくないという声も聞くが、それは正直ちょっと近視眼的だ。結局のところ、これはツールと自動化の話に過ぎないのだから。\n\n--------------------------------------------------\nまとめ\n--------------------------------------------------\n・重大な誤訳は少ないが、細かなニュアンス抜けと不要な訳者ギャグの挿入が散見。  \n・一人称／文体の揺れ、スラングの強度差が読みづらさを生む。  \n・直訳的カタカナ語や英語残しの基準を統一し、自然さと専門性を両立させる。  \n\n上記を修正すれば、原文の破天荒な語り口を保ちつつ、自然で読みやすい日本語になるはずです。",
      "【重大度ランク】\nCritical = 意味を取り違え内容を誤導／情報を欠落  \nMajor    = ニュアンス・語調・専門語のずれ／読みにくさが大きい  \nModerate = 不自然な日本語・細かい訳抜け／追加  \nMinor    = 細部のこなれ／統一感  \nNitpick  = 表記ゆれ・句読点など微調整  \n\n───────────────────────────────  \n1. Critical：意味の取り違え・欠落\n───────────────────────────────  \nC-1. 「compiler verbosity」 の逆転  \n原文: “choosing languages based on compiler verbosity to help pack the context window”  \n訳: 「コンパイラの詳細出力が豊富な言語を選び、コンテキストを節約」  \n問題: “help pack the context window” は「コンパイル時メッセージが簡潔でプロンプト長を圧縮しやすい」 という文脈。訳は “詳細出力が豊富” と真逆の意味。  \n修正案: 「コンパイラの出力が簡潔な言語を選んでコンテキストを節約」  \n\nC-2. 「ruined by the rules of the past」 のニュアンス欠落  \n原文: “Our brains are often ruined by the rules of the past.”  \n訳: 「俺たちの脳は過去のルールにしばしば縛られている。」  \n“ruined” は「壊されている／ダメにされている」。単なる “縛られている” では弱い。  \n修正案: 「過去のルールに脳みそをぶち壊されている」 等、破壊イメージを明示。  \n\nC-3. 形式検証リンク説明の欠落  \n原文: bullet “thinking about formal verification (link)”  \n訳: ただリンクを置いただけ。  \n修正案: 「形式手法（formal verification）まで考慮する」 と訳語を補う。  \n\nC-4. “Fisaconites's represent” 未訳  \n固有名詞とはいえ “represent” は呼び掛け／賛辞。丸ごと英語表記では意味が伝わらない。  \n修正案: 「Fisaconites のみんなリスペクト！」 等。  \n\n───────────────────────────────  \n2. Major：語調・スタイル・専門語\n───────────────────────────────  \nM-1. 一人称「俺」の連発  \n原文はカジュアルだが性別中立。“俺” はジェンダー／読者層を限定し、技術ブログ訳としては強すぎる。  \n提案: 「僕」「私」または一人称省略で全体トーンを調整。  \n\nM-2. 英単語多用の一貫性不足  \n例: “Vibes”“spec”“godhead”“hero’s journey” など。カタカナ表記・訳語・引用符が混在し統一感がない。  \n提案:  \n・初出で訳語＋括弧に原語 “ヒーローズ・ジャーニー（hero’s journey）”  \n・固有概念として残す場合は全編統一。  \n\nM-3. “godhead” の生硬さ  \n「仕様書こそが神 (godhead)」 は日本語として不自然。  \n提案: 「仕様書こそが絶対神だ」「仕様書が頂点（godhead）」 など言い換え。  \n\nM-4. “笑”“Lol” の処理  \n訳中で “笑” を使い、ほかは “Lol.” を残しておりブレている。どちらかに統一。  \n\nM-5. スラング訳し過ぎ／足りない箇所  \n・“fuck it”→「もういいや、いきなり最後へ飛べ」 程度に緩めた方が読みやすい。  \n・“piece of shit”→「クソ」だけだと罵倒感が弱い／強い箇所が混在、トーン調整要。  \n\n───────────────────────────────  \n3. Moderate：不自然な日本語・訳抜け小\n───────────────────────────────  \nMo-1. “copy and paste from Claude web” → 訳では “Claude Web へコピペ” と方向が逆。  \n提案: 「Claude Web にコピペして」 ではなく 「Claude Web からコピペして」 等、動作を明確に。  \n\nMo-2. “kind of weird. It is feelings tho” の抜け  \n訳は「Kind of weird」 が落ち、「どのモデルの話し方が好きかで選び始める。」だけ。  \n提案: 「気分なのでちょっと変だ」 を補完。  \n\nMo-3. “close to magic”→「ほぼ魔法」 はやや直訳感。  \n提案: 「魔法に限りなく近い」 等。  \n\nMo-4. “terminal jockey” を直訳していない  \n訳: 「ターミナルの住人」 可だが脚注で由来を補うと親切。  \n\nMo-5. 段落改行の欠落  \n所々で英文の “—” が “——” など変換漏れ、読みづらい。  \n\n───────────────────────────────  \n4. Minor：表記ゆれ・統一\n───────────────────────────────  \nmi-1. 「Claude Web」/「Claude web」 が混在  \nmi-2. 「LLM」「ＬＬＭ」半角全角ゆれ  \nmi-3. 箇条書き “-” “—” 不統一  \nmi-4. “GitHub action hours” → “Actions” 大文字 S 抜け  \nmi-5. “superwhisper”→ “SuperWhisper” の大小統一  \n\n───────────────────────────────  \n5. 機械翻訳臭／直訳調\n───────────────────────────────  \nL-1. 英語語順そのままの句が散見（例: “こんなにドキュメントを書いたのは初めてだ” →「これほど文書を書くのは初めてだ」等）。  \nL-2. カンマ区切り長文のダラダラ訳。日本語では文を割りテンポを整えると読みやすい。  \n\n───────────────────────────────  \n【総合提案】  \n1. Critical事項を優先修正（特に compiler verbosity の逆転）。  \n2. 全体トーンを “カジュアル × 技術ブログ” に再設計。  \n　・一人称を「僕／私」または省略  \n　・スラングは日本語の強弱を統一し、過度な汚言は文脈で軽めに。  \n3. 用語統一表を作成 (例: Copilot／Claude／Cursor、エージェント型コーディング、LLM など)。  \n4. 英語フレーズは初出で訳語＋括弧、以降は片方に統一。  \n5. 長文は二文に分割し読点を整理。  \n\n以上を直せば、内容忠実かつ “最初から日本語で書かれたブログ” のような自然さに仕上がります。",
      "徹底レビュー : 翻訳の問題点と改善案  \n───────────────────────  \n凡例  \n［重み］Critical＝要修正必須 / Major＝修正強く推奨 / Minor＝あれば直す / Style＝語調・好み  \n【分類】Acc＝意味精度 / Nuance＝ニュアンス喪失・文化差 / Lang＝日本語として不自然・誤用 / Tone＝文体・語気 / Term＝用語統一 / Add/Omit＝抜け・不要追加 / ML＝機械翻訳臭  \n\n───────────────────────  \n1 重大な意味ずれ・欠落（Critical / Major）  \n───────────────────────  \nNo. | 重み | 分類 | 原文 vs. 訳 | 問題点 | 修正案\n---|---|---|---|---|---\n1 | Major | Add/Omit | “build lots of weird shit, and doing really fun things with code again” |「weird shit」が丸ごと消え「コードを書くのが再び楽しくなる」に希釈。ハック的・クレイジーなニュアンスが抜け落ちる。 | 「変テコな物を山ほど作り始めて、またコードでバカな遊びが出来るようになる」等、ハチャメチャ感を補う。\n2 | Major | Acc | “browser based foundational model” →「ブラウザ上のモデル」 | “foundational”(基盤モデル)を削除。用語として重要。 |「ブラウザ上の基盤モデル」または「ブラウザで動く基盤モデル」。\n3 | Major | Acc | “Then they are like ‘this LLM is a piece of shit…’ Which is not accurate, but also can be true.” →「でもそれは正確じゃない——もっとも場合によっては当たっていることもある。」 | “can be true” は「そういう一面もある」と半ば肯定。訳はやや弱く、言い回しも硬い。 |「当たっていない。でもまあ、当たっている時もあるけどね。」など皮肉を残す。\n4 | Major | Add/Omit | “It gives you an idea of how the LLM is working – and prepares you for the stupid shit it will often recommend.” →「トンチンカンな提案をされる覚悟もできる。」 | “how the LLM is working” が落ちた。「仕組みを体感し…」程度入れる。 |「LLM がどう動くかを肌で感じられ、そしてそのたびにトンチンカンな提案への耐性も付く。」\n5 | Major | Add/Omit | “You spend your time watching the robot do your job.” →「ロボットが仕事するのを眺める時間が増える。」 |「自分の仕事をロボットがやっている」という皮肉が弱体化。 |「ロボットが〈自分の仕事〉を肩代わりするのを、ただ眺め続ける。」と強調。\n6 | Major | Acc | “We hired incredible people who had never worked with our stack. Many times they brought such a different perspective that it elevated the entire team.” →「多様なバックグラウンドの人がチームを底上げしてくれた。」 | “brought such a different perspective” が消え、チーム向上理由が弱い。 |「異質な視点を持ち込んでくれ、そのおかげでチーム全体が底上げされた。」と肉付け。\n7 | Critical | Term | “agentic coding” →「エージェント型コーディング」 | 原文は造語的強調。“agentic” を訳内で定義せず使用。 | 脚注やカッコで「agentic（エージェント主導の）」等、初出で説明し以後統一。\n8 | Major | Acc | “Kuhn could write a book about the confusion happening during this time.” →「トーマス・クーンが本を書けるレベルの混乱期。」 | “could write”＝「書けそうなくらい」、訳は「書けるレベル」でやや硬。 |「クーンならこの混乱について本を書きたくなるだろう」等、仮定法を柔らかく。\n\n───────────────────────  \n2 失われたニュアンス・文化参照（Nuance）  \n───────────────────────  \nNo.|重み|分類|問題点|修正案\n---|---|---|---|---\n9|Major|Nuance|“seen some shit. Lol.”→「修羅場もたくさん見てきたわけだ。笑」|スラング感が弱く文学的。|「マジで色々ヤバい目にも遭った。笑」など砕けた俗語で。\n10|Major|Nuance|“Fuck it – jump to the end.”→「もういいや、いきなり最後へ飛ぼう。」|“Fuck it”の投げやり感が薄い。|「クソくらえ、もう一気に最後へ行け。」等で勢いを。\n11|Minor|Nuance|“Copy and paste from Claude web”→「Claude Web とのコピペ」| “from”→“into”も含め「窓口としてのClaude Web」感がやや曖昧。|「Claude Web にコードをコピペで突っ込む」など能動的に。\n12|Minor|Nuance|“200 gallons of kool-aid”→「バケツいっぱいクールエイド」|量感が曖昧。|「クールエイドを200ガロン一気飲み」等で誇張を保持。\n\n───────────────────────  \n3 日本語としての不自然さ・文法（Lang / Tone）  \n───────────────────────  \nNo.|重み|分類|問題|改善案\n---|---|---|---|---\n13|Major|Lang|「この頃には LLM を 5 つくらい課金している」|「LLM を課金」は不自然。「〜に課金している」「〜をサブスクしている」。|「この時点で LLM サービスを 5 つくらい課金中だ」など語法整備。\n14|Major|Tone|一人称が「僕」で統一されているが、原文は性別中立“I”。日本語でもっと中性的「俺 / 私 / オレ」など選定検討。|記事全体のキャラ設定に合わせ調整。\n15|Minor|Lang|「タブで切り替えながら眺めるという狂気。」→体言止めで唐突。|「…眺めるという、ちょっとした狂気だ。」など文にする。\n16|Minor|Lang|「コンテキストを節約」|「コンテキスト枠を節約」等。\n17|Minor|Lang|「ターミナルの住人（terminal jockey）」|括弧内はカタカナ「ターミナルジョッキー」に統一した方が読みやすい。\n\n───────────────────────  \n4 用語・表記の統一（Term）  \n───────────────────────  \nNo.|重み|分類|問題|指針\n---|---|---|---|\n18|Major|Term|“LLM” をカタカナ化せず「LLM」と英字固定している→OKだが “大文字小文字混在” や一貫性要確認（例：「Claude Web」が途中で「Claude web」）。|固有名の大文字小文字を原綴で統一。\n19|Minor|Term|“one shot / ワンショット”“仕様書 / spec”等が互い違い。初出で括弧対訳、その後はどちらかに寄せる。|統一ルール策定（外来語はカタカナ、技術略号は英字等）。\n\n───────────────────────  \n5 機械翻訳っぽさ・直訳臭（ML / Style）  \n───────────────────────  \nNo.|重み|分類|問題|修正\n---|---|---|---|\n20|Minor|ML|「魔法に限りなく近い体験が IDE に統合され」等、英語構文が強い。|「あの魔法のような体験が、そのまま IDE で出来る。」など日本語語順に。\n21|Minor|ML|Step 見出しに “Step 1:” 等を残している。日本語記事なら「ステップ1」か番号で。|表記統一。\n\n───────────────────────  \n6 追加で入れた語句・不要な意訳（Add）  \n───────────────────────  \nNo.|重み|分類|問題|備考\n---|---|---|---|\n22|Minor|Add|「転機だ。」など短い文を複数補った|文意は保つが、訳注か脚注で「訳者意図」示す or 原文に忠実な再構成を。\n23|Minor|Add|「世界は崩壊寸前」→原文 “world is falling apart” は誇張表現。直訳寄りに戻すか検討。|\n\n───────────────────────  \nまとめ  \n・致命的な誤訳は少ないが、原文特有のスラングや皮肉、誇張がところどころ薄まっている。  \n・「agentic coding」「foundational model」など技術・新語の説明不足は読者理解を阻害。初出で定義＋統一表記を。  \n・語気・文体は砕けた英語をやや丁寧に寄せ過ぎ。原文同様の“砕け・毒舌・罵り”を意図的に保持することで雰囲気が再現できる。  \n・日本語の語法（～を課金、体言止め乱用）を滑らかにし、外来語とカタカナ語の統一を図る。  \n\n上記を修正すれば、「英語の原稿をそのまま日本語で口走った」感が消え、著者の個性と勢いを保った自然な日本語になるはず。"
    ]
  },
  "critique_loop_details": {
    "critique_usages": [
      {
        "prompt_tokens": 7917,
        "completion_tokens": 1751,
        "total_tokens": 9668
      },
      {
        "prompt_tokens": 8480,
        "completion_tokens": 1722,
        "total_tokens": 10202
      },
      {
        "prompt_tokens": 8246,
        "completion_tokens": 1712,
        "total_tokens": 9958
      },
      {
        "prompt_tokens": 8168,
        "completion_tokens": 2318,
        "total_tokens": 10486
      }
    ],
    "feedback_usages": [
      {
        "prompt_tokens": 10097,
        "completion_tokens": 3810,
        "total_tokens": 13907
      },
      {
        "prompt_tokens": 10615,
        "completion_tokens": 3589,
        "total_tokens": 14204
      },
      {
        "prompt_tokens": 10321,
        "completion_tokens": 3522,
        "total_tokens": 13843
      },
      {
        "prompt_tokens": 11084,
        "completion_tokens": 3217,
        "total_tokens": 14301
      }
    ]
  },
  "timestamp": "2025-05-15T17:19:41.803881"
}