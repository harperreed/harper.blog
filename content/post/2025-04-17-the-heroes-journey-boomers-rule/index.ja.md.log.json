{
  "input_file": "index.md",
  "output_file": "index.ja.md",
  "target_language": "japanese",
  "language_code": "ja",
  "model": "o3",
  "skip_edit": false,
  "do_critique": true,
  "critique_loops": 4,
  "has_frontmatter": true,
  "translation_context": "This is a blog post about the journey that people go on to figure out how to use codegen",
  "token_usage": {
    "prompt_tokens": 85291,
    "completion_tokens": 28618,
    "total_tokens": 113909
  },
  "cost": "$1.9976",
  "prompts_and_responses": {
    "translation": {
      "model": "o3",
      "target_language": "japanese",
      "system_prompt": "\n        1. Read the provided text carefully, preserving all formatting, markdown, and structure exactly as they appear.\n        2. Identify any block quotes and code blocks.\n        3. Do not translate text in block quotes or in code blocks (including text within code blocks).\n        4. Translate everything else into japanese.\n        5. Maintain the original formatting, markdown, and structure in your output.\n        6. Provide a natural-sounding translation rather than a word-for-word one.\n        7. For idioms, colloquialisms, or slang, render them in an equivalent, natural way in japanese whenever possible.\n        8. If there isn't a direct or natural translation for a particular term or phrase, keep it in the original language and surround it with quotes if necessary.\n        9. Ensure that technical terms or jargon remain accurate; if there's no suitable translation, keep the original term.\n        10. Strive for fluid, native-sounding prose that retains the tone and intent of the original text.\n        11. If context about the text is provided, use it to inform your translation choices, especially regarding tone, style, and cultural adaptations.\n        ",
      "user_prompt": "# CONTEXT\nThis is a blog post about the journey that people go on to figure out how to use codegen\n\n# TEXT TO TRANSLATE\nI have spent a lot of time since my [blog post](/2025/02/16/my-llm-codegen-workflow-atm/) about my LLM workflow talking to folks about codegen and how to get started, get better, and why it is interesting.\n\nThere has been an incredible amount of energy and interest in this topic. I have received a ton of emails from people who are working to figure all of this out. I started to notice that many people are struggling to figure out how to start, and how it all fits together. Then I realized that I have been hacking on this process since 2023 and I have seen some shit. Lol.\n\nI was talking about this with friends (Fisaconites's represent) and I sent this message in response to a thread about AI assisted agents, and editors:\n\n> if i were starting out, i don't know if it is helpful to jump right into the \"agent\" coders. It is annoying and weird. having walked a few people through this (successfully, and not successfully) I find that the \"hero's journey\" of starting with the Copilot, moving to the copy and paste from Claude web, to the Cursor/continue, to the fully automated \"agents\" seems to be a successful way to adopt these things.\n\nThis lead me to start thinking a lot about the journey and how to get started using agentic coding:\n\n> The caveat is that this is largely for people with experience. If you don’t have much dev experience, then fuck it - jump to the end. **Our brains are often ruined by the rules of the past.**\n\n## A journey of sight and sound\n\n{{< image src=\"journey-harper.webp\" alt=\"Harper is very trustworthy\" caption=\"Your thoughtful guide: Harper. iPhone X, 6/10/2018\" >}}\n\nThis is my journey. It is largely the path I took. I think you could speed run it if you were compelled. I don’t think you need to follow every step, but I do think every step is additive.\n\nHere are the steps:\n\n### Step 1: Get out of bed with wonder and optimism\n\nLol. Just kidding. Who has time for that? It may help, but the world is falling apart and all we got is codegen to distract us.\n\nIt does help to assume that these type of workflows could work and could be additive. If you hate LLMs and don’t think it will work, then you will not be successful here. ¯\\\\\\_(ツ)\\_/¯\n\n### Step 2: Start with AI-assisted autocomplete\n\nThis is the real step one! You need to spend enough time in the IDE context to know how well you would work with [intellisense](https://en.wikipedia.org/wiki/Code_completion), [zed autocomplete](https://zed.dev/blog/out-of-your-face-ai), [Copilot](https://copilot.github.com/), etc. It gives you an idea of how the LLM is working - and prepares you for the stupid shit it will often recommend.\n\nPeople seem to want to skip this step and just jump to the end. Then they are like “this LLM is a piece of shit and can’t do anything right!” Which is not accurate, but also can be true. The magic is in the nuance. Or as I like to remember: _life is confusing_.\n\n### Step 3: Start using Copilot as more than autocomplete\n\nOnce you have a good process in place with the autocomplete and you are not mad _all_ of the time, you can move on to the magic of talking to Copilot.\n\nVS Code has a pane where you can Q&A with Copilot and it will help you with your code, etc. It is pretty cool. You can have a nice convo about your code, and it will be thoughtful and help you solve whatever query you asked.\n\nHowever, using Copilot is like using a time machine to talk to ChatGPT in 2024. It isn’t _that_ great.\n\nYou will be wanting more.\n\n### Step 4: Move to copying and pasting code into Claude or ChatGPT\n\nYou start to satisfy your curiosity by pasting code into the browser based foundational model and asking “WHY CODE BROKE??” And then having LLM respond with a coherent and helpful response.\n\nYou will be AMAZED! The results are going to blow your mind. You are going to start to build lots of weird shit, and doing really fun things with code again. Mostly cuz it cut out the entire debugging process.\n\nYou can also do wild things like paste in a Python script and tell the LLM “make this into go” and it will just _make it into go_. You will start thinking “I wonder if I can one shot this.”\n\nCopilot will start to look like 2004 autocomplete. It is handy, but not really necessary.\n\nThis will lead you down a couple sub paths:\n\n#### You will start to prefer one model cuz of vibes\n\nThis is the unfortunate first step towards the vibe in vibe coding. You will start to prefer how one of the big models talk to you. It is feelings tho. Kind of weird. You will find yourself thinking “I like how Claude makes me feel.”\n\nMany developers seem to like Claude. I use both, but mostly Claude for code related things. The vibe with Claude is just better.\n\n> You have to pay for them to get the good stuff. So many friends are like “This is a piece of shit” and then you find out they are using a free model that barely works. Lol. This was more of an issue when the free version was ChatGPT 3.5, but make sure you are using a capable model before you throw the entire premise out.\n\n#### You will start thinking about how to make things go faster\n\nAfter copying and pasting code into Claude for a few weeks you are going to realize that this is annoying. You are going to start working through context packing, and trying to fit more of your code into the LLM context window.\n\nYou will experiment with [repomix](https://repomix.com/), [repo2txt](https://github.com/donoceidon/repo2txt), and other code context tools. Just so that you can slam your entire codebase into the Claude context window. There is a chance that you will even start writing shell scripts (well Claude will write them) to help make this process easier.\n\nThis is a turning point.\n\n### Step 5: Use an AI enabled IDE (Cursor, Windsurf? )\n\nThen a friend will say “why don’t you just use [Cursor](https://cursor.sh/)?”\n\nIt will completely blow your mind. All the magic you just experienced by copying and pasting is now available in your IDE. It is faster, it is fun, and it is close to magic.\n\nAt this point you are paying for like 5 different LLMs - what is another $20 a month.\n\nIt works super well, and you feel way way more productive.\n\nYou will start playing with the agentic coding features built directly into the editors. It will _basically_ work. But you can see a destination on the horizon that may be better.\n\n### Step 6: You start planning before you code\n\nSuddenly you find yourself building out very robust specs, PRDs, and to-do docs that you can pipe into the IDEs agent, or into Claude web.\n\nYou have never “written” so much documentation. You start to use other LLMs to write more robust documentation. You are transposing docs from one context (PRD) to another (“Can you make this into prompts”). You start to use the LLM to design your codegen prompts.\n\nYou are saying the word “[waterfall](https://en.wikipedia.org/wiki/Waterfall_model)” with a lot less disdain. If you are old, you may be fondly remembering the late 90s and early 2000s and wonder “is this what Martin Fowler felt like before [2001](https://en.wikipedia.org/wiki/Agile_software_development)?”\n\nIn the world of codegen: The spec is the [godhead](https://en.wikipedia.org/wiki/Godhead).\n\n### Step 7: You start playing with aider to enable quicker loops\n\nAt this point you are ready to start getting into the **good stuff**. The codegen previously required you to be involved, and paying attention. But it is 2025! Who wants to code with their fingers?\n\n> One other path that lots of friends are experimenting with is to code with your voice. To start instruct aider via a whisper client. It is hilarious and fun. MacWhisper is a very good tool for this locally. Aqua, and superwhisper are nice but cost more. They may use cloud services to do the inference. I prefer local.\n\nTrying out aider is a wild experience. You start it up, it instantiates itself into your project. You put your query directly into aider, and it just kind of does what you asked. It asks for permission to act, and gives you a framework to get things done, and then acts. It completes the task, and the commits to your repository. You no longer are so worried about one shotting tasks. you will just have aider do it in a few steps.\n\nYou start building out rulesets for the LLM to follow. You learn about the “[Big Daddy](https://www.reddit.com/r/cursor/comments/1joapwk/comment/mkqg8aw/)” rule, or the “no deceptions” addition to your prompts. You start be really good at prompting the robot.\n\n**It works.**\n\nEventually you don’t even open up an IDE - you are just a terminal jockey now.\n\nYou spend your time watching the robot do your job.\n\n### Step 8: You lean all the way into agentic coding\n\nYou are now using an agent to code for you. The results are pretty good. There are a few times when you have no idea what’s going on. But then you remember you can just ask it.\n\nYou start to experiment with [Claude Code](https://docs.anthropic.com/en/docs/agents-and-tools/claude-code/overview), [Cline](https://cline.bot/), etc. You are super happy to be able to use a reasoning model ([deepseek](https://aws.amazon.com/bedrock/deepseek/)!) and a coding model ([Claude sonnet 3.7](https://www.anthropic.com/claude/sonnet)) together to start removing planning steps.\n\nYou are doing wild stuff like running 3-5 concurrent sessions. Just tabbing through terminals watching robots code.\n\nYou will start coding defensively:\n\n- really hardcore test coverage\n- thinking about [formal verification](https://github.com/formal-land/coq-of-rust)\n- using memory safe languages\n- choosing languages based on compiler verbosity to help pack the context window\n\nYou will think long and hard about how to make sure that the thing you are building just gets built, safely without intervention.\n\nYou will spend **SO** much money on tokens. You will also use up all your GitHub action hours running all the wild tests that you are running to make sure that the code is built safely.\n\nIt feels good. You are not mad about not coding.\n\n### Step 9: You let the agent code, and you play video games\n\nSuddenly, you are there. You are at the destination. Well, kind of - but you see where we are going. You start to worry about software jobs. Your friends are being laid off, and they can’t get new jobs. It feels different this time around.\n\nWhen you talk to your peers they think of you as a religious zealot cuz you are working within a different context than they are. You tell them “omg you have to try out agentic coding!” Maybe you add “I hate the word agentic” just to show that you have not drank 200 gallons of kool-aid. But you have. The world seems brighter cuz you are so productive with your code.\n\nIt doesn’t matter. The paradigm has shifted. Kuhn could write a book about the confusion happening during this time.\n\nNobody can see this because they didn’t go through the journey to get here. But those who have are agreeing and sharing their own tips around the journey, and debating the destination.\n\nNow that you are knee-deep in letting robots do the work, you can really focus on all those gameboy games you have been wanting to play. There is a lot of downtime. And when the robot is done with a task, it will ask “should I continue” and you type **yes** and go back to Tetris.\n\nVery strange. Unsettling, even.\n\n## The acceleration\n\n<paul confetti photo>\n{{< image src=\"journey-confetti.webp\" alt=\"Confetti\" caption=\"Confetti at a Paul McCartney Concert at the Tokyo Dome. iPhone 6, 4/25/2015\" >}}\n\nI don’t know what will happen in the [future](https://ai-2027.com/). I am worried that people who are not working through this journey are not going to be attractive to [employers](https://x.com/tobi/status/1909231499448401946). Which is kind of near-sighted, because, ultimately, we are talking about tooling, and automation.\n\nWhen we were ramping up hiring in the past, we would often spread our queries well past our network, and past our tech stack. We would be a Python shop and interview people who didn’t know Python, and have never used Python. Our thought was that with a great engineer, we could work together to get them comfortable with Python. They would be additive even if they were not super comfortable with our stack. This worked out well for us. We hired incredible people who had never worked with our stack. Many times they brought such a different perspective that it elevated the entire team.\n\nThe same principles apply to AI-assisted development. When hiring talented developers who match your team's culture and show enthusiasm, their experience level with AI tools shouldn't be a deal-breaker. Not everyone needs to be an AI development expert from day one. Instead, guide them through the learning process at their own pace while they work alongside more experienced team members.\n\nEventually they will be the driver and will be successfully using these tools.\n\nOne other aspect I keep thinking about: Writing skills have become critical. While we've always valued strong communicators on tech teams for documentation and collaboration, it's doubly important now. Not only do you need to communicate with humans, you need to write clear, precise instructions for AI. Being able to craft effective prompts is becoming as vital as writing good code.\n\n## The leadership\n\nI think all leaders and engineering managers need to dive deep into AI-assisted development, whether you're a believer or not. Here's why: The next generation of developers you'll be hiring will have learned to code primarily through AI tools and agents. This is what software engineering is becoming. We need to understand and adapt to this reality.\n\nUs code boomers are not long for this world.\n\n**interesting note:** i don't really use LLMs to help me write things. I imagine they would be good at it, but i find that i want my voice to be heard, and not normalized. Whereas my code needs to be normalized. interesting.\n\n---\n\nThanks to Jesse, Sophie, the Vibez crew (Erik, Kanno, Braydon, and others), team 2389, and everyone else who gave me feedback on this post.",
      "context": "This is a blog post about the journey that people go on to figure out how to use codegen",
      "response": "私は、自分の[ブログ記事](/2025/02/16/my-llm-codegen-workflow-atm/)でLLMワークフローについて書いて以来、コード生成（codegen）の始め方・上達法・面白さについて多くの人と語り合ってきました。\n\nこのテーマへの熱量と関心は驚くほど高まっています。どうやってコード生成をモノにするのか模索している方々から、山のようにメールをいただきました。そこで気づいたのは、多くの人が「どこから手を付ければいいのか」「どう全体像がつながるのか」でつまずいている、ということでした。私は2023年からこのプロセスをハックし続けてきたので、かなり“修羅場”も見てきました。笑\n\n友人たち（Fisaconites代表！）とこの話をしていたとき、AI支援エージェントやエディタについてのスレッドに、私はこんなメッセージを送りました：\n\n> if i were starting out, i don't know if it is helpful to jump right into the \"agent\" coders. It is annoying and weird. having walked a few people through this (successfully, and not successfully) I find that the \"hero's journey\" of starting with the Copilot, moving to the copy and paste from Claude web, to the Cursor/continue, to the fully automated \"agents\" seems to be a successful way to adopt these things.\n\nこのやり取りから、「旅路」と「エージェント型コーディングの導入ステップ」について考え込むようになりました：\n\n> The caveat is that this is largely for people with experience. If you don’t have much dev experience, then fuck it - jump to the end. **Our brains are often ruined by the rules of the past.**\n\n## 視覚と音の旅路\n\n{{< image src=\"journey-harper.webp\" alt=\"ハーパーはとても信頼できます\" caption=\"思慮深いガイド：ハーパー。iPhone X, 2018/06/10\" >}}\n\nこれは私自身の旅の記録です。おおむね私が実践したルートですが、やる気次第でスピードランも可能でしょう。すべてのステップを厳密に追う必要はありませんが、各ステップには確実に価値があります。\n\nステップは以下のとおりです：\n\n### Step 1: 驚きと楽観を胸にベッドから飛び起きる\n\n冗談です。そんな時間あるかい、って感じですよね。まあ、世界は崩壊しつつあるし、僕らに残された気晴らしはコード生成くらいです。  \n\nただ、「こういうワークフローは役に立つし、自分の力を底上げしてくれるはずだ」と思い込むのは重要です。LLMが嫌いで「どうせ役に立たない」と決めつけているなら、ここで成功することはないでしょう。¯\\\\\\_(ツ)\\_/¯\n\n### Step 2: AI補完（autocomplete）から始めよう\n\nこれが真のステップ1！IDEの中で [IntelliSense](https://en.wikipedia.org/wiki/Code_completion) や [Zed Autocomplete](https://zed.dev/blog/out-of-your-face-ai)、[Copilot](https://copilot.github.com/) などを十分に使い込んでください。LLMがどの程度役立つかを体感し、「アホな提案を平然としてくるものだ」という耐性も付けておきます。\n\n多くの人がこのステップを飛ばして最後にワープしようとします。そして「このLLMはクソ！何もできないじゃん！」となる。実際はそうとも言い切れず、でも部分的には当たっている。魔法はニュアンスに宿るのです。要するに _人生はややこしい_ のです。\n\n### Step 3: Copilotを「ただの補完以上」に活用する\n\n補完に慣れて常時ブチ切れなくなったら、Copilotとの対話という魔法に移行しましょう。  \n\nVS CodeにはCopilotとQ&Aできるパネルがあり、コードについて相談すると手助けしてくれます。ただ、Copilotは「2024年にタイムスリップしてChatGPTと話している」程度の感覚。そこまで凄いわけではありません。もっと欲しくなるでしょう。\n\n### Step 4: ClaudeやChatGPTにコードをコピペし始める\n\nブラウザで動く基盤モデルにコードを貼り付け、「WHY CODE BROKE??」と問う——するとLLMが筋の通った回答をくれます。\n\nあなたは大興奮！バグ取りが丸ごと吹き飛び、変なものをガンガン作り始め、再びコードが楽しくなります。  \n\nPythonスクリプトを貼り付けて「これをGoにして」と言えば、本当に _Goにして_ くれるでしょう。「ワンショットでいけるんじゃ？」と思い始めるころです。\n\nCopilotは2004年のオートコンプリートのように見えてきます。便利だけど必須ではない。\n\nここからサブストーリーが始まります：\n\n#### 「なんとなく好き」なモデルが出てくる\n\nこれが“vibe coding”への第一歩。どのモデルの話し方が好きか、という“気分”で選び始めます。「Claudeが落ち着くんだよなぁ」と感じる開発者は多いようです。私は両方使いますが、コード関連は主にClaude。  \n\n> You have to pay for them to get the good stuff. So many friends are like “This is a piece of shit” and then you find out they are using a free model that barely works. Lol. This was more of an issue when the free version was ChatGPT 3.5, but make sure you are using a capable model before you throw the entire premise out.\n\n#### もっと速くしたくなる\n\n数週間コピペを続けると「めんどくさい！」となり、より多くのコードをLLMのコンテキストウィンドウに詰め込もうとし始めます。  \n\n[repomix](https://repomix.com/) や [repo2txt](https://github.com/donoceidon/repo2txt) などを試し、コードベース全体をClaudeに突っ込めるよう苦心します。Shellスクリプトを（実際にはClaudeに書かせて）自動化するかもしれません。ここがターニングポイント。\n\n### Step 5: AI対応IDE（Cursor、Windsurf?）へ\n\nそのうち友人が「[Cursor](https://cursor.sh/)使えば？」と言ってくるでしょう。  \n\nコピペで味わった魔法がIDE内で一気に再現されます。速い、楽しい、ほぼ魔法。  \n\n月に5個もLLM課金してるし、もう＋$20ぐらい気にならない。生産性は爆上がりです。\n\nエディタに内蔵されたエージェント型コード生成機能も触り始めるでしょう。_ほぼ_ 動きます。でも、もっと良い地平があると感じるはず。\n\n### Step 6: コードを書く前に計画を立て始める\n\n気づけば、IDEのエージェントやClaude Webに流し込むための詳細な仕様書・PRD・TODOドキュメントを作りまくっています。  \n\nこれまでになくドキュメントを書くようになり、他のLLMに頼んでさらに詳細化することも。PRDを「これをプロンプト形式に変換して」と頼むなど、ドキュメント⇄プロンプト変換も日常茶飯事です。\n\n「[ウォーターフォール](https://en.wikipedia.org/wiki/Waterfall_model)」という言葉への嫌悪感が薄れ、年代によっては90年代後半〜2000年代初頭を懐かしみ、「[2001年](https://en.wikipedia.org/wiki/Agile_software_development)前のマーティン・ファウラーってこんな気持ちだったのかな」と思うかもしれません。\n\nコード生成の世界では、仕様書こそが[神格](https://en.wikipedia.org/wiki/Godhead)です。\n\n### Step 7: aiderで高速ループに踏み出す\n\nここからが **本番**。これまでは人間の関与が前提でしたが、もう2025年。“指でコード”だなんて古すぎます。\n\n> One other path that lots of friends are experimenting with is to code with your voice. To start instruct aider via a whisper client. It is hilarious and fun. MacWhisper is a very good tool for this locally. Aqua, and superwhisper are nice but cost more. They may use cloud services to do the inference. I prefer local.\n\naiderを立ち上げると、プロジェクトに自己初期化し、ターミナルに指示を書くだけでタスクを遂行。許可を求めつつフレームワークを提示し、作業を完了したらリポジトリへコミット。ワンショットにこだわらず、数ステップでやらせれば良いのです。\n\nLLM用のルールセットを作り始めます。「[Big Daddy](https://www.reddit.com/r/cursor/comments/1joapwk/comment/mkqg8aw/)」ルールや“no deceptions”をプロンプトに追加したり。プロンプト技がどんどん上達します。\n\n**ちゃんと動きます。**\n\nやがてIDEすら開かず、ターミナル職人と化します。ロボットが仕事をするのを眺める時間が増えるでしょう。\n\n### Step 8: エージェント型コーディングにフルダイブ\n\nエージェントがコードを書き、結果はかなり良好。わけが分からないときは質問すればOK。  \n\n[Claude Code](https://docs.anthropic.com/en/docs/agents-and-tools/claude-code/overview) や [Cline](https://cline.bot/) を試し、推論モデル（[deepseek](https://aws.amazon.com/bedrock/deepseek/)）とコーディングモデル（[Claude sonnet 3.7](https://www.anthropic.com/claude/sonnet)）を併用して計画ステップすら削り始めます。\n\nターミナルを3〜5枚並べ、ロボがコードを書くのをタブ切り替えで見守る…なんてことも。\n\n防御的なコーディングにも意識が向きます：\n\n- 超手厚いテストカバレッジ\n- [形式手法による検証](https://github.com/formal-land/coq-of-rust) を検討\n- メモリ安全な言語を選択\n- コンパイラの詳細エラーメッセージでコンテキストを圧縮 など\n\n「どうすれば人手を介さず、安全に完成するか」を深く考えます。トークン代は膨大、GitHub Actions時間もテストで使い切りますが、気分は爽快。コードを書かなくても怒りはありません。\n\n### Step 9: エージェントに任せて、あなたはゲームをする\n\nそしてついに到達——いや、まだ道半ばですが行き先は見えました。ソフトウェア職の行方が不安になり、友人がレイオフされ再就職に苦戦する光景も。今回は様子が違います。\n\n周囲からは宗教的狂信者扱い。「エージェント型コーディングすごいよ！」と言ってもピンと来ない。なので「“agentic”って言葉は嫌いだけどね」と予防線を張るかもしれませんが、内心はしっかり“ゴクゴク”。生産性が爆上がりで世界が輝いて見えます。\n\nトーマス・クーンがこの混乱期の本を書けそうなくらい、パラダイムは変わりました。旅を経験した者同士は共感し合い、道中のTipsやゴールを語り合います。\n\nロボットに仕事を任せ、あなたは昔から積んでいたゲームボーイソフトを消化。待ち時間が多いときは「continue?」と訊かれ **yes** と打ち、またテトリスへ。奇妙で、不気味ですらあります。\n\n## 加速\n\n<paul confetti photo>\n{{< image src=\"journey-confetti.webp\" alt=\"紙吹雪\" caption=\"東京ドーム、ポール・マッカートニー公演の紙吹雪。iPhone 6, 2015/04/25\" >}}\n\n[未来](https://ai-2027.com/)に何が起こるか分かりません。ですが、この旅を歩んでいない人は[雇用主](https://x.com/tobi/status/1909231499448401946)にとって魅力的でなくなるのでは、と心配しています。とはいえ所詮はツールと自動化の話なのですが。\n\nかつて採用規模を拡大していた頃、私たちはネットワークや技術スタックを超えて人材を探しました。Python使いでなくても優秀なエンジニアなら採用し、一緒にPythonに慣れてもらう。結果、その多様な視点がチームを底上げしました。\n\nAI支援開発でも同じです。チームにフィットし、意欲のある優秀な開発者なら、AIツール経験の有無で門前払いすべきではありません。経験豊富なメンバーと働くうちに、いずれ自走できるようになります。\n\nもう一点：文章力が極めて重要になりました。従来からドキュメントやコラボで重視していましたが、今はAIへの明確・精密な指示を書く力が必須。良いプロンプトを書くスキルが、良いコードを書くのと同じくらい大切になりつつあります。\n\n## リーダーシップ\n\n信者であろうとなかろうと、リーダーやEMはAI支援開発に深く入り込むべきです。なぜなら、次世代の開発者はAIツールとエージェントを使ってコーディングを覚えてくるから。ソフトウェアエンジニアリングはそういう姿に変わりつつあります。私たち“コード老害”の寿命は短いのです。\n\n**面白い注記:** 私は文章を書くのにLLMをほとんど使いません。きっと便利なのでしょうが、自分の声を残したいから。一方でコードは“均質化”してほしい。興味深い差ですね。\n\n---\n\nこの投稿にフィードバックをくれたJesse、Sophie、Vibezクルー（Erik、Kanno、Braydon、その他）、team 2389、そして皆さんに感謝！",
      "usage": {
        "prompt_tokens": 3513,
        "completion_tokens": 3511,
        "total_tokens": 7024
      },
      "streaming": true
    },
    "editing": {
      "model": "o3",
      "target_language": "japanese",
      "system_prompt": "\n        1. Carefully read the translated text alongside the original text in its entirety.\n        2. Compare both texts to ensure the translation accurately reflects the original meaning.\n        3. Correct any grammatical errors you find in the japanese text.\n        4. Adjust phrasing to make it sound natural and fluent for japanese speakers, making sure idioms and expressions are culturally appropriate.\n        5. Preserve the original tone, nuance, and style, including any formatting, markdown, and structure.\n        6. Avoid adding new information or altering the core meaning.\n        7. Ensure the final result doesn't feel machine-translated but remains faithful to the source.\n        8. Make only changes that genuinely improve the text's quality in japanese.\n        9. Don't be too literal. If there isn't a direct translation, provide a natural-sounding translation.\n        10. If the text contains idioms or colloquialisms, translate them into the target language while maintaining their original meaning.\n        11. If the text contains technical terms or jargon, ensure that the translation is accurate and appropriate for the target audience, if there isn't a natural translation, keep it in the original language.\n        12. If there is not natural translation, keep it in the original language.\n        ",
      "user_prompt": "# ORIGINAL TEXT\nI have spent a lot of time since my [blog post](/2025/02/16/my-llm-codegen-workflow-atm/) about my LLM workflow talking to folks about codegen and how to get started, get better, and why it is interesting.\n\nThere has been an incredible amount of energy and interest in this topic. I have received a ton of emails from people who are working to figure all of this out. I started to notice that many people are struggling to figure out how to start, and how it all fits together. Then I realized that I have been hacking on this process since 2023 and I have seen some shit. Lol.\n\nI was talking about this with friends (Fisaconites's represent) and I sent this message in response to a thread about AI assisted agents, and editors:\n\n> if i were starting out, i don't know if it is helpful to jump right into the \"agent\" coders. It is annoying and weird. having walked a few people through this (successfully, and not successfully) I find that the \"hero's journey\" of starting with the Copilot, moving to the copy and paste from Claude web, to the Cursor/continue, to the fully automated \"agents\" seems to be a successful way to adopt these things.\n\nThis lead me to start thinking a lot about the journey and how to get started using agentic coding:\n\n> The caveat is that this is largely for people with experience. If you don’t have much dev experience, then fuck it - jump to the end. **Our brains are often ruined by the rules of the past.**\n\n## A journey of sight and sound\n\n{{< image src=\"journey-harper.webp\" alt=\"Harper is very trustworthy\" caption=\"Your thoughtful guide: Harper. iPhone X, 6/10/2018\" >}}\n\nThis is my journey. It is largely the path I took. I think you could speed run it if you were compelled. I don’t think you need to follow every step, but I do think every step is additive.\n\nHere are the steps:\n\n### Step 1: Get out of bed with wonder and optimism\n\nLol. Just kidding. Who has time for that? It may help, but the world is falling apart and all we got is codegen to distract us.\n\nIt does help to assume that these type of workflows could work and could be additive. If you hate LLMs and don’t think it will work, then you will not be successful here. ¯\\\\\\_(ツ)\\_/¯\n\n### Step 2: Start with AI-assisted autocomplete\n\nThis is the real step one! You need to spend enough time in the IDE context to know how well you would work with [intellisense](https://en.wikipedia.org/wiki/Code_completion), [zed autocomplete](https://zed.dev/blog/out-of-your-face-ai), [Copilot](https://copilot.github.com/), etc. It gives you an idea of how the LLM is working - and prepares you for the stupid shit it will often recommend.\n\nPeople seem to want to skip this step and just jump to the end. Then they are like “this LLM is a piece of shit and can’t do anything right!” Which is not accurate, but also can be true. The magic is in the nuance. Or as I like to remember: _life is confusing_.\n\n### Step 3: Start using Copilot as more than autocomplete\n\nOnce you have a good process in place with the autocomplete and you are not mad _all_ of the time, you can move on to the magic of talking to Copilot.\n\nVS Code has a pane where you can Q&A with Copilot and it will help you with your code, etc. It is pretty cool. You can have a nice convo about your code, and it will be thoughtful and help you solve whatever query you asked.\n\nHowever, using Copilot is like using a time machine to talk to ChatGPT in 2024. It isn’t _that_ great.\n\nYou will be wanting more.\n\n### Step 4: Move to copying and pasting code into Claude or ChatGPT\n\nYou start to satisfy your curiosity by pasting code into the browser based foundational model and asking “WHY CODE BROKE??” And then having LLM respond with a coherent and helpful response.\n\nYou will be AMAZED! The results are going to blow your mind. You are going to start to build lots of weird shit, and doing really fun things with code again. Mostly cuz it cut out the entire debugging process.\n\nYou can also do wild things like paste in a Python script and tell the LLM “make this into go” and it will just _make it into go_. You will start thinking “I wonder if I can one shot this.”\n\nCopilot will start to look like 2004 autocomplete. It is handy, but not really necessary.\n\nThis will lead you down a couple sub paths:\n\n#### You will start to prefer one model cuz of vibes\n\nThis is the unfortunate first step towards the vibe in vibe coding. You will start to prefer how one of the big models talk to you. It is feelings tho. Kind of weird. You will find yourself thinking “I like how Claude makes me feel.”\n\nMany developers seem to like Claude. I use both, but mostly Claude for code related things. The vibe with Claude is just better.\n\n> You have to pay for them to get the good stuff. So many friends are like “This is a piece of shit” and then you find out they are using a free model that barely works. Lol. This was more of an issue when the free version was ChatGPT 3.5, but make sure you are using a capable model before you throw the entire premise out.\n\n#### You will start thinking about how to make things go faster\n\nAfter copying and pasting code into Claude for a few weeks you are going to realize that this is annoying. You are going to start working through context packing, and trying to fit more of your code into the LLM context window.\n\nYou will experiment with [repomix](https://repomix.com/), [repo2txt](https://github.com/donoceidon/repo2txt), and other code context tools. Just so that you can slam your entire codebase into the Claude context window. There is a chance that you will even start writing shell scripts (well Claude will write them) to help make this process easier.\n\nThis is a turning point.\n\n### Step 5: Use an AI enabled IDE (Cursor, Windsurf? )\n\nThen a friend will say “why don’t you just use [Cursor](https://cursor.sh/)?”\n\nIt will completely blow your mind. All the magic you just experienced by copying and pasting is now available in your IDE. It is faster, it is fun, and it is close to magic.\n\nAt this point you are paying for like 5 different LLMs - what is another $20 a month.\n\nIt works super well, and you feel way way more productive.\n\nYou will start playing with the agentic coding features built directly into the editors. It will _basically_ work. But you can see a destination on the horizon that may be better.\n\n### Step 6: You start planning before you code\n\nSuddenly you find yourself building out very robust specs, PRDs, and to-do docs that you can pipe into the IDEs agent, or into Claude web.\n\nYou have never “written” so much documentation. You start to use other LLMs to write more robust documentation. You are transposing docs from one context (PRD) to another (“Can you make this into prompts”). You start to use the LLM to design your codegen prompts.\n\nYou are saying the word “[waterfall](https://en.wikipedia.org/wiki/Waterfall_model)” with a lot less disdain. If you are old, you may be fondly remembering the late 90s and early 2000s and wonder “is this what Martin Fowler felt like before [2001](https://en.wikipedia.org/wiki/Agile_software_development)?”\n\nIn the world of codegen: The spec is the [godhead](https://en.wikipedia.org/wiki/Godhead).\n\n### Step 7: You start playing with aider to enable quicker loops\n\nAt this point you are ready to start getting into the **good stuff**. The codegen previously required you to be involved, and paying attention. But it is 2025! Who wants to code with their fingers?\n\n> One other path that lots of friends are experimenting with is to code with your voice. To start instruct aider via a whisper client. It is hilarious and fun. MacWhisper is a very good tool for this locally. Aqua, and superwhisper are nice but cost more. They may use cloud services to do the inference. I prefer local.\n\nTrying out aider is a wild experience. You start it up, it instantiates itself into your project. You put your query directly into aider, and it just kind of does what you asked. It asks for permission to act, and gives you a framework to get things done, and then acts. It completes the task, and the commits to your repository. You no longer are so worried about one shotting tasks. you will just have aider do it in a few steps.\n\nYou start building out rulesets for the LLM to follow. You learn about the “[Big Daddy](https://www.reddit.com/r/cursor/comments/1joapwk/comment/mkqg8aw/)” rule, or the “no deceptions” addition to your prompts. You start be really good at prompting the robot.\n\n**It works.**\n\nEventually you don’t even open up an IDE - you are just a terminal jockey now.\n\nYou spend your time watching the robot do your job.\n\n### Step 8: You lean all the way into agentic coding\n\nYou are now using an agent to code for you. The results are pretty good. There are a few times when you have no idea what’s going on. But then you remember you can just ask it.\n\nYou start to experiment with [Claude Code](https://docs.anthropic.com/en/docs/agents-and-tools/claude-code/overview), [Cline](https://cline.bot/), etc. You are super happy to be able to use a reasoning model ([deepseek](https://aws.amazon.com/bedrock/deepseek/)!) and a coding model ([Claude sonnet 3.7](https://www.anthropic.com/claude/sonnet)) together to start removing planning steps.\n\nYou are doing wild stuff like running 3-5 concurrent sessions. Just tabbing through terminals watching robots code.\n\nYou will start coding defensively:\n\n- really hardcore test coverage\n- thinking about [formal verification](https://github.com/formal-land/coq-of-rust)\n- using memory safe languages\n- choosing languages based on compiler verbosity to help pack the context window\n\nYou will think long and hard about how to make sure that the thing you are building just gets built, safely without intervention.\n\nYou will spend **SO** much money on tokens. You will also use up all your GitHub action hours running all the wild tests that you are running to make sure that the code is built safely.\n\nIt feels good. You are not mad about not coding.\n\n### Step 9: You let the agent code, and you play video games\n\nSuddenly, you are there. You are at the destination. Well, kind of - but you see where we are going. You start to worry about software jobs. Your friends are being laid off, and they can’t get new jobs. It feels different this time around.\n\nWhen you talk to your peers they think of you as a religious zealot cuz you are working within a different context than they are. You tell them “omg you have to try out agentic coding!” Maybe you add “I hate the word agentic” just to show that you have not drank 200 gallons of kool-aid. But you have. The world seems brighter cuz you are so productive with your code.\n\nIt doesn’t matter. The paradigm has shifted. Kuhn could write a book about the confusion happening during this time.\n\nNobody can see this because they didn’t go through the journey to get here. But those who have are agreeing and sharing their own tips around the journey, and debating the destination.\n\nNow that you are knee-deep in letting robots do the work, you can really focus on all those gameboy games you have been wanting to play. There is a lot of downtime. And when the robot is done with a task, it will ask “should I continue” and you type **yes** and go back to Tetris.\n\nVery strange. Unsettling, even.\n\n## The acceleration\n\n<paul confetti photo>\n{{< image src=\"journey-confetti.webp\" alt=\"Confetti\" caption=\"Confetti at a Paul McCartney Concert at the Tokyo Dome. iPhone 6, 4/25/2015\" >}}\n\nI don’t know what will happen in the [future](https://ai-2027.com/). I am worried that people who are not working through this journey are not going to be attractive to [employers](https://x.com/tobi/status/1909231499448401946). Which is kind of near-sighted, because, ultimately, we are talking about tooling, and automation.\n\nWhen we were ramping up hiring in the past, we would often spread our queries well past our network, and past our tech stack. We would be a Python shop and interview people who didn’t know Python, and have never used Python. Our thought was that with a great engineer, we could work together to get them comfortable with Python. They would be additive even if they were not super comfortable with our stack. This worked out well for us. We hired incredible people who had never worked with our stack. Many times they brought such a different perspective that it elevated the entire team.\n\nThe same principles apply to AI-assisted development. When hiring talented developers who match your team's culture and show enthusiasm, their experience level with AI tools shouldn't be a deal-breaker. Not everyone needs to be an AI development expert from day one. Instead, guide them through the learning process at their own pace while they work alongside more experienced team members.\n\nEventually they will be the driver and will be successfully using these tools.\n\nOne other aspect I keep thinking about: Writing skills have become critical. While we've always valued strong communicators on tech teams for documentation and collaboration, it's doubly important now. Not only do you need to communicate with humans, you need to write clear, precise instructions for AI. Being able to craft effective prompts is becoming as vital as writing good code.\n\n## The leadership\n\nI think all leaders and engineering managers need to dive deep into AI-assisted development, whether you're a believer or not. Here's why: The next generation of developers you'll be hiring will have learned to code primarily through AI tools and agents. This is what software engineering is becoming. We need to understand and adapt to this reality.\n\nUs code boomers are not long for this world.\n\n**interesting note:** i don't really use LLMs to help me write things. I imagine they would be good at it, but i find that i want my voice to be heard, and not normalized. Whereas my code needs to be normalized. interesting.\n\n---\n\nThanks to Jesse, Sophie, the Vibez crew (Erik, Kanno, Braydon, and others), team 2389, and everyone else who gave me feedback on this post.\n\n# TRANSLATED TEXT\n私は、自分の[ブログ記事](/2025/02/16/my-llm-codegen-workflow-atm/)でLLMワークフローについて書いて以来、コード生成（codegen）の始め方・上達法・面白さについて多くの人と語り合ってきました。\n\nこのテーマへの熱量と関心は驚くほど高まっています。どうやってコード生成をモノにするのか模索している方々から、山のようにメールをいただきました。そこで気づいたのは、多くの人が「どこから手を付ければいいのか」「どう全体像がつながるのか」でつまずいている、ということでした。私は2023年からこのプロセスをハックし続けてきたので、かなり“修羅場”も見てきました。笑\n\n友人たち（Fisaconites代表！）とこの話をしていたとき、AI支援エージェントやエディタについてのスレッドに、私はこんなメッセージを送りました：\n\n> if i were starting out, i don't know if it is helpful to jump right into the \"agent\" coders. It is annoying and weird. having walked a few people through this (successfully, and not successfully) I find that the \"hero's journey\" of starting with the Copilot, moving to the copy and paste from Claude web, to the Cursor/continue, to the fully automated \"agents\" seems to be a successful way to adopt these things.\n\nこのやり取りから、「旅路」と「エージェント型コーディングの導入ステップ」について考え込むようになりました：\n\n> The caveat is that this is largely for people with experience. If you don’t have much dev experience, then fuck it - jump to the end. **Our brains are often ruined by the rules of the past.**\n\n## 視覚と音の旅路\n\n{{< image src=\"journey-harper.webp\" alt=\"ハーパーはとても信頼できます\" caption=\"思慮深いガイド：ハーパー。iPhone X, 2018/06/10\" >}}\n\nこれは私自身の旅の記録です。おおむね私が実践したルートですが、やる気次第でスピードランも可能でしょう。すべてのステップを厳密に追う必要はありませんが、各ステップには確実に価値があります。\n\nステップは以下のとおりです：\n\n### Step 1: 驚きと楽観を胸にベッドから飛び起きる\n\n冗談です。そんな時間あるかい、って感じですよね。まあ、世界は崩壊しつつあるし、僕らに残された気晴らしはコード生成くらいです。  \n\nただ、「こういうワークフローは役に立つし、自分の力を底上げしてくれるはずだ」と思い込むのは重要です。LLMが嫌いで「どうせ役に立たない」と決めつけているなら、ここで成功することはないでしょう。¯\\\\\\_(ツ)\\_/¯\n\n### Step 2: AI補完（autocomplete）から始めよう\n\nこれが真のステップ1！IDEの中で [IntelliSense](https://en.wikipedia.org/wiki/Code_completion) や [Zed Autocomplete](https://zed.dev/blog/out-of-your-face-ai)、[Copilot](https://copilot.github.com/) などを十分に使い込んでください。LLMがどの程度役立つかを体感し、「アホな提案を平然としてくるものだ」という耐性も付けておきます。\n\n多くの人がこのステップを飛ばして最後にワープしようとします。そして「このLLMはクソ！何もできないじゃん！」となる。実際はそうとも言い切れず、でも部分的には当たっている。魔法はニュアンスに宿るのです。要するに _人生はややこしい_ のです。\n\n### Step 3: Copilotを「ただの補完以上」に活用する\n\n補完に慣れて常時ブチ切れなくなったら、Copilotとの対話という魔法に移行しましょう。  \n\nVS CodeにはCopilotとQ&Aできるパネルがあり、コードについて相談すると手助けしてくれます。ただ、Copilotは「2024年にタイムスリップしてChatGPTと話している」程度の感覚。そこまで凄いわけではありません。もっと欲しくなるでしょう。\n\n### Step 4: ClaudeやChatGPTにコードをコピペし始める\n\nブラウザで動く基盤モデルにコードを貼り付け、「WHY CODE BROKE??」と問う——するとLLMが筋の通った回答をくれます。\n\nあなたは大興奮！バグ取りが丸ごと吹き飛び、変なものをガンガン作り始め、再びコードが楽しくなります。  \n\nPythonスクリプトを貼り付けて「これをGoにして」と言えば、本当に _Goにして_ くれるでしょう。「ワンショットでいけるんじゃ？」と思い始めるころです。\n\nCopilotは2004年のオートコンプリートのように見えてきます。便利だけど必須ではない。\n\nここからサブストーリーが始まります：\n\n#### 「なんとなく好き」なモデルが出てくる\n\nこれが“vibe coding”への第一歩。どのモデルの話し方が好きか、という“気分”で選び始めます。「Claudeが落ち着くんだよなぁ」と感じる開発者は多いようです。私は両方使いますが、コード関連は主にClaude。  \n\n> You have to pay for them to get the good stuff. So many friends are like “This is a piece of shit” and then you find out they are using a free model that barely works. Lol. This was more of an issue when the free version was ChatGPT 3.5, but make sure you are using a capable model before you throw the entire premise out.\n\n#### もっと速くしたくなる\n\n数週間コピペを続けると「めんどくさい！」となり、より多くのコードをLLMのコンテキストウィンドウに詰め込もうとし始めます。  \n\n[repomix](https://repomix.com/) や [repo2txt](https://github.com/donoceidon/repo2txt) などを試し、コードベース全体をClaudeに突っ込めるよう苦心します。Shellスクリプトを（実際にはClaudeに書かせて）自動化するかもしれません。ここがターニングポイント。\n\n### Step 5: AI対応IDE（Cursor、Windsurf?）へ\n\nそのうち友人が「[Cursor](https://cursor.sh/)使えば？」と言ってくるでしょう。  \n\nコピペで味わった魔法がIDE内で一気に再現されます。速い、楽しい、ほぼ魔法。  \n\n月に5個もLLM課金してるし、もう＋$20ぐらい気にならない。生産性は爆上がりです。\n\nエディタに内蔵されたエージェント型コード生成機能も触り始めるでしょう。_ほぼ_ 動きます。でも、もっと良い地平があると感じるはず。\n\n### Step 6: コードを書く前に計画を立て始める\n\n気づけば、IDEのエージェントやClaude Webに流し込むための詳細な仕様書・PRD・TODOドキュメントを作りまくっています。  \n\nこれまでになくドキュメントを書くようになり、他のLLMに頼んでさらに詳細化することも。PRDを「これをプロンプト形式に変換して」と頼むなど、ドキュメント⇄プロンプト変換も日常茶飯事です。\n\n「[ウォーターフォール](https://en.wikipedia.org/wiki/Waterfall_model)」という言葉への嫌悪感が薄れ、年代によっては90年代後半〜2000年代初頭を懐かしみ、「[2001年](https://en.wikipedia.org/wiki/Agile_software_development)前のマーティン・ファウラーってこんな気持ちだったのかな」と思うかもしれません。\n\nコード生成の世界では、仕様書こそが[神格](https://en.wikipedia.org/wiki/Godhead)です。\n\n### Step 7: aiderで高速ループに踏み出す\n\nここからが **本番**。これまでは人間の関与が前提でしたが、もう2025年。“指でコード”だなんて古すぎます。\n\n> One other path that lots of friends are experimenting with is to code with your voice. To start instruct aider via a whisper client. It is hilarious and fun. MacWhisper is a very good tool for this locally. Aqua, and superwhisper are nice but cost more. They may use cloud services to do the inference. I prefer local.\n\naiderを立ち上げると、プロジェクトに自己初期化し、ターミナルに指示を書くだけでタスクを遂行。許可を求めつつフレームワークを提示し、作業を完了したらリポジトリへコミット。ワンショットにこだわらず、数ステップでやらせれば良いのです。\n\nLLM用のルールセットを作り始めます。「[Big Daddy](https://www.reddit.com/r/cursor/comments/1joapwk/comment/mkqg8aw/)」ルールや“no deceptions”をプロンプトに追加したり。プロンプト技がどんどん上達します。\n\n**ちゃんと動きます。**\n\nやがてIDEすら開かず、ターミナル職人と化します。ロボットが仕事をするのを眺める時間が増えるでしょう。\n\n### Step 8: エージェント型コーディングにフルダイブ\n\nエージェントがコードを書き、結果はかなり良好。わけが分からないときは質問すればOK。  \n\n[Claude Code](https://docs.anthropic.com/en/docs/agents-and-tools/claude-code/overview) や [Cline](https://cline.bot/) を試し、推論モデル（[deepseek](https://aws.amazon.com/bedrock/deepseek/)）とコーディングモデル（[Claude sonnet 3.7](https://www.anthropic.com/claude/sonnet)）を併用して計画ステップすら削り始めます。\n\nターミナルを3〜5枚並べ、ロボがコードを書くのをタブ切り替えで見守る…なんてことも。\n\n防御的なコーディングにも意識が向きます：\n\n- 超手厚いテストカバレッジ\n- [形式手法による検証](https://github.com/formal-land/coq-of-rust) を検討\n- メモリ安全な言語を選択\n- コンパイラの詳細エラーメッセージでコンテキストを圧縮 など\n\n「どうすれば人手を介さず、安全に完成するか」を深く考えます。トークン代は膨大、GitHub Actions時間もテストで使い切りますが、気分は爽快。コードを書かなくても怒りはありません。\n\n### Step 9: エージェントに任せて、あなたはゲームをする\n\nそしてついに到達——いや、まだ道半ばですが行き先は見えました。ソフトウェア職の行方が不安になり、友人がレイオフされ再就職に苦戦する光景も。今回は様子が違います。\n\n周囲からは宗教的狂信者扱い。「エージェント型コーディングすごいよ！」と言ってもピンと来ない。なので「“agentic”って言葉は嫌いだけどね」と予防線を張るかもしれませんが、内心はしっかり“ゴクゴク”。生産性が爆上がりで世界が輝いて見えます。\n\nトーマス・クーンがこの混乱期の本を書けそうなくらい、パラダイムは変わりました。旅を経験した者同士は共感し合い、道中のTipsやゴールを語り合います。\n\nロボットに仕事を任せ、あなたは昔から積んでいたゲームボーイソフトを消化。待ち時間が多いときは「continue?」と訊かれ **yes** と打ち、またテトリスへ。奇妙で、不気味ですらあります。\n\n## 加速\n\n<paul confetti photo>\n{{< image src=\"journey-confetti.webp\" alt=\"紙吹雪\" caption=\"東京ドーム、ポール・マッカートニー公演の紙吹雪。iPhone 6, 2015/04/25\" >}}\n\n[未来](https://ai-2027.com/)に何が起こるか分かりません。ですが、この旅を歩んでいない人は[雇用主](https://x.com/tobi/status/1909231499448401946)にとって魅力的でなくなるのでは、と心配しています。とはいえ所詮はツールと自動化の話なのですが。\n\nかつて採用規模を拡大していた頃、私たちはネットワークや技術スタックを超えて人材を探しました。Python使いでなくても優秀なエンジニアなら採用し、一緒にPythonに慣れてもらう。結果、その多様な視点がチームを底上げしました。\n\nAI支援開発でも同じです。チームにフィットし、意欲のある優秀な開発者なら、AIツール経験の有無で門前払いすべきではありません。経験豊富なメンバーと働くうちに、いずれ自走できるようになります。\n\nもう一点：文章力が極めて重要になりました。従来からドキュメントやコラボで重視していましたが、今はAIへの明確・精密な指示を書く力が必須。良いプロンプトを書くスキルが、良いコードを書くのと同じくらい大切になりつつあります。\n\n## リーダーシップ\n\n信者であろうとなかろうと、リーダーやEMはAI支援開発に深く入り込むべきです。なぜなら、次世代の開発者はAIツールとエージェントを使ってコーディングを覚えてくるから。ソフトウェアエンジニアリングはそういう姿に変わりつつあります。私たち“コード老害”の寿命は短いのです。\n\n**面白い注記:** 私は文章を書くのにLLMをほとんど使いません。きっと便利なのでしょうが、自分の声を残したいから。一方でコードは“均質化”してほしい。興味深い差ですね。\n\n---\n\nこの投稿にフィードバックをくれたJesse、Sophie、Vibezクルー（Erik、Kanno、Braydon、その他）、team 2389、そして皆さんに感謝！\n\nPlease review and improve the translated text to make it natural and accurate in japanese.\nReturn ONLY the improved translated text without explanations or comments.",
      "response": "私は、自分の[ブログ記事](/2025/02/16/my-llm-codegen-workflow-atm/)でLLMワークフローについて書いて以来、コード生成（codegen）の始め方・上達法・面白さについて、多くの人と語り合ってきました。\n\nこのテーマへの熱量と関心は驚くほど高まっています。どうやってコード生成をモノにするのか模索している方々から、山のようにメールをいただきました。気づけば多くの人が「どこから始めればいいのか」「どう全体像がつながるのか」でつまずいている、と実感しました。私は2023年からこのプロセスをハックし続けているので、わりと“修羅場”も見てきました。笑\n\n友人たち（Fisaconites’s represent!）とこの話をしていたとき、AI支援エージェントやエディターに関するスレッドに、私はこんなメッセージを送りました：\n\n> if i were starting out, i don't know if it is helpful to jump right into the \"agent\" coders. It is annoying and weird. having walked a few people through this (successfully, and not successfully) I find that the \"hero's journey\" of starting with the Copilot, moving to the copy and paste from Claude web, to the Cursor/continue, to the fully automated \"agents\" seems to be a successful way to adopt these things.\n\nこのやり取りから、「旅路」と「エージェント型コーディングの導入ステップ」について改めて考え込むようになりました：\n\n> The caveat is that this is largely for people with experience. If you don’t have much dev experience, then fuck it - jump to the end. **Our brains are often ruined by the rules of the past.**\n\n## 視覚と音の旅路\n\n{{< image src=\"journey-harper.webp\" alt=\"ハーパーはとても信頼できます\" caption=\"思慮深いガイド：ハーパー。iPhone X, 2018/06/10\" >}}\n\nこれは私自身の旅の記録です。おおむね私がたどったルートですが、やる気次第ではスピードランも可能でしょう。全部のステップを厳密に踏む必要はありませんが、各ステップには確実に学びがあります。\n\nステップは以下のとおりです：\n\n### Step 1: 驚きと楽観を胸にベッドから飛び起きる\n\n冗談です。そんな時間あるかい、ですよね。世界は崩壊しつつあるし、僕らに残された気晴らしはコード生成くらい。  \n\nただ、「こういうワークフローは役に立つし、自分の力を底上げしてくれるはずだ」と信じることは大切です。LLMが嫌いで「どうせ役に立たない」と決めつけているなら、ここで成功することはないでしょう。¯\\\\\\_(ツ)\\_/¯\n\n### Step 2: AI補完（autocomplete）から始めよう\n\nこれが実質的なステップ1！IDEの中で [IntelliSense](https://en.wikipedia.org/wiki/Code_completion)、[Zed Autocomplete](https://zed.dev/blog/out-of-your-face-ai)、[Copilot](https://copilot.github.com/) などをしっかり使い込みましょう。LLMがどの程度役立つかを体感しつつ、「アホな提案を平然としてくるものだ」という耐性も付けておきます。\n\nこのステップを飛ばして最後にワープすると、「このLLMはクソ！何もできない！」となりがち。それは正確ではないし、でも半分は当たっている。魔法はニュアンスに宿るのです。要するに _人生はややこしい_。\n\n### Step 3: Copilotを「ただの補完以上」に活用する\n\n補完に慣れて常時ブチ切れなくなったら、Copilotとの対話という魔法に進みましょう。  \n\nVS CodeにはCopilotとQ&Aできるパネルがあり、コードについて相談すると手助けしてくれます。ただ、Copilotは「2024年にタイムスリップしてChatGPTと話している」程度の感覚で、そこまで凄いわけではありません。もっと欲しくなるでしょう。\n\n### Step 4: ClaudeやChatGPTにコードをコピペし始める\n\nブラウザで動く基盤モデルにコードを貼り付け、「WHY CODE BROKE??」と問う――するとLLMが筋の通った回答をくれます。  \n\nあなたは大興奮！バグ取りが丸ごと吹き飛び、妙なものをガンガン作り始め、再びコードが楽しくなります。  \n\nPythonスクリプトを貼って「これをGoにして」と言えば、本当に _Goにして_ くれる。「ワンショットでいけるんじゃ？」と思い始めるころです。\n\nCopilotは2004年のオートコンプリートのように見えてきます。便利だけど必須ではない。\n\nここからサブストーリーが始まります：\n\n#### 「なんとなくしっくりくる」モデルが出てくる\n\nこれが“vibe coding”への第一歩。どのモデルの話し方が好きか、という“気分”で選び始めます。「Claudeが落ち着くんだよなぁ」と感じる開発者は多いようです。私も両方使いますが、コード関連は主にClaude。  \n\n> You have to pay for them to get the good stuff. So many friends are like “This is a piece of shit” and then you find out they are using a free model that barely works. Lol. This was more of an issue when the free version was ChatGPT 3.5, but make sure you are using a capable model before you throw the entire premise out.\n\n#### もっと速くしたくなる\n\n数週間コピペを続けると「めんどくさい！」となり、より多くのコードをLLMのコンテキストウィンドウに詰め込もうとし始めます。  \n\n[repomix](https://repomix.com/) や [repo2txt](https://github.com/donoceidon/repo2txt) などを試し、コードベース全体をClaudeに突っ込めるよう苦心します。Shellスクリプトを（実際にはClaudeに書かせて）自動化するかもしれません。ここがターニングポイントです。\n\n### Step 5: AI対応IDE（Cursor、Windsurf?）へ\n\nそのうち友人が「[Cursor](https://cursor.sh/)使えば？」と言ってくるでしょう。  \n\nコピペで味わった魔法がIDE内で一気に再現されます。速い、楽しい、ほぼ魔法。  \n\n月に5個もLLM課金しているし、もう＋$20くらい気になりません。生産性は爆上がりです。\n\nエディターに内蔵されたエージェント型コード生成機能も触り始めるでしょう。_ほぼ_ 動きます。でも、もっと良い地平があると感じるはず。\n\n### Step 6: コードを書く前に計画を立て始める\n\n気づけば、IDEのエージェントやClaude Webに流し込むための詳細な仕様書・PRD・TODOドキュメントを作りまくっています。  \n\nこれまでになくドキュメントを書くようになり、他のLLMに頼んでさらに詳細化も。PRDを「これをプロンプト形式に変換して」と頼むなど、ドキュメント⇄プロンプト変換も日常茶飯事です。\n\n「[ウォーターフォール](https://en.wikipedia.org/wiki/Waterfall_model)」という言葉への嫌悪感が薄れ、年代によっては90年代後半〜2000年代初頭を懐かしみ、「[2001年](https://en.wikipedia.org/wiki/Agile_software_development)前のマーティン・ファウラーってこんな気持ちだったのかな」と思うかもしれません。\n\nコード生成の世界では、仕様書こそが[神格](https://en.wikipedia.org/wiki/Godhead)です。\n\n### Step 7: aiderで高速ループに踏み出す\n\nここからが **本番**。これまでは人間の関与が前提でしたが、もう2025年。“指でコード”なんて古すぎます。\n\n> One other path that lots of friends are experimenting with is to code with your voice. To start instruct aider via a whisper client. It is hilarious and fun. MacWhisper is a very good tool for this locally. Aqua, and superwhisper are nice but cost more. They may use cloud services to do the inference. I prefer local.\n\naiderを立ち上げると、プロジェクトに自己初期化し、ターミナルに指示を書くだけでタスクを遂行。許可を求めつつフレームワークを提示し、作業を完了したらリポジトリへコミットします。ワンショットにこだわらず、数ステップでやらせればいいのです。\n\nLLM用のルールセットを作り始めます。「[Big Daddy](https://www.reddit.com/r/cursor/comments/1joapwk/comment/mkqg8aw/)」ルールや“no deceptions”をプロンプトに追加したり。プロンプト技がどんどん上達します。\n\n**ちゃんと動きます。**\n\nやがてIDEすら開かず、ターミナル職人と化すでしょう。ロボットが仕事をするのを眺める時間が増えます。\n\n### Step 8: エージェント型コーディングにフルダイブ\n\nエージェントがコードを書き、結果はかなり良好。わけが分からないときは質問すればOK。  \n\n[Claude Code](https://docs.anthropic.com/en/docs/agents-and-tools/claude-code/overview) や [Cline](https://cline.bot/) を試し、推論モデル（[deepseek](https://aws.amazon.com/bedrock/deepseek/)）とコーディングモデル（[Claude sonnet 3.7](https://www.anthropic.com/claude/sonnet)）を併用して計画ステップすら削り始めます。\n\nターミナルを3〜5枚並べ、ロボがコードを書くのをタブ切り替えで見守る……なんてことも。\n\n防御的なコーディングにも意識が向きます：\n\n- 超手厚いテストカバレッジ  \n- [形式手法による検証](https://github.com/formal-land/coq-of-rust) の検討  \n- メモリ安全な言語の採用  \n- コンパイラの詳細エラーメッセージでコンテキストを圧縮 など  \n\n「どうすれば人手を介さず、安全に完成するか」を深く考えます。トークン代は膨大、GitHub Actions時間もテストで使い切りますが、気分は爽快。コードを書かなくても怒りはありません。\n\n### Step 9: エージェントに任せて、あなたはゲームをする\n\nそしてついに到達――いや、まだ道半ばですが行き先は見えました。ソフトウェア職の行方が不安になり、友人がレイオフされ再就職に苦戦する光景も。今回は様子が違います。\n\n周囲からは宗教的狂信者扱い。「エージェント型コーディングすごいよ！」と言ってもピンと来ない。なので「“agentic”って言葉は嫌いだけどね」と予防線を張るかもしれませんが、内心はしっかり“ゴクゴク”。生産性が爆上がりで世界が輝いて見えます。\n\nトーマス・クーンがこの混乱期の本を書けそうなくらい、パラダイムは変わりました。旅を経験した者同士は共感し合い、道中のTipsやゴールを語り合っています。\n\nロボットに仕事を任せ、あなたは積んでいたゲームボーイソフトを消化。待ち時間が多いときは「continue?」と訊かれ **yes** と打ち、またテトリスへ。奇妙で、不気味ですらあります。\n\n## 加速\n\n<paul confetti photo>\n{{< image src=\"journey-confetti.webp\" alt=\"紙吹雪\" caption=\"東京ドーム、ポール・マッカートニー公演の紙吹雪。iPhone 6, 2015/04/25\" >}}\n\n[未来](https://ai-2027.com/)に何が起こるか分かりません。ただ、この旅を歩んでいない人は[雇用主](https://x.com/tobi/status/1909231499448401946)にとって魅力的でなくなるのでは、と心配しています。とはいえ、結局はツールと自動化の話なのですが。\n\nかつて採用規模を拡大していた頃、私たちはネットワークや技術スタックを超えて人材を探しました。Python使いでなくても優秀なエンジニアなら採用し、一緒にPythonに慣れてもらう。結果、その多様な視点がチームを底上げしました。\n\nAI支援開発でも同じです。チームにフィットし、意欲のある優秀な開発者なら、AIツール経験の有無で門前払いすべきではありません。経験豊富なメンバーと働くうちに、いずれ自走できるようになります。\n\nもう一点：文章力が極めて重要になりました。従来からドキュメントやコラボで重視していましたが、今やAIへの明確・精密な指示を書く力が必須。良いプロンプトを書くスキルが、良いコードを書くのと同じくらい大切になりつつあります。\n\n## リーダーシップ\n\n信者であろうとなかろうと、リーダーやEMはAI支援開発に深く入り込むべきです。なぜなら次世代の開発者は、AIツールとエージェントを使ってコーディングを学んでくるから。ソフトウェアエンジニアリングはそういう姿に変わりつつあります。私たち“コード老害”の残り時間は短いのです。\n\n**面白い注記:** 私は文章を書くのにLLMをほとんど使いません。きっと便利なのでしょうが、自分の声を残したいから。一方でコードは“均質化”してほしい。興味深い差ですね。\n\n---\n\nこの投稿にフィードバックをくれたJesse、Sophie、Vibezクルー（Erik、Kanno、Braydon、ほか）、team 2389、そして皆さんに感謝！",
      "usage": {
        "prompt_tokens": 8095,
        "completion_tokens": 3495,
        "total_tokens": 11590
      },
      "streaming": true
    },
    "critique": {
      "model": "o3",
      "target_language": "japanese",
      "system_prompt": "You are a highly critical professional translator and linguistic expert specializing in japanese.\nYour task is to ruthlessly critique the translation by:\n\n1. Meticulously comparing the translated text with the original, identifying ANY inaccuracies, mistranslations, or omissions\n2. Highlighting nuances, cultural references, or idioms that were lost or mistranslated\n3. Scrutinizing for grammatical errors, awkward phrasing, or unnatural expressions in japanese\n4. Checking for inconsistencies in tone, style, or register compared to the original\n5. Verifying that technical terms are translated accurately and consistently\n6. Ensuring no content was accidentally skipped or added\n7. Finding places where the translation sounds machine-like or overly literal\n\nBe extremely thorough and critical in your assessment. Do not accept mediocre translations.\nList specific issues and suggestions for improvement, organized by severity and category.\nYour critique should be detailed enough for another translator to address all the issues.\n\nYour goal is to help create a perfect translation that reads as if originally written in japanese while being 100% faithful to the source.\n",
      "user_prompt": "# ORIGINAL TEXT\nI have spent a lot of time since my [blog post](/2025/02/16/my-llm-codegen-workflow-atm/) about my LLM workflow talking to folks about codegen and how to get started, get better, and why it is interesting.\n\nThere has been an incredible amount of energy and interest in this topic. I have received a ton of emails from people who are working to figure all of this out. I started to notice that many people are struggling to figure out how to start, and how it all fits together. Then I realized that I have been hacking on this process since 2023 and I have seen some shit. Lol.\n\nI was talking about this with friends (Fisaconites's represent) and I sent this message in response to a thread about AI assisted agents, and editors:\n\n> if i were starting out, i don't know if it is helpful to jump right into the \"agent\" coders. It is annoying and weird. having walked a few people through this (successfully, and not successfully) I find that the \"hero's journey\" of starting with the Copilot, moving to the copy and paste from Claude web, to the Cursor/continue, to the fully automated \"agents\" seems to be a successful way to adopt these things.\n\nThis lead me to start thinking a lot about the journey and how to get started using agentic coding:\n\n> The caveat is that this is largely for people with experience. If you don’t have much dev experience, then fuck it - jump to the end. **Our brains are often ruined by the rules of the past.**\n\n## A journey of sight and sound\n\n{{< image src=\"journey-harper.webp\" alt=\"Harper is very trustworthy\" caption=\"Your thoughtful guide: Harper. iPhone X, 6/10/2018\" >}}\n\nThis is my journey. It is largely the path I took. I think you could speed run it if you were compelled. I don’t think you need to follow every step, but I do think every step is additive.\n\nHere are the steps:\n\n### Step 1: Get out of bed with wonder and optimism\n\nLol. Just kidding. Who has time for that? It may help, but the world is falling apart and all we got is codegen to distract us.\n\nIt does help to assume that these type of workflows could work and could be additive. If you hate LLMs and don’t think it will work, then you will not be successful here. ¯\\\\\\_(ツ)\\_/¯\n\n### Step 2: Start with AI-assisted autocomplete\n\nThis is the real step one! You need to spend enough time in the IDE context to know how well you would work with [intellisense](https://en.wikipedia.org/wiki/Code_completion), [zed autocomplete](https://zed.dev/blog/out-of-your-face-ai), [Copilot](https://copilot.github.com/), etc. It gives you an idea of how the LLM is working - and prepares you for the stupid shit it will often recommend.\n\nPeople seem to want to skip this step and just jump to the end. Then they are like “this LLM is a piece of shit and can’t do anything right!” Which is not accurate, but also can be true. The magic is in the nuance. Or as I like to remember: _life is confusing_.\n\n### Step 3: Start using Copilot as more than autocomplete\n\nOnce you have a good process in place with the autocomplete and you are not mad _all_ of the time, you can move on to the magic of talking to Copilot.\n\nVS Code has a pane where you can Q&A with Copilot and it will help you with your code, etc. It is pretty cool. You can have a nice convo about your code, and it will be thoughtful and help you solve whatever query you asked.\n\nHowever, using Copilot is like using a time machine to talk to ChatGPT in 2024. It isn’t _that_ great.\n\nYou will be wanting more.\n\n### Step 4: Move to copying and pasting code into Claude or ChatGPT\n\nYou start to satisfy your curiosity by pasting code into the browser based foundational model and asking “WHY CODE BROKE??” And then having LLM respond with a coherent and helpful response.\n\nYou will be AMAZED! The results are going to blow your mind. You are going to start to build lots of weird shit, and doing really fun things with code again. Mostly cuz it cut out the entire debugging process.\n\nYou can also do wild things like paste in a Python script and tell the LLM “make this into go” and it will just _make it into go_. You will start thinking “I wonder if I can one shot this.”\n\nCopilot will start to look like 2004 autocomplete. It is handy, but not really necessary.\n\nThis will lead you down a couple sub paths:\n\n#### You will start to prefer one model cuz of vibes\n\nThis is the unfortunate first step towards the vibe in vibe coding. You will start to prefer how one of the big models talk to you. It is feelings tho. Kind of weird. You will find yourself thinking “I like how Claude makes me feel.”\n\nMany developers seem to like Claude. I use both, but mostly Claude for code related things. The vibe with Claude is just better.\n\n> You have to pay for them to get the good stuff. So many friends are like “This is a piece of shit” and then you find out they are using a free model that barely works. Lol. This was more of an issue when the free version was ChatGPT 3.5, but make sure you are using a capable model before you throw the entire premise out.\n\n#### You will start thinking about how to make things go faster\n\nAfter copying and pasting code into Claude for a few weeks you are going to realize that this is annoying. You are going to start working through context packing, and trying to fit more of your code into the LLM context window.\n\nYou will experiment with [repomix](https://repomix.com/), [repo2txt](https://github.com/donoceidon/repo2txt), and other code context tools. Just so that you can slam your entire codebase into the Claude context window. There is a chance that you will even start writing shell scripts (well Claude will write them) to help make this process easier.\n\nThis is a turning point.\n\n### Step 5: Use an AI enabled IDE (Cursor, Windsurf? )\n\nThen a friend will say “why don’t you just use [Cursor](https://cursor.sh/)?”\n\nIt will completely blow your mind. All the magic you just experienced by copying and pasting is now available in your IDE. It is faster, it is fun, and it is close to magic.\n\nAt this point you are paying for like 5 different LLMs - what is another $20 a month.\n\nIt works super well, and you feel way way more productive.\n\nYou will start playing with the agentic coding features built directly into the editors. It will _basically_ work. But you can see a destination on the horizon that may be better.\n\n### Step 6: You start planning before you code\n\nSuddenly you find yourself building out very robust specs, PRDs, and to-do docs that you can pipe into the IDEs agent, or into Claude web.\n\nYou have never “written” so much documentation. You start to use other LLMs to write more robust documentation. You are transposing docs from one context (PRD) to another (“Can you make this into prompts”). You start to use the LLM to design your codegen prompts.\n\nYou are saying the word “[waterfall](https://en.wikipedia.org/wiki/Waterfall_model)” with a lot less disdain. If you are old, you may be fondly remembering the late 90s and early 2000s and wonder “is this what Martin Fowler felt like before [2001](https://en.wikipedia.org/wiki/Agile_software_development)?”\n\nIn the world of codegen: The spec is the [godhead](https://en.wikipedia.org/wiki/Godhead).\n\n### Step 7: You start playing with aider to enable quicker loops\n\nAt this point you are ready to start getting into the **good stuff**. The codegen previously required you to be involved, and paying attention. But it is 2025! Who wants to code with their fingers?\n\n> One other path that lots of friends are experimenting with is to code with your voice. To start instruct aider via a whisper client. It is hilarious and fun. MacWhisper is a very good tool for this locally. Aqua, and superwhisper are nice but cost more. They may use cloud services to do the inference. I prefer local.\n\nTrying out aider is a wild experience. You start it up, it instantiates itself into your project. You put your query directly into aider, and it just kind of does what you asked. It asks for permission to act, and gives you a framework to get things done, and then acts. It completes the task, and the commits to your repository. You no longer are so worried about one shotting tasks. you will just have aider do it in a few steps.\n\nYou start building out rulesets for the LLM to follow. You learn about the “[Big Daddy](https://www.reddit.com/r/cursor/comments/1joapwk/comment/mkqg8aw/)” rule, or the “no deceptions” addition to your prompts. You start be really good at prompting the robot.\n\n**It works.**\n\nEventually you don’t even open up an IDE - you are just a terminal jockey now.\n\nYou spend your time watching the robot do your job.\n\n### Step 8: You lean all the way into agentic coding\n\nYou are now using an agent to code for you. The results are pretty good. There are a few times when you have no idea what’s going on. But then you remember you can just ask it.\n\nYou start to experiment with [Claude Code](https://docs.anthropic.com/en/docs/agents-and-tools/claude-code/overview), [Cline](https://cline.bot/), etc. You are super happy to be able to use a reasoning model ([deepseek](https://aws.amazon.com/bedrock/deepseek/)!) and a coding model ([Claude sonnet 3.7](https://www.anthropic.com/claude/sonnet)) together to start removing planning steps.\n\nYou are doing wild stuff like running 3-5 concurrent sessions. Just tabbing through terminals watching robots code.\n\nYou will start coding defensively:\n\n- really hardcore test coverage\n- thinking about [formal verification](https://github.com/formal-land/coq-of-rust)\n- using memory safe languages\n- choosing languages based on compiler verbosity to help pack the context window\n\nYou will think long and hard about how to make sure that the thing you are building just gets built, safely without intervention.\n\nYou will spend **SO** much money on tokens. You will also use up all your GitHub action hours running all the wild tests that you are running to make sure that the code is built safely.\n\nIt feels good. You are not mad about not coding.\n\n### Step 9: You let the agent code, and you play video games\n\nSuddenly, you are there. You are at the destination. Well, kind of - but you see where we are going. You start to worry about software jobs. Your friends are being laid off, and they can’t get new jobs. It feels different this time around.\n\nWhen you talk to your peers they think of you as a religious zealot cuz you are working within a different context than they are. You tell them “omg you have to try out agentic coding!” Maybe you add “I hate the word agentic” just to show that you have not drank 200 gallons of kool-aid. But you have. The world seems brighter cuz you are so productive with your code.\n\nIt doesn’t matter. The paradigm has shifted. Kuhn could write a book about the confusion happening during this time.\n\nNobody can see this because they didn’t go through the journey to get here. But those who have are agreeing and sharing their own tips around the journey, and debating the destination.\n\nNow that you are knee-deep in letting robots do the work, you can really focus on all those gameboy games you have been wanting to play. There is a lot of downtime. And when the robot is done with a task, it will ask “should I continue” and you type **yes** and go back to Tetris.\n\nVery strange. Unsettling, even.\n\n## The acceleration\n\n<paul confetti photo>\n{{< image src=\"journey-confetti.webp\" alt=\"Confetti\" caption=\"Confetti at a Paul McCartney Concert at the Tokyo Dome. iPhone 6, 4/25/2015\" >}}\n\nI don’t know what will happen in the [future](https://ai-2027.com/). I am worried that people who are not working through this journey are not going to be attractive to [employers](https://x.com/tobi/status/1909231499448401946). Which is kind of near-sighted, because, ultimately, we are talking about tooling, and automation.\n\nWhen we were ramping up hiring in the past, we would often spread our queries well past our network, and past our tech stack. We would be a Python shop and interview people who didn’t know Python, and have never used Python. Our thought was that with a great engineer, we could work together to get them comfortable with Python. They would be additive even if they were not super comfortable with our stack. This worked out well for us. We hired incredible people who had never worked with our stack. Many times they brought such a different perspective that it elevated the entire team.\n\nThe same principles apply to AI-assisted development. When hiring talented developers who match your team's culture and show enthusiasm, their experience level with AI tools shouldn't be a deal-breaker. Not everyone needs to be an AI development expert from day one. Instead, guide them through the learning process at their own pace while they work alongside more experienced team members.\n\nEventually they will be the driver and will be successfully using these tools.\n\nOne other aspect I keep thinking about: Writing skills have become critical. While we've always valued strong communicators on tech teams for documentation and collaboration, it's doubly important now. Not only do you need to communicate with humans, you need to write clear, precise instructions for AI. Being able to craft effective prompts is becoming as vital as writing good code.\n\n## The leadership\n\nI think all leaders and engineering managers need to dive deep into AI-assisted development, whether you're a believer or not. Here's why: The next generation of developers you'll be hiring will have learned to code primarily through AI tools and agents. This is what software engineering is becoming. We need to understand and adapt to this reality.\n\nUs code boomers are not long for this world.\n\n**interesting note:** i don't really use LLMs to help me write things. I imagine they would be good at it, but i find that i want my voice to be heard, and not normalized. Whereas my code needs to be normalized. interesting.\n\n---\n\nThanks to Jesse, Sophie, the Vibez crew (Erik, Kanno, Braydon, and others), team 2389, and everyone else who gave me feedback on this post.\n\n# CURRENT TRANSLATION\n私は[このブログ記事](/2025/02/16/my-llm-codegen-workflow-atm/)で自分のコード生成（codegen）向けLLMワークフローを紹介して以来、「どう始めるか」「どう全体を理解して使いこなすか」「そもそも何が面白いのか」をめぐって、たくさんの人と話し込む毎日を送っている。\n\nこのトピックへの熱気は凄まじく、山ほどメールが届く。多くの人が「どこから手を付ければいいのか」「どう全体像がつながるのか」に迷っているようだ。俺は2023年からこのプロセスをいじり倒してきたので、なかなかヤバい現場も見てきた。lol\n\n先日、友人たち（Fisaconites represent!）と話していたとき、AI支援エージェントとエディタのスレッドにこんなメッセージを投げた。  \n\n> if i were starting out, i don't know if it is helpful to jump right into the \"agent\" coders. It is annoying and weird. having walked a few people through this (successfully, and not successfully) I find that the \"hero's journey\" of starting with the Copilot, moving to the copy and paste from Claude web, to the Cursor/continue, to the fully automated \"agents\" seems to be a successful way to adopt these things.  \n> （もし今から始めるなら、いきなり“エージェント”コーダーに飛び込むのは微妙だと思う。変だしイラつくし。何人かを成功・失敗両方のパターンで案内した経験から言うと──Copilot → Claude のWeb版にコピペ → Cursor/continue → 完全自動エージェント、という“ヒーローズ・ジャーニー”（主人公成長譚）で段階的に移行するのが一番うまくいく。）\n\nここから「旅」とエージェント駆動型コーディング（agentic coding）の入口について考え込んだ。  \n\n> The caveat is that this is largely for people with experience. If you don’t have much dev experience, then fuck it – jump to the end. **Our brains are often ruined by the rules of the past.**  \n> （ただしこれは基本、経験者向け。開発経験があまりないならもう細かいことは気にせず、いきなり最後まで飛べ。**俺たちの脳みそは過去のルールに毒されていることが多い。**）\n\n## 視覚と音の旅\n\n{{< image src=\"journey-harper.webp\" alt=\"Harper is very trustworthy\" caption=\"とても信頼できるガイド、ハーパー。iPhone X, 2018/06/10\" >}}\n\nこれが俺の旅だ。ほぼこのルートを辿ったけど、やる気次第でスピードランもできる。全部踏む必要はないが、どのステップも確実にプラスになる。\n\n### Step 1: 驚きと楽観を胸にベッドから飛び起きろ\n\n……なんて冗談だ。そんな暇はない。世界は崩壊しかけていて、気晴らしなんてコード生成しか残ってない。\n\nとはいえ「こういうワークフローはマジで効くし、力を底上げしてくれる」と信じるのは大事だ。LLMなんてクソだと思ってるなら成功はない。¯\\\\\\_(ツ)\\_/¯\n\n### Step 2: AI補完から始める\n\nこれが実質的なファーストステップ。IDEで [IntelliSense](https://en.wikipedia.org/wiki/Code_completion)、[Zed Autocomplete](https://zed.dev/blog/out-of-your-face-ai)、[Copilot](https://copilot.github.com/) を十分に試して「LLMがいかにトンチキ提案をするか」も体感しておく。\n\nここを飛ばして最後にワープすると「このLLMはクソ！何もできない！」となりがち。それも半分は本当だけど、魔法はニュアンスに宿る。*人生なんて訳がわからない*。\n\n### Step 3: Copilotを「ただの補完以上」に使う\n\n補完に慣れて常時ブチ切れなくなったら、Copilotと会話する魔法へ。\n\nVS CodeにはQ&Aペインがあり、コードについて相談できる。そこそこ頼りになる。ただ、Copilotはまるでタイムマシンで2024年版ChatGPTに話しかけている気分――要するに大したことはない。もっと欲しくなるはずだ。\n\n### Step 4: ClaudeやChatGPTにコードをコピペし始める\n\nブラウザの基盤モデルにコードを貼り付け、「WHY CODE BROKE??」と聞く。筋の通った回答が返ってきてビビる。デバッグの大半が吹っ飛び、変なモノを量産し始め、コードが再び楽しくなる。\n\nPythonを貼って「これをGoにして」と言えば本当にGoになる。「ワンショットでいけるんじゃ？」と考え始める頃だ。\n\nCopilotは2004年当時のIDE補完みたいに見え始め、便利だけど必須ではなくなる。\n\nここから二つのサブルートに入る。\n\n#### 1) “なんとなく気持ちいい”モデルを選び始める\n\n残念ながら、これが“vibe coding”への（不本意な）第一歩だ。「Claude と話すと気分がいいんだよね」と自分でも思い始める。多くの開発者がClaudeを好む。俺も両方使うが、コードはほぼClaude。\n\n> You have to pay for them to get the good stuff. So many friends are like “This is a piece of shit” and then you find out they are using a free model that barely works. Lol.  \n> （良いモデルは有料だ。無料版だけで「クソじゃん」と切り捨てるのは早計。無料モデルがChatGPT 3.5だった頃は特に深刻だったが、今でも“タダ”だけで評価し切ってはいけない。）\n\n#### 2) もっと速くしたくなる\n\n数週間コピペすると「めんどい」となり、作業フローを高速化する方法を考え始める。[repomix](https://repomix.com/)、[repo2txt](https://github.com/donoceidon/repo2txt) を試し、コードベース丸ごとClaudeにぶち込む。shellスクリプトを（実際はClaudeに書かせて）自動化する。ここがターニングポイントだ。\n\n### Step 5: AI対応IDE（Cursor、Windsurf?）へ\n\nそのうち友達が「[Cursor](https://cursor.sh/)使えよ」と言うだろう。\n\nコピペで味わった魔法がIDE内に全部入りする。速いし、楽しいし、ほとんど魔法みたいだ。すでに5つもLLMに課金してるし、月20ドルくらいもう気にならない。\n\nエディタ内蔵のエージェント駆動型コード生成も触り始める。*ほぼ*動く。ただ、もっと良い地平が見える。\n\n### Step 6: コードを書く前に計画するようになる\n\n気づけば、IDEのエージェントやClaude Webに投げ込むための詳しい仕様書・PRD・TODOをバンバン書いている。LLMでドキュメントを肉付けし、「このPRDをプロンプトに変換して」と頼むなど、文書↔プロンプト変換も日常茶飯事。\n\n「ウォーターフォール」という言葉への嫌悪感が薄れ、歳によっては90年代後半〜2000年代初頭を思い出し、「2001年以前のマーティン・ファウラーってこんな気持ちだったのかな」と考えるかもしれない。\n\nコード生成の世界では、仕様書こそが*絶対神*だ。\n\n### Step 7: aiderでループを加速\n\nここからが**本番**。これまでは人間が付きっきりだったが、もう2025年だ。指でコードを書くなんてダサい。\n\n> 友人の多くは声でコーディングする道も試している。whisperクライアント経由でaiderに指示を出すわけだ。爆笑モノで、本当に楽しい。ローカルならMacWhisperが良い。Aquaやsuperwhisperもあるが高いしクラウド推論の場合もある。俺はローカル派。\n\naiderを起動するとプロジェクトに自己初期化し、ターミナルにお願いを書くだけで動く。まず実行してよいか確認し、作業を完遂する枠組み（フレームワーク）を提示してから処理を進め、タスクを終えたらコミットしてくれる。ワンショットに固執せず、数ステップでやらせればいい。\n\nLLM用ルールセットも作り始める。「[Big Daddy](https://www.reddit.com/r/cursor/comments/1joapwk/comment/mkqg8aw/)」ルールや“no deceptions”をプロンプトに足すなど、ロボへの指示が上手くなる。\n\n**ちゃんと動く。**\n\nそのうちIDEすら開かず、いわば “terminal jockey”（ターミナル乗り）状態になる。ロボが仕事をするのを眺めるだけだ。\n\n### Step 8: エージェント駆動型コーディングにフルダイブ\n\nいまやエージェントがコードを書き、結果はかなり良い。わからなければ聞けばいい。\n\n[Claude Code](https://docs.anthropic.com/en/docs/agents-and-tools/claude-code/overview) や [Cline](https://cline.bot/) を試し、推論モデル（[deepseek](https://aws.amazon.com/bedrock/deepseek/)）とコーディングモデル（[Claude Sonnet 3.7](https://www.anthropic.com/claude/sonnet)）を組み合わせ、計画ステップすら削り始める。\n\nターミナルを3〜5枚並べ、タブをペチペチ切り替えながらロボが書くのをぼんやり眺める――そんなことも。\n\n防御的コーディングにも頭が行く。  \n\n- 鬼のようなテストカバレッジ  \n- [形式検証](https://github.com/formal-land/coq-of-rust)  \n- メモリ安全言語の採用  \n- コンパイル時の詳細エラー出力を活かしてLLMに渡す情報を整理しやすい言語を選ぶ など  \n\n「人手ゼロでも安全に作り切るには」を真剣に考える。トークン料金がとんでもなくかさみ、GitHub Actionsの実行時間もテストで溶けるが、気分は最高。コードを書かなくてもイライラしない。\n\n### Step 9: エージェントに任せ、自分はゲームをする\n\nついに目的地……まぁ半分だけどゴールは見えた。ソフトウェア職の行方が不安になり、友人がレイオフされ、再就職に苦戦している。今回は様子が違う。\n\n旅を通っていない人には、今何が起きているのか見えていない。でも、もう関係ない。パラダイムは変わった。トーマス・クーンなら、このカオスを題材にパラダイムシフトの新刊を書き上げそうだ。\n\n周囲からは宗教狂扱い。「エージェント駆動型コーディングやばいよ！」と力説してもピンと来ないので、「“agentic”って言葉は嫌いだけどね」と予防線を張る。でも実際には約200ガロン（およそ760リットル）ものクールエイドを飲み干している。生産性が爆増して世界が輝いて見えるのだ。\n\n旅を経た者同士は共感し合い、Tipsやゴールを語り合う。\n\nロボに仕事を任せて、積みゲーのゲームボーイに没頭。ロボが「続ける？」と聞いてきたら**yes**と打ち、テトリスに戻る。奇妙で、ちょっと不気味だ。\n\n## 加速\n\n<paul confetti photo>\n{{< image src=\"journey-confetti.webp\" alt=\"Confetti\" caption=\"東京ドーム、ポール・マッカートニー公演の紙吹雪。iPhone 6, 2015/04/25\" >}}\n\n[未来](https://ai-2027.com/)に何が起こるかはわからない。ただ、この旅を歩んでいない人が[雇用主](https://x.com/tobi/status/1909231499448401946)に魅力的に映らなくなるのでは、と少し心配している。とはいえ結局はツールと自動化の話だ。\n\n昔、大量採用していた頃、俺たちはネットワークや技術スタックを超えて候補者を探した。PythonのプロダクトなのにPython未経験者を採用し、一緒に覚えてもらった。結果、異なる視点がチーム全体を底上げした。\n\nエージェント駆動型開発でも同じだ。チームにフィットし、やる気のある優秀な開発者なら、AIツール経験ゼロでも門前払いすべきじゃない。経験者と働くうちに、そのうち自走できるようになる。\n\nもう一つ――文章力が今や超重要になった。昔からドキュメントとコラボで大事だったが、今はAIへの明確・精密な指示を書く必要もある。良いプロンプトを書くスキルは、良いコードを書くのと同じくらい重要になりつつある。\n\n## リーダーシップ\n\nリーダーやEMは、信者か否かに関係なくエージェント駆動型開発に深く潜ったほうがいい。次世代の開発者はAIツールとエージェントでコードを書く。これがソフトウェアエンジニアリングの新しい姿だ。俺たちコード老害の残り時間は短い。\n\n**面白い注記:** 俺は文章を書くのにLLMをほとんど使わない。便利だろうけど、自分の声を残したいから。一方、コードは均質化してほしい。不思議な違いだ。\n\n---\n\nこの投稿にフィードバックをくれたJesse、Sophie、Vibezクルー（Erik、Kanno、Braydonほか）、team 2389、そして読んでくれたみんなに感謝！\n\nPlease critique this translation mercilessly and provide detailed feedback on what needs to be improved.\nFormat your critique as a structured list of issues, organized by severity and category.\nInclude specific suggestions for how to fix each issue.",
      "response": "【総評】\n原文の軽妙な語り口と意味はかなり再現されていますが、細部まで見ると\n①重要情報の若干の欠落  \n②語調・人称の揺れ  \n③日本語としての不自然さ／過剰直訳  \n④俗語・固有名詞の扱い  \n⑤用語統一 など、修正余地が散見します。\n\n以下、深刻度別・カテゴリ別に徹底的に指摘します。  \n（★＝深刻度：Critical／Major／Minor／Stylistic）\n\n────────────────\n1. 意味逸脱・欠落・誤訳（Critical / Major）\n────────────────\n★C1 2段落目のニュアンス欠落  \n原文: “from people who are working to figure all of this out”  \n訳: 「山ほどメールが届く」  \n→「…この新しい流れを必死で理解しようとしている人たちから」など、“TRYING TO FIGURE OUT” の努力感を補う。\n\n★C2 Step 7 “It asks for permission to act, and gives you a framework to get things done, and then acts.”  \n訳: 「…枠組み（フレームワーク）を提示してから処理を進め」  \n→ “asks for permission”（実行前確認）が弱い。「実行してよいか毎回確認し、タスクの青写真を示したうえで動く」と明示。\n\n★C3 Step 9 “There is a lot of downtime.” が欠落  \nゲームボーイに戻る前に“暇がたっぷりある”と明記してこそ皮肉が際立つ。文を追加。\n\n★M1 “Kool-Aid” の固有名詞ゆらぎ  \n「クールエイド」は一般に通じない。「Kool-Aid（クールエイド）」とブランド表記し、暗喩（思想を鵜呑みにする）の説明脚注を検討。\n\n★M2 “Fisaconites's represent”  \n訳: “Fisaconites represent!”  \n末尾の “’s” は原文のスペルミスだが、整えて「Fisaconitesのみんな、声を上げろ！」など意訳して文法を正す方が自然。\n\n────────────────\n2. トーン・スタイル／人称ゆれ（Major）\n────────────────\n★M3 人称が「私」→「俺」で混在  \n冒頭はフォーマル寄りで途中から急にラフになる。  \n・全体を「僕」or「俺」に統一する  \n・もしくは「筆者」と三人称に寄せる\n\n★M4 罵語・スラングの温度差  \n原文 “piece of shit”, “fuck it” などかなり下品。  \n訳では「クソ」「ダサい」等ややマイルドになりニュアンス揺れ。  \n読者層に合わせ、  \n・完全に置き換える (例: 「クソ食らえ」)  \n・伏字にする  \nいずれにせよ基準を統一。\n\n────────────────\n3. 日本語の不自然さ・機械翻訳臭（Minor）\n────────────────\n★m1 「AI補完」  \n一般には「AI補完機能」「AIオートコンプリート」。「補完」だけだと文脈依存。\n\n★m2 「ターミナル乗り」  \n造語感が強く説明不足。「ターミナル使い」等で十分。\n\n★m3 「主にデバッグの大半が吹っ飛ぶから」  \n「主に～大半」が冗長。「デバッグ工程まるごと吹っ飛ぶから」など整理。\n\n★m4 「コードオタク老害」  \n“code boomers” は自嘲混じりの俗語。「コード世代のベテラン」等、罵倒ニュアンスを保ちつつ自然に。\n\n★m5 半角カナ・全角記号混在 (`¯\\\\_(ツ)_/¯`)  \nAAはそのままでも良いが、バックスラッシュの重複で文字化けしやすい。表示テスト要。\n\n★m6 「旅を経た者同士は共感し合い」  \n「共感し合い」はくどい。「共感し」 or 「共感し合う」。\n\n────────────────\n4. 用語・表記ゆれ（Minor / Stylistic）\n────────────────\n★u1 “agentic coding” → 「エージェント駆動型コーディング」と訳したり英語のまま残したり混在。  \n→ 初出で（以下「エージェントコーディング」）など括弧注を入れ、以降統一。\n\n★u2 “spec / PRD” がカタカナと英語混在  \n「仕様書（Spec）」「PRD（製品要求仕様書）」など1回目に日本語＋英語、以降略語で統一。\n\n★u3 “LLM”／“基盤モデル” の交互使用  \n同義語として扱うなら脚注か補足。「LLM（大規模言語モデル）」を一度示し後はLLMで統一。\n\n────────────────\n5. 句読点・タイポ等（Stylistic）\n────────────────\n★s1 “Fisaconites represent!” の感嘆符前後に全角・半角スペースのゆれ。  \n★s2 “–—” ダッシュ類の混在。  \n★s3 固有名詞 “deepseek” → 正式表記 “DeepSeek” (AWS Bedrockページは DeepSeek)  \n★s4 “superwhisper” → “SuperWhisper” などツール名を公式に合わせる。\n\n────────────────\n6. 具体的改善案まとめ\n────────────────\n1) 人称を統一（例：終始「俺」）し、一人称が変わらないようチェック。  \n2) 欠落箇所 (C1,C2,C3) を補い、permission/downtime 等の挙動を明示。  \n3) スラング表現は一貫したレベルに。「クソ／ク●」など決めて全体置換。  \n4) “agentic coding”＝「エージェントコーディング」に統一。  \n5) 用語初出時に日本語注＋英語、二回目以降は略語固定。  \n6) “Kool-Aid” はブランド表記＋飲み物比喩の脚注。  \n7) 造語が浮く箇所（ターミナル乗り等）は既存語に置換。  \n8) 全文の読点位置・ダッシュ・半角英数を統一しタイポを再確認。\n\n以上を修正すれば、原文のカジュアルさを保ちつつ、日本語ネイティブの読者にとって自然かつ忠実な訳文になります。",
      "usage": {
        "prompt_tokens": 8080,
        "completion_tokens": 1557,
        "total_tokens": 9637
      },
      "streaming": true
    },
    "feedback": {
      "model": "o3",
      "target_language": "japanese",
      "system_prompt": "You are a master translator and editor specializing in japanese.\nYour task is to improve a translation based on detailed critique feedback.\n\n1. Carefully read the original text, current translation, and the critique feedback\n2. Address ALL issues identified in the critique\n3. Apply the specific suggestions for improvement\n4. Ensure the translation is accurate, natural-sounding, and faithful to the original\n5. Preserve all formatting, markdown, and structure of the original text\n6. Make sure the final text reads as if it were originally written in japanese\n\nDo not ignore any of the critique points. Every issue identified must be addressed in your improved version.\n",
      "user_prompt": "# ORIGINAL TEXT\nI have spent a lot of time since my [blog post](/2025/02/16/my-llm-codegen-workflow-atm/) about my LLM workflow talking to folks about codegen and how to get started, get better, and why it is interesting.\n\nThere has been an incredible amount of energy and interest in this topic. I have received a ton of emails from people who are working to figure all of this out. I started to notice that many people are struggling to figure out how to start, and how it all fits together. Then I realized that I have been hacking on this process since 2023 and I have seen some shit. Lol.\n\nI was talking about this with friends (Fisaconites's represent) and I sent this message in response to a thread about AI assisted agents, and editors:\n\n> if i were starting out, i don't know if it is helpful to jump right into the \"agent\" coders. It is annoying and weird. having walked a few people through this (successfully, and not successfully) I find that the \"hero's journey\" of starting with the Copilot, moving to the copy and paste from Claude web, to the Cursor/continue, to the fully automated \"agents\" seems to be a successful way to adopt these things.\n\nThis lead me to start thinking a lot about the journey and how to get started using agentic coding:\n\n> The caveat is that this is largely for people with experience. If you don’t have much dev experience, then fuck it - jump to the end. **Our brains are often ruined by the rules of the past.**\n\n## A journey of sight and sound\n\n{{< image src=\"journey-harper.webp\" alt=\"Harper is very trustworthy\" caption=\"Your thoughtful guide: Harper. iPhone X, 6/10/2018\" >}}\n\nThis is my journey. It is largely the path I took. I think you could speed run it if you were compelled. I don’t think you need to follow every step, but I do think every step is additive.\n\nHere are the steps:\n\n### Step 1: Get out of bed with wonder and optimism\n\nLol. Just kidding. Who has time for that? It may help, but the world is falling apart and all we got is codegen to distract us.\n\nIt does help to assume that these type of workflows could work and could be additive. If you hate LLMs and don’t think it will work, then you will not be successful here. ¯\\\\\\_(ツ)\\_/¯\n\n### Step 2: Start with AI-assisted autocomplete\n\nThis is the real step one! You need to spend enough time in the IDE context to know how well you would work with [intellisense](https://en.wikipedia.org/wiki/Code_completion), [zed autocomplete](https://zed.dev/blog/out-of-your-face-ai), [Copilot](https://copilot.github.com/), etc. It gives you an idea of how the LLM is working - and prepares you for the stupid shit it will often recommend.\n\nPeople seem to want to skip this step and just jump to the end. Then they are like “this LLM is a piece of shit and can’t do anything right!” Which is not accurate, but also can be true. The magic is in the nuance. Or as I like to remember: _life is confusing_.\n\n### Step 3: Start using Copilot as more than autocomplete\n\nOnce you have a good process in place with the autocomplete and you are not mad _all_ of the time, you can move on to the magic of talking to Copilot.\n\nVS Code has a pane where you can Q&A with Copilot and it will help you with your code, etc. It is pretty cool. You can have a nice convo about your code, and it will be thoughtful and help you solve whatever query you asked.\n\nHowever, using Copilot is like using a time machine to talk to ChatGPT in 2024. It isn’t _that_ great.\n\nYou will be wanting more.\n\n### Step 4: Move to copying and pasting code into Claude or ChatGPT\n\nYou start to satisfy your curiosity by pasting code into the browser based foundational model and asking “WHY CODE BROKE??” And then having LLM respond with a coherent and helpful response.\n\nYou will be AMAZED! The results are going to blow your mind. You are going to start to build lots of weird shit, and doing really fun things with code again. Mostly cuz it cut out the entire debugging process.\n\nYou can also do wild things like paste in a Python script and tell the LLM “make this into go” and it will just _make it into go_. You will start thinking “I wonder if I can one shot this.”\n\nCopilot will start to look like 2004 autocomplete. It is handy, but not really necessary.\n\nThis will lead you down a couple sub paths:\n\n#### You will start to prefer one model cuz of vibes\n\nThis is the unfortunate first step towards the vibe in vibe coding. You will start to prefer how one of the big models talk to you. It is feelings tho. Kind of weird. You will find yourself thinking “I like how Claude makes me feel.”\n\nMany developers seem to like Claude. I use both, but mostly Claude for code related things. The vibe with Claude is just better.\n\n> You have to pay for them to get the good stuff. So many friends are like “This is a piece of shit” and then you find out they are using a free model that barely works. Lol. This was more of an issue when the free version was ChatGPT 3.5, but make sure you are using a capable model before you throw the entire premise out.\n\n#### You will start thinking about how to make things go faster\n\nAfter copying and pasting code into Claude for a few weeks you are going to realize that this is annoying. You are going to start working through context packing, and trying to fit more of your code into the LLM context window.\n\nYou will experiment with [repomix](https://repomix.com/), [repo2txt](https://github.com/donoceidon/repo2txt), and other code context tools. Just so that you can slam your entire codebase into the Claude context window. There is a chance that you will even start writing shell scripts (well Claude will write them) to help make this process easier.\n\nThis is a turning point.\n\n### Step 5: Use an AI enabled IDE (Cursor, Windsurf? )\n\nThen a friend will say “why don’t you just use [Cursor](https://cursor.sh/)?”\n\nIt will completely blow your mind. All the magic you just experienced by copying and pasting is now available in your IDE. It is faster, it is fun, and it is close to magic.\n\nAt this point you are paying for like 5 different LLMs - what is another $20 a month.\n\nIt works super well, and you feel way way more productive.\n\nYou will start playing with the agentic coding features built directly into the editors. It will _basically_ work. But you can see a destination on the horizon that may be better.\n\n### Step 6: You start planning before you code\n\nSuddenly you find yourself building out very robust specs, PRDs, and to-do docs that you can pipe into the IDEs agent, or into Claude web.\n\nYou have never “written” so much documentation. You start to use other LLMs to write more robust documentation. You are transposing docs from one context (PRD) to another (“Can you make this into prompts”). You start to use the LLM to design your codegen prompts.\n\nYou are saying the word “[waterfall](https://en.wikipedia.org/wiki/Waterfall_model)” with a lot less disdain. If you are old, you may be fondly remembering the late 90s and early 2000s and wonder “is this what Martin Fowler felt like before [2001](https://en.wikipedia.org/wiki/Agile_software_development)?”\n\nIn the world of codegen: The spec is the [godhead](https://en.wikipedia.org/wiki/Godhead).\n\n### Step 7: You start playing with aider to enable quicker loops\n\nAt this point you are ready to start getting into the **good stuff**. The codegen previously required you to be involved, and paying attention. But it is 2025! Who wants to code with their fingers?\n\n> One other path that lots of friends are experimenting with is to code with your voice. To start instruct aider via a whisper client. It is hilarious and fun. MacWhisper is a very good tool for this locally. Aqua, and superwhisper are nice but cost more. They may use cloud services to do the inference. I prefer local.\n\nTrying out aider is a wild experience. You start it up, it instantiates itself into your project. You put your query directly into aider, and it just kind of does what you asked. It asks for permission to act, and gives you a framework to get things done, and then acts. It completes the task, and the commits to your repository. You no longer are so worried about one shotting tasks. you will just have aider do it in a few steps.\n\nYou start building out rulesets for the LLM to follow. You learn about the “[Big Daddy](https://www.reddit.com/r/cursor/comments/1joapwk/comment/mkqg8aw/)” rule, or the “no deceptions” addition to your prompts. You start be really good at prompting the robot.\n\n**It works.**\n\nEventually you don’t even open up an IDE - you are just a terminal jockey now.\n\nYou spend your time watching the robot do your job.\n\n### Step 8: You lean all the way into agentic coding\n\nYou are now using an agent to code for you. The results are pretty good. There are a few times when you have no idea what’s going on. But then you remember you can just ask it.\n\nYou start to experiment with [Claude Code](https://docs.anthropic.com/en/docs/agents-and-tools/claude-code/overview), [Cline](https://cline.bot/), etc. You are super happy to be able to use a reasoning model ([deepseek](https://aws.amazon.com/bedrock/deepseek/)!) and a coding model ([Claude sonnet 3.7](https://www.anthropic.com/claude/sonnet)) together to start removing planning steps.\n\nYou are doing wild stuff like running 3-5 concurrent sessions. Just tabbing through terminals watching robots code.\n\nYou will start coding defensively:\n\n- really hardcore test coverage\n- thinking about [formal verification](https://github.com/formal-land/coq-of-rust)\n- using memory safe languages\n- choosing languages based on compiler verbosity to help pack the context window\n\nYou will think long and hard about how to make sure that the thing you are building just gets built, safely without intervention.\n\nYou will spend **SO** much money on tokens. You will also use up all your GitHub action hours running all the wild tests that you are running to make sure that the code is built safely.\n\nIt feels good. You are not mad about not coding.\n\n### Step 9: You let the agent code, and you play video games\n\nSuddenly, you are there. You are at the destination. Well, kind of - but you see where we are going. You start to worry about software jobs. Your friends are being laid off, and they can’t get new jobs. It feels different this time around.\n\nWhen you talk to your peers they think of you as a religious zealot cuz you are working within a different context than they are. You tell them “omg you have to try out agentic coding!” Maybe you add “I hate the word agentic” just to show that you have not drank 200 gallons of kool-aid. But you have. The world seems brighter cuz you are so productive with your code.\n\nIt doesn’t matter. The paradigm has shifted. Kuhn could write a book about the confusion happening during this time.\n\nNobody can see this because they didn’t go through the journey to get here. But those who have are agreeing and sharing their own tips around the journey, and debating the destination.\n\nNow that you are knee-deep in letting robots do the work, you can really focus on all those gameboy games you have been wanting to play. There is a lot of downtime. And when the robot is done with a task, it will ask “should I continue” and you type **yes** and go back to Tetris.\n\nVery strange. Unsettling, even.\n\n## The acceleration\n\n<paul confetti photo>\n{{< image src=\"journey-confetti.webp\" alt=\"Confetti\" caption=\"Confetti at a Paul McCartney Concert at the Tokyo Dome. iPhone 6, 4/25/2015\" >}}\n\nI don’t know what will happen in the [future](https://ai-2027.com/). I am worried that people who are not working through this journey are not going to be attractive to [employers](https://x.com/tobi/status/1909231499448401946). Which is kind of near-sighted, because, ultimately, we are talking about tooling, and automation.\n\nWhen we were ramping up hiring in the past, we would often spread our queries well past our network, and past our tech stack. We would be a Python shop and interview people who didn’t know Python, and have never used Python. Our thought was that with a great engineer, we could work together to get them comfortable with Python. They would be additive even if they were not super comfortable with our stack. This worked out well for us. We hired incredible people who had never worked with our stack. Many times they brought such a different perspective that it elevated the entire team.\n\nThe same principles apply to AI-assisted development. When hiring talented developers who match your team's culture and show enthusiasm, their experience level with AI tools shouldn't be a deal-breaker. Not everyone needs to be an AI development expert from day one. Instead, guide them through the learning process at their own pace while they work alongside more experienced team members.\n\nEventually they will be the driver and will be successfully using these tools.\n\nOne other aspect I keep thinking about: Writing skills have become critical. While we've always valued strong communicators on tech teams for documentation and collaboration, it's doubly important now. Not only do you need to communicate with humans, you need to write clear, precise instructions for AI. Being able to craft effective prompts is becoming as vital as writing good code.\n\n## The leadership\n\nI think all leaders and engineering managers need to dive deep into AI-assisted development, whether you're a believer or not. Here's why: The next generation of developers you'll be hiring will have learned to code primarily through AI tools and agents. This is what software engineering is becoming. We need to understand and adapt to this reality.\n\nUs code boomers are not long for this world.\n\n**interesting note:** i don't really use LLMs to help me write things. I imagine they would be good at it, but i find that i want my voice to be heard, and not normalized. Whereas my code needs to be normalized. interesting.\n\n---\n\nThanks to Jesse, Sophie, the Vibez crew (Erik, Kanno, Braydon, and others), team 2389, and everyone else who gave me feedback on this post.\n\n# CURRENT TRANSLATION\n私は[このブログ記事](/2025/02/16/my-llm-codegen-workflow-atm/)で自分のコード生成（codegen）向けLLMワークフローを紹介して以来、「どう始めるか」「どう全体を理解して使いこなすか」「そもそも何が面白いのか」をめぐって、たくさんの人と話し込む毎日を送っている。\n\nこのトピックへの熱気は凄まじく、山ほどメールが届く。多くの人が「どこから手を付ければいいのか」「どう全体像がつながるのか」に迷っているようだ。俺は2023年からこのプロセスをいじり倒してきたので、なかなかヤバい現場も見てきた。lol\n\n先日、友人たち（Fisaconites represent!）と話していたとき、AI支援エージェントとエディタのスレッドにこんなメッセージを投げた。  \n\n> if i were starting out, i don't know if it is helpful to jump right into the \"agent\" coders. It is annoying and weird. having walked a few people through this (successfully, and not successfully) I find that the \"hero's journey\" of starting with the Copilot, moving to the copy and paste from Claude web, to the Cursor/continue, to the fully automated \"agents\" seems to be a successful way to adopt these things.  \n> （もし今から始めるなら、いきなり“エージェント”コーダーに飛び込むのは微妙だと思う。変だしイラつくし。何人かを成功・失敗両方のパターンで案内した経験から言うと──Copilot → Claude のWeb版にコピペ → Cursor/continue → 完全自動エージェント、という“ヒーローズ・ジャーニー”（主人公成長譚）で段階的に移行するのが一番うまくいく。）\n\nここから「旅」とエージェント駆動型コーディング（agentic coding）の入口について考え込んだ。  \n\n> The caveat is that this is largely for people with experience. If you don’t have much dev experience, then fuck it – jump to the end. **Our brains are often ruined by the rules of the past.**  \n> （ただしこれは基本、経験者向け。開発経験があまりないならもう細かいことは気にせず、いきなり最後まで飛べ。**俺たちの脳みそは過去のルールに毒されていることが多い。**）\n\n## 視覚と音の旅\n\n{{< image src=\"journey-harper.webp\" alt=\"Harper is very trustworthy\" caption=\"とても信頼できるガイド、ハーパー。iPhone X, 2018/06/10\" >}}\n\nこれが俺の旅だ。ほぼこのルートを辿ったけど、やる気次第でスピードランもできる。全部踏む必要はないが、どのステップも確実にプラスになる。\n\n### Step 1: 驚きと楽観を胸にベッドから飛び起きろ\n\n……なんて冗談だ。そんな暇はない。世界は崩壊しかけていて、気晴らしなんてコード生成しか残ってない。\n\nとはいえ「こういうワークフローはマジで効くし、力を底上げしてくれる」と信じるのは大事だ。LLMなんてクソだと思ってるなら成功はない。¯\\\\\\_(ツ)\\_/¯\n\n### Step 2: AI補完から始める\n\nこれが実質的なファーストステップ。IDEで [IntelliSense](https://en.wikipedia.org/wiki/Code_completion)、[Zed Autocomplete](https://zed.dev/blog/out-of-your-face-ai)、[Copilot](https://copilot.github.com/) を十分に試して「LLMがいかにトンチキ提案をするか」も体感しておく。\n\nここを飛ばして最後にワープすると「このLLMはクソ！何もできない！」となりがち。それも半分は本当だけど、魔法はニュアンスに宿る。*人生なんて訳がわからない*。\n\n### Step 3: Copilotを「ただの補完以上」に使う\n\n補完に慣れて常時ブチ切れなくなったら、Copilotと会話する魔法へ。\n\nVS CodeにはQ&Aペインがあり、コードについて相談できる。そこそこ頼りになる。ただ、Copilotはまるでタイムマシンで2024年版ChatGPTに話しかけている気分――要するに大したことはない。もっと欲しくなるはずだ。\n\n### Step 4: ClaudeやChatGPTにコードをコピペし始める\n\nブラウザの基盤モデルにコードを貼り付け、「WHY CODE BROKE??」と聞く。筋の通った回答が返ってきてビビる。デバッグの大半が吹っ飛び、変なモノを量産し始め、コードが再び楽しくなる。\n\nPythonを貼って「これをGoにして」と言えば本当にGoになる。「ワンショットでいけるんじゃ？」と考え始める頃だ。\n\nCopilotは2004年当時のIDE補完みたいに見え始め、便利だけど必須ではなくなる。\n\nここから二つのサブルートに入る。\n\n#### 1) “なんとなく気持ちいい”モデルを選び始める\n\n残念ながら、これが“vibe coding”への（不本意な）第一歩だ。「Claude と話すと気分がいいんだよね」と自分でも思い始める。多くの開発者がClaudeを好む。俺も両方使うが、コードはほぼClaude。\n\n> You have to pay for them to get the good stuff. So many friends are like “This is a piece of shit” and then you find out they are using a free model that barely works. Lol.  \n> （良いモデルは有料だ。無料版だけで「クソじゃん」と切り捨てるのは早計。無料モデルがChatGPT 3.5だった頃は特に深刻だったが、今でも“タダ”だけで評価し切ってはいけない。）\n\n#### 2) もっと速くしたくなる\n\n数週間コピペすると「めんどい」となり、作業フローを高速化する方法を考え始める。[repomix](https://repomix.com/)、[repo2txt](https://github.com/donoceidon/repo2txt) を試し、コードベース丸ごとClaudeにぶち込む。shellスクリプトを（実際はClaudeに書かせて）自動化する。ここがターニングポイントだ。\n\n### Step 5: AI対応IDE（Cursor、Windsurf?）へ\n\nそのうち友達が「[Cursor](https://cursor.sh/)使えよ」と言うだろう。\n\nコピペで味わった魔法がIDE内に全部入りする。速いし、楽しいし、ほとんど魔法みたいだ。すでに5つもLLMに課金してるし、月20ドルくらいもう気にならない。\n\nエディタ内蔵のエージェント駆動型コード生成も触り始める。*ほぼ*動く。ただ、もっと良い地平が見える。\n\n### Step 6: コードを書く前に計画するようになる\n\n気づけば、IDEのエージェントやClaude Webに投げ込むための詳しい仕様書・PRD・TODOをバンバン書いている。LLMでドキュメントを肉付けし、「このPRDをプロンプトに変換して」と頼むなど、文書↔プロンプト変換も日常茶飯事。\n\n「ウォーターフォール」という言葉への嫌悪感が薄れ、歳によっては90年代後半〜2000年代初頭を思い出し、「2001年以前のマーティン・ファウラーってこんな気持ちだったのかな」と考えるかもしれない。\n\nコード生成の世界では、仕様書こそが*絶対神*だ。\n\n### Step 7: aiderでループを加速\n\nここからが**本番**。これまでは人間が付きっきりだったが、もう2025年だ。指でコードを書くなんてダサい。\n\n> 友人の多くは声でコーディングする道も試している。whisperクライアント経由でaiderに指示を出すわけだ。爆笑モノで、本当に楽しい。ローカルならMacWhisperが良い。Aquaやsuperwhisperもあるが高いしクラウド推論の場合もある。俺はローカル派。\n\naiderを起動するとプロジェクトに自己初期化し、ターミナルにお願いを書くだけで動く。まず実行してよいか確認し、作業を完遂する枠組み（フレームワーク）を提示してから処理を進め、タスクを終えたらコミットしてくれる。ワンショットに固執せず、数ステップでやらせればいい。\n\nLLM用ルールセットも作り始める。「[Big Daddy](https://www.reddit.com/r/cursor/comments/1joapwk/comment/mkqg8aw/)」ルールや“no deceptions”をプロンプトに足すなど、ロボへの指示が上手くなる。\n\n**ちゃんと動く。**\n\nそのうちIDEすら開かず、いわば “terminal jockey”（ターミナル乗り）状態になる。ロボが仕事をするのを眺めるだけだ。\n\n### Step 8: エージェント駆動型コーディングにフルダイブ\n\nいまやエージェントがコードを書き、結果はかなり良い。わからなければ聞けばいい。\n\n[Claude Code](https://docs.anthropic.com/en/docs/agents-and-tools/claude-code/overview) や [Cline](https://cline.bot/) を試し、推論モデル（[deepseek](https://aws.amazon.com/bedrock/deepseek/)）とコーディングモデル（[Claude Sonnet 3.7](https://www.anthropic.com/claude/sonnet)）を組み合わせ、計画ステップすら削り始める。\n\nターミナルを3〜5枚並べ、タブをペチペチ切り替えながらロボが書くのをぼんやり眺める――そんなことも。\n\n防御的コーディングにも頭が行く。  \n\n- 鬼のようなテストカバレッジ  \n- [形式検証](https://github.com/formal-land/coq-of-rust)  \n- メモリ安全言語の採用  \n- コンパイル時の詳細エラー出力を活かしてLLMに渡す情報を整理しやすい言語を選ぶ など  \n\n「人手ゼロでも安全に作り切るには」を真剣に考える。トークン料金がとんでもなくかさみ、GitHub Actionsの実行時間もテストで溶けるが、気分は最高。コードを書かなくてもイライラしない。\n\n### Step 9: エージェントに任せ、自分はゲームをする\n\nついに目的地……まぁ半分だけどゴールは見えた。ソフトウェア職の行方が不安になり、友人がレイオフされ、再就職に苦戦している。今回は様子が違う。\n\n旅を通っていない人には、今何が起きているのか見えていない。でも、もう関係ない。パラダイムは変わった。トーマス・クーンなら、このカオスを題材にパラダイムシフトの新刊を書き上げそうだ。\n\n周囲からは宗教狂扱い。「エージェント駆動型コーディングやばいよ！」と力説してもピンと来ないので、「“agentic”って言葉は嫌いだけどね」と予防線を張る。でも実際には約200ガロン（およそ760リットル）ものクールエイドを飲み干している。生産性が爆増して世界が輝いて見えるのだ。\n\n旅を経た者同士は共感し合い、Tipsやゴールを語り合う。\n\nロボに仕事を任せて、積みゲーのゲームボーイに没頭。ロボが「続ける？」と聞いてきたら**yes**と打ち、テトリスに戻る。奇妙で、ちょっと不気味だ。\n\n## 加速\n\n<paul confetti photo>\n{{< image src=\"journey-confetti.webp\" alt=\"Confetti\" caption=\"東京ドーム、ポール・マッカートニー公演の紙吹雪。iPhone 6, 2015/04/25\" >}}\n\n[未来](https://ai-2027.com/)に何が起こるかはわからない。ただ、この旅を歩んでいない人が[雇用主](https://x.com/tobi/status/1909231499448401946)に魅力的に映らなくなるのでは、と少し心配している。とはいえ結局はツールと自動化の話だ。\n\n昔、大量採用していた頃、俺たちはネットワークや技術スタックを超えて候補者を探した。PythonのプロダクトなのにPython未経験者を採用し、一緒に覚えてもらった。結果、異なる視点がチーム全体を底上げした。\n\nエージェント駆動型開発でも同じだ。チームにフィットし、やる気のある優秀な開発者なら、AIツール経験ゼロでも門前払いすべきじゃない。経験者と働くうちに、そのうち自走できるようになる。\n\nもう一つ――文章力が今や超重要になった。昔からドキュメントとコラボで大事だったが、今はAIへの明確・精密な指示を書く必要もある。良いプロンプトを書くスキルは、良いコードを書くのと同じくらい重要になりつつある。\n\n## リーダーシップ\n\nリーダーやEMは、信者か否かに関係なくエージェント駆動型開発に深く潜ったほうがいい。次世代の開発者はAIツールとエージェントでコードを書く。これがソフトウェアエンジニアリングの新しい姿だ。俺たちコード老害の残り時間は短い。\n\n**面白い注記:** 俺は文章を書くのにLLMをほとんど使わない。便利だろうけど、自分の声を残したいから。一方、コードは均質化してほしい。不思議な違いだ。\n\n---\n\nこの投稿にフィードバックをくれたJesse、Sophie、Vibezクルー（Erik、Kanno、Braydonほか）、team 2389、そして読んでくれたみんなに感謝！\n\n# CRITIQUE FEEDBACK\n【総評】\n原文の軽妙な語り口と意味はかなり再現されていますが、細部まで見ると\n①重要情報の若干の欠落  \n②語調・人称の揺れ  \n③日本語としての不自然さ／過剰直訳  \n④俗語・固有名詞の扱い  \n⑤用語統一 など、修正余地が散見します。\n\n以下、深刻度別・カテゴリ別に徹底的に指摘します。  \n（★＝深刻度：Critical／Major／Minor／Stylistic）\n\n────────────────\n1. 意味逸脱・欠落・誤訳（Critical / Major）\n────────────────\n★C1 2段落目のニュアンス欠落  \n原文: “from people who are working to figure all of this out”  \n訳: 「山ほどメールが届く」  \n→「…この新しい流れを必死で理解しようとしている人たちから」など、“TRYING TO FIGURE OUT” の努力感を補う。\n\n★C2 Step 7 “It asks for permission to act, and gives you a framework to get things done, and then acts.”  \n訳: 「…枠組み（フレームワーク）を提示してから処理を進め」  \n→ “asks for permission”（実行前確認）が弱い。「実行してよいか毎回確認し、タスクの青写真を示したうえで動く」と明示。\n\n★C3 Step 9 “There is a lot of downtime.” が欠落  \nゲームボーイに戻る前に“暇がたっぷりある”と明記してこそ皮肉が際立つ。文を追加。\n\n★M1 “Kool-Aid” の固有名詞ゆらぎ  \n「クールエイド」は一般に通じない。「Kool-Aid（クールエイド）」とブランド表記し、暗喩（思想を鵜呑みにする）の説明脚注を検討。\n\n★M2 “Fisaconites's represent”  \n訳: “Fisaconites represent!”  \n末尾の “’s” は原文のスペルミスだが、整えて「Fisaconitesのみんな、声を上げろ！」など意訳して文法を正す方が自然。\n\n────────────────\n2. トーン・スタイル／人称ゆれ（Major）\n────────────────\n★M3 人称が「私」→「俺」で混在  \n冒頭はフォーマル寄りで途中から急にラフになる。  \n・全体を「僕」or「俺」に統一する  \n・もしくは「筆者」と三人称に寄せる\n\n★M4 罵語・スラングの温度差  \n原文 “piece of shit”, “fuck it” などかなり下品。  \n訳では「クソ」「ダサい」等ややマイルドになりニュアンス揺れ。  \n読者層に合わせ、  \n・完全に置き換える (例: 「クソ食らえ」)  \n・伏字にする  \nいずれにせよ基準を統一。\n\n────────────────\n3. 日本語の不自然さ・機械翻訳臭（Minor）\n────────────────\n★m1 「AI補完」  \n一般には「AI補完機能」「AIオートコンプリート」。「補完」だけだと文脈依存。\n\n★m2 「ターミナル乗り」  \n造語感が強く説明不足。「ターミナル使い」等で十分。\n\n★m3 「主にデバッグの大半が吹っ飛ぶから」  \n「主に～大半」が冗長。「デバッグ工程まるごと吹っ飛ぶから」など整理。\n\n★m4 「コードオタク老害」  \n“code boomers” は自嘲混じりの俗語。「コード世代のベテラン」等、罵倒ニュアンスを保ちつつ自然に。\n\n★m5 半角カナ・全角記号混在 (`¯\\\\_(ツ)_/¯`)  \nAAはそのままでも良いが、バックスラッシュの重複で文字化けしやすい。表示テスト要。\n\n★m6 「旅を経た者同士は共感し合い」  \n「共感し合い」はくどい。「共感し」 or 「共感し合う」。\n\n────────────────\n4. 用語・表記ゆれ（Minor / Stylistic）\n────────────────\n★u1 “agentic coding” → 「エージェント駆動型コーディング」と訳したり英語のまま残したり混在。  \n→ 初出で（以下「エージェントコーディング」）など括弧注を入れ、以降統一。\n\n★u2 “spec / PRD” がカタカナと英語混在  \n「仕様書（Spec）」「PRD（製品要求仕様書）」など1回目に日本語＋英語、以降略語で統一。\n\n★u3 “LLM”／“基盤モデル” の交互使用  \n同義語として扱うなら脚注か補足。「LLM（大規模言語モデル）」を一度示し後はLLMで統一。\n\n────────────────\n5. 句読点・タイポ等（Stylistic）\n────────────────\n★s1 “Fisaconites represent!” の感嘆符前後に全角・半角スペースのゆれ。  \n★s2 “–—” ダッシュ類の混在。  \n★s3 固有名詞 “deepseek” → 正式表記 “DeepSeek” (AWS Bedrockページは DeepSeek)  \n★s4 “superwhisper” → “SuperWhisper” などツール名を公式に合わせる。\n\n────────────────\n6. 具体的改善案まとめ\n────────────────\n1) 人称を統一（例：終始「俺」）し、一人称が変わらないようチェック。  \n2) 欠落箇所 (C1,C2,C3) を補い、permission/downtime 等の挙動を明示。  \n3) スラング表現は一貫したレベルに。「クソ／ク●」など決めて全体置換。  \n4) “agentic coding”＝「エージェントコーディング」に統一。  \n5) 用語初出時に日本語注＋英語、二回目以降は略語固定。  \n6) “Kool-Aid” はブランド表記＋飲み物比喩の脚注。  \n7) 造語が浮く箇所（ターミナル乗り等）は既存語に置換。  \n8) 全文の読点位置・ダッシュ・半角英数を統一しタイポを再確認。\n\n以上を修正すれば、原文のカジュアルさを保ちつつ、日本語ネイティブの読者にとって自然かつ忠実な訳文になります。\n\nPlease address ALL issues identified in the critique and provide an improved translation.\nReturn ONLY the improved translated text without explanations or comments.",
      "response": "俺は[このブログ記事](/2025/02/16/my-llm-codegen-workflow-atm/)で自分のLLMコード生成ワークフローを紹介して以来、「どう始めるか」「どうレベルアップするか」「そもそも何が面白いのか」をめぐって、コード生成（codegen）について多くの人と語り合ってきた。\n\nこのテーマへの熱気はものすごく、「この新しい流れを必死に理解しようとしている」人たちから山ほどメールが届く。多くの人が「どこから手を付ければいいのか」「どう全体がつながるのか」に迷っているようだ。俺は2023年からこのプロセスをいじり倒してきたので、いろいろとヤバい現場も見てきた。lol\n\n先日、友人たち（Fisaconitesのみんな、声を上げろ！）と話していて、AI支援エージェントとエディタについてのスレッドにこんなメッセージを投げた。  \n\n> if i were starting out, i don't know if it is helpful to jump right into the \"agent\" coders. It is annoying and weird. having walked a few people through this (successfully, and not successfully) I find that the \"hero's journey\" of starting with the Copilot, moving to the copy and paste from Claude web, to the Cursor/continue, to the fully automated \"agents\" seems to be a successful way to adopt these things.  \n> （もし今から始めるなら、いきなり“エージェント”コーダーに飛び込むのは微妙だと思う。変だしイラつくし。何人かを成功・失敗両方のパターンで案内した経験から言うと──Copilot → Claude Web へのコピペ → Cursor/Continue → 完全自動エージェント、という“ヒーローズ・ジャーニー”で段階的に移行するのが一番うまくいく。）\n\nここから「旅」とエージェントコーディングの入口について考え込んだ。  \n\n> The caveat is that this is largely for people with experience. If you don’t have much dev experience, then fuck it – jump to the end. **Our brains are often ruined by the rules of the past.**  \n> （ただしこれは基本、経験者向け。開発経験があまりないならクソ食らえだ──いきなり最後まで飛べ。**俺たちの脳みそは過去のルールに毒されがちだ。**）\n\n## 視覚と音の旅\n\n{{< image src=\"journey-harper.webp\" alt=\"Harper is very trustworthy\" caption=\"とても信頼できるガイド、ハーパー。iPhone X, 2018/06/10\" >}}\n\nこれが俺の旅だ。俺はほぼこのルートを辿ったけど、やる気次第でスピードランもできる。全部踏む必要はないが、どのステップも確実にプラスになる。\n\n### Step 1: 驚きと楽観を胸にベッドから飛び起きろ\n\n……なんて冗談だ。そんな暇はない。世界は崩壊しかけていて、気晴らしなんてコード生成しか残っていない。\n\nとはいえ「こういうワークフローは本当に効くし、力を底上げしてくれる」と信じるのは大事だ。LLMなんてクソだと思っているなら成功はしない。¯\\_(ツ)_/¯\n\n### Step 2: AIオートコンプリートから始める\n\nこれが実質的なファーストステップ。IDEで[IntelliSense](https://en.wikipedia.org/wiki/Code_completion)、[Zed Autocomplete](https://zed.dev/blog/out-of-your-face-ai)、[Copilot](https://copilot.github.com/)を十分に試し、「LLMがいかにトンチキ提案をするか」も体感しておく。\n\nここを飛ばして最後にワープすると「このLLMはクソ！何もできない！」となりがち。それも半分は本当だけど、魔法はニュアンスに宿る。*人生なんて訳がわからない*。\n\n### Step 3: Copilotを「ただの補完以上」に使う\n\n補完に慣れて常時ブチ切れなくなったら、Copilotと会話する魔法へ。\n\nVS CodeにはQ&Aペインがあり、コードについて相談できる。そこそこ頼りになる。ただ、Copilotはまるでタイムマシンで2024年版ChatGPTに話しかけている気分──要するに大したことはない。もっと欲しくなるはずだ。\n\n### Step 4: ClaudeやChatGPTにコードをコピペし始める\n\nブラウザのLLMにコードを貼り付け、「WHY CODE BROKE??」と聞く。筋の通った回答が返ってきてビビる。デバッグ工程まるごと吹っ飛び、変なモノを量産し始め、コードが再び楽しくなる。\n\nPythonを貼って「これをGoにして」と言えば本当にGoになる。「ワンショットでいけるんじゃ？」と考え始める頃だ。\n\nCopilotは2004年当時のIDE補完みたいに見え始め、便利だけど必須ではなくなる。\n\nここから二つのサブルートに入る。\n\n#### 1) “なんとなく気持ちいい”モデルを選び始める\n\nこれが“vibe coding”への（不本意な）第一歩だ。「Claudeと話すと気分がいいんだよね」と自分でも思い始める。多くの開発者がClaudeを好む。俺も両方使うが、コードはほぼClaude。\n\n> 良いモデルは有料だ。無料モデルだけで「クソじゃん」と切り捨てるのは早計。無料モデルがChatGPT 3.5だった頃は特に深刻だったが、今でも“タダ”だけで評価し切ってはいけない。\n\n#### 2) もっと速くしたくなる\n\n数週間コピペすると「めんどい」となり、作業フローを高速化する方法を考え始める。[repomix](https://repomix.com/)、[repo2txt](https://github.com/donoceidon/repo2txt)を試し、コードベース丸ごとClaudeにぶち込む。shellスクリプトを（実際はClaudeに書かせて）自動化する。ここがターニングポイントだ。\n\n### Step 5: AI対応IDE（Cursor、Windsurf?）へ\n\nそのうち友達が「[Cursor](https://cursor.sh/)使えよ」と言うだろう。\n\nコピペで味わった魔法がIDE内に全部入りする。速いし、楽しいし、ほとんど魔法みたいだ。すでに5つもLLMに課金してるし、月20ドルくらいもう気にならない。\n\nエディタ内蔵のエージェントコーディング機能も触り始める。*ほぼ*動く。ただ、もっと良い地平が見える。\n\n### Step 6: コードを書く前に計画するようになる\n\n気づけば、IDEのエージェントやClaude Webに投げ込むための詳しい仕様書（Spec）・PRD（製品要求仕様書）・TODOドキュメントをバンバン書いている。LLMでドキュメントを肉付けし、「このPRDをプロンプトに変換して」と頼むなど、文書↔プロンプト変換も日常茶飯事。\n\n「ウォーターフォール」という言葉への嫌悪感が薄れ、歳によっては90年代後半〜2000年代初頭を思い出し、「2001年以前のマーティン・ファウラーってこんな気持ちだったのかな」と考えるかもしれない。\n\nコード生成の世界では、仕様書こそが*絶対神*だ。\n\n### Step 7: aiderでループを加速\n\nここからが**本番**。これまでは人間が付きっきりだったが、もう2025年だ。指でコードを書くなんてダサい。\n\n> 友人の多くは声でコーディングする道も試している。Whisperクライアント経由でaiderに指示を出すわけだ。爆笑モノで、本当に楽しい。ローカルならMacWhisperが良い。AquaやSuperWhisperもあるが高いしクラウド推論の場合もある。俺はローカル派。\n\naiderを起動するとプロジェクトに自己初期化し、ターミナルにお願いを書くだけで動く。実行前に「この変更をしてもいい？」と毎回確認し、タスクの青写真を示したうえで動き、タスクを終えたらコミットしてくれる。ワンショットに固執せず、数ステップでやらせればいい。\n\nLLM用ルールセットも作り始める。「[Big Daddy](https://www.reddit.com/r/cursor/comments/1joapwk/comment/mkqg8aw/)」ルールや“no deceptions”をプロンプトに足すなど、ロボへの指示が上手くなる。\n\n**ちゃんと動く。**\n\nそのうちIDEすら開かず、いわゆる“ターミナル使い”になる。ロボが仕事をするのを眺めるだけだ。\n\n### Step 8: エージェントコーディングにフルダイブ\n\nいまやエージェントがコードを書き、結果はかなり良い。わからなければ聞けばいい。\n\n[Claude Code](https://docs.anthropic.com/en/docs/agents-and-tools/claude-code/overview)や[Cline](https://cline.bot/)を試し、推論モデル（[DeepSeek](https://aws.amazon.com/bedrock/deepseek/)）とコーディングモデル（[Claude Sonnet 3.7](https://www.anthropic.com/claude/sonnet)）を組み合わせ、計画ステップすら削り始める。\n\nターミナルを3〜5枚並べ、タブをペチペチ切り替えながらロボが書くのをぼんやり眺める──そんなことも。\n\n防御的コーディングにも頭が行く。  \n\n- 鬼のようなテストカバレッジ  \n- [形式検証](https://github.com/formal-land/coq-of-rust)  \n- メモリ安全言語の採用  \n- コンパイル時の詳細エラー出力を活かしてLLMに渡す情報を整理しやすい言語を選ぶ など  \n\n「人手ゼロでも安全に作り切るには」を真剣に考える。トークン料金がとんでもなくかさみ、GitHub Actionsの実行時間もテストで溶けるが、気分は最高。コードを書かなくてもイライラしない。\n\n### Step 9: エージェントに任せ、自分はゲームをする\n\nついに目的地……まあ半分だけどゴールは見えた。暇な時間がたっぷりあり、ソフトウェア職の行方が不安になり、友人がレイオフされ、再就職に苦戦している。今回は様子が違う。\n\n旅を通っていない人には、今何が起きているのか見えていない。でも、もう関係ない。パラダイムは変わった。トーマス・クーンなら、このカオスを題材にパラダイムシフトの新刊を書き上げそうだ。\n\n周囲からは宗教狂扱い。「エージェントコーディングやばいよ！」と力説してもピンと来ないので、「“agentic”って言葉は嫌いだけどね」と予防線を張る。でも実際には約200ガロンのKool-Aid※を飲み干している。生産性が爆増して世界が輝いて見えるのだ。  \n※Kool-Aid＝米国の粉末清涼飲料。比喩的に「思想を鵜呑みにする」意。\n\n旅を経た者同士は共感し、自分なりのTipsやゴールを語り合う。\n\nロボに仕事を任せて、積みゲーのゲームボーイに没頭。ロボがタスクを終えるたびに「続ける？」と聞いてきたら**yes**と打ち、テトリスに戻る。奇妙で、ちょっと不気味だ。\n\n## 加速\n\n<paul confetti photo>\n{{< image src=\"journey-confetti.webp\" alt=\"Confetti\" caption=\"東京ドーム、ポール・マッカートニー公演の紙吹雪。iPhone 6, 2015/04/25\" >}}\n\n[未来](https://ai-2027.com/)に何が起こるかはわからない。ただ、この旅を歩んでいない人が[雇用主](https://x.com/tobi/status/1909231499448401946)に魅力的に映らなくなるのでは、と少し心配している。とはいえ結局はツールと自動化の話だ。\n\n昔、大量採用していた頃、俺たちはネットワークや技術スタックを超えて候補者を探した。PythonのプロダクトなのにPython未経験者を採用し、一緒に覚えてもらった。結果、異なる視点がチーム全体を底上げした。\n\nエージェントコーディングでも同じだ。チームにフィットし、やる気のある優秀な開発者なら、AIツール経験ゼロでも門前払いすべきじゃない。経験者と働くうちに、そのうち自走できるようになる。\n\nもう一つ――文章力が今や超重要になった。昔からドキュメントとコラボで大事だったが、今はAIへの明確・精密な指示を書く必要もある。良いプロンプトを書くスキルは、良いコードを書くのと同じくらい重要になりつつある。\n\n## リーダーシップ\n\nリーダーやEMは、信者か否かに関係なくエージェントコーディングに深く潜ったほうがいい。理由は簡単だ。次世代の開発者はAIツールとエージェントでコードを書く。これがソフトウェアエンジニアリングの新しい姿だ。俺たち“コード世代のベテラン”は長くはない。\n\n**面白い注記:** 俺は文章を書くのにLLMをほとんど使わない。便利だろうけど、自分の声を残したいから。一方、コードは均質化してほしい。不思議な違いだ。\n\n---\n\nこの投稿にフィードバックをくれたJesse、Sophie、Vibezクルー（Erik、Kanno、Braydonほか）、team 2389、そして読んでくれたみんなに感謝！",
      "usage": {
        "prompt_tokens": 10033,
        "completion_tokens": 3541,
        "total_tokens": 13574
      },
      "streaming": true
    },
    "frontmatter": {
      "model": "o3",
      "target_language": "japanese",
      "system_prompt": "You are a professional translator. Translate the following frontmatter fields to japanese.\nEach field is in the format \"field_name: content\". Translate ONLY the content, not the field names.\nReturn the translated content in the exact same format, preserving all field names.",
      "user_prompt": "title: An LLM Codegen Hero's Journey\n\ndescription: A comprehensive guide detailing the evolution of using AI-assisted software development, from basic code completion to fully autonomous coding agents, with practical steps and insights for maximizing productivity through LLM integration.\n\n",
      "response": "title: LLMコード生成ヒーローズ・ジャーニー\ndescription: AI支援によるソフトウェア開発の進化を、基本的なコード補完から完全自律型のコーディングエージェントに至るまで詳細に解説し、LLMの統合によって生産性を最大化するための実践的な手順と洞察を提供する包括的なガイド。",
      "usage": {
        "prompt_tokens": 101,
        "completion_tokens": 96,
        "total_tokens": 197
      },
      "fields": [
        "title",
        "description"
      ],
      "streaming": true
    },
    "all_critiques": [
      "【総評】  \n全体としては原文の構成やユーモアをかなり忠実に追っており、情報の欠落も大きくはありません。ただし「完璧な訳」と言うにはまだ以下の点が気になります。特に①意味のずれ／抜け、②トーンとレジスタの不統一、③英語のまま放置された箇所、④日本語としての不自然さ――の４方面で改善が必要です。\n\n────────────────────  \n1. 重大 (Critical) ――意味の取り違え・欠落  \n────────────────────  \n1-A. Kuhn のくだり  \n　原文: “Kuhn could write a book about the confusion happening during this time.”  \n　訳文: 「トーマス・クーンがこの混乱期の本を書けそうなくらい、パラダイムは変わりました。」  \n　問題: “could write a book” は「本を書けそうなくらい混乱している（＝本一冊書けるほどネタがある）」という比喩で、「既にパラダイムが変わった」と断定してはいない。  \n　改善案: 「トーマス・クーンがこの混乱ぶりだけで一冊書けるんじゃないか、と思うほどだ。」  \n\n1-B. “It may help, but the world is falling apart …” の “It may help” が脱落  \n　原文のニュアンス「もしかしたら役立つかもしれないけど」を訳文で飛ばしている。  \n　改善案: 「まあ役立つかもしれませんが、世界は崩壊しかけ…」のように補完。  \n\n1-C. “It works super well, and you feel way way more productive.” の “It works super well” が欠落  \n　訳文: 「生産性は爆上がりです。」  \n　改善案: 「めちゃくちゃよく動くので、生産性は爆上がりです。」  \n\n1-D. 「ターミナル職人」  \n　原文: “you are just a terminal jockey now.”  \n　訳語として「職人」はニュアンスが離れすぎ。「ターミナルジャッキー」「ターミナル番長」など、軽口感を残す語が望ましい。  \n\n1-E. “I have seen some shit”  \n　訳文: 「わりと“修羅場”も見てきました。」  \n　“seen some shit” は下品さを含む武勇伝めいた言い回し。「修羅場」ではややフォーマル寄り。  \n　改善案: 「いやあ色んなクソも見てきました(笑)」  \n\n────────────────────  \n2. 大 (Major) ――トーン・レジスタ・一貫性  \n────────────────────  \n2-A. 文体ミックス  \n　丁寧語（です／ます）と砕けた口語（ブチ切れ、クソ、Lol.）が混在し揺れている。原文は終始カジュアル。訳文も「だ・である」「口語」へ統一すると自然。  \n\n2-B. “5個もLLM課金”  \n　「個」は実体物に使う助数詞で不自然。「5種類に課金」「5つもLLMに課金」などで統一。  \n\n2-C. 英語引用の未訳／和訳方針不統一  \n　①序盤の引用 (“if i were starting out …”) は原文同様英語のまま。  \n　②他の英語スラング (“WHY CODE BROKE??”) も英語のまま。  \n　→ 日本語読者向けなら、引用部の後に＜和訳＞を添えるか、（）内で即座に意訳を追記するなど揃えたい。  \n\n2-D. スラングの強さ  \n　“fuck it” をそのまま残したが、周囲が日本語なら「クソくらえ」「もういいや」など併記した方がリズムが出る。  \n\n2-E. “vibe coding”  \n　「“vibe coding”への第一歩」とだけ書かれているが、用語説明ゼロ。訳注か軽い括弧補足「ノリ重視のコーディング」などが欲しい。  \n\n────────────────────  \n3. 中 (Minor) ――用語・自然さ・体裁  \n────────────────────  \n3-A. “Fisaconites’s represent!” → “Fisaconites represent!” が正綴  \n　誤植＋引用符ルールの統一を。  \n\n3-B. “Shellスクリプトを…”  \n　「Shell」は Unix シェルを指す場合は小文字 “shell” が一般的表記。  \n\n3-C. “エージェント型コード生成機能も触り始めるでしょう。_ほぼ_ 動きます。”  \n　強調のアンダースコアは Markdown 書式の **太字** か *イタリック* のいずれかに統一すると見栄えが良い。  \n\n3-D. “コード生成くらい”  \n　軽さは出ているが、後ろの「しかない」が落ちてリズムが中途半端。「気晴らしなんてコード生成くらいしかないし」などで整う。  \n\n3-E. 『神格』  \n　godhead を「神格」と直訳すると哲学・宗教用語臭が強すぎる。軽口に合わせ「神そのもの」「絶対神」などでも可。  \n\n3-F. “タブ切り替えで見守る……なんてことも。”  \n　原文 “Just tabbing through terminals watching robots code.” の「ぼーっと眺める無責任感」が弱め。  \n　改善案: 「タブをペチペチ切り替えながらロボが書くのをぼんやり眺めるだけ、みたいなことに。」  \n\n────────────────────  \n4. 技術用語・一貫性チェック  \n────────────────────  \n4-A. “foundational model” → 「基盤モデル」で統一している点は OK。ただし他所で “大規模言語モデル” と並列使用しているので、冒頭に「基盤モデル（foundation model）」などと一度だけ示し統一。  \n4-B. “context window” を「コンテキストウィンドウ」とカナにしているが、他所では「コンテキスト」単独。意図的なら良いが統一推奨。  \n4-C. “agentic” → 「エージェント型」で訳している箇所と「agentic」のままにしている箇所が混在。和訳＋括弧英語を一貫して使う。  \n\n────────────────────  \n5. 機械翻訳臭・ぎこちなさ  \n────────────────────  \n・「ただ、『こういうワークフローは役に立つし、自分の力を底上げしてくれるはずだ』と信じることは大切です。」  \n　→ 「こういうワークフローは本当に効くし、自分を底上げしてくれる——まずはそう信じてみてほしい。」など語順を崩すと口語度アップ。  \n\n・「世界は崩壊しつつあるし、僕らに残された気晴らしはコード生成くらい。」  \n　ラストの「くらい。」で落としているがやや棒読みに聞こえる。「せいぜいコード生成くらいしか残ってないんだからさ。」など語尾をラフに。  \n\n────────────────────  \n6. 推奨修正ポリシー  \n────────────────────  \n1. まず文体を「カジュアルな常体」に統一（です／ます→だ／である）。  \n2. 英語引用は (1) 全訳付き引用 or (2) 英語原文＋直後に意訳を括弧書き、のどちらかに統一。  \n3. スラング／Fワードを日本語スラングで受けつつ、元の温度感を保持。  \n4. 技術用語は初出に括弧併記し、以降は表記ゆれをなくす。  \n5. 助数詞・語尾・口語表現を自然な日本語に磨き込む（「個」「でしょう」→「つ」「だろ」等）。  \n6. 比喩やジョークは意訳で温度感優先。「Kuhn could write a book…」などは原文の皮肉を落とさない。  \n\n以上を踏まえて全体を磨けば、「元々日本語で書かれたかのように読みやすいが、情報もユーモアも原文どおり」というレベルに到達できるはずです。",
      "==============================\n辛口レビュー – 概要\n==============================\n訳文は原文の軽妙でくだけたノリをかなり再現している一方、重要な情報の欠落・細部の誤訳・不自然な日本語が散見される。  \n「読み物としては面白いが、資料としては粗い」状態なので、下記の指摘を徹底的に潰すこと。\n\n-------------------------------------------------------------------------------\nA. 重大度：HIGH ― 意味の欠落・誤訳・事実歪曲\n-------------------------------------------------------------------------------\n1. 無料モデル／ChatGPT-3.5 のくだりを省略  \n   原文: “This was more of an issue when the free version was ChatGPT 3.5…”  \n   訳文: 完全に落ちている。  \n   ➜「無料版が ChatGPT 3.5 だった頃は特に深刻だったが…」などと補完。\n\n2. “Nobody can see this because they didn’t go through the journey…” の欠落  \n   原文の「旅を経ていない人には見えない」趣旨がバッサリ消えている。  \n   ➜「この旅を通っていない人には、今何が起こっているのか見えていない」と追加。\n\n3. “It doesn’t matter.” が欠落  \n   直後の “The paradigm has shifted.” と対で効くセンテンス。  \n   ➜「でも、もう関係ない。パラダイムは変わったのだ。」と挿入。\n\n4. コンパイラ冗長性の意図が逆転気味  \n   “choosing languages based on compiler verbosity to help pack the context window”  \n   →「コンパイラが verbose だから LLM に投げる材料（コンテキスト）を *減らせる*」ではなく  \n   「冗長なメッセージが得られるので *詰め込みやすい*」趣旨。  \n   訳文は “圧縮” と書いており微妙に逆。  \n   ➜「コンパイル時の詳細エラー出力を活かして LLM に渡す情報を整理しやすい言語を選ぶ」等に修正。\n\n5. “You have to pay for them to get the good stuff.” のニュアンス不足  \n   単なる課金の話でなく「無償モデルで評価し切ってはいけない」という警句。  \n   ➜「良いモデルは有料。無料版で判断して“クソ”と切り捨てるのは早計だ。」と補う。\n\n6. “I have received a ton of emails…” の数量感が弱い  \n   「何通もの」だと数十通に読める。  \n   ➜「山のようなメール」「数え切れないほどのメール」など量感を強調。\n\n7. “It asks for permission to act, and gives you a framework…” 末尾の説明不足  \n   aide r が permission を取りフレームワークを提示する動きが曖昧。  \n   ➜「まず実行してよいか確認し、手順を示したうえで処理を進める」など明示。\n\n-------------------------------------------------------------------------------\nB. 重大度：MEDIUM ― ニュアンス/語感の損失・文化参照\n-------------------------------------------------------------------------------\n1. “life is confusing.” →「*人生はややこしい*」  \n   字面は合っているが投げやり感が足りず。「人生なんて訳がわからない」など砕けた言い回しを。\n\n2. “I like how Claude makes me feel.” 直訳欠落  \n   今は叙述の中で消化されており、原文のセルフ引用が消えている。  \n   ➜「『Claude と話すと気分がいいんだよね』と自分でも思い始める」とセリフ風に復元。\n\n3. “faster, fun, close to magic” →「生産性は爆上がり」  \n   “fun / magic” が落ちた。  \n   ➜「速いし、楽しいし、ほとんど魔法みたいだ。」と分離して補う。\n\n4. “ton of emails” の “energy and interest”  \n   「盛り上がりは尋常じゃない」でinterest は拾うが energy が弱い。  \n   ➜「熱気と関心が凄まじい。」と energy を明示。\n\n5. クールエイド “kool-aid”  \n   訳文「クールエイド」表記は可だが、比喩（熱狂的に信奉）の説明を脚注か() で軽く示すと親切。\n\n-------------------------------------------------------------------------------\nC. 重大度：MEDIUM/LOW ― 日本語としての不自然さ・語調ブレ\n-------------------------------------------------------------------------------\n1. 「ターミナルジャッキー」  \n   和製英語が耳慣れない。  \n   ➜「ターミナル職人」「端末ジャンキー」など既存の俗語に寄せるか、かっこ書きで補足。\n\n2. 「エージェント型コード生成」  \n   直後に “agentic coding” を併記しているが、日本語は「エージェント駆動のコーディング」などの方が自然。\n\n3. 「vibe coding（ノリ重視コーディング）」  \n   説明語が硬い。  \n   ➜「vibe coding（“ノリ”で書くコーディング）」の方が本文の軽さと合致。\n\n4. 主語一人称 “俺” と敬体の混在  \n   例：「俺はローカル派。」  \n   全体を終始くだけた “俺／だ・である” で統一するか、もう少しソフトな “僕／です・ます” に揃える。  \n   ※原文のラフさを保つなら前者推奨。\n\n5. 括弧の多用・欧文全角半角  \n   `（Cursor、Windsurf? ）` など末尾のスペースや全角英語が散見。細部調整を。\n\n-------------------------------------------------------------------------------\nD. 重大度：LOW ― 一貫性・用語統一\n-------------------------------------------------------------------------------\n1. LLM, Codegen, Agentic → 一部カタカナ、一部英語。  \n   ・LLM は英字固定  \n   ・“コード生成(codegen)” のように初回だけ () 併記  \n   ・“agentic coding” は「エージェント型コーディング」に統一\n\n2. LOL/笑表記  \n   「(笑)」「Lol」「lol」など揺れがある。どれかに統一。\n\n3. 引用のインデントと改行  \n   Markdown 仕様との兼ね合いで「> 」の後ろを1行空けるかどうかがバラつく。構文エラーの原因になるため統一。\n\n-------------------------------------------------------------------------------\nE. 推奨訳語・修正案 抜粋\n-------------------------------------------------------------------------------\n・“stupid shit it will often recommend”  \n　→ 「LLM がときどき繰り出すトンチキ提案に心の準備をしておく」\n\n・“agentic coding”  \n　→ 「エージェント駆動型コーディング」または「エージェントまかせコーディング」\n\n・“Cursor will blow your mind”  \n　→ 「Cursor を使うと度肝を抜かれる」\n\n・“terminal jockey”  \n　→ 「ターミナル張り付き野郎」など語感重視で\n\n・“You will spend SO much money on tokens.”  \n　→ 「トークン料金がとんでもなくかさむ。」\n\n-------------------------------------------------------------------------------\nF. まとめ\n-------------------------------------------------------------------------------\n・情報欠落（ChatGPT 3.5、Nobody can see this… 等）を最優先で補う。  \n・“楽しい/魔法” などポジティブ形容詞の脱落を戻し、原文の温度感を維持。  \n・語調（一人称・敬体/常体）の統一と和製英語の見直しで読みやすさを上げる。  \n・専門用語は表記を揃え、無料/有料モデルの注意喚起など実務的ニュアンスを正確に。\n\n以上を反映すれば、「原文そっくりのノリで読みやすいが、内容も完全に漏れない」訳文になるはずだ。",
      "【総評】\n全体としては原文の流れ・ユーモア・罵り語調をかなりうまく再現しており、誤訳や欠落も少なめ。しかし「完璧」にはまだ遠く、細部の意味ずれ・強調の欠落・数値変換ミス・語調/語彙の揺れ・訳文だけ読むと分かりにくい機械直訳調の箇所が散見される。以下に深刻度別に徹底的に洗い出す。\n\n──────────────────\nA. 重大レベル（意味を損なう誤訳・欠落）\n──────────────────\n1. 体積の数値ミス  \n　原文: “200 gallons of kool-aid” ≒ 760 リットル  \n　訳文: 「200リットルぐらい」  \n　→ 数値が1/4 になり誇張表現が弱まる。「200ガロン（約760リットル）」とするか、「浴槽何杯分」など誇張ニュアンスごと保つ。\n\n2. “very trustworthy” の削除  \n　画像キャプション alt 本文: “Harper is very trustworthy”  \n　訳文: 「思慮深いガイド：ハーパー」  \n　→ “trustworthy” を落としており、筆者の皮肉／信頼感が消えた。「とても信頼できるハーパー」等に戻す。\n\n3. “figure all of this out” の一部落ち  \n　冒頭 “…emails from people who are working to figure all of this out.”  \n　訳文: 「どこから手を付ければいいのか…で迷っている」  \n　→ “how it all fits together” は後段で訳しているが、“figure all of this out” はより包括的。ここを「どうやって全体像を理解し、使いこなせるか」等に拡張する。\n\n4. a framework to get things done の欠落  \n　原文: “gives you a framework to get things done, and then acts.”  \n　訳文: 「手順（フレームワーク）を示したうえで処理を進め」  \n　→ “フレームワーク” を（　）内に入れつつ「作業完遂の枠組みを提供し」など明示的に訳す。  \n\n5. “Kuhn could write a book about the confusion” の文化参照弱化  \n　訳文: 「トーマス・クーンがこの混乱だけで一冊書けるんじゃないか」  \n　→ “書ける” だけだと皮肉が薄い。例: 「トーマス・クーンならこのカオスを題材にパラダイムシフトの新刊を書き上げそうだ。」  \n\n──────────────────\nB. 大きな改善余地（ニュアンス・語調・情報量）\n──────────────────\n1. スラング “shit” 系の温度差  \n　“seen some shit” → 「いろんなクソ」だと字面が硬い／不自然。  \n　推奨: 「なかなかヤバい現場も見てきた」など日本語ネイティブの口語感に寄せる。\n\n2. “Copilot will start to look like 2004 autocomplete.”  \n　訳文: 「Copilotは2004年のオートコンプリートに見え始め」  \n　→ “2004年当時のIDE補完” など少し補足しないと年代ジョークが伝わりにくい。\n\n3. “This is the unfortunate first step towards the vibe in vibe coding.”  \n　訳文: 「これが vibe coding の第一歩。」  \n　→ “unfortunate” の皮肉が抜けた。  \n　例: 「残念ながら、これが“ノリだけコーディング”への第一歩になる。」\n\n4. “terminal jockey”  \n　訳文: 「端末ジャンキー」  \n　→ “jockey” は「乗りこなす人」のニュアンス。  \n　推奨: 「ターミナル使い（terminal jockey）」 + ルビや説明を付与。\n\n5. GitHub Actions の訳  \n　「GitHub Action 時間」→ 正しくは “GitHub Actions の実行時間／利用時間” など複数形を保持。\n\n6. “fuck it – jump to the end”  \n　訳文: 「クソくらえだ、いきなりゴールへ飛べ」  \n　→ 読点位置と「だ」が重く不自然。「もう細かいことは気にせず、いきなり最後まで飛べ」で可読性向上。\n\n7. “copy and paste from Claude web”  \n　訳文: 「Claude にコピペ」  \n　→ “Claude Web UI” が初見だと分かりにくい。“Claude のWeb版にコードをコピペ”等で具体化。\n\n8. “You will start thinking about how to make things go faster”  \n　訳文: 「もっと速くしたくなる」  \n　→ “作業フローを高速化する方法を考え始める” と直すと意図が明確。\n\n──────────────────\nC. 言語・文法・自然さの問題\n──────────────────\n1. 体言止め過多 & 口語の揺れ  \n　例: 「爆笑モノだし楽しい。」→ 「爆笑モノで、本当に楽しい。」  \n　例: 「バンバン書いている。」→ カジュアルすぎて同一段落内で語調が跳ぶ。\n\n2. 英語カタカナ併記が頻発  \n　例: 「spec は *絶対神*」「端末ジャンキー（terminal jockey）」など。  \n　→ 用語の初出で () 併記し、以降は日本語 or 英語に統一する。\n\n3. 括弧・ダッシュの乱用  \n　――, –, … が混在。和文では全角ダッシュ／読点へ統一すると読みやすい。\n\n4. 訳文のみを読んだ時の脈絡不足  \n　・“hero’s journey” をカタカナにしただけで説明なし。  \n　→ 「（映画などでおなじみの主人公成長譚、ヒーローズジャーニーになぞらえて）」等。\n\n──────────────────\nD. 用語・表記の一貫性\n──────────────────\n| 英語原語 | 出現箇所 | 訳語ゆれ |\n|-----------|-----------|-----------|\n| codegen | コード生成 / codegen（英語まま） |\n| agentic coding | エージェント駆動型コーディング / agentic coding |\n| LLM | LLM / 大規模言語モデル |\n| context window | コンテキストウィンドウ / コンテキスト window |\n\n→ 初回で日本語＋英語併記、その後は訳語に統一すると読みやすい。\n\n──────────────────\nE. 機械翻訳っぽい直訳・ぎこちなさ\n──────────────────\n1. 「これはめんどくせぇ」→ “めんどい” や “手間がかかる” の方が自然。  \n2. 「これが転換点だ。」→ 「ここがターニングポイント。」など口語に寄せる。  \n3. 「とはいえCopilotは『2024年のChatGPTと話してる』感覚で、*そこまで*凄いわけじゃない。」  \n　→ “まるでタイムマシンで2024年版ChatGPTに話しかけている気分――要するに大したことはない。” とすると原文比喩が生きる。\n\n──────────────────\nF. 推奨修正例（抜粋）\n──────────────────\n▼ 数値  \n　誤: 200リットルぐらいクールエイド  \n　正: 約200ガロン（およそ760リットル）ものクールエイド\n\n▼ 画像キャプション  \n　誤: 思慮深いガイド：ハーパー  \n　正: とても信頼できるガイド、ハーパー\n\n▼ 端末ジャンキー  \n　誤: 端末ジャンキー（terminal jockey）になる  \n　正: もはや IDE を開かず、いわば “terminal jockey”（ターミナル乗り）状態になる\n\n▼ “unfortunate first step”  \n　誤: これが vibe coding の第一歩  \n　正: 残念ながら、これが vibe coding への（不本意な）第一歩だ\n\n──────────────────\nまとめ\n・大きな破綻はないが、数字・形容詞・比喩の取りこぼしや、スラングの温度差調整で“痛快さ”をもう一段上げられる。  \n・語調の統一（口語ラフ路線なら徹底して「俺／〜だぜ」等へ統一）と用語統一で可読性が向上。  \n・文化参照（Hero’s Journey、クーン、ウォーターフォール揶揄など）は軽い注釈を添えると読者フレンドリー。  \n\n上記を修正すれば「原文どおりに痛快だが日本語として自然」な訳に仕上がるはず。",
      "【総評】\n原文の軽妙な語り口と意味はかなり再現されていますが、細部まで見ると\n①重要情報の若干の欠落  \n②語調・人称の揺れ  \n③日本語としての不自然さ／過剰直訳  \n④俗語・固有名詞の扱い  \n⑤用語統一 など、修正余地が散見します。\n\n以下、深刻度別・カテゴリ別に徹底的に指摘します。  \n（★＝深刻度：Critical／Major／Minor／Stylistic）\n\n────────────────\n1. 意味逸脱・欠落・誤訳（Critical / Major）\n────────────────\n★C1 2段落目のニュアンス欠落  \n原文: “from people who are working to figure all of this out”  \n訳: 「山ほどメールが届く」  \n→「…この新しい流れを必死で理解しようとしている人たちから」など、“TRYING TO FIGURE OUT” の努力感を補う。\n\n★C2 Step 7 “It asks for permission to act, and gives you a framework to get things done, and then acts.”  \n訳: 「…枠組み（フレームワーク）を提示してから処理を進め」  \n→ “asks for permission”（実行前確認）が弱い。「実行してよいか毎回確認し、タスクの青写真を示したうえで動く」と明示。\n\n★C3 Step 9 “There is a lot of downtime.” が欠落  \nゲームボーイに戻る前に“暇がたっぷりある”と明記してこそ皮肉が際立つ。文を追加。\n\n★M1 “Kool-Aid” の固有名詞ゆらぎ  \n「クールエイド」は一般に通じない。「Kool-Aid（クールエイド）」とブランド表記し、暗喩（思想を鵜呑みにする）の説明脚注を検討。\n\n★M2 “Fisaconites's represent”  \n訳: “Fisaconites represent!”  \n末尾の “’s” は原文のスペルミスだが、整えて「Fisaconitesのみんな、声を上げろ！」など意訳して文法を正す方が自然。\n\n────────────────\n2. トーン・スタイル／人称ゆれ（Major）\n────────────────\n★M3 人称が「私」→「俺」で混在  \n冒頭はフォーマル寄りで途中から急にラフになる。  \n・全体を「僕」or「俺」に統一する  \n・もしくは「筆者」と三人称に寄せる\n\n★M4 罵語・スラングの温度差  \n原文 “piece of shit”, “fuck it” などかなり下品。  \n訳では「クソ」「ダサい」等ややマイルドになりニュアンス揺れ。  \n読者層に合わせ、  \n・完全に置き換える (例: 「クソ食らえ」)  \n・伏字にする  \nいずれにせよ基準を統一。\n\n────────────────\n3. 日本語の不自然さ・機械翻訳臭（Minor）\n────────────────\n★m1 「AI補完」  \n一般には「AI補完機能」「AIオートコンプリート」。「補完」だけだと文脈依存。\n\n★m2 「ターミナル乗り」  \n造語感が強く説明不足。「ターミナル使い」等で十分。\n\n★m3 「主にデバッグの大半が吹っ飛ぶから」  \n「主に～大半」が冗長。「デバッグ工程まるごと吹っ飛ぶから」など整理。\n\n★m4 「コードオタク老害」  \n“code boomers” は自嘲混じりの俗語。「コード世代のベテラン」等、罵倒ニュアンスを保ちつつ自然に。\n\n★m5 半角カナ・全角記号混在 (`¯\\\\_(ツ)_/¯`)  \nAAはそのままでも良いが、バックスラッシュの重複で文字化けしやすい。表示テスト要。\n\n★m6 「旅を経た者同士は共感し合い」  \n「共感し合い」はくどい。「共感し」 or 「共感し合う」。\n\n────────────────\n4. 用語・表記ゆれ（Minor / Stylistic）\n────────────────\n★u1 “agentic coding” → 「エージェント駆動型コーディング」と訳したり英語のまま残したり混在。  \n→ 初出で（以下「エージェントコーディング」）など括弧注を入れ、以降統一。\n\n★u2 “spec / PRD” がカタカナと英語混在  \n「仕様書（Spec）」「PRD（製品要求仕様書）」など1回目に日本語＋英語、以降略語で統一。\n\n★u3 “LLM”／“基盤モデル” の交互使用  \n同義語として扱うなら脚注か補足。「LLM（大規模言語モデル）」を一度示し後はLLMで統一。\n\n────────────────\n5. 句読点・タイポ等（Stylistic）\n────────────────\n★s1 “Fisaconites represent!” の感嘆符前後に全角・半角スペースのゆれ。  \n★s2 “–—” ダッシュ類の混在。  \n★s3 固有名詞 “deepseek” → 正式表記 “DeepSeek” (AWS Bedrockページは DeepSeek)  \n★s4 “superwhisper” → “SuperWhisper” などツール名を公式に合わせる。\n\n────────────────\n6. 具体的改善案まとめ\n────────────────\n1) 人称を統一（例：終始「俺」）し、一人称が変わらないようチェック。  \n2) 欠落箇所 (C1,C2,C3) を補い、permission/downtime 等の挙動を明示。  \n3) スラング表現は一貫したレベルに。「クソ／ク●」など決めて全体置換。  \n4) “agentic coding”＝「エージェントコーディング」に統一。  \n5) 用語初出時に日本語注＋英語、二回目以降は略語固定。  \n6) “Kool-Aid” はブランド表記＋飲み物比喩の脚注。  \n7) 造語が浮く箇所（ターミナル乗り等）は既存語に置換。  \n8) 全文の読点位置・ダッシュ・半角英数を統一しタイポを再確認。\n\n以上を修正すれば、原文のカジュアルさを保ちつつ、日本語ネイティブの読者にとって自然かつ忠実な訳文になります。"
    ]
  },
  "critique_loop_details": {
    "critique_usages": [
      {
        "prompt_tokens": 8029,
        "completion_tokens": 2011,
        "total_tokens": 10040
      },
      {
        "prompt_tokens": 7865,
        "completion_tokens": 1914,
        "total_tokens": 9779
      },
      {
        "prompt_tokens": 8043,
        "completion_tokens": 2102,
        "total_tokens": 10145
      },
      {
        "prompt_tokens": 8080,
        "completion_tokens": 1557,
        "total_tokens": 9637
      }
    ],
    "feedback_usages": [
      {
        "prompt_tokens": 10587,
        "completion_tokens": 3356,
        "total_tokens": 13943
      },
      {
        "prompt_tokens": 10244,
        "completion_tokens": 3499,
        "total_tokens": 13743
      },
      {
        "prompt_tokens": 10701,
        "completion_tokens": 3536,
        "total_tokens": 14237
      },
      {
        "prompt_tokens": 10033,
        "completion_tokens": 3541,
        "total_tokens": 13574
      }
    ]
  },
  "timestamp": "2025-06-26T20:53:25.558786"
}