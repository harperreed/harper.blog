{
  "input_file": "index.md",
  "output_file": "index.es.md",
  "target_language": "spanish",
  "language_code": "es",
  "model": "o3",
  "skip_edit": false,
  "do_critique": true,
  "critique_loops": 4,
  "has_frontmatter": true,
  "translation_context": "This is a blog post about my experiences using claude gen ai agent for code gen.",
  "token_usage": {
    "prompt_tokens": 55755,
    "completion_tokens": 20851,
    "total_tokens": 76606
  },
  "cost": "$1.3916",
  "prompts_and_responses": {
    "translation": {
      "model": "o3",
      "target_language": "spanish",
      "system_prompt": "\n        1. Read the provided text carefully, preserving all formatting, markdown, and structure exactly as they appear.\n        2. Identify any block quotes and code blocks.\n        3. Do not translate text in block quotes or in code blocks (including text within code blocks).\n        4. Translate everything else into spanish.\n        5. Maintain the original formatting, markdown, and structure in your output.\n        6. Provide a natural-sounding translation rather than a word-for-word one.\n        7. For idioms, colloquialisms, or slang, render them in an equivalent, natural way in spanish whenever possible.\n        8. If there isn't a direct or natural translation for a particular term or phrase, keep it in the original language and surround it with quotes if necessary.\n        9. Ensure that technical terms or jargon remain accurate; if there's no suitable translation, keep the original term.\n        10. Strive for fluid, native-sounding prose that retains the tone and intent of the original text.\n        11. If context about the text is provided, use it to inform your translation choices, especially regarding tone, style, and cultural adaptations.\n        ",
      "user_prompt": "# CONTEXT\nThis is a blog post about my experiences using claude gen ai agent for code gen.\n\n# TEXT TO TRANSLATE\nI really like this agentic coding thing. It is quite compelling in so many ways.\n\nSince I wrote [that original blog post](/2025/02/16/my-llm-codegen-workflow-atm/) a lot has happened in Claude land:\n\n- Claude Code\n- MCP\n- etc\n\nI have received hundreds (wat) of emails from people talking about their workflows and how they have used my workflow to get ahead. I have spoken at a few conferences, and taught a few classes about codegen. I have learned that computers really want to spellcheck codegen to codeine, who knew!\n\n{{< image src=\"codegen.png\"  >}}\n\nI was talking to a [friend](https://www.elidedbranches.com/) the other day about how we are **all totally fucked** and **AI will take our jobs** (more on that in a later post), and she was like \"you should write a post about claude code.\"\n\nHere we go.\n\nClaude Code was released eight days after I wrote my original workflow blog post, and as I predicted, it made a lot of my post irrelevant. I have since migrated from Aider to Claude Code and not looked back. I still like Aider, and it has a distinct use, but Claude Code is a bit more useful atm.\n\nClaude Code is powerful, and a hell of a lot more expensive.\n\nMy workflow is very similar to what it was before.\n\n- I chat with `gpt-4o` to hone my idea\n- I use the best reasoning model I can find to generate the spec. These days it is o1-pro or o3 (is o1-pro better than o3? Or do I feel like it is better cuz it takes longer?)\n- I use the reasoning model to generate the prompts. Using an LLM to generate prompts is a beautiful hack. It makes boomers mad too.\n- I save the spec.md, and the prompt_plan.md in the root of the project.\n- I then type into claude code the following:\n\n```prompt\n1. Open **@prompt_plan.md** and identify any prompts not marked as completed.\n2. For each incomplete prompt:\n    - Double-check if it's truly unfinished (if uncertain, ask for clarification).\n    - If you confirm it's already done, skip it.\n    - Otherwise, implement it as described.\n    - Make sure the tests pass, and the program builds/runs\n    - Commit the changes to your repository with a clear commit message.\n    - Update **@prompt_plan.md** to mark this prompt as completed.\n3. After you finish each prompt, pause and wait for user review or feedback.\n4. Repeat with the next unfinished prompt as directed by the user.\n```\n\n- The magic with this prompt is that it checks the prompt plan. Looks for things that are not marked as completed, then does the next remaining task. It commits it to git, and then updates the prompt plan with what is complete. It then pops up and asks you to continue once it is done. 🤌\n\n- I then kick back and tell claude `yes` while it does the work. It will pop up for feedback, and magic happens.\n- Lots more cookie clicker.\n\nThis works super well. There are a few superpowers you can embed in your process that will really help.\n\n## Defensive coding!\n\n### Testing\n\nTesting and test-driven development is a must. I highly recommend really engaging in building out a robust TDD practice.\n\nI was a TDD hater. I was bad at it and I felt like I was wasting time. I was not correct. Lol. I recognize that, and we built in a lot of testing into our companies and projects over the past few decades. Most of the testing was added AFTER the core work was done. This is fine for humans.\n\nTHIS IS BAD FOR ROBOTS.\n\nThe robots LOVE TDD. Seriously. They eat it up.\n\nWith TDD you have the robot friend build out the test, and the mock. Then your next prompt you build the mock to be real. And the robot just loves this. It is the most effective counter to hallucination and LLM scope drift I have found. It really helps the robots to stay on task.\n\n### Linting\n\nI am such a fan of linting. It is so nice. Ruff is a wonderful product. Biome is cool. Clippy is fun (and a good name).\n\nFor whatever reason the ROBOTS love to run a good linter.\n\nBuilding in the practice to run the linter constantly has kept a lot of bugs away, and kept the code more maintainable and easier to read. You know this already.\n\nAdd in a good formatter and everything is beautiful.\n\n### Pre Commit hooks\n\nThe real magic of all this is to add these tasks to a pre-commit hook. I recommend the pre-commit python package. You can easily use it via an `uv tools install pre-commit` command and then just build out a nice `.pre-commit-config.yaml` file and bam. Every time you try and commit it will run all these wonderful tests, type checking, linting, and whatnot to make sure your code is A+++ would execute again.\n\nThis is a great hack for working with Claude Code. The robot REALLLLLY wants to commit. So when you instruct it to do some code and then commit (like I did above) it will make wild code changes, commit the code, inevitably fuck it all up and then have to fix it.\n\nThis is nice cuz it doesn't clog your GitHub actions with a bunch of linting, formatting, and type checking execution that doesn't pass cuz the robot was in a mood.\n\n> A funny thing about claude is it CANNOT for the life of it figure out how to use `uv` correctly. It will pip install shit all over the place if you are not careful. And if you instruct it to use `uv` it will just use `uv pip install.` Maybe AGI isn't going to happen in June. so sad.\n\n### Claude.md and commands\n\nThese are both really simple additions that can squeeze a lot out.\n\n{{< image src=\"_SDI8149.jpg\" alt=\"Jesse at the studio, Sept 15, 2023, Ricoh GRiii\" caption=\"Jesse at the studio, Sigma fp, 11/15/2023\" >}}\n\nI stole a [CLAUDE.md](https://github.com/harperreed/dotfiles/blob/master/.claude/CLAUDE.md) from my friend [Jesse Vincent](https://fsck.com/) who did an [awful lot of work on making it very robust](https://github.com/obra/dotfiles/blob/main/.claude/CLAUDE.md). It is quite nice. Some things that are built into it:\n\n- a light version of the big daddy rule.\n- instructions on how to do TDD\n- stylistic instructions on how I like to code.\n\n> [@clint](https://instagram.com/clintecker) configured his CLAUDE.md to call him MR BEEF and it is currently embedding info about MR BEEF in our all documentation: \"If you're stuck, stop and ask for help—MR BEEF may know best.\". While typing this out, I decided to make my CLAUDE.md file call me \"Harp Dog.\" This is a feature, not a bug.\n\nThe commands are also really nice. You can see some of mine in my dotfiles [here](https://github.com/harperreed/dotfiles/tree/master/.claude/commands).\n\n{{< image src=\"commands.png\"  >}}\n\nI used to use the commands way more, but it is a really great way to get a lot out of regularly used prompts. You can also pass arguments to the commands. For instance in my github issues command, you pass the issue number that you want claude to look at: `/user:gh-issue #45`\n\nClaude will now go and run through the \"prompt\" script that is defined in the `gh-issue.md` file.\n\nYou can also put these commands in a project directory, and make a custom CLAUDE.md in the project directory. I do this to make hugo, rust, go, or javascript specific commands per project.\n\n## \"Continue\"\n\n{{< image src=\"https://media4.giphy.com/media/v1.Y2lkPTc5MGI3NjExNDk3ZTZpdWYwdG5sdmpnaTJqNzJhYXlvcmp6bnNmdmhxaGdoeHJ4MyZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/l2Je3fIeeXyYEM85G/giphy.gif\" >}}\n\nSometimes I feel like that bird that Homer got to hit \"y\". I am just writing \"continue\" or pressing up and pasting in the same prompt.\n\nMost of the time the plans are about 8–12 steps. I can usually get through a Greenfield development plan in about 30–45 minutes regardless of apparent complexity or language.\n\nI was talking through with my friend Bob and he did not believe it. I asked him \"name a thing to build, a language to build it in - and let's see!\"\n\n{{< image src=\"R0000693.jpeg\" caption=\"Bob Swartz, Ricoh GRiiix, 11/17/2024\" >}}\n\nHe was like \"ok. A basic interpreter in C.\"\n\nThis wasn't ideal. I don't know C. I don't really know how to write an interpreter, nor do I really want to. But fuck it.\n\nI followed the above steps and Claude Code did great. We have [a working basic interpreter](https://github.com/harperreed/basic). The first version worked within an hour. I futzed with it for a few more hours and it is pretty good. Would it ship it in 1982? Probably not. You can see the [prompt plan here](https://raw.githubusercontent.com/harperreed/basic/refs/heads/main/docs/prompt_plan.md).\n\n## The Team\n\nOur entire team is using Claude Code currently. We are all approximately following the above process with a lot of person tweaks.\n\nWe are doing way way higher test coverage than we have ever done. We have better code, and it seems to be just as effective as the horrible code we wrote in the past. It is fun to glance at people working and see claude code running in ghostty, in vscode terminal, in zed terminal, and messing with python notebooks.\n\n{{< image src=\"dril.jpg\" >}}\n\nSomeone who has a lot of tokens, please help me budget this. My family is dying.\n\n## thanks\n\nTo all the folks who keep emailing me. It is really fun and nice to hear about your workflows, and projects. I really appreciate it. Keep em coming!",
      "context": "This is a blog post about my experiences using claude gen ai agent for code gen.",
      "response": "# CONTEXT\nEsta es una entrada de blog sobre mis experiencias usando Claude Gen AI Agent para la generación de código.\n\n# TEXT TO TRANSLATE\nMe encanta esto de la codificación agéntica. Resulta muy convincente de muchas maneras.\n\nDesde que escribí [aquella entrada original del blog](/2025/02/16/my-llm-codegen-workflow-atm/) han pasado muchas cosas en el mundo Claude:\n\n- Claude Code\n- MCP\n- etc\n\nHe recibido cientos (wat) de correos de personas hablándome de sus flujos de trabajo y de cómo han usado el mío para adelantarse. He dado charlas en algunas conferencias y enseñado un par de clases sobre codegen. ¡También descubrí que las computadoras de verdad quieren corregir “codegen” a “codeine”, quién lo diría!\n\n{{< image src=\"codegen.png\"  >}}\n\nEl otro día hablaba con una [amiga](https://www.elidedbranches.com/) sobre cómo **estamos totalmente jodidos** y **la IA nos quitará el trabajo** (hablaré más de eso en otra entrada), y me dijo: «deberías escribir un post sobre Claude Code».\n\nPues vamos.\n\nClaude Code salió ocho días después de que publicara mi entrada original sobre el flujo de trabajo y, como predije, volvió irrelevante gran parte de ella. Desde entonces migré de Aider a Claude Code y no he mirado atrás. Aún me gusta Aider y tiene su uso, pero Claude Code es un poco más útil por ahora.\n\nClaude Code es potente y muchísimo más caro.\n\nMi flujo de trabajo es muy similar al de antes.\n\n- Charlo con `gpt-4o` para pulir la idea.\n- Uso el mejor modelo de razonamiento que encuentre para generar la especificación. Hoy en día es o1-pro u o3 (¿es o1-pro mejor que o3? ¿O solo siento que es mejor porque tarda más?).\n- Uso ese modelo de razonamiento para generar los prompts. Usar un LLM para crear prompts es un hack precioso. Además enfurece a los boomers.\n- Guardo `spec.md` y `prompt_plan.md` en la raíz del proyecto.\n- Luego escribo en Claude Code lo siguiente:\n\n```prompt\n1. Open **@prompt_plan.md** and identify any prompts not marked as completed.\n2. For each incomplete prompt:\n    - Double-check if it's truly unfinished (if uncertain, ask for clarification).\n    - If you confirm it's already done, skip it.\n    - Otherwise, implement it as described.\n    - Make sure the tests pass, and the program builds/runs\n    - Commit the changes to your repository with a clear commit message.\n    - Update **@prompt_plan.md** to mark this prompt as completed.\n3. After you finish each prompt, pause and wait for user review or feedback.\n4. Repeat with the next unfinished prompt as directed by the user.\n```\n\n- La magia de este prompt es que revisa el prompt plan, busca lo que no está marcado como completado y aborda la siguiente tarea pendiente. La sube a git y luego actualiza el prompt plan con lo que quedó completo. Cuando termina, se detiene y te pide continuar. 🤌\n\n- Después me recuesto y le digo a Claude `yes` mientras hace el trabajo. Aparecerá pidiendo feedback y la magia sucede.\n- Mucho más “cookie clicker”.\n\nEsto funciona de maravilla. Hay algunos superpoderes que puedes incrustar en tu proceso y que ayudan muchísimo.\n\n## ¡Programación defensiva!\n\n### Pruebas\n\nLas pruebas y el desarrollo guiado por pruebas (TDD) son imprescindibles. Recomiendo comprometerse de verdad a construir una práctica sólida de TDD.\n\nYo era un hater del TDD. Se me daba mal y sentía que perdía el tiempo. No estaba en lo cierto. Lol. Lo reconozco, y durante las últimas décadas añadimos muchas pruebas en nuestras empresas y proyectos. La mayoría se agregaron DESPUÉS de terminar el trabajo principal. Esto está bien para humanos.\n\nESTO ES MALO PARA LOS ROBOTS.\n\nLos robots AMAN el TDD. En serio, se lo devoran.\n\nCon TDD haces que tu amigo robot escriba la prueba y el mock. En el siguiente prompt conviertes el mock en algo real. Y al robot le fascina esto. Es el contrapeso más efectivo contra la alucinación y la deriva de alcance del LLM que he encontrado. De verdad ayuda a los robots a mantenerse en tarea.\n\n### Linting\n\nSoy un gran fan del linting. Es genial. Ruff es un producto maravilloso. Biome está guay. Clippy es divertido (y tiene buen nombre).\n\nPor alguna razón, a los ROBOTS les encanta ejecutar un buen linter.\n\nIncorporar la práctica de ejecutar el linter constantemente ha mantenido muchos bugs alejados y hace que el código sea más mantenible y fácil de leer. Esto ya lo sabes.\n\nAñade un buen formateador y todo queda precioso.\n\n### Hooks de pre-commit\n\nLa auténtica magia de todo esto es añadir estas tareas a un hook de pre-commit. Recomiendo el paquete de Python `pre-commit`. Puedes instalarlo fácilmente con `uv tools install pre-commit` y luego crear un bonito archivo `.pre-commit-config.yaml` y listo. Cada vez que intentes hacer commit, ejecutará todas esas maravillosas pruebas, comprobaciones de tipos, linting y lo que haga falta para asegurarse de que tu código es A+++ would execute again.\n\nEs un gran hack para trabajar con Claude Code. El robot QUIERE commit-ear a toda costa. Así que cuando le pides que haga algo de código y luego haga commit (como en el ejemplo de arriba) hará cambios salvajes, hará commit, inevitablemente lo estropeará y luego tendrá que arreglarlo.\n\nEsto es genial porque no atasca tus GitHub Actions con un montón de linting, formateo y comprobaciones de tipos que no pasan porque el robot estaba de malas.\n\n> A funny thing about claude is it CANNOT for the life of it figure out how to use `uv` correctly. It will pip install shit all over the place if you are not careful. And if you instruct it to use `uv` it will just use `uv pip install.` Maybe AGI isn't going to happen in June. so sad.\n\n### Claude.md y comandos\n\nAmbas son adiciones muy simples que exprimen mucho más.\n\n{{< image src=\"_SDI8149.jpg\" alt=\"Jesse at the studio, Sept 15, 2023, Ricoh GRiii\" caption=\"Jesse en el estudio, Sigma fp, 15/11/2023\" >}}\n\nLe robé un [CLAUDE.md](https://github.com/harperreed/dotfiles/blob/master/.claude/CLAUDE.md) a mi amigo [Jesse Vincent](https://fsck.com/), quien hizo [mucho trabajo para que fuera muy robusto](https://github.com/obra/dotfiles/blob/main/.claude/CLAUDE.md). Está bastante bien. Algunas cosas que incluye:\n\n- una versión ligera de la “big daddy rule”,\n- instrucciones sobre cómo hacer TDD,\n- indicaciones de estilo sobre cómo me gusta programar.\n\n> [@clint](https://instagram.com/clintecker) configured his CLAUDE.md to call him MR BEEF and it is currently embedding info about MR BEEF in our all documentation: \"If you're stuck, stop and ask for help—MR BEEF may know best.\". While typing this out, I decided to make my CLAUDE.md file call me \"Harp Dog.\" This is a feature, not a bug.\n\nLos comandos también son muy útiles. Puedes ver algunos de los míos en mis dotfiles [aquí](https://github.com/harperreed/dotfiles/tree/master/.claude/commands).\n\n{{< image src=\"commands.png\"  >}}\n\nAntes usaba los comandos mucho más, pero siguen siendo una forma estupenda de sacar provecho de prompts que usas a menudo. También puedes pasar argumentos a los comandos. Por ejemplo, en mi comando para issues de GitHub, le pasas el número de issue que quieres que Claude revise: `/user:gh-issue #45`\n\nClaude ejecutará entonces el script “prompt” que está definido en el archivo `gh-issue.md`.\n\nTambién puedes poner estos comandos en el directorio de un proyecto y crear un CLAUDE.md personalizado en dicho proyecto. Yo lo hago para tener comandos específicos de Hugo, Rust, Go o JavaScript por proyecto.\n\n## \"Continue\"\n\n{{< image src=\"https://media4.giphy.com/media/v1.Y2lkPTc5MGI3NjExNDk3ZTZpdWYwdG5sdmpnaTJqNzJhYXlvcmp6bnNmdmhxaGdoeHJ4MyZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/l2Je3fIeeXyYEM85G/giphy.gif\" >}}\n\nA veces me siento como ese pájaro que Homer hizo pulsar la tecla “y”. Solo estoy escribiendo “continue” o dándole a la flecha arriba y pegando el mismo prompt.\n\nLa mayoría de las veces los planes tienen entre 8 y 12 pasos. Suelo terminar un plan de desarrollo Greenfield en unos 30-45 minutos sin importar la complejidad aparente o el lenguaje.\n\nLo comenté con mi amigo Bob y no se lo creía. Le dije: «nombra algo que construir, un lenguaje de programación, ¡y veamos!»\n\n{{< image src=\"R0000693.jpeg\" caption=\"Bob Swartz, Ricoh GRiiix, 17/11/2024\" >}}\n\nY él dijo: «ok. Un intérprete de BASIC en C».\n\nNo era lo ideal. No sé C. Tampoco sé realmente cómo escribir un intérprete, ni me apetece. Pero qué demonios.\n\nSeguí los pasos anteriores y Claude Code lo hizo genial. Tenemos [un intérprete de BASIC funcional](https://github.com/harperreed/basic). La primera versión funcionó en una hora. Luego la toqueteé un par de horas más y quedó bastante bien. ¿Lo enviaría en 1982? Probablemente no. Puedes ver el [prompt plan aquí](https://raw.githubusercontent.com/harperreed/basic/refs/heads/main/docs/prompt_plan.md).\n\n## El equipo\n\nTodo nuestro equipo usa actualmente Claude Code. Seguimos más o menos el proceso anterior con bastantes ajustes personales.\n\nEstamos alcanzando una cobertura de pruebas muchísimo mayor que nunca. Tenemos mejor código y parece ser tan efectivo como el horrible código que escribíamos antes. Es divertido echar un vistazo a la gente trabajando y ver Claude Code funcionando en ghostty, en la terminal de VSCode, en la terminal de Zed y peleándose con notebooks de Python.\n\n{{< image src=\"dril.jpg\" >}}\n\nAlguien que tenga un montón de tokens, por favor ayúdeme a presupuestar esto. Mi familia se está muriendo.\n\n## gracias\n\nA todas las personas que siguen enviándome correos: es muy divertido y agradable saber de vuestros flujos de trabajo y proyectos. Lo aprecio muchísimo. ¡Seguid enviándolos!",
      "usage": {
        "prompt_tokens": 2553,
        "completion_tokens": 2397,
        "total_tokens": 4950
      },
      "streaming": true
    },
    "editing": {
      "model": "o3",
      "target_language": "spanish",
      "system_prompt": "\n        1. Carefully read the translated text alongside the original text in its entirety.\n        2. Compare both texts to ensure the translation accurately reflects the original meaning.\n        3. Correct any grammatical errors you find in the spanish text.\n        4. Adjust phrasing to make it sound natural and fluent for spanish speakers, making sure idioms and expressions are culturally appropriate.\n        5. Preserve the original tone, nuance, and style, including any formatting, markdown, and structure.\n        6. Avoid adding new information or altering the core meaning.\n        7. Ensure the final result doesn't feel machine-translated but remains faithful to the source.\n        8. Make only changes that genuinely improve the text's quality in spanish.\n        9. Don't be too literal. If there isn't a direct translation, provide a natural-sounding translation.\n        10. If the text contains idioms or colloquialisms, translate them into the target language while maintaining their original meaning.\n        11. If the text contains technical terms or jargon, ensure that the translation is accurate and appropriate for the target audience, if there isn't a natural translation, keep it in the original language.\n        12. If there is not natural translation, keep it in the original language.\n        ",
      "user_prompt": "# ORIGINAL TEXT\nI really like this agentic coding thing. It is quite compelling in so many ways.\n\nSince I wrote [that original blog post](/2025/02/16/my-llm-codegen-workflow-atm/) a lot has happened in Claude land:\n\n- Claude Code\n- MCP\n- etc\n\nI have received hundreds (wat) of emails from people talking about their workflows and how they have used my workflow to get ahead. I have spoken at a few conferences, and taught a few classes about codegen. I have learned that computers really want to spellcheck codegen to codeine, who knew!\n\n{{< image src=\"codegen.png\"  >}}\n\nI was talking to a [friend](https://www.elidedbranches.com/) the other day about how we are **all totally fucked** and **AI will take our jobs** (more on that in a later post), and she was like \"you should write a post about claude code.\"\n\nHere we go.\n\nClaude Code was released eight days after I wrote my original workflow blog post, and as I predicted, it made a lot of my post irrelevant. I have since migrated from Aider to Claude Code and not looked back. I still like Aider, and it has a distinct use, but Claude Code is a bit more useful atm.\n\nClaude Code is powerful, and a hell of a lot more expensive.\n\nMy workflow is very similar to what it was before.\n\n- I chat with `gpt-4o` to hone my idea\n- I use the best reasoning model I can find to generate the spec. These days it is o1-pro or o3 (is o1-pro better than o3? Or do I feel like it is better cuz it takes longer?)\n- I use the reasoning model to generate the prompts. Using an LLM to generate prompts is a beautiful hack. It makes boomers mad too.\n- I save the spec.md, and the prompt_plan.md in the root of the project.\n- I then type into claude code the following:\n\n```prompt\n1. Open **@prompt_plan.md** and identify any prompts not marked as completed.\n2. For each incomplete prompt:\n    - Double-check if it's truly unfinished (if uncertain, ask for clarification).\n    - If you confirm it's already done, skip it.\n    - Otherwise, implement it as described.\n    - Make sure the tests pass, and the program builds/runs\n    - Commit the changes to your repository with a clear commit message.\n    - Update **@prompt_plan.md** to mark this prompt as completed.\n3. After you finish each prompt, pause and wait for user review or feedback.\n4. Repeat with the next unfinished prompt as directed by the user.\n```\n\n- The magic with this prompt is that it checks the prompt plan. Looks for things that are not marked as completed, then does the next remaining task. It commits it to git, and then updates the prompt plan with what is complete. It then pops up and asks you to continue once it is done. 🤌\n\n- I then kick back and tell claude `yes` while it does the work. It will pop up for feedback, and magic happens.\n- Lots more cookie clicker.\n\nThis works super well. There are a few superpowers you can embed in your process that will really help.\n\n## Defensive coding!\n\n### Testing\n\nTesting and test-driven development is a must. I highly recommend really engaging in building out a robust TDD practice.\n\nI was a TDD hater. I was bad at it and I felt like I was wasting time. I was not correct. Lol. I recognize that, and we built in a lot of testing into our companies and projects over the past few decades. Most of the testing was added AFTER the core work was done. This is fine for humans.\n\nTHIS IS BAD FOR ROBOTS.\n\nThe robots LOVE TDD. Seriously. They eat it up.\n\nWith TDD you have the robot friend build out the test, and the mock. Then your next prompt you build the mock to be real. And the robot just loves this. It is the most effective counter to hallucination and LLM scope drift I have found. It really helps the robots to stay on task.\n\n### Linting\n\nI am such a fan of linting. It is so nice. Ruff is a wonderful product. Biome is cool. Clippy is fun (and a good name).\n\nFor whatever reason the ROBOTS love to run a good linter.\n\nBuilding in the practice to run the linter constantly has kept a lot of bugs away, and kept the code more maintainable and easier to read. You know this already.\n\nAdd in a good formatter and everything is beautiful.\n\n### Pre Commit hooks\n\nThe real magic of all this is to add these tasks to a pre-commit hook. I recommend the pre-commit python package. You can easily use it via an `uv tools install pre-commit` command and then just build out a nice `.pre-commit-config.yaml` file and bam. Every time you try and commit it will run all these wonderful tests, type checking, linting, and whatnot to make sure your code is A+++ would execute again.\n\nThis is a great hack for working with Claude Code. The robot REALLLLLY wants to commit. So when you instruct it to do some code and then commit (like I did above) it will make wild code changes, commit the code, inevitably fuck it all up and then have to fix it.\n\nThis is nice cuz it doesn't clog your GitHub actions with a bunch of linting, formatting, and type checking execution that doesn't pass cuz the robot was in a mood.\n\n> A funny thing about claude is it CANNOT for the life of it figure out how to use `uv` correctly. It will pip install shit all over the place if you are not careful. And if you instruct it to use `uv` it will just use `uv pip install.` Maybe AGI isn't going to happen in June. so sad.\n\n### Claude.md and commands\n\nThese are both really simple additions that can squeeze a lot out.\n\n{{< image src=\"_SDI8149.jpg\" alt=\"Jesse at the studio, Sept 15, 2023, Ricoh GRiii\" caption=\"Jesse at the studio, Sigma fp, 11/15/2023\" >}}\n\nI stole a [CLAUDE.md](https://github.com/harperreed/dotfiles/blob/master/.claude/CLAUDE.md) from my friend [Jesse Vincent](https://fsck.com/) who did an [awful lot of work on making it very robust](https://github.com/obra/dotfiles/blob/main/.claude/CLAUDE.md). It is quite nice. Some things that are built into it:\n\n- a light version of the big daddy rule.\n- instructions on how to do TDD\n- stylistic instructions on how I like to code.\n\n> [@clint](https://instagram.com/clintecker) configured his CLAUDE.md to call him MR BEEF and it is currently embedding info about MR BEEF in our all documentation: \"If you're stuck, stop and ask for help—MR BEEF may know best.\". While typing this out, I decided to make my CLAUDE.md file call me \"Harp Dog.\" This is a feature, not a bug.\n\nThe commands are also really nice. You can see some of mine in my dotfiles [here](https://github.com/harperreed/dotfiles/tree/master/.claude/commands).\n\n{{< image src=\"commands.png\"  >}}\n\nI used to use the commands way more, but it is a really great way to get a lot out of regularly used prompts. You can also pass arguments to the commands. For instance in my github issues command, you pass the issue number that you want claude to look at: `/user:gh-issue #45`\n\nClaude will now go and run through the \"prompt\" script that is defined in the `gh-issue.md` file.\n\nYou can also put these commands in a project directory, and make a custom CLAUDE.md in the project directory. I do this to make hugo, rust, go, or javascript specific commands per project.\n\n## \"Continue\"\n\n{{< image src=\"https://media4.giphy.com/media/v1.Y2lkPTc5MGI3NjExNDk3ZTZpdWYwdG5sdmpnaTJqNzJhYXlvcmp6bnNmdmhxaGdoeHJ4MyZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/l2Je3fIeeXyYEM85G/giphy.gif\" >}}\n\nSometimes I feel like that bird that Homer got to hit \"y\". I am just writing \"continue\" or pressing up and pasting in the same prompt.\n\nMost of the time the plans are about 8–12 steps. I can usually get through a Greenfield development plan in about 30–45 minutes regardless of apparent complexity or language.\n\nI was talking through with my friend Bob and he did not believe it. I asked him \"name a thing to build, a language to build it in - and let's see!\"\n\n{{< image src=\"R0000693.jpeg\" caption=\"Bob Swartz, Ricoh GRiiix, 11/17/2024\" >}}\n\nHe was like \"ok. A basic interpreter in C.\"\n\nThis wasn't ideal. I don't know C. I don't really know how to write an interpreter, nor do I really want to. But fuck it.\n\nI followed the above steps and Claude Code did great. We have [a working basic interpreter](https://github.com/harperreed/basic). The first version worked within an hour. I futzed with it for a few more hours and it is pretty good. Would it ship it in 1982? Probably not. You can see the [prompt plan here](https://raw.githubusercontent.com/harperreed/basic/refs/heads/main/docs/prompt_plan.md).\n\n## The Team\n\nOur entire team is using Claude Code currently. We are all approximately following the above process with a lot of person tweaks.\n\nWe are doing way way higher test coverage than we have ever done. We have better code, and it seems to be just as effective as the horrible code we wrote in the past. It is fun to glance at people working and see claude code running in ghostty, in vscode terminal, in zed terminal, and messing with python notebooks.\n\n{{< image src=\"dril.jpg\" >}}\n\nSomeone who has a lot of tokens, please help me budget this. My family is dying.\n\n## thanks\n\nTo all the folks who keep emailing me. It is really fun and nice to hear about your workflows, and projects. I really appreciate it. Keep em coming!\n\n# TRANSLATED TEXT\n# CONTEXT\nEsta es una entrada de blog sobre mis experiencias usando Claude Gen AI Agent para la generación de código.\n\n# TEXT TO TRANSLATE\nMe encanta esto de la codificación agéntica. Resulta muy convincente de muchas maneras.\n\nDesde que escribí [aquella entrada original del blog](/2025/02/16/my-llm-codegen-workflow-atm/) han pasado muchas cosas en el mundo Claude:\n\n- Claude Code\n- MCP\n- etc\n\nHe recibido cientos (wat) de correos de personas hablándome de sus flujos de trabajo y de cómo han usado el mío para adelantarse. He dado charlas en algunas conferencias y enseñado un par de clases sobre codegen. ¡También descubrí que las computadoras de verdad quieren corregir “codegen” a “codeine”, quién lo diría!\n\n{{< image src=\"codegen.png\"  >}}\n\nEl otro día hablaba con una [amiga](https://www.elidedbranches.com/) sobre cómo **estamos totalmente jodidos** y **la IA nos quitará el trabajo** (hablaré más de eso en otra entrada), y me dijo: «deberías escribir un post sobre Claude Code».\n\nPues vamos.\n\nClaude Code salió ocho días después de que publicara mi entrada original sobre el flujo de trabajo y, como predije, volvió irrelevante gran parte de ella. Desde entonces migré de Aider a Claude Code y no he mirado atrás. Aún me gusta Aider y tiene su uso, pero Claude Code es un poco más útil por ahora.\n\nClaude Code es potente y muchísimo más caro.\n\nMi flujo de trabajo es muy similar al de antes.\n\n- Charlo con `gpt-4o` para pulir la idea.\n- Uso el mejor modelo de razonamiento que encuentre para generar la especificación. Hoy en día es o1-pro u o3 (¿es o1-pro mejor que o3? ¿O solo siento que es mejor porque tarda más?).\n- Uso ese modelo de razonamiento para generar los prompts. Usar un LLM para crear prompts es un hack precioso. Además enfurece a los boomers.\n- Guardo `spec.md` y `prompt_plan.md` en la raíz del proyecto.\n- Luego escribo en Claude Code lo siguiente:\n\n```prompt\n1. Open **@prompt_plan.md** and identify any prompts not marked as completed.\n2. For each incomplete prompt:\n    - Double-check if it's truly unfinished (if uncertain, ask for clarification).\n    - If you confirm it's already done, skip it.\n    - Otherwise, implement it as described.\n    - Make sure the tests pass, and the program builds/runs\n    - Commit the changes to your repository with a clear commit message.\n    - Update **@prompt_plan.md** to mark this prompt as completed.\n3. After you finish each prompt, pause and wait for user review or feedback.\n4. Repeat with the next unfinished prompt as directed by the user.\n```\n\n- La magia de este prompt es que revisa el prompt plan, busca lo que no está marcado como completado y aborda la siguiente tarea pendiente. La sube a git y luego actualiza el prompt plan con lo que quedó completo. Cuando termina, se detiene y te pide continuar. 🤌\n\n- Después me recuesto y le digo a Claude `yes` mientras hace el trabajo. Aparecerá pidiendo feedback y la magia sucede.\n- Mucho más “cookie clicker”.\n\nEsto funciona de maravilla. Hay algunos superpoderes que puedes incrustar en tu proceso y que ayudan muchísimo.\n\n## ¡Programación defensiva!\n\n### Pruebas\n\nLas pruebas y el desarrollo guiado por pruebas (TDD) son imprescindibles. Recomiendo comprometerse de verdad a construir una práctica sólida de TDD.\n\nYo era un hater del TDD. Se me daba mal y sentía que perdía el tiempo. No estaba en lo cierto. Lol. Lo reconozco, y durante las últimas décadas añadimos muchas pruebas en nuestras empresas y proyectos. La mayoría se agregaron DESPUÉS de terminar el trabajo principal. Esto está bien para humanos.\n\nESTO ES MALO PARA LOS ROBOTS.\n\nLos robots AMAN el TDD. En serio, se lo devoran.\n\nCon TDD haces que tu amigo robot escriba la prueba y el mock. En el siguiente prompt conviertes el mock en algo real. Y al robot le fascina esto. Es el contrapeso más efectivo contra la alucinación y la deriva de alcance del LLM que he encontrado. De verdad ayuda a los robots a mantenerse en tarea.\n\n### Linting\n\nSoy un gran fan del linting. Es genial. Ruff es un producto maravilloso. Biome está guay. Clippy es divertido (y tiene buen nombre).\n\nPor alguna razón, a los ROBOTS les encanta ejecutar un buen linter.\n\nIncorporar la práctica de ejecutar el linter constantemente ha mantenido muchos bugs alejados y hace que el código sea más mantenible y fácil de leer. Esto ya lo sabes.\n\nAñade un buen formateador y todo queda precioso.\n\n### Hooks de pre-commit\n\nLa auténtica magia de todo esto es añadir estas tareas a un hook de pre-commit. Recomiendo el paquete de Python `pre-commit`. Puedes instalarlo fácilmente con `uv tools install pre-commit` y luego crear un bonito archivo `.pre-commit-config.yaml` y listo. Cada vez que intentes hacer commit, ejecutará todas esas maravillosas pruebas, comprobaciones de tipos, linting y lo que haga falta para asegurarse de que tu código es A+++ would execute again.\n\nEs un gran hack para trabajar con Claude Code. El robot QUIERE commit-ear a toda costa. Así que cuando le pides que haga algo de código y luego haga commit (como en el ejemplo de arriba) hará cambios salvajes, hará commit, inevitablemente lo estropeará y luego tendrá que arreglarlo.\n\nEsto es genial porque no atasca tus GitHub Actions con un montón de linting, formateo y comprobaciones de tipos que no pasan porque el robot estaba de malas.\n\n> A funny thing about claude is it CANNOT for the life of it figure out how to use `uv` correctly. It will pip install shit all over the place if you are not careful. And if you instruct it to use `uv` it will just use `uv pip install.` Maybe AGI isn't going to happen in June. so sad.\n\n### Claude.md y comandos\n\nAmbas son adiciones muy simples que exprimen mucho más.\n\n{{< image src=\"_SDI8149.jpg\" alt=\"Jesse at the studio, Sept 15, 2023, Ricoh GRiii\" caption=\"Jesse en el estudio, Sigma fp, 15/11/2023\" >}}\n\nLe robé un [CLAUDE.md](https://github.com/harperreed/dotfiles/blob/master/.claude/CLAUDE.md) a mi amigo [Jesse Vincent](https://fsck.com/), quien hizo [mucho trabajo para que fuera muy robusto](https://github.com/obra/dotfiles/blob/main/.claude/CLAUDE.md). Está bastante bien. Algunas cosas que incluye:\n\n- una versión ligera de la “big daddy rule”,\n- instrucciones sobre cómo hacer TDD,\n- indicaciones de estilo sobre cómo me gusta programar.\n\n> [@clint](https://instagram.com/clintecker) configured his CLAUDE.md to call him MR BEEF and it is currently embedding info about MR BEEF in our all documentation: \"If you're stuck, stop and ask for help—MR BEEF may know best.\". While typing this out, I decided to make my CLAUDE.md file call me \"Harp Dog.\" This is a feature, not a bug.\n\nLos comandos también son muy útiles. Puedes ver algunos de los míos en mis dotfiles [aquí](https://github.com/harperreed/dotfiles/tree/master/.claude/commands).\n\n{{< image src=\"commands.png\"  >}}\n\nAntes usaba los comandos mucho más, pero siguen siendo una forma estupenda de sacar provecho de prompts que usas a menudo. También puedes pasar argumentos a los comandos. Por ejemplo, en mi comando para issues de GitHub, le pasas el número de issue que quieres que Claude revise: `/user:gh-issue #45`\n\nClaude ejecutará entonces el script “prompt” que está definido en el archivo `gh-issue.md`.\n\nTambién puedes poner estos comandos en el directorio de un proyecto y crear un CLAUDE.md personalizado en dicho proyecto. Yo lo hago para tener comandos específicos de Hugo, Rust, Go o JavaScript por proyecto.\n\n## \"Continue\"\n\n{{< image src=\"https://media4.giphy.com/media/v1.Y2lkPTc5MGI3NjExNDk3ZTZpdWYwdG5sdmpnaTJqNzJhYXlvcmp6bnNmdmhxaGdoeHJ4MyZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/l2Je3fIeeXyYEM85G/giphy.gif\" >}}\n\nA veces me siento como ese pájaro que Homer hizo pulsar la tecla “y”. Solo estoy escribiendo “continue” o dándole a la flecha arriba y pegando el mismo prompt.\n\nLa mayoría de las veces los planes tienen entre 8 y 12 pasos. Suelo terminar un plan de desarrollo Greenfield en unos 30-45 minutos sin importar la complejidad aparente o el lenguaje.\n\nLo comenté con mi amigo Bob y no se lo creía. Le dije: «nombra algo que construir, un lenguaje de programación, ¡y veamos!»\n\n{{< image src=\"R0000693.jpeg\" caption=\"Bob Swartz, Ricoh GRiiix, 17/11/2024\" >}}\n\nY él dijo: «ok. Un intérprete de BASIC en C».\n\nNo era lo ideal. No sé C. Tampoco sé realmente cómo escribir un intérprete, ni me apetece. Pero qué demonios.\n\nSeguí los pasos anteriores y Claude Code lo hizo genial. Tenemos [un intérprete de BASIC funcional](https://github.com/harperreed/basic). La primera versión funcionó en una hora. Luego la toqueteé un par de horas más y quedó bastante bien. ¿Lo enviaría en 1982? Probablemente no. Puedes ver el [prompt plan aquí](https://raw.githubusercontent.com/harperreed/basic/refs/heads/main/docs/prompt_plan.md).\n\n## El equipo\n\nTodo nuestro equipo usa actualmente Claude Code. Seguimos más o menos el proceso anterior con bastantes ajustes personales.\n\nEstamos alcanzando una cobertura de pruebas muchísimo mayor que nunca. Tenemos mejor código y parece ser tan efectivo como el horrible código que escribíamos antes. Es divertido echar un vistazo a la gente trabajando y ver Claude Code funcionando en ghostty, en la terminal de VSCode, en la terminal de Zed y peleándose con notebooks de Python.\n\n{{< image src=\"dril.jpg\" >}}\n\nAlguien que tenga un montón de tokens, por favor ayúdeme a presupuestar esto. Mi familia se está muriendo.\n\n## gracias\n\nA todas las personas que siguen enviándome correos: es muy divertido y agradable saber de vuestros flujos de trabajo y proyectos. Lo aprecio muchísimo. ¡Seguid enviándolos!\n\nPlease review and improve the translated text to make it natural and accurate in spanish.\nReturn ONLY the improved translated text without explanations or comments.",
      "response": "Me encanta esto de la programación agéntica. Es muy atractiva en muchos sentidos.\n\nDesde que escribí [aquella entrada original del blog](/2025/02/16/my-llm-codegen-workflow-atm/) han pasado muchas cosas en el mundo Claude:\n\n- Claude Code\n- MCP\n- etc.\n\nHe recibido cientos (wat) de correos de personas contándome sus flujos de trabajo y cómo han usado el mío para ir un paso adelante. He dado charlas en varias conferencias y dictado un par de clases sobre codegen. ¡También descubrí que las computadoras insisten en corregir “codegen” a “codeine”! ¿Quién lo diría?\n\n{{< image src=\"codegen.png\"  >}}\n\nEl otro día hablaba con una [amiga](https://www.elidedbranches.com/) sobre cómo **estamos totalmente jodidos** y **la IA nos quitará el trabajo** (más sobre eso en otra entrada), y me dijo: «Deberías escribir un post sobre Claude Code».\n\nAllá vamos.\n\nClaude Code se lanzó ocho días después de que publicara mi entrada original sobre el flujo de trabajo y, como predije, volvió irrelevante gran parte de ella. Desde entonces migré de Aider a Claude Code y no he mirado atrás. Aún me gusta Aider y tiene sus usos, pero Claude Code es bastante más útil por ahora.\n\nClaude Code es potente y muchísimo más caro.\n\nMi flujo de trabajo es casi el mismo de antes.\n\n- Charlo con `gpt-4o` para pulir la idea.\n- Uso el mejor modelo de razonamiento que encuentro para generar la especificación. Hoy en día es o1-pro u o3 (¿es o1-pro mejor que o3? ¿O solo lo siento así porque tarda más?).\n- Con ese modelo genero los prompts. Usar un LLM para crear prompts es un hack precioso. Además enfurece a los boomers.\n- Guardo `spec.md` y `prompt_plan.md` en la raíz del proyecto.\n- Luego escribo en Claude Code lo siguiente:\n\n```prompt\n1. Open **@prompt_plan.md** and identify any prompts not marked as completed.\n2. For each incomplete prompt:\n    - Double-check if it's truly unfinished (if uncertain, ask for clarification).\n    - If you confirm it's already done, skip it.\n    - Otherwise, implement it as described.\n    - Make sure the tests pass, and the program builds/runs.\n    - Commit the changes to your repository with a clear commit message.\n    - Update **@prompt_plan.md** to mark this prompt as completed.\n3. After you finish each prompt, pause and wait for user review or feedback.\n4. Repeat with the next unfinished prompt as directed by the user.\n```\n\nLa magia de este prompt es que revisa el prompt plan, busca lo que no está marcado como completado y aborda la siguiente tarea pendiente. Hace commit en git y luego actualiza el prompt plan con lo que quedó completado. Cuando termina, se detiene y te pide continuar. 🤌\n\nLuego me relajo y le digo a Claude `yes` mientras hace el trabajo. Pide feedback y la magia sucede.\nMás “cookie clicker”.\n\nEsto funciona de maravilla. Hay algunos superpoderes que puedes incorporar a tu proceso y que ayudan muchísimo.\n\n## ¡Programación defensiva!\n\n### Pruebas\n\nLas pruebas y el desarrollo guiado por pruebas (TDD) son imprescindibles. Recomiendo comprometerse de verdad a construir una práctica sólida de TDD.\n\nYo era un hater del TDD. Se me daba fatal y sentía que perdía el tiempo. Estaba equivocado. Lol. Lo reconozco, y durante las últimas décadas añadimos muchas pruebas en nuestras empresas y proyectos. La mayoría se agregaron DESPUÉS de terminar el trabajo principal. Esto está bien para humanos.\n\nESTO ES MALO PARA LOS ROBOTS.\n\nLos robots AMAN el TDD. En serio, se lo devoran.\n\nCon TDD tu amigo robot escribe la prueba y el mock. En el siguiente prompt conviertes el mock en algo real. Y al robot le fascina. Es el contrapeso más efectivo contra la alucinación y la deriva de alcance del LLM que he encontrado. De verdad ayuda a los robots a mantenerse enfocados.\n\n### Linting\n\nSoy un gran fan del linting. Es genial. Ruff es maravilloso. Biome está guay. Clippy es divertido (y tiene buen nombre).\n\nPor alguna razón, a los ROBOTS les encanta ejecutar un buen linter.\n\nEjecutar el linter constantemente mantiene muchos bugs alejados y hace que el código sea más mantenible y fácil de leer. Esto ya lo sabes.\n\nAñade un buen formateador y todo queda precioso.\n\n### Hooks de pre-commit\n\nLa auténtica magia de todo esto es añadir estas tareas a un hook de pre-commit. Recomiendo el paquete de Python `pre-commit`. Puedes instalarlo fácilmente con `uv tools install pre-commit` y luego crear un bonito archivo `.pre-commit-config.yaml`, y listo. Cada vez que intentes hacer commit ejecutará todas esas pruebas, comprobaciones de tipos, linting y lo que sea necesario para asegurarse de que tu código es A+++ y volvería a ejecutarse.\n\nEs un gran hack para trabajar con Claude Code. El robot QUIERE hacer commit a toda costa. Así que, cuando le pides que escriba código y luego haga commit (como en el ejemplo de arriba), hará cambios salvajes, los confirmará, inevitablemente lo estropeará y luego tendrá que arreglarlo.\n\nEsto es genial porque no atasca tus GitHub Actions con un montón de linting, formateo y comprobaciones de tipos que no pasan porque el robot estaba de malas.\n\n> Algo curioso de Claude es que NO PUEDE, por más que lo intente, aprender a usar `uv` correctamente. Si no tienes cuidado hará `pip install` por todas partes. Y si le dices que use `uv`, solo hará `uv pip install`. Tal vez la AGI no llegue en junio. Triste.\n\n### Claude.md y comandos\n\nAmbas son adiciones muy simples que permiten exprimir mucho más.\n\n{{< image src=\"_SDI8149.jpg\" alt=\"Jesse at the studio, Sept 15, 2023, Ricoh GRiii\" caption=\"Jesse en el estudio, Sigma fp, 15/11/2023\" >}}\n\nLe robé un [CLAUDE.md](https://github.com/harperreed/dotfiles/blob/master/.claude/CLAUDE.md) a mi amigo [Jesse Vincent](https://fsck.com/), quien hizo [mucho trabajo para que fuera muy robusto](https://github.com/obra/dotfiles/blob/main/.claude/CLAUDE.md). Está bastante bien. Incluye, por ejemplo:\n\n- una versión ligera de la big daddy rule,\n- instrucciones sobre cómo hacer TDD,\n- indicaciones de estilo sobre cómo me gusta programar.\n\n> [@clint](https://instagram.com/clintecker) configuró su CLAUDE.md para que lo llame MR BEEF y ahora toda nuestra documentación incluye referencias a MR BEEF: “If you're stuck, stop and ask for help—MR BEEF may know best.” Mientras escribía esto decidí que mi CLAUDE.md me llame “Harp Dog”. Es una feature, no un bug.\n\nLos comandos también son muy útiles. Puedes ver algunos de los míos en mis dotfiles [aquí](https://github.com/harperreed/dotfiles/tree/master/.claude/commands).\n\n{{< image src=\"commands.png\"  >}}\n\nAntes usaba los comandos mucho más, pero siguen siendo una forma estupenda de sacar partido a prompts que usas a menudo. También puedes pasar argumentos a los comandos. Por ejemplo, en mi comando para issues de GitHub le pasas el número de issue que quieres que Claude revise: `/user:gh-issue #45`\n\nClaude ejecutará entonces el script “prompt” que está definido en `gh-issue.md`.\n\nTambién puedes colocar estos comandos en el directorio del proyecto y crear un CLAUDE.md personalizado allí. Yo lo hago para tener comandos específicos de Hugo, Rust, Go o JavaScript según el proyecto.\n\n## \"Continue\"\n\n{{< image src=\"https://media4.giphy.com/media/v1.Y2lkPTc5MGI3NjExNDk3ZTZpdWYwdG5sdmpnaTJqNzJhYXlvcmp6bnNmdmhxaGdoeHJ4MyZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/l2Je3fIeeXyYEM85G/giphy.gif\" >}}\n\nA veces me siento como ese pájaro que Homer puso a pulsar la tecla “y”. Solo escribo “continue” o presiono la flecha arriba y pego el mismo prompt.\n\nLa mayoría de las veces los planes tienen entre 8 y 12 pasos. Suelo terminar un plan de desarrollo Greenfield en 30-45 minutos, sin importar la complejidad aparente o el lenguaje.\n\nLo comenté con mi amigo Bob y no se lo creía. Le dije: «Nombra algo que construir y un lenguaje: ¡veamos!»\n\n{{< image src=\"R0000693.jpeg\" caption=\"Bob Swartz, Ricoh GRiiix, 17/11/2024\" >}}\n\nÉl respondió: «OK. Un intérprete de BASIC en C».\n\nNo era lo ideal. No sé C. Tampoco sé realmente cómo escribir un intérprete, ni me apetece. Pero qué demonios.\n\nSeguí los pasos anteriores y Claude Code lo hizo genial. Tenemos [un intérprete de BASIC funcional](https://github.com/harperreed/basic). La primera versión funcionó en una hora. Luego lo toqueteé un par de horas más y quedó bastante bien. ¿Lo enviaría en 1982? Probablemente no. Puedes ver el [prompt plan aquí](https://raw.githubusercontent.com/harperreed/basic/refs/heads/main/docs/prompt_plan.md).\n\n## El equipo\n\nTodo nuestro equipo usa actualmente Claude Code. Seguimos más o menos el proceso anterior, con bastantes ajustes personales.\n\nEstamos alcanzando una cobertura de pruebas muchísimo mayor que nunca. Tenemos mejor código y parece ser tan efectivo como el horrible código que escribíamos antes. Es divertido echar un vistazo a la gente trabajando y ver Claude Code corriendo en ghostty, en la terminal de VS Code, en la terminal de Zed y peleándose con notebooks de Python.\n\n{{< image src=\"dril.jpg\" >}}\n\nAlguien que tenga un montón de tokens, por favor ayúdeme a presupuestar esto. Mi familia se está muriendo.\n\n## Gracias\n\nA todas las personas que siguen enviándome correos: es muy divertido y agradable saber de vuestros flujos de trabajo y proyectos. Lo aprecio muchísimo. ¡Seguid enviándolos!",
      "usage": {
        "prompt_tokens": 5239,
        "completion_tokens": 2319,
        "total_tokens": 7558
      },
      "streaming": true
    },
    "critique": {
      "model": "o3",
      "target_language": "spanish",
      "system_prompt": "You are a highly critical professional translator and linguistic expert specializing in spanish.\nYour task is to ruthlessly critique the translation by:\n\n1. Meticulously comparing the translated text with the original, identifying ANY inaccuracies, mistranslations, or omissions\n2. Highlighting nuances, cultural references, or idioms that were lost or mistranslated\n3. Scrutinizing for grammatical errors, awkward phrasing, or unnatural expressions in spanish\n4. Checking for inconsistencies in tone, style, or register compared to the original\n5. Verifying that technical terms are translated accurately and consistently\n6. Ensuring no content was accidentally skipped or added\n7. Finding places where the translation sounds machine-like or overly literal\n\nBe extremely thorough and critical in your assessment. Do not accept mediocre translations.\nList specific issues and suggestions for improvement, organized by severity and category.\nYour critique should be detailed enough for another translator to address all the issues.\n\nYour goal is to help create a perfect translation that reads as if originally written in spanish while being 100% faithful to the source.\n",
      "user_prompt": "# ORIGINAL TEXT\nI really like this agentic coding thing. It is quite compelling in so many ways.\n\nSince I wrote [that original blog post](/2025/02/16/my-llm-codegen-workflow-atm/) a lot has happened in Claude land:\n\n- Claude Code\n- MCP\n- etc\n\nI have received hundreds (wat) of emails from people talking about their workflows and how they have used my workflow to get ahead. I have spoken at a few conferences, and taught a few classes about codegen. I have learned that computers really want to spellcheck codegen to codeine, who knew!\n\n{{< image src=\"codegen.png\"  >}}\n\nI was talking to a [friend](https://www.elidedbranches.com/) the other day about how we are **all totally fucked** and **AI will take our jobs** (more on that in a later post), and she was like \"you should write a post about claude code.\"\n\nHere we go.\n\nClaude Code was released eight days after I wrote my original workflow blog post, and as I predicted, it made a lot of my post irrelevant. I have since migrated from Aider to Claude Code and not looked back. I still like Aider, and it has a distinct use, but Claude Code is a bit more useful atm.\n\nClaude Code is powerful, and a hell of a lot more expensive.\n\nMy workflow is very similar to what it was before.\n\n- I chat with `gpt-4o` to hone my idea\n- I use the best reasoning model I can find to generate the spec. These days it is o1-pro or o3 (is o1-pro better than o3? Or do I feel like it is better cuz it takes longer?)\n- I use the reasoning model to generate the prompts. Using an LLM to generate prompts is a beautiful hack. It makes boomers mad too.\n- I save the spec.md, and the prompt_plan.md in the root of the project.\n- I then type into claude code the following:\n\n```prompt\n1. Open **@prompt_plan.md** and identify any prompts not marked as completed.\n2. For each incomplete prompt:\n    - Double-check if it's truly unfinished (if uncertain, ask for clarification).\n    - If you confirm it's already done, skip it.\n    - Otherwise, implement it as described.\n    - Make sure the tests pass, and the program builds/runs\n    - Commit the changes to your repository with a clear commit message.\n    - Update **@prompt_plan.md** to mark this prompt as completed.\n3. After you finish each prompt, pause and wait for user review or feedback.\n4. Repeat with the next unfinished prompt as directed by the user.\n```\n\n- The magic with this prompt is that it checks the prompt plan. Looks for things that are not marked as completed, then does the next remaining task. It commits it to git, and then updates the prompt plan with what is complete. It then pops up and asks you to continue once it is done. 🤌\n\n- I then kick back and tell claude `yes` while it does the work. It will pop up for feedback, and magic happens.\n- Lots more cookie clicker.\n\nThis works super well. There are a few superpowers you can embed in your process that will really help.\n\n## Defensive coding!\n\n### Testing\n\nTesting and test-driven development is a must. I highly recommend really engaging in building out a robust TDD practice.\n\nI was a TDD hater. I was bad at it and I felt like I was wasting time. I was not correct. Lol. I recognize that, and we built in a lot of testing into our companies and projects over the past few decades. Most of the testing was added AFTER the core work was done. This is fine for humans.\n\nTHIS IS BAD FOR ROBOTS.\n\nThe robots LOVE TDD. Seriously. They eat it up.\n\nWith TDD you have the robot friend build out the test, and the mock. Then your next prompt you build the mock to be real. And the robot just loves this. It is the most effective counter to hallucination and LLM scope drift I have found. It really helps the robots to stay on task.\n\n### Linting\n\nI am such a fan of linting. It is so nice. Ruff is a wonderful product. Biome is cool. Clippy is fun (and a good name).\n\nFor whatever reason the ROBOTS love to run a good linter.\n\nBuilding in the practice to run the linter constantly has kept a lot of bugs away, and kept the code more maintainable and easier to read. You know this already.\n\nAdd in a good formatter and everything is beautiful.\n\n### Pre Commit hooks\n\nThe real magic of all this is to add these tasks to a pre-commit hook. I recommend the pre-commit python package. You can easily use it via an `uv tools install pre-commit` command and then just build out a nice `.pre-commit-config.yaml` file and bam. Every time you try and commit it will run all these wonderful tests, type checking, linting, and whatnot to make sure your code is A+++ would execute again.\n\nThis is a great hack for working with Claude Code. The robot REALLLLLY wants to commit. So when you instruct it to do some code and then commit (like I did above) it will make wild code changes, commit the code, inevitably fuck it all up and then have to fix it.\n\nThis is nice cuz it doesn't clog your GitHub actions with a bunch of linting, formatting, and type checking execution that doesn't pass cuz the robot was in a mood.\n\n> A funny thing about claude is it CANNOT for the life of it figure out how to use `uv` correctly. It will pip install shit all over the place if you are not careful. And if you instruct it to use `uv` it will just use `uv pip install.` Maybe AGI isn't going to happen in June. so sad.\n\n### Claude.md and commands\n\nThese are both really simple additions that can squeeze a lot out.\n\n{{< image src=\"_SDI8149.jpg\" alt=\"Jesse at the studio, Sept 15, 2023, Ricoh GRiii\" caption=\"Jesse at the studio, Sigma fp, 11/15/2023\" >}}\n\nI stole a [CLAUDE.md](https://github.com/harperreed/dotfiles/blob/master/.claude/CLAUDE.md) from my friend [Jesse Vincent](https://fsck.com/) who did an [awful lot of work on making it very robust](https://github.com/obra/dotfiles/blob/main/.claude/CLAUDE.md). It is quite nice. Some things that are built into it:\n\n- a light version of the big daddy rule.\n- instructions on how to do TDD\n- stylistic instructions on how I like to code.\n\n> [@clint](https://instagram.com/clintecker) configured his CLAUDE.md to call him MR BEEF and it is currently embedding info about MR BEEF in our all documentation: \"If you're stuck, stop and ask for help—MR BEEF may know best.\". While typing this out, I decided to make my CLAUDE.md file call me \"Harp Dog.\" This is a feature, not a bug.\n\nThe commands are also really nice. You can see some of mine in my dotfiles [here](https://github.com/harperreed/dotfiles/tree/master/.claude/commands).\n\n{{< image src=\"commands.png\"  >}}\n\nI used to use the commands way more, but it is a really great way to get a lot out of regularly used prompts. You can also pass arguments to the commands. For instance in my github issues command, you pass the issue number that you want claude to look at: `/user:gh-issue #45`\n\nClaude will now go and run through the \"prompt\" script that is defined in the `gh-issue.md` file.\n\nYou can also put these commands in a project directory, and make a custom CLAUDE.md in the project directory. I do this to make hugo, rust, go, or javascript specific commands per project.\n\n## \"Continue\"\n\n{{< image src=\"https://media4.giphy.com/media/v1.Y2lkPTc5MGI3NjExNDk3ZTZpdWYwdG5sdmpnaTJqNzJhYXlvcmp6bnNmdmhxaGdoeHJ4MyZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/l2Je3fIeeXyYEM85G/giphy.gif\" >}}\n\nSometimes I feel like that bird that Homer got to hit \"y\". I am just writing \"continue\" or pressing up and pasting in the same prompt.\n\nMost of the time the plans are about 8–12 steps. I can usually get through a Greenfield development plan in about 30–45 minutes regardless of apparent complexity or language.\n\nI was talking through with my friend Bob and he did not believe it. I asked him \"name a thing to build, a language to build it in - and let's see!\"\n\n{{< image src=\"R0000693.jpeg\" caption=\"Bob Swartz, Ricoh GRiiix, 11/17/2024\" >}}\n\nHe was like \"ok. A basic interpreter in C.\"\n\nThis wasn't ideal. I don't know C. I don't really know how to write an interpreter, nor do I really want to. But fuck it.\n\nI followed the above steps and Claude Code did great. We have [a working basic interpreter](https://github.com/harperreed/basic). The first version worked within an hour. I futzed with it for a few more hours and it is pretty good. Would it ship it in 1982? Probably not. You can see the [prompt plan here](https://raw.githubusercontent.com/harperreed/basic/refs/heads/main/docs/prompt_plan.md).\n\n## The Team\n\nOur entire team is using Claude Code currently. We are all approximately following the above process with a lot of person tweaks.\n\nWe are doing way way higher test coverage than we have ever done. We have better code, and it seems to be just as effective as the horrible code we wrote in the past. It is fun to glance at people working and see claude code running in ghostty, in vscode terminal, in zed terminal, and messing with python notebooks.\n\n{{< image src=\"dril.jpg\" >}}\n\nSomeone who has a lot of tokens, please help me budget this. My family is dying.\n\n## thanks\n\nTo all the folks who keep emailing me. It is really fun and nice to hear about your workflows, and projects. I really appreciate it. Keep em coming!\n\n# CURRENT TRANSLATION\nMe flipa el *agentic coding* (programación agentiva). Es muy atractivo en muchos sentidos.\n\nDesde que escribí [aquella entrada original del blog](/2025/02/16/my-llm-codegen-workflow-atm/) han pasado un montón de cosas en el mundo de Claude:\n\n- Claude Code\n- MCP\n- etc\n\nHe recibido cientos (wat) de correos de gente contándome sus flujos de trabajo y cómo han usado el mío para sacar provecho. He impartido charlas en varias conferencias y dado algunas clases sobre *codegen*. También he descubierto que los ordenadores se empeñan en corregir “codegen” a “codeine”. ¡Quién lo diría!\n\n{{< image src=\"codegen.png\"  >}}\n\nEl otro día hablaba con una [amiga](https://www.elidedbranches.com/) sobre cómo **estamos totalmente jodidos** y **la IA nos va a quitar el curro** (ya hablaré de eso en otra entrada). Ella me dijo: «Deberías escribir un post sobre Claude Code».\n\nAquí vamos.\n\nClaude Code salió ocho días después de que publicara mi entrada original sobre el flujo de trabajo y, como predije, dejó gran parte de ella obsoleta. Desde entonces migré de Aider a Claude Code y no he vuelto a mirar atrás. Sigo apreciando Aider —tiene su momento—, pero Claude Code me resulta bastante más útil ahora mismo.\n\nClaude Code es potentísimo… y carísimo a más no poder.\n\nMi flujo de trabajo sigue siendo casi el mismo de antes:\n\n- Charlo con `gpt-4o` para afinar la idea  \n- Uso el mejor modelo de razonamiento que encuentre para generar la *spec*. Hoy es o1-pro o bien o3 (¿es o1-pro mejor que o3 o solo me lo parece porque tarda más?)  \n- Con ese modelo genero los *prompts* (instrucciones). Usar un LLM para crear *prompts* es un hack precioso; además cabrea a los boomers.  \n- Guardo `spec.md` y `prompt_plan.md` en la raíz del proyecto.  \n- Después le paso a Claude Code lo siguiente:\n\n```prompt\n1. Open **@prompt_plan.md** and identify any prompts not marked as completed.\n2. For each incomplete prompt:\n    - Double-check if it's truly unfinished (if uncertain, ask for clarification).\n    - If you confirm it's already done, skip it.\n    - Otherwise, implement it as described.\n    - Make sure the tests pass, and the program builds/runs\n    - Commit the changes to your repository with a clear commit message.\n    - Update **@prompt_plan.md** to mark this prompt as completed.\n3. After you finish each prompt, pause and wait for user review or feedback.\n4. Repeat with the next unfinished prompt as directed by the user.\n```\n\nLa magia de este *prompt* es que revisa el *prompt plan*, busca lo que aún no está marcado como completado y aborda la siguiente tarea pendiente. Hace *commit* en Git, actualiza el *prompt plan* con lo que ya está listo y, al terminar, se planta para pedirte que continúes. 🤌\n\nEntonces me relajo y me limito a escribir `yes` mientras Claude curra. Pide *feedback* y la magia sucede. Y yo, mientras, hago más clics que en *Cookie Clicker*.\n\nEsto funciona de lujo. Hay un par de superpoderes que puedes incorporar a tu proceso y que ayudan muchísimo.\n\n## ¡Programación defensiva!\n\n### Pruebas\n\nLas pruebas y el desarrollo guiado por pruebas (*TDD*) son imprescindibles. Te recomiendo comprometerte de verdad con una práctica sólida de TDD.\n\nYo odiaba el TDD. Se me daba fatal y sentía que estaba perdiendo el tiempo. Estaba equivocado, lol. Lo reconozco: durante las últimas décadas metimos un montón de pruebas en nuestras empresas y proyectos. La mayoría se añadieron DESPUÉS de terminar el núcleo. Esto está bien para humanos.\n\n*ESTO ES NEFASTO PARA LOS ROBOTS.*\n\nA los robots les encanta el TDD. En serio, lo devoran.\n\nCon TDD tu colega robot escribe la prueba y el *mock*; en el siguiente *prompt* conviertes el *mock* en código real. Y al robot le chifla. Es el antídoto más efectivo que he encontrado contra las alucinaciones y la deriva de alcance de los LLM. Les ayuda muchísimo a mantenerse enfocados.\n\n### *Linting*\n\nSoy fan del *linting*. Es una gozada. Ruff es maravilloso, Biome mola y Clippy es divertido (y el nombre es top).\n\nPor alguna razón los robots disfrutan ejecutando un buen *linter*.\n\nTenerlo configurado para que se ejecute todo el rato mantiene muchos *bugs* a raya y deja el código más mantenible y legible. Ya lo sabes.\n\nAñade un *formatter* decente y todo queda precioso.\n\n### Hooks de *pre-commit*\n\nLa auténtica magia está en meter todas estas tareas en un *hook* de *pre-commit*. Recomiendo el paquete de Python `pre-commit`. Puedes instalarlo con `uv tools install pre-commit`, crear un archivo `.pre-commit-config.yaml` chulo y ¡bam! Cada vez que intentes hacer *commit* correrá pruebas, *type checking*, *linting*, etc., para asegurarse de que tu código es A+++; lo volvería a ejecutar sin dudar.\n\nEsto es un gran hack para trabajar con Claude Code. El robot QUIERE hacer *commit* sí o sí. Así que cuando le pides que escriba código y luego haga *commit* (como arriba), hará cambios salvajes, hará *commit*, inevitablemente lo fastidiará todo y luego tendrá que arreglarlo.\n\nY es fantástico porque no atasca tus GitHub Actions con montones de *linting*, formato y *type checking* que fallan porque el robot estaba de malas.\n\n> Algo curioso de Claude es que NO PUEDE, ni a tiros, aprender a usar `uv` correctamente. Si te descuidas hará `pip install` a lo loco. Y si le ordenas usar `uv`, se limitará a hacer `uv pip install`. Igual la AGI no llega en junio… qué pena.\n\n### CLAUDE.md y comandos\n\nSon dos añadidos muy simples que permiten sacar muchísimo más partido.\n\n{{< image src=\"_SDI8149.jpg\" alt=\"Jesse at the studio, Sept 15, 2023, Ricoh GRiii\" caption=\"Jesse en el estudio, Sigma fp, 15 de noviembre de 2023\" >}}\n\nLe mangué un [CLAUDE.md](https://github.com/harperreed/dotfiles/blob/master/.claude/CLAUDE.md) a mi colega [Jesse Vincent](https://fsck.com/), que se pegó [un currazo brutal para dejarlo ultra robusto](https://github.com/obra/dotfiles/blob/main/.claude/CLAUDE.md). Está de lujo. Incluye, por ejemplo:\n\n- una versión light de la *big daddy rule*  \n- instrucciones sobre cómo hacer TDD  \n- pautas de estilo sobre mi forma de programar  \n\n> [@clint](https://instagram.com/clintecker) configuró su CLAUDE.md para que lo llame MR BEEF y ahora toda nuestra documentación suelta perlas de MR BEEF: «If you're stuck, stop and ask for help—MR BEEF may know best.» Mientras escribía esto, decidí que mi CLAUDE.md me llame “Harp Dog”. Es una *feature*, no un *bug*.\n\nLos comandos también son muy prácticos. Puedes ver algunos de los míos en mis dotfiles [aquí](https://github.com/harperreed/dotfiles/tree/master/.claude/commands).\n\n{{< image src=\"commands.png\"  >}}\n\nAntes los usaba mucho más, pero siguen siendo una forma estupenda de sacar partido a *prompts* recurrentes. Además puedes pasar argumentos. Por ejemplo, en mi comando para *issues* de GitHub le pasas el número de *issue* que quieres que Claude mire: `/user:gh-issue #45`\n\nClaude ejecutará entonces el *prompt* definido en el archivo `gh-issue.md`.\n\nTambién puedes colocar estos comandos en el directorio del proyecto y crear un CLAUDE.md personalizado ahí. Yo lo hago para tener comandos específicos de Hugo, Rust, Go o JavaScript según el proyecto.\n\n## \"Continue\"\n\n{{< image src=\"https://media4.giphy.com/media/v1.Y2lkPTc5MGI3NjExNDk3ZTZpdWYwdG5sdmpnaTJqNzJhYXlvcmp6bnNmdmhxaGdoeHJ4MyZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/l2Je3fIeeXyYEM85G/giphy.gif\" >}}\n\nA veces me siento como ese pájaro con la cabeza oscilante que Homer puso a pulsar la tecla “y”: solo escribo “continue” o pulso la flecha arriba y pego el mismo *prompt*.\n\nLa mayoría de los planes tienen entre 8 y 12 pasos. Suelo terminar un desarrollo *greenfield* en 30–45 min sin importar la complejidad aparente o el lenguaje.\n\nSe lo contaba a mi amigo Bob y no me creía. Le dije: «Nómbrame algo que construir y un lenguaje: ¡veamos!»\n\n{{< image src=\"R0000693.jpeg\" caption=\"Bob Swartz, Ricoh GRiiix, 17 de noviembre de 2024\" >}}\n\nÉl soltó: «Vale. Un intérprete de BASIC en C».\n\nNo era lo ideal. No sé C, tampoco sé realmente escribir un intérprete y, francamente, me da igual. Pero qué demonios.\n\nSeguí los pasos de arriba y Claude Code lo bordó. Tenemos [un intérprete de BASIC que funciona](https://github.com/harperreed/basic). La primera versión estuvo lista en una hora. Luego la pulí un par más y quedó bastante decente. ¿La habría lanzado en 1982? Probablemente no. Puedes ver el [prompt plan aquí](https://raw.githubusercontent.com/harperreed/basic/refs/heads/main/docs/prompt_plan.md).\n\n## El equipo\n\nTodo nuestro equipo usa ahora Claude Code. Seguimos más o menos el proceso anterior, con bastantes retoques personales.\n\nEstamos logrando una cobertura de pruebas muchísimo mayor que nunca. Tenemos mejor código y parece ser tan eficaz como el código horrible que escribíamos antes. Es divertido pasear la vista y ver Claude Code corriendo en Ghostty, en la terminal de VS Code, en la terminal de Zed y trasteando con *notebooks* de Python.\n\n{{< image src=\"dril.jpg\" >}}\n\nAlguien con un montón de tokens, por favor, ayúdame a presupuestar esto. Mi familia se está arruinando.\n\n## Gracias\n\nA todas las personas que siguen enviándome correos: es divertidísimo y un placer conocer vuestros flujos de trabajo y proyectos. Lo agradezco un montón. ¡Seguid enviándolos!\n\nPlease critique this translation mercilessly and provide detailed feedback on what needs to be improved.\nFormat your critique as a structured list of issues, organized by severity and category.\nInclude specific suggestions for how to fix each issue.",
      "response": "MERCILESS REVIEW OF THE SPANISH VERSION  \n\n───────────────────────────────────────────────  \nLEGEND  \n• CR = Critical (meaning changes, omissions, false additions)  \n• MJ = Major (tone, nuance, technical consistency, register)  \n• MN = Minor (style polish, punctuation, fluency)  \n\nFor each point I quote the English source (EN) and the current Spanish (ES), identify the problem, then propose a fix.\n\n================================================\n1. ACCURACY: MISTRANSLATIONS, OMISSIONS, ADDITIONS\n================================================\n\nCR-1  “Someone who has a lot of tokens, please help me budget this. **My family is dying.**”  \nES: “Alguien con un montón de tokens, por favor, ayúdame a presupuestar esto. **Mi familia se está arruinando.**”  \nIssue “se está arruinando” (going broke) waters down the dark-humour hyperbole “is dying”.  \nFix “…Mi familia se muere.” (or “mi familia se está muriendo”). Keep the comic exaggeration.\n\nCR-2  “I then kick back and tell **claude** `yes` …” (brand written lowercase in source)  \nES: “Entonces me relajo y me limito a escribir `yes` mientras **Claude** curra.”  \nIssue Capitalisation changed; could confuse CLI command vs. product brand.  \nFix Maintain lowercase when it refers to the CLI/bot: “…mientras **claude** curra.”\n\nCR-3  “It commits it to git, and then updates the prompt plan…”  \nES: “Hace *commit* en Git, actualiza el *prompt plan*…”  \nIssue Capitalising “Git” suggests company/product, not VCS command; in CLI context “git” is lowercase.  \nFix “…hace *commit* con **git**, actualiza…”\n\nCR-4  “THIS IS BAD FOR ROBOTS.”  \nES: “*ESTO ES NEFASTO PARA LOS ROBOTS.*”  \nIssue Loss of typographic shouting (“BAD”) — “nefasto” adds nuance but weakens original bluntness.  \nFix “ESTO ES **MALO** PARA LOS ROBOTS.” (All caps, literal)\n\nCR-5  “It makes boomers mad too.”  \nES: “además cabrea a los boomers.”  \nIssue Omitted subject “it” (“también” is clearer) and lost humour beat order.  \nFix “También hace que los boomers se enfaden.”\n\nCR-6  Omitted micro-sentence “Lots more cookie clicker.”  \nES merges with previous line; reader may not catch it as a stand-alone joke.  \nFix Keep on its own: “Y muchos más clics de Cookie Clicker.”\n\nCR-7  “Regardless of apparent complexity or language.”  \nES: “sin importar la complejidad aparente o el lenguaje.”  \nIssue Missing definite article “el”: “o **el** lenguaje.” (Spanish grammar)\n\nCR-8  In hook section: “Every time you try and commit it will run all these wonderful tests, type checking, linting, and whatnot to make sure your code is A+++ **would execute again.**”  \nES: “…para asegurarse de que tu código es A+++; **lo volvería a ejecutar sin dudar.**”  \nIssue Original phrase means “would pass again”, not “would execute again”.  \nFix “…para asegurar que tu código sea A+++ y volvería a **aprobar** cada vez.”\n\n================================================\n2. NUANCE / REGISTER / CULTURAL EQUIVALENCE\n================================================\n\nMJ-1  “Me flipa” for “I really like”  \nHyper-colloquial Iberian-Spanish; narrows audience. A more neutral yet informal “Me encanta” or “Me mola mucho” preserves tone without regional bias.\n\nMJ-2  Slang “curra”, “mola”, “qué demonios”, “le mangué”  \nAll distinctly Peninsular. Source is informal but not region-locked. Consider neutral pan-Hispanic options: “trabaja”, “está genial”, “qué rayos”, “le tomé prestado”.\n\nMJ-3  “Programación agentiva”  \n“Agentic” in psychology ≈ “agéntico”. “Agentivo” actually means a grammatical voice. Suggest “programación agéntica” or keep English italic “agentic coding”.\n\nMJ-4  “Hooks de *pre-commit*” vs “pre-commit hooks”  \nIn Spanish tech writing order usually “hooks de pre-commit” is fine, but maintain italics consistently (some parts italics, others not).\n\nMJ-5  “A más no poder” intensifier + ellipsis abuse  \nTone ok but piling colloquialisms (“potentísimo… y carísimo a más no poder”) plus ellipsis can read over-dramatic. One element is enough.\n\n================================================\n3. TECHNICAL CONSISTENCY\n================================================\n\nMJ-6  File names and commands should appear exactly as in source.  \nExamples: “@prompt_plan.md” sometimes shown in bold, sometimes not; “CLAUDE.md” all caps. Pick one convention and stick to it.\n\nMJ-7  “spec.md” vs “`spec.md`”  \nSometimes the backticks are lost; keep monospaced formatting for all filenames.\n\nMJ-8  “greenfield” left italic but not defined. Acceptable, yet could add a parenthetical “(desde cero)”.\n\n================================================\n4. GRAMMAR / PUNCTUATION / TYPOGRAPHY\n================================================\n\nMN-1  Comma splice: “Sigo apreciando Aider —tiene su momento—, pero Claude Code me resulta…”  \nEn dash is fine, but remove preceding comma: “Aider —tiene su momento— pero”.\n\nMN-2  quotes: sometimes smart quotes «», sometimes English quotes “”. Pick one.\n\nMN-3  Inconsistent italicisation of English terms (“spec”, “prompt plan”, “linting”). Choose a style guide (e.g., italicise first-time foreign term, roman afterwards).\n\nMN-4  Capitalisation of headings (“## ¡Programación defensiva!”) — Spanish titles in sentence case, so: “## Programación defensiva”.\n\nMN-5  Duplicated ellipses and exclamations (“potentísimo… y carísimo…”). Limit to one ellipse; avoid “…lol.” (punctuation duplication)\n\n================================================\n5. MACHINE-LIKE / STIFF SEGMENTS\n================================================\n\nMN-6  Sections that quote entire English paragraphs (the prompt) without any framing note may feel copy-pasted. Add “(en inglés en el original)” or translate comments inside list items to maintain flow.\n\nMN-7  Literal calque “Esto es un gran hack” — “hack” is imported, but “truco” or “atajo” fits Spanish idiom while keeping geek flavour: “Es un truco buenísimo”.\n\n================================================\nSUMMARY OF KEY FIXES\n================================================\n• Restore hyperbole: “Mi familia se muere”  \n• Use lowercase “claude” and “git” when referring to commands.  \n• Adjust overly Iberian slang if aiming for broader audience.  \n• Tighten technical formatting consistency (code font, bold, caps).  \n• Keep shouting/capitalisation where source shouts.  \n• Correct minor grammar (articles, commas) and polish ellipsis/quote style.  \n\nWith these changes the translation will remain faithful, preserve humour, and read as original Spanish prose rather than an English shadow.",
      "usage": {
        "prompt_tokens": 5223,
        "completion_tokens": 1614,
        "total_tokens": 6837
      },
      "streaming": true
    },
    "feedback": {
      "model": "o3",
      "target_language": "spanish",
      "system_prompt": "You are a master translator and editor specializing in spanish.\nYour task is to improve a translation based on detailed critique feedback.\n\n1. Carefully read the original text, current translation, and the critique feedback\n2. Address ALL issues identified in the critique\n3. Apply the specific suggestions for improvement\n4. Ensure the translation is accurate, natural-sounding, and faithful to the original\n5. Preserve all formatting, markdown, and structure of the original text\n6. Make sure the final text reads as if it were originally written in spanish\n\nDo not ignore any of the critique points. Every issue identified must be addressed in your improved version.\n",
      "user_prompt": "# ORIGINAL TEXT\nI really like this agentic coding thing. It is quite compelling in so many ways.\n\nSince I wrote [that original blog post](/2025/02/16/my-llm-codegen-workflow-atm/) a lot has happened in Claude land:\n\n- Claude Code\n- MCP\n- etc\n\nI have received hundreds (wat) of emails from people talking about their workflows and how they have used my workflow to get ahead. I have spoken at a few conferences, and taught a few classes about codegen. I have learned that computers really want to spellcheck codegen to codeine, who knew!\n\n{{< image src=\"codegen.png\"  >}}\n\nI was talking to a [friend](https://www.elidedbranches.com/) the other day about how we are **all totally fucked** and **AI will take our jobs** (more on that in a later post), and she was like \"you should write a post about claude code.\"\n\nHere we go.\n\nClaude Code was released eight days after I wrote my original workflow blog post, and as I predicted, it made a lot of my post irrelevant. I have since migrated from Aider to Claude Code and not looked back. I still like Aider, and it has a distinct use, but Claude Code is a bit more useful atm.\n\nClaude Code is powerful, and a hell of a lot more expensive.\n\nMy workflow is very similar to what it was before.\n\n- I chat with `gpt-4o` to hone my idea\n- I use the best reasoning model I can find to generate the spec. These days it is o1-pro or o3 (is o1-pro better than o3? Or do I feel like it is better cuz it takes longer?)\n- I use the reasoning model to generate the prompts. Using an LLM to generate prompts is a beautiful hack. It makes boomers mad too.\n- I save the spec.md, and the prompt_plan.md in the root of the project.\n- I then type into claude code the following:\n\n```prompt\n1. Open **@prompt_plan.md** and identify any prompts not marked as completed.\n2. For each incomplete prompt:\n    - Double-check if it's truly unfinished (if uncertain, ask for clarification).\n    - If you confirm it's already done, skip it.\n    - Otherwise, implement it as described.\n    - Make sure the tests pass, and the program builds/runs\n    - Commit the changes to your repository with a clear commit message.\n    - Update **@prompt_plan.md** to mark this prompt as completed.\n3. After you finish each prompt, pause and wait for user review or feedback.\n4. Repeat with the next unfinished prompt as directed by the user.\n```\n\n- The magic with this prompt is that it checks the prompt plan. Looks for things that are not marked as completed, then does the next remaining task. It commits it to git, and then updates the prompt plan with what is complete. It then pops up and asks you to continue once it is done. 🤌\n\n- I then kick back and tell claude `yes` while it does the work. It will pop up for feedback, and magic happens.\n- Lots more cookie clicker.\n\nThis works super well. There are a few superpowers you can embed in your process that will really help.\n\n## Defensive coding!\n\n### Testing\n\nTesting and test-driven development is a must. I highly recommend really engaging in building out a robust TDD practice.\n\nI was a TDD hater. I was bad at it and I felt like I was wasting time. I was not correct. Lol. I recognize that, and we built in a lot of testing into our companies and projects over the past few decades. Most of the testing was added AFTER the core work was done. This is fine for humans.\n\nTHIS IS BAD FOR ROBOTS.\n\nThe robots LOVE TDD. Seriously. They eat it up.\n\nWith TDD you have the robot friend build out the test, and the mock. Then your next prompt you build the mock to be real. And the robot just loves this. It is the most effective counter to hallucination and LLM scope drift I have found. It really helps the robots to stay on task.\n\n### Linting\n\nI am such a fan of linting. It is so nice. Ruff is a wonderful product. Biome is cool. Clippy is fun (and a good name).\n\nFor whatever reason the ROBOTS love to run a good linter.\n\nBuilding in the practice to run the linter constantly has kept a lot of bugs away, and kept the code more maintainable and easier to read. You know this already.\n\nAdd in a good formatter and everything is beautiful.\n\n### Pre Commit hooks\n\nThe real magic of all this is to add these tasks to a pre-commit hook. I recommend the pre-commit python package. You can easily use it via an `uv tools install pre-commit` command and then just build out a nice `.pre-commit-config.yaml` file and bam. Every time you try and commit it will run all these wonderful tests, type checking, linting, and whatnot to make sure your code is A+++ would execute again.\n\nThis is a great hack for working with Claude Code. The robot REALLLLLY wants to commit. So when you instruct it to do some code and then commit (like I did above) it will make wild code changes, commit the code, inevitably fuck it all up and then have to fix it.\n\nThis is nice cuz it doesn't clog your GitHub actions with a bunch of linting, formatting, and type checking execution that doesn't pass cuz the robot was in a mood.\n\n> A funny thing about claude is it CANNOT for the life of it figure out how to use `uv` correctly. It will pip install shit all over the place if you are not careful. And if you instruct it to use `uv` it will just use `uv pip install.` Maybe AGI isn't going to happen in June. so sad.\n\n### Claude.md and commands\n\nThese are both really simple additions that can squeeze a lot out.\n\n{{< image src=\"_SDI8149.jpg\" alt=\"Jesse at the studio, Sept 15, 2023, Ricoh GRiii\" caption=\"Jesse at the studio, Sigma fp, 11/15/2023\" >}}\n\nI stole a [CLAUDE.md](https://github.com/harperreed/dotfiles/blob/master/.claude/CLAUDE.md) from my friend [Jesse Vincent](https://fsck.com/) who did an [awful lot of work on making it very robust](https://github.com/obra/dotfiles/blob/main/.claude/CLAUDE.md). It is quite nice. Some things that are built into it:\n\n- a light version of the big daddy rule.\n- instructions on how to do TDD\n- stylistic instructions on how I like to code.\n\n> [@clint](https://instagram.com/clintecker) configured his CLAUDE.md to call him MR BEEF and it is currently embedding info about MR BEEF in our all documentation: \"If you're stuck, stop and ask for help—MR BEEF may know best.\". While typing this out, I decided to make my CLAUDE.md file call me \"Harp Dog.\" This is a feature, not a bug.\n\nThe commands are also really nice. You can see some of mine in my dotfiles [here](https://github.com/harperreed/dotfiles/tree/master/.claude/commands).\n\n{{< image src=\"commands.png\"  >}}\n\nI used to use the commands way more, but it is a really great way to get a lot out of regularly used prompts. You can also pass arguments to the commands. For instance in my github issues command, you pass the issue number that you want claude to look at: `/user:gh-issue #45`\n\nClaude will now go and run through the \"prompt\" script that is defined in the `gh-issue.md` file.\n\nYou can also put these commands in a project directory, and make a custom CLAUDE.md in the project directory. I do this to make hugo, rust, go, or javascript specific commands per project.\n\n## \"Continue\"\n\n{{< image src=\"https://media4.giphy.com/media/v1.Y2lkPTc5MGI3NjExNDk3ZTZpdWYwdG5sdmpnaTJqNzJhYXlvcmp6bnNmdmhxaGdoeHJ4MyZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/l2Je3fIeeXyYEM85G/giphy.gif\" >}}\n\nSometimes I feel like that bird that Homer got to hit \"y\". I am just writing \"continue\" or pressing up and pasting in the same prompt.\n\nMost of the time the plans are about 8–12 steps. I can usually get through a Greenfield development plan in about 30–45 minutes regardless of apparent complexity or language.\n\nI was talking through with my friend Bob and he did not believe it. I asked him \"name a thing to build, a language to build it in - and let's see!\"\n\n{{< image src=\"R0000693.jpeg\" caption=\"Bob Swartz, Ricoh GRiiix, 11/17/2024\" >}}\n\nHe was like \"ok. A basic interpreter in C.\"\n\nThis wasn't ideal. I don't know C. I don't really know how to write an interpreter, nor do I really want to. But fuck it.\n\nI followed the above steps and Claude Code did great. We have [a working basic interpreter](https://github.com/harperreed/basic). The first version worked within an hour. I futzed with it for a few more hours and it is pretty good. Would it ship it in 1982? Probably not. You can see the [prompt plan here](https://raw.githubusercontent.com/harperreed/basic/refs/heads/main/docs/prompt_plan.md).\n\n## The Team\n\nOur entire team is using Claude Code currently. We are all approximately following the above process with a lot of person tweaks.\n\nWe are doing way way higher test coverage than we have ever done. We have better code, and it seems to be just as effective as the horrible code we wrote in the past. It is fun to glance at people working and see claude code running in ghostty, in vscode terminal, in zed terminal, and messing with python notebooks.\n\n{{< image src=\"dril.jpg\" >}}\n\nSomeone who has a lot of tokens, please help me budget this. My family is dying.\n\n## thanks\n\nTo all the folks who keep emailing me. It is really fun and nice to hear about your workflows, and projects. I really appreciate it. Keep em coming!\n\n# CURRENT TRANSLATION\nMe flipa el *agentic coding* (programación agentiva). Es muy atractivo en muchos sentidos.\n\nDesde que escribí [aquella entrada original del blog](/2025/02/16/my-llm-codegen-workflow-atm/) han pasado un montón de cosas en el mundo de Claude:\n\n- Claude Code\n- MCP\n- etc\n\nHe recibido cientos (wat) de correos de gente contándome sus flujos de trabajo y cómo han usado el mío para sacar provecho. He impartido charlas en varias conferencias y dado algunas clases sobre *codegen*. También he descubierto que los ordenadores se empeñan en corregir “codegen” a “codeine”. ¡Quién lo diría!\n\n{{< image src=\"codegen.png\"  >}}\n\nEl otro día hablaba con una [amiga](https://www.elidedbranches.com/) sobre cómo **estamos totalmente jodidos** y **la IA nos va a quitar el curro** (ya hablaré de eso en otra entrada). Ella me dijo: «Deberías escribir un post sobre Claude Code».\n\nAquí vamos.\n\nClaude Code salió ocho días después de que publicara mi entrada original sobre el flujo de trabajo y, como predije, dejó gran parte de ella obsoleta. Desde entonces migré de Aider a Claude Code y no he vuelto a mirar atrás. Sigo apreciando Aider —tiene su momento—, pero Claude Code me resulta bastante más útil ahora mismo.\n\nClaude Code es potentísimo… y carísimo a más no poder.\n\nMi flujo de trabajo sigue siendo casi el mismo de antes:\n\n- Charlo con `gpt-4o` para afinar la idea  \n- Uso el mejor modelo de razonamiento que encuentre para generar la *spec*. Hoy es o1-pro o bien o3 (¿es o1-pro mejor que o3 o solo me lo parece porque tarda más?)  \n- Con ese modelo genero los *prompts* (instrucciones). Usar un LLM para crear *prompts* es un hack precioso; además cabrea a los boomers.  \n- Guardo `spec.md` y `prompt_plan.md` en la raíz del proyecto.  \n- Después le paso a Claude Code lo siguiente:\n\n```prompt\n1. Open **@prompt_plan.md** and identify any prompts not marked as completed.\n2. For each incomplete prompt:\n    - Double-check if it's truly unfinished (if uncertain, ask for clarification).\n    - If you confirm it's already done, skip it.\n    - Otherwise, implement it as described.\n    - Make sure the tests pass, and the program builds/runs\n    - Commit the changes to your repository with a clear commit message.\n    - Update **@prompt_plan.md** to mark this prompt as completed.\n3. After you finish each prompt, pause and wait for user review or feedback.\n4. Repeat with the next unfinished prompt as directed by the user.\n```\n\nLa magia de este *prompt* es que revisa el *prompt plan*, busca lo que aún no está marcado como completado y aborda la siguiente tarea pendiente. Hace *commit* en Git, actualiza el *prompt plan* con lo que ya está listo y, al terminar, se planta para pedirte que continúes. 🤌\n\nEntonces me relajo y me limito a escribir `yes` mientras Claude curra. Pide *feedback* y la magia sucede. Y yo, mientras, hago más clics que en *Cookie Clicker*.\n\nEsto funciona de lujo. Hay un par de superpoderes que puedes incorporar a tu proceso y que ayudan muchísimo.\n\n## ¡Programación defensiva!\n\n### Pruebas\n\nLas pruebas y el desarrollo guiado por pruebas (*TDD*) son imprescindibles. Te recomiendo comprometerte de verdad con una práctica sólida de TDD.\n\nYo odiaba el TDD. Se me daba fatal y sentía que estaba perdiendo el tiempo. Estaba equivocado, lol. Lo reconozco: durante las últimas décadas metimos un montón de pruebas en nuestras empresas y proyectos. La mayoría se añadieron DESPUÉS de terminar el núcleo. Esto está bien para humanos.\n\n*ESTO ES NEFASTO PARA LOS ROBOTS.*\n\nA los robots les encanta el TDD. En serio, lo devoran.\n\nCon TDD tu colega robot escribe la prueba y el *mock*; en el siguiente *prompt* conviertes el *mock* en código real. Y al robot le chifla. Es el antídoto más efectivo que he encontrado contra las alucinaciones y la deriva de alcance de los LLM. Les ayuda muchísimo a mantenerse enfocados.\n\n### *Linting*\n\nSoy fan del *linting*. Es una gozada. Ruff es maravilloso, Biome mola y Clippy es divertido (y el nombre es top).\n\nPor alguna razón los robots disfrutan ejecutando un buen *linter*.\n\nTenerlo configurado para que se ejecute todo el rato mantiene muchos *bugs* a raya y deja el código más mantenible y legible. Ya lo sabes.\n\nAñade un *formatter* decente y todo queda precioso.\n\n### Hooks de *pre-commit*\n\nLa auténtica magia está en meter todas estas tareas en un *hook* de *pre-commit*. Recomiendo el paquete de Python `pre-commit`. Puedes instalarlo con `uv tools install pre-commit`, crear un archivo `.pre-commit-config.yaml` chulo y ¡bam! Cada vez que intentes hacer *commit* correrá pruebas, *type checking*, *linting*, etc., para asegurarse de que tu código es A+++; lo volvería a ejecutar sin dudar.\n\nEsto es un gran hack para trabajar con Claude Code. El robot QUIERE hacer *commit* sí o sí. Así que cuando le pides que escriba código y luego haga *commit* (como arriba), hará cambios salvajes, hará *commit*, inevitablemente lo fastidiará todo y luego tendrá que arreglarlo.\n\nY es fantástico porque no atasca tus GitHub Actions con montones de *linting*, formato y *type checking* que fallan porque el robot estaba de malas.\n\n> Algo curioso de Claude es que NO PUEDE, ni a tiros, aprender a usar `uv` correctamente. Si te descuidas hará `pip install` a lo loco. Y si le ordenas usar `uv`, se limitará a hacer `uv pip install`. Igual la AGI no llega en junio… qué pena.\n\n### CLAUDE.md y comandos\n\nSon dos añadidos muy simples que permiten sacar muchísimo más partido.\n\n{{< image src=\"_SDI8149.jpg\" alt=\"Jesse at the studio, Sept 15, 2023, Ricoh GRiii\" caption=\"Jesse en el estudio, Sigma fp, 15 de noviembre de 2023\" >}}\n\nLe mangué un [CLAUDE.md](https://github.com/harperreed/dotfiles/blob/master/.claude/CLAUDE.md) a mi colega [Jesse Vincent](https://fsck.com/), que se pegó [un currazo brutal para dejarlo ultra robusto](https://github.com/obra/dotfiles/blob/main/.claude/CLAUDE.md). Está de lujo. Incluye, por ejemplo:\n\n- una versión light de la *big daddy rule*  \n- instrucciones sobre cómo hacer TDD  \n- pautas de estilo sobre mi forma de programar  \n\n> [@clint](https://instagram.com/clintecker) configuró su CLAUDE.md para que lo llame MR BEEF y ahora toda nuestra documentación suelta perlas de MR BEEF: «If you're stuck, stop and ask for help—MR BEEF may know best.» Mientras escribía esto, decidí que mi CLAUDE.md me llame “Harp Dog”. Es una *feature*, no un *bug*.\n\nLos comandos también son muy prácticos. Puedes ver algunos de los míos en mis dotfiles [aquí](https://github.com/harperreed/dotfiles/tree/master/.claude/commands).\n\n{{< image src=\"commands.png\"  >}}\n\nAntes los usaba mucho más, pero siguen siendo una forma estupenda de sacar partido a *prompts* recurrentes. Además puedes pasar argumentos. Por ejemplo, en mi comando para *issues* de GitHub le pasas el número de *issue* que quieres que Claude mire: `/user:gh-issue #45`\n\nClaude ejecutará entonces el *prompt* definido en el archivo `gh-issue.md`.\n\nTambién puedes colocar estos comandos en el directorio del proyecto y crear un CLAUDE.md personalizado ahí. Yo lo hago para tener comandos específicos de Hugo, Rust, Go o JavaScript según el proyecto.\n\n## \"Continue\"\n\n{{< image src=\"https://media4.giphy.com/media/v1.Y2lkPTc5MGI3NjExNDk3ZTZpdWYwdG5sdmpnaTJqNzJhYXlvcmp6bnNmdmhxaGdoeHJ4MyZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/l2Je3fIeeXyYEM85G/giphy.gif\" >}}\n\nA veces me siento como ese pájaro con la cabeza oscilante que Homer puso a pulsar la tecla “y”: solo escribo “continue” o pulso la flecha arriba y pego el mismo *prompt*.\n\nLa mayoría de los planes tienen entre 8 y 12 pasos. Suelo terminar un desarrollo *greenfield* en 30–45 min sin importar la complejidad aparente o el lenguaje.\n\nSe lo contaba a mi amigo Bob y no me creía. Le dije: «Nómbrame algo que construir y un lenguaje: ¡veamos!»\n\n{{< image src=\"R0000693.jpeg\" caption=\"Bob Swartz, Ricoh GRiiix, 17 de noviembre de 2024\" >}}\n\nÉl soltó: «Vale. Un intérprete de BASIC en C».\n\nNo era lo ideal. No sé C, tampoco sé realmente escribir un intérprete y, francamente, me da igual. Pero qué demonios.\n\nSeguí los pasos de arriba y Claude Code lo bordó. Tenemos [un intérprete de BASIC que funciona](https://github.com/harperreed/basic). La primera versión estuvo lista en una hora. Luego la pulí un par más y quedó bastante decente. ¿La habría lanzado en 1982? Probablemente no. Puedes ver el [prompt plan aquí](https://raw.githubusercontent.com/harperreed/basic/refs/heads/main/docs/prompt_plan.md).\n\n## El equipo\n\nTodo nuestro equipo usa ahora Claude Code. Seguimos más o menos el proceso anterior, con bastantes retoques personales.\n\nEstamos logrando una cobertura de pruebas muchísimo mayor que nunca. Tenemos mejor código y parece ser tan eficaz como el código horrible que escribíamos antes. Es divertido pasear la vista y ver Claude Code corriendo en Ghostty, en la terminal de VS Code, en la terminal de Zed y trasteando con *notebooks* de Python.\n\n{{< image src=\"dril.jpg\" >}}\n\nAlguien con un montón de tokens, por favor, ayúdame a presupuestar esto. Mi familia se está arruinando.\n\n## Gracias\n\nA todas las personas que siguen enviándome correos: es divertidísimo y un placer conocer vuestros flujos de trabajo y proyectos. Lo agradezco un montón. ¡Seguid enviándolos!\n\n# CRITIQUE FEEDBACK\nMERCILESS REVIEW OF THE SPANISH VERSION  \n\n───────────────────────────────────────────────  \nLEGEND  \n• CR = Critical (meaning changes, omissions, false additions)  \n• MJ = Major (tone, nuance, technical consistency, register)  \n• MN = Minor (style polish, punctuation, fluency)  \n\nFor each point I quote the English source (EN) and the current Spanish (ES), identify the problem, then propose a fix.\n\n================================================\n1. ACCURACY: MISTRANSLATIONS, OMISSIONS, ADDITIONS\n================================================\n\nCR-1  “Someone who has a lot of tokens, please help me budget this. **My family is dying.**”  \nES: “Alguien con un montón de tokens, por favor, ayúdame a presupuestar esto. **Mi familia se está arruinando.**”  \nIssue “se está arruinando” (going broke) waters down the dark-humour hyperbole “is dying”.  \nFix “…Mi familia se muere.” (or “mi familia se está muriendo”). Keep the comic exaggeration.\n\nCR-2  “I then kick back and tell **claude** `yes` …” (brand written lowercase in source)  \nES: “Entonces me relajo y me limito a escribir `yes` mientras **Claude** curra.”  \nIssue Capitalisation changed; could confuse CLI command vs. product brand.  \nFix Maintain lowercase when it refers to the CLI/bot: “…mientras **claude** curra.”\n\nCR-3  “It commits it to git, and then updates the prompt plan…”  \nES: “Hace *commit* en Git, actualiza el *prompt plan*…”  \nIssue Capitalising “Git” suggests company/product, not VCS command; in CLI context “git” is lowercase.  \nFix “…hace *commit* con **git**, actualiza…”\n\nCR-4  “THIS IS BAD FOR ROBOTS.”  \nES: “*ESTO ES NEFASTO PARA LOS ROBOTS.*”  \nIssue Loss of typographic shouting (“BAD”) — “nefasto” adds nuance but weakens original bluntness.  \nFix “ESTO ES **MALO** PARA LOS ROBOTS.” (All caps, literal)\n\nCR-5  “It makes boomers mad too.”  \nES: “además cabrea a los boomers.”  \nIssue Omitted subject “it” (“también” is clearer) and lost humour beat order.  \nFix “También hace que los boomers se enfaden.”\n\nCR-6  Omitted micro-sentence “Lots more cookie clicker.”  \nES merges with previous line; reader may not catch it as a stand-alone joke.  \nFix Keep on its own: “Y muchos más clics de Cookie Clicker.”\n\nCR-7  “Regardless of apparent complexity or language.”  \nES: “sin importar la complejidad aparente o el lenguaje.”  \nIssue Missing definite article “el”: “o **el** lenguaje.” (Spanish grammar)\n\nCR-8  In hook section: “Every time you try and commit it will run all these wonderful tests, type checking, linting, and whatnot to make sure your code is A+++ **would execute again.**”  \nES: “…para asegurarse de que tu código es A+++; **lo volvería a ejecutar sin dudar.**”  \nIssue Original phrase means “would pass again”, not “would execute again”.  \nFix “…para asegurar que tu código sea A+++ y volvería a **aprobar** cada vez.”\n\n================================================\n2. NUANCE / REGISTER / CULTURAL EQUIVALENCE\n================================================\n\nMJ-1  “Me flipa” for “I really like”  \nHyper-colloquial Iberian-Spanish; narrows audience. A more neutral yet informal “Me encanta” or “Me mola mucho” preserves tone without regional bias.\n\nMJ-2  Slang “curra”, “mola”, “qué demonios”, “le mangué”  \nAll distinctly Peninsular. Source is informal but not region-locked. Consider neutral pan-Hispanic options: “trabaja”, “está genial”, “qué rayos”, “le tomé prestado”.\n\nMJ-3  “Programación agentiva”  \n“Agentic” in psychology ≈ “agéntico”. “Agentivo” actually means a grammatical voice. Suggest “programación agéntica” or keep English italic “agentic coding”.\n\nMJ-4  “Hooks de *pre-commit*” vs “pre-commit hooks”  \nIn Spanish tech writing order usually “hooks de pre-commit” is fine, but maintain italics consistently (some parts italics, others not).\n\nMJ-5  “A más no poder” intensifier + ellipsis abuse  \nTone ok but piling colloquialisms (“potentísimo… y carísimo a más no poder”) plus ellipsis can read over-dramatic. One element is enough.\n\n================================================\n3. TECHNICAL CONSISTENCY\n================================================\n\nMJ-6  File names and commands should appear exactly as in source.  \nExamples: “@prompt_plan.md” sometimes shown in bold, sometimes not; “CLAUDE.md” all caps. Pick one convention and stick to it.\n\nMJ-7  “spec.md” vs “`spec.md`”  \nSometimes the backticks are lost; keep monospaced formatting for all filenames.\n\nMJ-8  “greenfield” left italic but not defined. Acceptable, yet could add a parenthetical “(desde cero)”.\n\n================================================\n4. GRAMMAR / PUNCTUATION / TYPOGRAPHY\n================================================\n\nMN-1  Comma splice: “Sigo apreciando Aider —tiene su momento—, pero Claude Code me resulta…”  \nEn dash is fine, but remove preceding comma: “Aider —tiene su momento— pero”.\n\nMN-2  quotes: sometimes smart quotes «», sometimes English quotes “”. Pick one.\n\nMN-3  Inconsistent italicisation of English terms (“spec”, “prompt plan”, “linting”). Choose a style guide (e.g., italicise first-time foreign term, roman afterwards).\n\nMN-4  Capitalisation of headings (“## ¡Programación defensiva!”) — Spanish titles in sentence case, so: “## Programación defensiva”.\n\nMN-5  Duplicated ellipses and exclamations (“potentísimo… y carísimo…”). Limit to one ellipse; avoid “…lol.” (punctuation duplication)\n\n================================================\n5. MACHINE-LIKE / STIFF SEGMENTS\n================================================\n\nMN-6  Sections that quote entire English paragraphs (the prompt) without any framing note may feel copy-pasted. Add “(en inglés en el original)” or translate comments inside list items to maintain flow.\n\nMN-7  Literal calque “Esto es un gran hack” — “hack” is imported, but “truco” or “atajo” fits Spanish idiom while keeping geek flavour: “Es un truco buenísimo”.\n\n================================================\nSUMMARY OF KEY FIXES\n================================================\n• Restore hyperbole: “Mi familia se muere”  \n• Use lowercase “claude” and “git” when referring to commands.  \n• Adjust overly Iberian slang if aiming for broader audience.  \n• Tighten technical formatting consistency (code font, bold, caps).  \n• Keep shouting/capitalisation where source shouts.  \n• Correct minor grammar (articles, commas) and polish ellipsis/quote style.  \n\nWith these changes the translation will remain faithful, preserve humour, and read as original Spanish prose rather than an English shadow.\n\nPlease address ALL issues identified in the critique and provide an improved translation.\nReturn ONLY the improved translated text without explanations or comments.",
      "response": "Me encanta esto del *agentic coding* (programación agéntica). Es muy atractivo en muchos sentidos.\n\nDesde que escribí [aquella entrada original del blog](/2025/02/16/my-llm-codegen-workflow-atm/) han pasado un montón de cosas en el mundo de Claude:\n\n- Claude Code\n- MCP\n- etc\n\nHe recibido cientos (wat) de correos de gente contándome sus flujos de trabajo y cómo han usado el mío para sacar provecho. He impartido charlas en varias conferencias y dado algunas clases sobre *codegen*. También he descubierto que los ordenadores se empeñan en corregir “codegen” a “codeine”. ¡Quién lo diría!\n\n{{< image src=\"codegen.png\"  >}}\n\nEl otro día hablaba con una [amiga](https://www.elidedbranches.com/) sobre cómo **estamos totalmente jodidos** y **la IA nos va a quitar el curro** (ya hablaré de eso en otra entrada). Ella me dijo: «Deberías escribir un post sobre Claude Code».\n\nAquí vamos.\n\nClaude Code salió ocho días después de que publicara mi entrada original sobre el flujo de trabajo y, como predije, dejó gran parte de ella obsoleta. Desde entonces migré de Aider a Claude Code y no he vuelto a mirar atrás. Sigo apreciando Aider —tiene su momento— pero Claude Code me resulta bastante más útil ahora mismo.\n\nClaude Code es potentísimo y carísimo.\n\nMi flujo de trabajo sigue siendo casi el mismo de antes:\n\n- Charlo con `gpt-4o` para afinar la idea.  \n- Uso el mejor modelo de razonamiento que encuentre para generar la *spec*. Hoy es `o1-pro` o `o3` (¿es `o1-pro` mejor que `o3` o solo me lo parece porque tarda más?).  \n- Con ese modelo genero los *prompts*. Usar un LLM para crear *prompts* es un truco precioso. También hace que los boomers se enfaden.  \n- Guardo `spec.md` y `prompt_plan.md` en la raíz del proyecto.  \n- Después le paso a claude lo siguiente:\n\n```prompt\n1. Open **@prompt_plan.md** and identify any prompts not marked as completed.\n2. For each incomplete prompt:\n    - Double-check if it's truly unfinished (if uncertain, ask for clarification).\n    - If you confirm it's already done, skip it.\n    - Otherwise, implement it as described.\n    - Make sure the tests pass, and the program builds/runs\n    - Commit the changes to your repository with a clear commit message.\n    - Update **@prompt_plan.md** to mark this prompt as completed.\n3. After you finish each prompt, pause and wait for user review or feedback.\n4. Repeat with the next unfinished prompt as directed by the user.\n```\n\nLa magia de este *prompt* es que revisa el `prompt_plan.md`, busca lo que aún no está marcado como completado y aborda la siguiente tarea pendiente. Hace *commit* con `git`, actualiza el plan con lo que ya está listo y, al terminar, se planta para pedirte que continúes. 🤌\n\nEntonces me relajo y me limito a escribir `yes` mientras claude trabaja. Pide *feedback* y la magia sucede.  \nY muchos más clics de Cookie Clicker.\n\nEsto funciona de lujo. Hay un par de superpoderes que puedes incorporar a tu proceso y que ayudan muchísimo.\n\n## Programación defensiva\n\n### Pruebas\n\nLas pruebas y el desarrollo guiado por pruebas (*TDD*) son imprescindibles. Te recomiendo comprometerte de verdad con una práctica sólida de TDD.\n\nYo odiaba el TDD. Se me daba fatal y sentía que estaba perdiendo el tiempo. Estaba equivocado, lol. Lo reconozco: durante las últimas décadas metimos un montón de pruebas en nuestras empresas y proyectos. La mayoría se añadieron DESPUÉS de terminar el núcleo. Esto está bien para humanos.\n\nESTO ES MALO PARA LOS ROBOTS.\n\nA los robots les encanta el TDD. En serio, lo devoran.\n\nCon TDD tu colega robot escribe la prueba y el *mock*; en el siguiente *prompt* conviertes el *mock* en código real. Y al robot le chifla. Es el antídoto más efectivo que he encontrado contra las alucinaciones y la deriva de alcance de los LLM. Les ayuda muchísimo a mantenerse enfocados.\n\n### Linting\n\nSoy fan del *linting*. Es una gozada. Ruff es maravilloso, Biome está genial y Clippy es divertido (y el nombre es top).\n\nPor alguna razón los robots disfrutan ejecutando un buen *linter*.\n\nTenerlo configurado para que se ejecute todo el rato mantiene muchos *bugs* a raya y deja el código más mantenible y legible. Ya lo sabes.\n\nAñade un *formatter* decente y todo queda precioso.\n\n### Hooks de pre-commit\n\nLa auténtica magia está en meter todas estas tareas en un *hook* de pre-commit. Recomiendo el paquete de Python `pre-commit`. Puedes instalarlo con `uv tools install pre-commit`, crear un archivo `.pre-commit-config.yaml` chulo y ¡bam! Cada vez que intentes hacer *commit* correrá pruebas, comprobación de tipos, *linting*, etc., para asegurarse de que tu código sea A+++ y volvería a aprobar cada vez.\n\nEsto es un truco buenísimo para trabajar con Claude Code. El robot QUIERE hacer *commit* sí o sí. Así que cuando le pides que escriba código y luego haga *commit* (como arriba), hará cambios salvajes, hará *commit*, inevitablemente lo fastidiará todo y luego tendrá que arreglarlo.\n\nY es fantástico porque no atasca tus GitHub Actions con montones de *linting*, formato y comprobaciones de tipos que fallan porque el robot estaba de malas.\n\n> Algo curioso de claude es que NO PUEDE, ni a tiros, aprender a usar `uv` correctamente. Si te descuidas hará `pip install` a lo loco. Y si le ordenas usar `uv`, se limitará a hacer `uv pip install`. Igual la AGI no llega en junio… qué pena.\n\n### CLAUDE.md y comandos\n\nSon dos añadidos muy simples que permiten sacar muchísimo más partido.\n\n{{< image src=\"_SDI8149.jpg\" alt=\"Jesse at the studio, Sept 15, 2023, Ricoh GRiii\" caption=\"Jesse en el estudio, Sigma fp, 15 de noviembre de 2023\" >}}\n\nLe tomé prestado un [CLAUDE.md](https://github.com/harperreed/dotfiles/blob/master/.claude/CLAUDE.md) a mi colega [Jesse Vincent](https://fsck.com/), que se pegó [un currazo brutal para dejarlo ultra robusto](https://github.com/obra/dotfiles/blob/main/.claude/CLAUDE.md). Está de lujo. Incluye, por ejemplo:\n\n- una versión ligera de la *big daddy rule*  \n- instrucciones sobre cómo hacer TDD  \n- pautas de estilo sobre mi forma de programar  \n\n> [@clint](https://instagram.com/clintecker) configuró su CLAUDE.md para que lo llame MR BEEF y ahora toda nuestra documentación suelta perlas de MR BEEF: «If you're stuck, stop and ask for help—MR BEEF may know best.» Mientras escribía esto, decidí que mi CLAUDE.md me llame “Harp Dog”. Es una *feature*, no un *bug*.\n\nLos comandos también son muy prácticos. Puedes ver algunos de los míos en mis dotfiles [aquí](https://github.com/harperreed/dotfiles/tree/master/.claude/commands).\n\n{{< image src=\"commands.png\"  >}}\n\nAntes los usaba mucho más, pero siguen siendo una forma estupenda de sacar partido a *prompts* recurrentes. Además, puedes pasar argumentos. Por ejemplo, en mi comando para *issues* de GitHub le pasas el número de *issue* que quieres que claude mire: `/user:gh-issue #45`\n\nclaude ejecutará entonces el *prompt* definido en el archivo `gh-issue.md`.\n\nTambién puedes colocar estos comandos en el directorio del proyecto y crear un `CLAUDE.md` personalizado ahí. Yo lo hago para tener comandos específicos de Hugo, Rust, Go o JavaScript según el proyecto.\n\n## \"Continue\"\n\n{{< image src=\"https://media4.giphy.com/media/v1.Y2lkPTc5MGI3NjExNDk3ZTZpdWYwdG5sdmpnaTJqNzJhYXlvcmp6bnNmdmhxaGdoeHJ4MyZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/l2Je3fIeeXyYEM85G/giphy.gif\" >}}\n\nA veces me siento como ese pájaro con la cabeza oscilante que Homer puso a pulsar la tecla “y”: solo escribo “continue” o pulso la flecha arriba y pego el mismo *prompt*.\n\nLa mayoría de los planes tienen entre 8 y 12 pasos. Suelo terminar un desarrollo *greenfield* (desde cero) en 30–45 min sin importar la complejidad aparente o el lenguaje.\n\nSe lo contaba a mi amigo Bob y no me creía. Le dije: «Nómbrame algo que construir y un lenguaje: ¡veamos!»\n\n{{< image src=\"R0000693.jpeg\" caption=\"Bob Swartz, Ricoh GRiiix, 17 de noviembre de 2024\" >}}\n\nÉl soltó: «Vale. Un intérprete de BASIC en C».\n\nNo era lo ideal. No sé C, tampoco sé realmente escribir un intérprete y, francamente, me da igual. Pero qué rayos.\n\nSeguí los pasos de arriba y Claude Code lo bordó. Tenemos [un intérprete de BASIC que funciona](https://github.com/harperreed/basic). La primera versión estuvo lista en una hora. Luego la pulí un par más y quedó bastante decente. ¿La habría lanzado en 1982? Probablemente no. Puedes ver el [prompt_plan.md aquí](https://raw.githubusercontent.com/harperreed/basic/refs/heads/main/docs/prompt_plan.md).\n\n## El equipo\n\nTodo nuestro equipo usa ahora Claude Code. Seguimos más o menos el proceso anterior, con bastantes retoques personales.\n\nEstamos logrando una cobertura de pruebas muchísimo mayor que nunca. Tenemos mejor código y parece ser tan eficaz como el código horrible que escribíamos antes. Es divertido pasear la vista y ver Claude Code corriendo en Ghostty, en la terminal de VS Code, en la terminal de Zed y trasteando con *notebooks* de Python.\n\n{{< image src=\"dril.jpg\" >}}\n\nAlguien con un montón de tokens, por favor, ayúdame a presupuestar esto. Mi familia se muere.\n\n## Gracias\n\nA todas las personas que siguen enviándome correos: es divertidísimo y un placer conocer vuestros flujos de trabajo y proyectos. Lo agradezco un montón. ¡Seguid enviándolos!",
      "usage": {
        "prompt_tokens": 6798,
        "completion_tokens": 2413,
        "total_tokens": 9211
      },
      "streaming": true
    },
    "frontmatter": {
      "model": "o3",
      "target_language": "spanish",
      "system_prompt": "You are a professional translator. Translate the following frontmatter fields to spanish.\nEach field is in the format \"field_name: content\". Translate ONLY the content, not the field names.\nReturn the translated content in the exact same format, preserving all field names.",
      "user_prompt": "title: Basic Claude Code\n\ndescription: A detailed walkthrough of using Claude Code AI assistant for software development, including workflow tips, testing practices, and practical examples from real projects. Covers defensive coding strategies, TDD, and team implementation.\n\n",
      "response": "title: Código Básico de Claude\n\ndescription: Un recorrido detallado sobre el uso del asistente de IA Claude Code para el desarrollo de software, que incluye consejos de flujo de trabajo, prácticas de pruebas y ejemplos prácticos de proyectos reales. Cubre estrategias de codificación defensiva, TDD e implementación en equipo.",
      "usage": {
        "prompt_tokens": 98,
        "completion_tokens": 65,
        "total_tokens": 163
      },
      "fields": [
        "title",
        "description"
      ],
      "streaming": true
    },
    "all_critiques": [
      "MERCILESS CRITIQUE OF THE SPANISH TRANSLATION  \n\nLegend  \nCritical = meaning is distorted / key content missing.  \nMajor = important nuance, tone or terminology off.  \nModerate = fluency, style or grammar affect readability.  \nMinor = cosmetic or preference.  \n\n================================================================  \n1. ACCURACY & OMISSIONS  \n----------------------------------------------------------------  \n1-A  Critical  “A+++ would execute again” ➜ “A+++ y volvería a ejecutarse.”  \n• Original is a meme-ish joke (“A+++ would execute again” ↔ “A+++ would buy again”).  \n• Current version drops the self-referential humour.  \nFix: “A+++ — volvería a ejecutarlo sin dudar” or “A+++ lo ejecutaría otra vez”.  \n\n1-B  Critical  “Would it ship it in 1982?” ➜ “¿Lo enviaría en 1982?”  \n• “Ship” in software = “lanzar / publicar / poner en producción”, not “enviar”.  \nFix: “¿Lo habría lanzado en 1982?” or “¿Lo habría puesto en producción en 1982?”  \n\n1-C  Critical  “cookie clicker” line.  \nOriginal: “Lots more cookie clicker.” = repetitive, mindless clicking.  \nTranslation: “Más “cookie clicker”.” (opaque, no verb).  \nFix: “Y a seguir haciendo clic como en Cookie Clicker.” or “Mucho más “cookie-clicker” (clics sin parar).”\n\n1-D  Critical  Tone in expletives repeatedly toned down.  \n• “fuck it” ➜ “qué demonios”  \n• “fuck it all up” ➜ “lo estropeará”  \n• “hell of a lot more expensive” ➜ “muchísimo más caro” (loses colourful emphasis)  \nIf the brief is to keep the same irreverent voice, softenings distort the effect.  \nFix: Use “a la mierda”, “lo joderá todo”, “carísimo (una burrada)”, etc.\n\n1-E  Critical  Friend gender.  \n“friend” is neutral; you chose “una amiga”. Might be wrong.  \nFix: “una persona amiga” or simply “un/a amigo/a” to stay safe.\n\n1-F  Major  “Greenfield development plan” left half-translated.  \nBetter: “plan de desarrollo greenfield (desde cero)” or italicise *greenfield*.  \n\n1-G  Major  Missing mini-aside:  \nOriginal “who knew!” ⇢ translated, ok. Nothing else missing on quick pass.  \n\n================================================================  \n2. NUANCE, CULTURAL REFERENCES, IDIOMS  \n----------------------------------------------------------------  \n2-A  Major  “agentic coding” ➜ “programación agéntica”  \n• “Agéntica” with tilde feels invented and clunky.  \nAlternatives: “agentic coding (programación basada en agentes)” or “programación agentic”.  \n\n2-B  Major  “hell of a lot more expensive” lost flavour (see 1-D).  \n\n2-C  Moderate  “kick back and tell Claude ‘yes’” → “me relajo y le digo a Claude `yes`”  \nCould insert idea of simply pressing ENTER repeatedly:  \n“me echo para atrás y me limito a escribir `yes`”.  \n\n2-D  Moderate  “It makes boomers mad” → “enfurece a los boomers”  \nGood, but could keep the mocking vibe: “pone furiosos a los boomers”.  \n\n================================================================  \n3. TONE / REGISTER CONSISTENCY  \n----------------------------------------------------------------  \n3-A  Major  Overall swear-level lowered (see 1-D). Original is irreverent: “totally fucked”, “fuck it”, “robots LOVE”, “hell of”.  \nDecide: match source or keep mixed register. Now it oscillates (uses “jodidos” once, but softens others).  \n\n3-B  Major  English words: Some left (feature, bug, linting, hook, prompt plan) → fine, but keep consistency.  \nE.g. sometimes “hook”, sometimes “hooks de pre-commit”. Choose one style (anglicism or calque).  \n\n================================================================  \n4. TERMINOLOGY & CONSISTENCY  \n----------------------------------------------------------------  \n4-A  Major  “pre-commit hook” vs “hook de pre-commit” vs “hooks de pre-commit” (plural). Harmonise.  \n4-B  Moderate  Capitalisation of BASIC (you kept), but “basic interpreter” bullet uses “BASIC” OK.  \n4-C  Moderate  Git terms: sometimes “commit” as noun (bien), sometimes “hacer commit”, “los confirmará”. Maybe keep “commiteará” or “hará commit” consistently.  \n\n================================================================  \n5. GRAMMAR & FLUENCY  \n----------------------------------------------------------------  \n5-A  Moderate  Accent misuse: “agéntica”. If kept, no accent (palabra inglesa).  \n5-B  Moderate  “han pasado muchas cosas en el mundo Claude” → missing “de”: “en el mundo de Claude”.  \n5-C  Moderate  “Más “cookie clicker”.” Sentence fragment, see 1-C.  \n5-D  Moderate  “indicaciones de estilo sobre cómo me gusta programar.” Repetitive “sobre cómo”. Could be “sobre mi estilo de programación.”  \n5-E  Minor  “Se me daba fatal y sentía que perdía el tiempo.” → prefer “se me daba fatal y sentía que estaba perdiendo el tiempo.”  \n\n================================================================  \n6. MACHINE-LIKE / LITERAL SPOTS  \n----------------------------------------------------------------  \n6-A  Moderate  “Luego escribo en Claude Code lo siguiente” literal; more natural: “Después le paso a Claude Code lo siguiente:”  \n6-B  Minor  “Esto ya lo sabes.” Slightly didactic; the English “You know this already” is equally didactic—OK.  \n6-C  Minor  “Esto es genial porque no atasca tus GitHub Actions…” Fine, but “tus” → “las” if neutral.  \n\n================================================================  \n7. STYLE / PUNCTUATION / FORMATTING  \n----------------------------------------------------------------  \n7-A  Minor  In bullet lists, sometimes closes with point, sometimes not. Uniformise.  \n7-B  Minor  Add long dashes or parentheses to replicate side comments (“—MR BEEF may know best—”) rather than straight quotes.  \n7-C  Minor  Keep consistent italics / code font for filenames (`spec.md`, *feature*, etc.).  \n\n================================================================  \nSUGGESTED REWRITE OF THE MOST PROBLEMATIC PASSAGES  \n(illustrative only)  \n\n• Cookie clicker line  \n“Luego me relajo y le digo a Claude `yes` mientras hace el trabajo. Pide feedback y la magia sucede. Y yo, mientras, a hacer clic como si estuviera jugando a Cookie Clicker.”  \n\n• A+++ meme  \n“…para asegurarse de que tu código sea A+++ —lo volvería a ejecutar sin pensarlo dos veces.”  \n\n• 1982 shipping sentence  \n“La primera versión funcionó en una hora. Luego la pulí un par de horas más y quedó bastante decente. ¿La habría lanzado en 1982? Probablemente no.”  \n\n• Stronger expletives (if you want to match original tone)  \n“No sé C, tampoco sé escribir un intérprete y, francamente, me da igual. Pero a la mierda, vamos a ello.”  \n\n================================================================  \nCONCLUSION  \nThe translation is solid at a technical level but blunts the original’s irreverent, meme-heavy voice and loses a handful of key jokes/nuances. Address the critical items (meme lines, expletive strength, “ship”, “cookie clicker”, terminology consistency) and clean up the moderate grammatical details. Once fixed, the text will read as if originally written in Spanish while preserving the source’s personality.",
      "CRITIQUE OF THE SPANISH TRANSLATION  \n(Organised by severity and category, with concrete suggestions)\n\n============================================================\nA. CRITICAL MEANING ERRORS / OMISSIONS\n------------------------------------------------------------\n1. Gender switch of “friend”  \n   • Orig.: “she was like ‘you should write a post…’” (explicit female)  \n   • Trans.: “un/a amigo/a” ⇒ neutral / ambiguous.  \n   • Fix: “una amiga” (or keep English “una amiga” with link).\n\n2. “agentic coding” rendered twice, but core concept blurred  \n   • “agentic coding (programación basada en agentes)” equates “agentic” with “basada en agentes”. In the LLM community “agentic” ≈ “agentivo/a”, “con enfoque agentico”, not necessarily “basada en agentes” (multi-agent systems).  \n   • Risk of misleading technically–savvy readers.  \n   • Fix: “programación agentiva (agentic coding)” or “agentic coding (programación agentiva)”.\n\n3. Missing nuance: “quite compelling in so many ways”  \n   • “Resulta irresistible por mil razones.” drops “quite” and “in so many ways”. Small, but accumulative.  \n   • Fix: “…y sumamente atractiva de muchas maneras.”\n\n4. Bullet “MCP” left intact without gloss  \n   • In English list, fine; in Spanish flows, readers may think it’s a Spanish abbreviation.  \n   • Fix: at least first mention in parenthesis: “MCP (Model Code Playground) —si no lo conoces, googlea—”.\n\n5. Sentence “and not looked back” literally means “and I haven’t looked back.”  \n   • “no he vuelto la vista atrás” is idiomatic but slightly archaic. Acceptable but could be simplified: “y no he vuelto a mirar atrás.”\n\n6. “would execute again” inside A+++ sentence partially lost  \n   • Orig.: “A+++ would execute again.” – sarcastic meme.  \n   • Trans.: “A+++ —lo ejecutaría de nuevo sin dudar.” The meme tone (rating + “would X again”) nearly there but clunky.  \n   • Fix: “código A+++ —would run again.”\n\n============================================================\nB. TONE / REGISTER CONSISTENCY\n------------------------------------------------------------\n7. Sporadic usted vs. tú  \n   • General voice = muy informal (“joderá todo”, “carísimo de cojones”), yet later: “ayúdeme a presupuestar esto”.  \n   • Fix: keep consistent tuteo: “ayúdame”.\n\n8. Slang intensity mismatch  \n   • Orig. uses “hell of a lot”, “totally fucked”, “fuck it”, “fuck it all up”.  \n   • Trans. chooses “carísimo de cojones” (stronger in ES-ES), “a la mierda”, “joderá todo”. Good to mirror profanity, but “carísimo de cojones” may overshoot register if rest of text uses milder “joder”.  \n   • Suggestion: “carísimo de la hostia” / “carísimo de narices” or keep “carísimo” and rely on context.\n\n9. Anglicisms left untranslated without cue  \n   • “prompt plan”, “prompt”, “Greenfield”, “cookie clicker”, “big daddy rule” appear with no formatting / gloss. Readers may stumble.  \n   • Suggest putting in cursiva or monospace & a first parenthetical gloss.\n\n============================================================\nC. TECHNICAL TERMINOLOGY & CONSISTENCY\n------------------------------------------------------------\n10. “Linting” / “linter” : occasionally lowercase, sometimes capitalised. Pick one.  \n11. “TDD” appears once as “desarrollo guiado por pruebas (TDD)” and later solo “TDD”; OK, but “pruebas guiadas por tests” surfaces nowhere—good.\n\n12. “Mock” kept in English twice; elsewhere “mock” may confuse. Add first-time gloss: “mock (doble de prueba)”.\n\n13. “prompt plan” appears as “prompt plan” (EN) and once as “prompt_plan.md” (code). Decide: keep filename, but for concept add “plan de prompts (prompt plan)”.\n\n14. Commit / commiteará / commitear  \n   • Inconsistent orthography: “commit”, “commiteará”, “commitear”. Choose “hacer commit” OR adopt “commitear” consistently.\n\n============================================================\nD. GRAMMAR / SYNTAX / PUNCTUATION\n------------------------------------------------------------\n15. “He dado charlas en varias conferencias y dictado un par de clases”  \n   • “dictado” = overly formal/academic.  \n   • Fix: “impartido”.\n\n16. “Funciona de lujo.” Good, but sentence before ends in colon; watch precedent.\n\n17. “Soy fanático del linting. Es una gozada.” OK, but later: “Por alguna razón los ROBOTS disfrutan pasando un buen linter.” Verb “pasar” w/ “linter” sounds off.  \n   • Fix: “les encanta ejecutar un buen linter.”\n\n18. “Se quedará en `uv pip install`.” (“will just use”) – Mucho “en”.  \n   • Fix: “…se limitará a hacer `uv pip install`.”\n\n19. “Un intérprete de BASIC funcional” preferable “que funciona” or “operativo”.\n\n20. Bullet points mixing periods and no periods at line end; unify style.\n\n============================================================\nE. LOST/BLUNTED IDIOMS & CULTURAL REFERENCES\n------------------------------------------------------------\n21. “Who knew!” translated as “¡Quién lo diría!” Good.  \n22. “Kick back” = “relajarse” not “echarse para atrás” (sounds physically).  \n   • Fix: “me recuesto y me limito a escribir…”\n\n23. Reference to Homer’s drinking-bird hitting “y”  \n   • Works; but maybe add “(el pajarito con la cabeza que se balancea)” to ensure comprehension.\n\n============================================================\nF. MACHINE-LIKE / CLUNKINESS\n------------------------------------------------------------\n24. Excess English inline (agentic coding, cookie clicker, etc.) can feel copy-pasted. Provide minimal adaptation or explain.\n\n25. Slash “amigo/a” screams MT or inclusive placeholder. Decide on gender (see point 1) or rephrase neutrally: “con una amiga”.\n\n============================================================\nG. SUGGESTED MICRO-EDITS (non-exhaustive)\n------------------------------------------------------------\n• “Me flipa esto del agentic coding” ⇒ “Me flipa el agentic coding (o programación agentiva).”  \n• “Resulta irresistible por mil razones.” ⇒ “Me resulta irresistible por mil motivos.”  \n• “carísimo de cojones” ⇒ “carísimo” / “carísimo de la hostia”.  \n• “Así que, cuando le pides…” ⇒ remove first comma: “Así que cuando le pides…”  \n• “Lo aprecio un montón.” ⇒ “Lo agradezco un montón.”\n\n============================================================\nH. OVERALL ASSESSMENT\n------------------------------------------------------------\nThe translation captures most content, humour and profanity, and reads naturally in many places. Main weaknesses:  \n– A few meaning shifts (gender, agentic definition).  \n– Register inconsistencies (tú vs. usted, strength of slang).  \n– Scattered Anglicisms without gloss feel MT-ish.  \n– Minor grammatical rough edges and punctuation inconsistencies.\n\nImplementing the fixes above will yield a version faithful to the source while sounding 100 % nativo-español.",
      "CRÍTICA DETALLADA DE LA TRADUCCIÓN  \n(organizada por gravedad y categoría; cada punto incluye sugerencia de corrección)\n\n──────────────────────────────────  \nA. ERRORES DE FIDELIDAD / SIGNIFICADO  \n──────────────────────────────────  \n\nCRÍTICOS  \n1. Inserción de contenido inexistente  \n   • «MCP (Model Code Playground —si no lo conoces, googlea)» añade la expansión y la indicación “googlea”, que no figuran en el original.  \n     ⇒  Elimina la aclaración o muévela fuera de paréntesis indicando que es un añadido del traductor si se quiere conservar.  \n\n2. Explicación añadida sobre prompt_plan  \n   • «(el *prompt plan*, es decir, el plan de prompts)» introduce información explicativa extra.  \n     ⇒  Suprimir o reubicar como nota del traductor.  \n\n3. Cambio de fecha en el pie de foto  \n   • «15/11/2023» por «11/15/2023». El original usa formato mes/día; el cambio altera la información si se pretende exactitud documental.  \n     ⇒  Mantener el formato o anotar la conversión (p.ej. “15 de noviembre de 2023”).  \n\nIMPORTANTES  \n4. Omisión semántica leve  \n   • «It commits it to git» – En la explicación posterior se habla de “hacer commit” pero no se menciona explícitamente «to git». Puede quedar implícito, pero se pierde la referencia concreta a la herramienta.  \n     ⇒  Añadir “en Git” o “al repositorio Git”.  \n\n5. Traducción parcial del eslogan “A+++ would execute again”  \n   • Se deja en inglés («A+++ —would run again») y, además, “execute” ≠ “run” necesariamente.  \n     ⇒  «…para asegurarse de que tu código es A+++: lo volvería a ejecutar sin dudar» o similar.  \n\n6. “Greenfield”  \n   • El original escribe “Greenfield” con mayúscula (nombre propio). El texto resultante lo deja en minúscula y sin cursiva.  \n     ⇒  Usar “greenfield” en cursiva o «de cero (greenfield)» para claridad.  \n\n──────────────────────────────────  \nB. TONO / REGISTRO  \n──────────────────────────────────  \n\nCRÍTICOS  \n7. Intensidad del taco «de la hostia»  \n   • Original: “a hell of a lot”. Traducción: “carísimo de la hostia”. El español eleva el tono a vulgaridad más fuerte.  \n     ⇒  Sustituir por «carísimo de narices» / «carísimo a más no poder».  \n\nIMPORTANTES  \n8. Coherencia de coloquialismos  \n   • Se mezclan registros: “me flipa”, “mola”, “top”, “curra”, “bazofia”, “a la mierda” vs. anglicismos técnicos. Mantener la frescura, pero sin dispersión de jergas de distintos países.  \n     ⇒  Unificar a un coloquialismo neutro hispano o, si se quiere mantener color, atenerse a una sola variedad.  \n\n9. “Mi familia se muere”  \n   • Podría suavizarse a “Mi familia se está arruinando” para mantener el chiste sin sonar literal.  \n\n──────────────────────────────────  \nC. LENGUAJE NATURAL / FLUIDEZ  \n──────────────────────────────────  \n\nIMPORTANTES  \n10. «Es sumamente atractivo de muchas maneras»  \n    – Calcado anglicista.  \n    ⇒ «…muy atractivo en muchos sentidos».  \n\n11. «incrustar en tu proceso»  \n    – Español poco idiomático.  \n    ⇒ «incorporar a tu proceso».  \n\n12. «Se lo zampan»  \n    – Puede sonar forzado.  \n    ⇒ «Les encanta».  \n\n13. «exprimen un montón más»  \n    – Construcción brusca.  \n    ⇒ «permiten sacarle muchísimo más partido».  \n\n14. «Esto es un *feature*, no un *bug*»  \n    – Discordancia de género (“una feature”).  \n    ⇒ «Esto es una *feature*, no un *bug*» o «Es una característica, no un error».  \n\nMENORES  \n15. «sacar ventaja»  \n    – Preferible «sacar provecho».  \n\n16. «para asegurarse de que tu código es A+++ —would run again»  \n    – Además del problema de fidelidad, la raya antes de “would” corta la frase.  \n    ⇒ Reescribir completamente.  \n\n──────────────────────────────────  \nD. TERMINOLOGÍA TÉCNICA  \n──────────────────────────────────  \n\nIMPORTANTES  \n17. Anglicismos sin marcado o glosa  \n    – commit, prompt, linter, mock, formatter, type-checking… Se permite su uso, pero conviene cursivarlos o traducirlos la primera vez: «*commit* (confirmación)», «*prompt* (instrucción)», etc.  \n\n18. “uv tools install pre-commit”  \n    – Falta formateo de código.  \n    ⇒ Encerrar en backticks.  \n\n──────────────────────────────────  \nE. GRAMÁTICA / PUNTUACIÓN  \n──────────────────────────────────  \n\nIMPORTANTES  \n19. Concordancia numérica  \n    – «han pasado un montón de cosas» correcto; vigilar que no vuelva a aparecer “ha pasado”.  \n\n20. Uso de comas antes de “y”  \n    – Hay comas anglicistas («…, y»). Eliminar cuando no sea enumeración.  \n\nMENORES  \n21. Mayúsculas innecesarias (“LOS ROBOTS”, “CLAUDE”) fuera de estilo de énfasis; se puede usar cursiva o versalitas.  \n\n22. «u o3»  \n    – La “u” delante de «o3» puede confundir. Mejor «o bien o3».  \n\n──────────────────────────────────  \nF. CONSISTENCIA ESTILÍSTICA  \n──────────────────────────────────  \n\nMENORES  \n23. Fechas: se usan varios formatos (15/11/2023, 17/11/2024). Unificar.  \n24. Acentuación de anglicismos: «pre-commit», «Greenfield», etc. Mantener coherencia (cursiva o sin cursiva).  \n\n──────────────────────────────────  \nG. SUGERENCIA GLOBAL DE REVISIÓN  \n──────────────────────────────────  \n\n• Retirar añadidos no presentes en el original o marcarlos expresamente.  \n• Arreglar la frase con “A+++ would execute again”.  \n• Moderar el nivel de tacos (especialmente «de la hostia»).  \n• Homogeneizar coloquialismos y anglicismos, glosando al menos la primera vez.  \n• Revisar fluides sintáctica: evitar calcados (“de muchas maneras”) y anglicismos incrustados.  \n• Cuidar concordancias y puntuación menores.  \n\nImplementando estos cambios la traducción sonará natural, conservará el tono socarrón del autor y se mantendrá 100 % fiel al original.",
      "MERCILESS REVIEW OF THE SPANISH VERSION  \n\n───────────────────────────────────────────────  \nLEGEND  \n• CR = Critical (meaning changes, omissions, false additions)  \n• MJ = Major (tone, nuance, technical consistency, register)  \n• MN = Minor (style polish, punctuation, fluency)  \n\nFor each point I quote the English source (EN) and the current Spanish (ES), identify the problem, then propose a fix.\n\n================================================\n1. ACCURACY: MISTRANSLATIONS, OMISSIONS, ADDITIONS\n================================================\n\nCR-1  “Someone who has a lot of tokens, please help me budget this. **My family is dying.**”  \nES: “Alguien con un montón de tokens, por favor, ayúdame a presupuestar esto. **Mi familia se está arruinando.**”  \nIssue “se está arruinando” (going broke) waters down the dark-humour hyperbole “is dying”.  \nFix “…Mi familia se muere.” (or “mi familia se está muriendo”). Keep the comic exaggeration.\n\nCR-2  “I then kick back and tell **claude** `yes` …” (brand written lowercase in source)  \nES: “Entonces me relajo y me limito a escribir `yes` mientras **Claude** curra.”  \nIssue Capitalisation changed; could confuse CLI command vs. product brand.  \nFix Maintain lowercase when it refers to the CLI/bot: “…mientras **claude** curra.”\n\nCR-3  “It commits it to git, and then updates the prompt plan…”  \nES: “Hace *commit* en Git, actualiza el *prompt plan*…”  \nIssue Capitalising “Git” suggests company/product, not VCS command; in CLI context “git” is lowercase.  \nFix “…hace *commit* con **git**, actualiza…”\n\nCR-4  “THIS IS BAD FOR ROBOTS.”  \nES: “*ESTO ES NEFASTO PARA LOS ROBOTS.*”  \nIssue Loss of typographic shouting (“BAD”) — “nefasto” adds nuance but weakens original bluntness.  \nFix “ESTO ES **MALO** PARA LOS ROBOTS.” (All caps, literal)\n\nCR-5  “It makes boomers mad too.”  \nES: “además cabrea a los boomers.”  \nIssue Omitted subject “it” (“también” is clearer) and lost humour beat order.  \nFix “También hace que los boomers se enfaden.”\n\nCR-6  Omitted micro-sentence “Lots more cookie clicker.”  \nES merges with previous line; reader may not catch it as a stand-alone joke.  \nFix Keep on its own: “Y muchos más clics de Cookie Clicker.”\n\nCR-7  “Regardless of apparent complexity or language.”  \nES: “sin importar la complejidad aparente o el lenguaje.”  \nIssue Missing definite article “el”: “o **el** lenguaje.” (Spanish grammar)\n\nCR-8  In hook section: “Every time you try and commit it will run all these wonderful tests, type checking, linting, and whatnot to make sure your code is A+++ **would execute again.**”  \nES: “…para asegurarse de que tu código es A+++; **lo volvería a ejecutar sin dudar.**”  \nIssue Original phrase means “would pass again”, not “would execute again”.  \nFix “…para asegurar que tu código sea A+++ y volvería a **aprobar** cada vez.”\n\n================================================\n2. NUANCE / REGISTER / CULTURAL EQUIVALENCE\n================================================\n\nMJ-1  “Me flipa” for “I really like”  \nHyper-colloquial Iberian-Spanish; narrows audience. A more neutral yet informal “Me encanta” or “Me mola mucho” preserves tone without regional bias.\n\nMJ-2  Slang “curra”, “mola”, “qué demonios”, “le mangué”  \nAll distinctly Peninsular. Source is informal but not region-locked. Consider neutral pan-Hispanic options: “trabaja”, “está genial”, “qué rayos”, “le tomé prestado”.\n\nMJ-3  “Programación agentiva”  \n“Agentic” in psychology ≈ “agéntico”. “Agentivo” actually means a grammatical voice. Suggest “programación agéntica” or keep English italic “agentic coding”.\n\nMJ-4  “Hooks de *pre-commit*” vs “pre-commit hooks”  \nIn Spanish tech writing order usually “hooks de pre-commit” is fine, but maintain italics consistently (some parts italics, others not).\n\nMJ-5  “A más no poder” intensifier + ellipsis abuse  \nTone ok but piling colloquialisms (“potentísimo… y carísimo a más no poder”) plus ellipsis can read over-dramatic. One element is enough.\n\n================================================\n3. TECHNICAL CONSISTENCY\n================================================\n\nMJ-6  File names and commands should appear exactly as in source.  \nExamples: “@prompt_plan.md” sometimes shown in bold, sometimes not; “CLAUDE.md” all caps. Pick one convention and stick to it.\n\nMJ-7  “spec.md” vs “`spec.md`”  \nSometimes the backticks are lost; keep monospaced formatting for all filenames.\n\nMJ-8  “greenfield” left italic but not defined. Acceptable, yet could add a parenthetical “(desde cero)”.\n\n================================================\n4. GRAMMAR / PUNCTUATION / TYPOGRAPHY\n================================================\n\nMN-1  Comma splice: “Sigo apreciando Aider —tiene su momento—, pero Claude Code me resulta…”  \nEn dash is fine, but remove preceding comma: “Aider —tiene su momento— pero”.\n\nMN-2  quotes: sometimes smart quotes «», sometimes English quotes “”. Pick one.\n\nMN-3  Inconsistent italicisation of English terms (“spec”, “prompt plan”, “linting”). Choose a style guide (e.g., italicise first-time foreign term, roman afterwards).\n\nMN-4  Capitalisation of headings (“## ¡Programación defensiva!”) — Spanish titles in sentence case, so: “## Programación defensiva”.\n\nMN-5  Duplicated ellipses and exclamations (“potentísimo… y carísimo…”). Limit to one ellipse; avoid “…lol.” (punctuation duplication)\n\n================================================\n5. MACHINE-LIKE / STIFF SEGMENTS\n================================================\n\nMN-6  Sections that quote entire English paragraphs (the prompt) without any framing note may feel copy-pasted. Add “(en inglés en el original)” or translate comments inside list items to maintain flow.\n\nMN-7  Literal calque “Esto es un gran hack” — “hack” is imported, but “truco” or “atajo” fits Spanish idiom while keeping geek flavour: “Es un truco buenísimo”.\n\n================================================\nSUMMARY OF KEY FIXES\n================================================\n• Restore hyperbole: “Mi familia se muere”  \n• Use lowercase “claude” and “git” when referring to commands.  \n• Adjust overly Iberian slang if aiming for broader audience.  \n• Tighten technical formatting consistency (code font, bold, caps).  \n• Keep shouting/capitalisation where source shouts.  \n• Correct minor grammar (articles, commas) and polish ellipsis/quote style.  \n\nWith these changes the translation will remain faithful, preserve humour, and read as original Spanish prose rather than an English shadow."
    ]
  },
  "critique_loop_details": {
    "critique_usages": [
      {
        "prompt_tokens": 5136,
        "completion_tokens": 1687,
        "total_tokens": 6823
      },
      {
        "prompt_tokens": 5164,
        "completion_tokens": 1605,
        "total_tokens": 6769
      },
      {
        "prompt_tokens": 5233,
        "completion_tokens": 1528,
        "total_tokens": 6761
      },
      {
        "prompt_tokens": 5223,
        "completion_tokens": 1614,
        "total_tokens": 6837
      }
    ],
    "feedback_usages": [
      {
        "prompt_tokens": 6750,
        "completion_tokens": 2362,
        "total_tokens": 9112
      },
      {
        "prompt_tokens": 6729,
        "completion_tokens": 2435,
        "total_tokens": 9164
      },
      {
        "prompt_tokens": 6832,
        "completion_tokens": 2426,
        "total_tokens": 9258
      },
      {
        "prompt_tokens": 6798,
        "completion_tokens": 2413,
        "total_tokens": 9211
      }
    ]
  },
  "timestamp": "2025-06-28T17:02:32.114360"
}