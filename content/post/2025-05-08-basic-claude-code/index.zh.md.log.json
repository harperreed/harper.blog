{
  "input_file": "index.md",
  "output_file": "index.zh.md",
  "target_language": "mandarin",
  "language_code": "zh",
  "model": "o3",
  "skip_edit": false,
  "do_critique": true,
  "critique_loops": 4,
  "has_frontmatter": true,
  "translation_context": "a blog post describing my code gen workflow with claude code",
  "token_usage": {
    "prompt_tokens": 59471,
    "completion_tokens": 19556,
    "total_tokens": 79027
  },
  "cost": "$1.3769",
  "prompts_and_responses": {
    "translation": {
      "model": "o3",
      "target_language": "mandarin",
      "system_prompt": "\n        1. Read the provided text carefully, preserving all formatting, markdown, and structure exactly as they appear.\n        2. Identify any block quotes and code blocks.\n        3. Do not translate text in block quotes or in code blocks (including text within code blocks).\n        4. Translate everything else into mandarin.\n        5. Maintain the original formatting, markdown, and structure in your output.\n        6. Provide a natural-sounding translation rather than a word-for-word one.\n        7. For idioms, colloquialisms, or slang, render them in an equivalent, natural way in mandarin whenever possible.\n        8. If there isn't a direct or natural translation for a particular term or phrase, keep it in the original language and surround it with quotes if necessary.\n        9. Ensure that technical terms or jargon remain accurate; if there's no suitable translation, keep the original term.\n        10. Strive for fluid, native-sounding prose that retains the tone and intent of the original text.\n        11. If context about the text is provided, use it to inform your translation choices, especially regarding tone, style, and cultural adaptations.\n        ",
      "user_prompt": "# CONTEXT\na blog post describing my code gen workflow with claude code\n\n# TEXT TO TRANSLATE\nI really like this agentic coding thing. It is quite compelling in so many ways.\n\nSince I wrote [that original blog post](/2025/02/16/my-llm-codegen-workflow-atm/) a lot has happened in Claude land:\n\n- Claude Code\n- MCP\n- etc\n\nI have received hundreds (wat) of emails from people talking about their workflows and how they have used my workflow to get ahead. I have spoken at a few conferences, and taught a few classes about codegen. I have learned that computers really want to spellcheck codegen to codeine, who knew!\n\n{{< image src=\"codegen.png\"  >}}\n\nI was talking to a [friend](https://www.elidedbranches.com/) the other day about how we are **all totally fucked** and **AI will take our jobs** (more on that in a later post), and she was like \"you should write a post about claude code.\"\n\nHere we go.\n\nClaude Code was released eight days after I wrote my original workflow blog post, and as I predicted, it made a lot of my post irrelevant. I have since migrated from Aider to Claude Code and not looked back. I still like Aider, and it has a distinct use, but Claude Code is a bit more useful atm.\n\nClaude Code is powerful, and a hell of a lot more expensive.\n\nMy workflow is very similar to what it was before.\n\n- I chat with `gpt-4o` to hone my idea\n- I use the best reasoning model I can find to generate the spec. These days it is o1-pro or o3 (is o1-pro better than o3? Or do I feel like it is better cuz it takes longer?)\n- I use the reasoning model to generate the prompts. Using an LLM to generate prompts is a beautiful hack. It makes boomers mad too.\n- I save the spec.md, and the prompt_plan.md in the root of the project.\n- I then type into claude code the following:\n\n```prompt\n1. Open **@prompt_plan.md** and identify any prompts not marked as completed.\n2. For each incomplete prompt:\n    - Double-check if it's truly unfinished (if uncertain, ask for clarification).\n    - If you confirm it's already done, skip it.\n    - Otherwise, implement it as described.\n    - Make sure the tests pass, and the program builds/runs\n    - Commit the changes to your repository with a clear commit message.\n    - Update **@prompt_plan.md** to mark this prompt as completed.\n3. After you finish each prompt, pause and wait for user review or feedback.\n4. Repeat with the next unfinished prompt as directed by the user.\n```\n\n- The magic with this prompt is that it checks the prompt plan. Looks for things that are not marked as completed, then does the next remaining task. It commits it to git, and then updates the prompt plan with what is complete. It then pops up and asks you to continue once it is done. 🤌\n\n- I then kick back and tell claude `yes` while it does the work. It will pop up for feedback, and magic happens.\n- Lots more cookie clicker.\n\nThis works super well. There are a few superpowers you can embed in your process that will really help.\n\n## Defensive coding!\n\n### Testing\n\nTesting and test-driven development is a must. I highly recommend really engaging in building out a robust TDD practice.\n\nI was a TDD hater. I was bad at it and I felt like I was wasting time. I was not correct. Lol. I recognize that, and we built in a lot of testing into our companies and projects over the past few decades. Most of the testing was added AFTER the core work was done. This is fine for humans.\n\nTHIS IS BAD FOR ROBOTS.\n\nThe robots LOVE TDD. Seriously. They eat it up.\n\nWith TDD you have the robot friend build out the test, and the mock. Then your next prompt you build the mock to be real. And the robot just loves this. It is the most effective counter to hallucination and LLM scope drift I have found. It really helps the robots to stay on task.\n\n### Linting\n\nI am such a fan of linting. It is so nice. Ruff is a wonderful product. Biome is cool. Clippy is fun (and a good name).\n\nFor whatever reason the ROBOTS love to run a good linter.\n\nBuilding in the practice to run the linter constantly has kept a lot of bugs away, and kept the code more maintainable and easier to read. You know this already.\n\nAdd in a good formatter and everything is beautiful.\n\n### Pre Commit hooks\n\nThe real magic of all this is to add these tasks to a pre-commit hook. I recommend the pre-commit python package. You can easily use it via an `uv tools install pre-commit` command and then just build out a nice `.pre-commit-config.yaml` file and bam. Every time you try and commit it will run all these wonderful tests, type checking, linting, and whatnot to make sure your code is A+++ would execute again.\n\nThis is a great hack for working with Claude Code. The robot REALLLLLY wants to commit. So when you instruct it to do some code and then commit (like I did above) it will make wild code changes, commit the code, inevitably fuck it all up and then have to fix it.\n\nThis is nice cuz it doesn't clog your GitHub actions with a bunch of linting, formatting, and type checking execution that doesn't pass cuz the robot was in a mood.\n\n> A funny thing about claude is it CANNOT for the life of it figure out how to use `uv` correctly. It will pip install shit all over the place if you are not careful. And if you instruct it to use `uv` it will just use `uv pip install.` Maybe AGI isn't going to happen in June. so sad.\n\n### Claude.md and commands\n\nThese are both really simple additions that can squeeze a lot out.\n\n{{< image src=\"_SDI8149.jpg\" alt=\"Jesse at the studio, Sept 15, 2023, Ricoh GRiii\" caption=\"Jesse at the studio, Sigma fp, 11/15/2023\" >}}\n\nI stole a [CLAUDE.md](https://github.com/harperreed/dotfiles/blob/master/.claude/CLAUDE.md) from my friend [Jesse Vincent](https://fsck.com/) who did an [awful lot of work on making it very robust](https://github.com/obra/dotfiles/blob/main/.claude/CLAUDE.md). It is quite nice. Some things that are built into it:\n\n- a light version of the big daddy rule.\n- instructions on how to do TDD\n- stylistic instructions on how I like to code.\n\n> [@clint](https://instagram.com/clintecker) configured his CLAUDE.md to call him MR BEEF and it is currently embedding info about MR BEEF in our all documentation: \"If you're stuck, stop and ask for help—MR BEEF may know best.\". While typing this out, I decided to make my CLAUDE.md file call me \"Harp Dog.\" This is a feature, not a bug.\n\nThe commands are also really nice. You can see some of mine in my dotfiles [here](https://github.com/harperreed/dotfiles/tree/master/.claude/commands).\n\n{{< image src=\"commands.png\"  >}}\n\nI used to use the commands way more, but it is a really great way to get a lot out of regularly used prompts. You can also pass arguments to the commands. For instance in my github issues command, you pass the issue number that you want claude to look at: `/user:gh-issue #45`\n\nClaude will now go and run through the \"prompt\" script that is defined in the `gh-issue.md` file.\n\nYou can also put these commands in a project directory, and make a custom CLAUDE.md in the project directory. I do this to make hugo, rust, go, or javascript specific commands per project.\n\n## \"Continue\"\n\n{{< image src=\"https://media4.giphy.com/media/v1.Y2lkPTc5MGI3NjExNDk3ZTZpdWYwdG5sdmpnaTJqNzJhYXlvcmp6bnNmdmhxaGdoeHJ4MyZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/l2Je3fIeeXyYEM85G/giphy.gif\" >}}\n\nSometimes I feel like that bird that Homer got to hit \"y\". I am just writing \"continue\" or pressing up and pasting in the same prompt.\n\nMost of the time the plans are about 8–12 steps. I can usually get through a Greenfield development plan in about 30–45 minutes regardless of apparent complexity or language.\n\nI was talking through with my friend Bob and he did not believe it. I asked him \"name a thing to build, a language to build it in - and let's see!\"\n\n{{< image src=\"R0000693.jpeg\" caption=\"Bob Swartz, Ricoh GRiiix, 11/17/2024\" >}}\n\nHe was like \"ok. A basic interpreter in C.\"\n\nThis wasn't ideal. I don't know C. I don't really know how to write an interpreter, nor do I really want to. But fuck it.\n\nI followed the above steps and Claude Code did great. We have [a working basic interpreter](https://github.com/harperreed/basic). The first version worked within an hour. I futzed with it for a few more hours and it is pretty good. Would it ship it in 1982? Probably not. You can see the [prompt plan here](https://raw.githubusercontent.com/harperreed/basic/refs/heads/main/docs/prompt_plan.md).\n\n## The Team\n\nOur entire team is using Claude Code currently. We are all approximately following the above process with a lot of person tweaks.\n\nWe are doing way way higher test coverage than we have ever done. We have better code, and it seems to be just as effective as the horrible code we wrote in the past. It is fun to glance at people working and see claude code running in ghostty, in vscode terminal, in zed terminal, and messing with python notebooks.\n\n{{< image src=\"dril.jpg\" >}}\n\nSomeone who has a lot of tokens, please help me budget this. My family is dying.\n\n## thanks\n\nTo all the folks who keep emailing me. It is really fun and nice to hear about your workflows, and projects. I really appreciate it. Keep em coming!",
      "context": "a blog post describing my code gen workflow with claude code",
      "response": "I really like this agentic coding thing. 它在很多方面都非常吸引人。\n\n自从我写下[最初的那篇博客](/2025/02/16/my-llm-codegen-workflow-atm/)以来，Claude 的世界发生了不少变化：\n\n- Claude Code\n- MCP\n- etc\n\n我收到了数百封邮件（wat），大家分享他们的工作流，以及如何利用我的流程抢占先机。我在几个会议上做了演讲，也开了几堂关于代码生成的课。后来我发现电脑总想把 “codegen” 拼写检查成 “codeine”，谁知道呢！\n\n{{< image src=\"codegen.png\"  >}}\n\n前几天我和一位[朋友](https://www.elidedbranches.com/)聊天，我们说到**大家都要完蛋了**、**AI 会抢走我们的工作**（以后会专门写一篇）。她跟我说：“你应该写一篇关于 Claude Code 的文章。”\n\n那就写吧。\n\nClaude Code 在我发布原始工作流博客八天后上线，正如我预料的那样，它让我的那篇文章的大部分内容瞬间过时。此后我把工具从 Aider 迁移到 Claude Code，再也没回头。Aider 我依旧喜欢，也有它独特的用途，但眼下 Claude Code 更好用一些。\n\nClaude Code 功能强大，但也贵得多。\n\n我的工作流和以前差不多：\n\n- 先用 `gpt-4o` 聊天，打磨想法  \n- 用我能找到的最佳推理模型生成规格说明——现在一般是 o1-pro 或 o3（o1-pro 真的比 o3 好吗？还是因为它慢所以我觉得更好？）  \n- 继续用同一个推理模型生成提示词。让 LLM 来写提示词是个绝妙的黑客手段，而且还能把 boomers 气个半死。  \n- 把 spec.md 和 prompt_plan.md 保存到项目根目录  \n- 然后在 claude code 里输入：\n\n```prompt\n1. Open **@prompt_plan.md** and identify any prompts not marked as completed.\n2. For each incomplete prompt:\n    - Double-check if it's truly unfinished (if uncertain, ask for clarification).\n    - If you confirm it's already done, skip it.\n    - Otherwise, implement it as described.\n    - Make sure the tests pass, and the program builds/runs\n    - Commit the changes to your repository with a clear commit message.\n    - Update **@prompt_plan.md** to mark this prompt as completed.\n3. After you finish each prompt, pause and wait for user review or feedback.\n4. Repeat with the next unfinished prompt as directed by the user.\n```\n\n- 这个提示的魔力在于它会检查 prompt plan，找出还没标记完成的任务，然后执行下一个未完成的任务。它把改动提交到 git，再更新 prompt plan，标注已完成。完成后它会停下来，让你决定是否继续。🤌  \n- 我就靠在椅子上，对 claude 说 `yes`，然后看它干活。它会时不时弹窗求反馈，神奇的事情就发生了。  \n- 更多点点点，好像玩 Cookie Clicker。\n\n这一套行之有效。有几个“超级能力”如果嵌进流程，会更给力。\n\n## 防御式编码！\n\n### 测试\n\n测试和测试驱动开发（TDD）是刚需。我强烈建议认真培养健全的 TDD 习惯。\n\n以前我讨厌 TDD，做得烂，觉得浪费时间。事实证明我错得离谱，哈哈。过去几十年我们在公司和项目里补了很多测试，但大多是做完核心功能后才补，这对人类还行。\n\n对机器人就**很糟糕**。\n\n机器人**超爱** TDD，真的，简直是它们的精神粮食。\n\n有了 TDD，你让机器人先写测试和 mock；下一个提示再把 mock 实现成真。机器人超享受。这是我发现的最有效的防幻觉、控范围办法，让它们专注。\n\n### Lint\n\n我超爱 Lint，真舒服。Ruff 很棒，Biome 很酷，Clippy 又好用名字又好听。\n\n不知道为什么，ROBOT 超爱跑 Linter。\n\n把 Linter 当日常操作，能赶走不少 bug，让代码更易维护、也更易读。你肯定懂。\n\n加上 Formatter，一切优雅。\n\n### Pre-Commit 钩子\n\n真正的魔法是把这些任务写进 pre-commit 钩子。我推荐 python 的 pre-commit 包，只要 `uv tools install pre-commit`，配个 `.pre-commit-config.yaml`，搞定。每次 commit 都会自动跑测试、类型检查、Lint 等等，确保你的代码 A+++，随时能再跑。\n\n这对 Claude Code 特别好使。机器人**巨想**提交代码。你像上面那样让它写完就 commit，它可能疯狂改代码，一提交就全炸，然后再去修。\n\n好处是不会把 GitHub Actions 挤爆，全是过不了的 Lint、格式化、类型检查；机器人闹情绪也不怕。\n\n> A funny thing about claude is it CANNOT for the life of it figure out how to use `uv` correctly. It will pip install shit all over the place if you are not careful. And if you instruct it to use `uv` it will just use `uv pip install.` Maybe AGI isn't going to happen in June. so sad.\n\n### Claude.md 和 commands\n\n这俩都很简单，却能榨出很多价值。\n\n{{< image src=\"_SDI8149.jpg\" alt=\"Jesse at the studio, Sept 15, 2023, Ricoh GRiii\" caption=\"Jesse at the studio, Sigma fp, 11/15/2023\" >}}\n\n我从朋友 [Jesse Vincent](https://fsck.com/) 那里“偷”来一份[CLAUDE.md](https://github.com/harperreed/dotfiles/blob/master/.claude/CLAUDE.md)，他[做了大量完善工作](https://github.com/obra/dotfiles/blob/main/.claude/CLAUDE.md)。真不错，里面有：\n\n- 精简版 “big daddy rule”  \n- 如何搞 TDD 的指令  \n- 我的编码风格说明  \n\n> [@clint](https://instagram.com/clintecker) 把他的 CLAUDE.md 配成称呼他 MR BEEF，于是现在我们所有文档里都嵌着 MR BEEF：“If you're stuck, stop and ask for help—MR BEEF may know best.” 我写这段时决定把自己的 CLAUDE.md 改叫我 “Harp Dog”。这不是 bug，是 feature。\n\ncommands 也很好用。我的一些示例在 dotfiles 里可以看到：[这里](https://github.com/harperreed/dotfiles/tree/master/.claude/commands)。\n\n{{< image src=\"commands.png\"  >}}\n\n我以前更常用 commands，它能把常用提示词变得超高效。还能传参，比如 GitHub issue 命令就传 issue 号：`/user:gh-issue #45`。\n\nClaude 会按 `gh-issue.md` 里的 “prompt” 脚本去处理。\n\n你也可以把这些 commands 放到项目目录，给项目自定义 CLAUDE.md。我会针对 hugo、rust、go、javascript 分别搞一套。\n\n## “Continue”\n\n{{< image src=\"https://media4.giphy.com/media/v1.Y2lkPTc5MGI3NjExNDk3ZTZpdWYwdG5sdmpnaTJqNzJhYXlvcmp6bnNmdmhxaGdoeHJ4MyZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/l2Je3fIeeXyYEM85G/giphy.gif\" >}}\n\n有时候我感觉自己像霍默雇的那只会按 “y” 的鸟——我只是在键盘上打 “continue”，或上箭头粘贴同一条提示。\n\n大多数计划大概 8–12 步。不管项目看上去多复杂、用什么语言，我通常能在 30–45 分钟里搞定 Greenfield 开发。\n\n我和朋友 Bob 聊起这事，他根本不信。我说：“随便说个要做的东西、要用的语言，看看吧！”\n\n{{< image src=\"R0000693.jpeg\" caption=\"Bob Swartz, Ricoh GRiiix, 11/17/2024\" >}}\n\n他说：“行，一个用 C 写的 BASIC 解释器。”\n\n这可不妙。我不懂 C，也不会写解释器，更没兴趣。但管它呢。\n\n我照上面流程走，Claude Code 表现不错。现在我们有[能跑的 BASIC 解释器](https://github.com/harperreed/basic)。首个版本一小时搞定，我又折腾了几小时，效果不错。要是在 1982 年能发货吗？大概不行。你可以看[prompt plan](https://raw.githubusercontent.com/harperreed/basic/refs/heads/main/docs/prompt_plan.md)。\n\n## 团队\n\n我们整个团队现在都用 Claude Code，大体按上面流程，各有些个性化调整。\n\n我们的测试覆盖率比历史任何时候都高；代码质量更好，而且看起来跟以前那些烂代码一样高效。偶尔瞄一眼同事屏幕，ghostty、vscode 终端、zed 终端、python notebook 里到处是 claude code，挺有意思。\n\n{{< image src=\"dril.jpg\" >}}\n\n哪位 token 多的大佬帮我算算预算吧，我家快揭不开锅了。\n\n## thanks\n\n感谢所有给我发邮件的人。看到你们的工作流和项目真的既有趣又暖心。我非常感激，欢迎继续轰炸！",
      "usage": {
        "prompt_tokens": 2550,
        "completion_tokens": 2183,
        "total_tokens": 4733
      },
      "streaming": true
    },
    "editing": {
      "model": "o3",
      "target_language": "mandarin",
      "system_prompt": "\n        1. Carefully read the translated text alongside the original text in its entirety.\n        2. Compare both texts to ensure the translation accurately reflects the original meaning.\n        3. Correct any grammatical errors you find in the mandarin text.\n        4. Adjust phrasing to make it sound natural and fluent for mandarin speakers, making sure idioms and expressions are culturally appropriate.\n        5. Preserve the original tone, nuance, and style, including any formatting, markdown, and structure.\n        6. Avoid adding new information or altering the core meaning.\n        7. Ensure the final result doesn't feel machine-translated but remains faithful to the source.\n        8. Make only changes that genuinely improve the text's quality in mandarin.\n        9. Don't be too literal. If there isn't a direct translation, provide a natural-sounding translation.\n        10. If the text contains idioms or colloquialisms, translate them into the target language while maintaining their original meaning.\n        11. If the text contains technical terms or jargon, ensure that the translation is accurate and appropriate for the target audience, if there isn't a natural translation, keep it in the original language.\n        12. If there is not natural translation, keep it in the original language.\n        ",
      "user_prompt": "# ORIGINAL TEXT\nI really like this agentic coding thing. It is quite compelling in so many ways.\n\nSince I wrote [that original blog post](/2025/02/16/my-llm-codegen-workflow-atm/) a lot has happened in Claude land:\n\n- Claude Code\n- MCP\n- etc\n\nI have received hundreds (wat) of emails from people talking about their workflows and how they have used my workflow to get ahead. I have spoken at a few conferences, and taught a few classes about codegen. I have learned that computers really want to spellcheck codegen to codeine, who knew!\n\n{{< image src=\"codegen.png\"  >}}\n\nI was talking to a [friend](https://www.elidedbranches.com/) the other day about how we are **all totally fucked** and **AI will take our jobs** (more on that in a later post), and she was like \"you should write a post about claude code.\"\n\nHere we go.\n\nClaude Code was released eight days after I wrote my original workflow blog post, and as I predicted, it made a lot of my post irrelevant. I have since migrated from Aider to Claude Code and not looked back. I still like Aider, and it has a distinct use, but Claude Code is a bit more useful atm.\n\nClaude Code is powerful, and a hell of a lot more expensive.\n\nMy workflow is very similar to what it was before.\n\n- I chat with `gpt-4o` to hone my idea\n- I use the best reasoning model I can find to generate the spec. These days it is o1-pro or o3 (is o1-pro better than o3? Or do I feel like it is better cuz it takes longer?)\n- I use the reasoning model to generate the prompts. Using an LLM to generate prompts is a beautiful hack. It makes boomers mad too.\n- I save the spec.md, and the prompt_plan.md in the root of the project.\n- I then type into claude code the following:\n\n```prompt\n1. Open **@prompt_plan.md** and identify any prompts not marked as completed.\n2. For each incomplete prompt:\n    - Double-check if it's truly unfinished (if uncertain, ask for clarification).\n    - If you confirm it's already done, skip it.\n    - Otherwise, implement it as described.\n    - Make sure the tests pass, and the program builds/runs\n    - Commit the changes to your repository with a clear commit message.\n    - Update **@prompt_plan.md** to mark this prompt as completed.\n3. After you finish each prompt, pause and wait for user review or feedback.\n4. Repeat with the next unfinished prompt as directed by the user.\n```\n\n- The magic with this prompt is that it checks the prompt plan. Looks for things that are not marked as completed, then does the next remaining task. It commits it to git, and then updates the prompt plan with what is complete. It then pops up and asks you to continue once it is done. 🤌\n\n- I then kick back and tell claude `yes` while it does the work. It will pop up for feedback, and magic happens.\n- Lots more cookie clicker.\n\nThis works super well. There are a few superpowers you can embed in your process that will really help.\n\n## Defensive coding!\n\n### Testing\n\nTesting and test-driven development is a must. I highly recommend really engaging in building out a robust TDD practice.\n\nI was a TDD hater. I was bad at it and I felt like I was wasting time. I was not correct. Lol. I recognize that, and we built in a lot of testing into our companies and projects over the past few decades. Most of the testing was added AFTER the core work was done. This is fine for humans.\n\nTHIS IS BAD FOR ROBOTS.\n\nThe robots LOVE TDD. Seriously. They eat it up.\n\nWith TDD you have the robot friend build out the test, and the mock. Then your next prompt you build the mock to be real. And the robot just loves this. It is the most effective counter to hallucination and LLM scope drift I have found. It really helps the robots to stay on task.\n\n### Linting\n\nI am such a fan of linting. It is so nice. Ruff is a wonderful product. Biome is cool. Clippy is fun (and a good name).\n\nFor whatever reason the ROBOTS love to run a good linter.\n\nBuilding in the practice to run the linter constantly has kept a lot of bugs away, and kept the code more maintainable and easier to read. You know this already.\n\nAdd in a good formatter and everything is beautiful.\n\n### Pre Commit hooks\n\nThe real magic of all this is to add these tasks to a pre-commit hook. I recommend the pre-commit python package. You can easily use it via an `uv tools install pre-commit` command and then just build out a nice `.pre-commit-config.yaml` file and bam. Every time you try and commit it will run all these wonderful tests, type checking, linting, and whatnot to make sure your code is A+++ would execute again.\n\nThis is a great hack for working with Claude Code. The robot REALLLLLY wants to commit. So when you instruct it to do some code and then commit (like I did above) it will make wild code changes, commit the code, inevitably fuck it all up and then have to fix it.\n\nThis is nice cuz it doesn't clog your GitHub actions with a bunch of linting, formatting, and type checking execution that doesn't pass cuz the robot was in a mood.\n\n> A funny thing about claude is it CANNOT for the life of it figure out how to use `uv` correctly. It will pip install shit all over the place if you are not careful. And if you instruct it to use `uv` it will just use `uv pip install.` Maybe AGI isn't going to happen in June. so sad.\n\n### Claude.md and commands\n\nThese are both really simple additions that can squeeze a lot out.\n\n{{< image src=\"_SDI8149.jpg\" alt=\"Jesse at the studio, Sept 15, 2023, Ricoh GRiii\" caption=\"Jesse at the studio, Sigma fp, 11/15/2023\" >}}\n\nI stole a [CLAUDE.md](https://github.com/harperreed/dotfiles/blob/master/.claude/CLAUDE.md) from my friend [Jesse Vincent](https://fsck.com/) who did an [awful lot of work on making it very robust](https://github.com/obra/dotfiles/blob/main/.claude/CLAUDE.md). It is quite nice. Some things that are built into it:\n\n- a light version of the big daddy rule.\n- instructions on how to do TDD\n- stylistic instructions on how I like to code.\n\n> [@clint](https://instagram.com/clintecker) configured his CLAUDE.md to call him MR BEEF and it is currently embedding info about MR BEEF in our all documentation: \"If you're stuck, stop and ask for help—MR BEEF may know best.\". While typing this out, I decided to make my CLAUDE.md file call me \"Harp Dog.\" This is a feature, not a bug.\n\nThe commands are also really nice. You can see some of mine in my dotfiles [here](https://github.com/harperreed/dotfiles/tree/master/.claude/commands).\n\n{{< image src=\"commands.png\"  >}}\n\nI used to use the commands way more, but it is a really great way to get a lot out of regularly used prompts. You can also pass arguments to the commands. For instance in my github issues command, you pass the issue number that you want claude to look at: `/user:gh-issue #45`\n\nClaude will now go and run through the \"prompt\" script that is defined in the `gh-issue.md` file.\n\nYou can also put these commands in a project directory, and make a custom CLAUDE.md in the project directory. I do this to make hugo, rust, go, or javascript specific commands per project.\n\n## \"Continue\"\n\n{{< image src=\"https://media4.giphy.com/media/v1.Y2lkPTc5MGI3NjExNDk3ZTZpdWYwdG5sdmpnaTJqNzJhYXlvcmp6bnNmdmhxaGdoeHJ4MyZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/l2Je3fIeeXyYEM85G/giphy.gif\" >}}\n\nSometimes I feel like that bird that Homer got to hit \"y\". I am just writing \"continue\" or pressing up and pasting in the same prompt.\n\nMost of the time the plans are about 8–12 steps. I can usually get through a Greenfield development plan in about 30–45 minutes regardless of apparent complexity or language.\n\nI was talking through with my friend Bob and he did not believe it. I asked him \"name a thing to build, a language to build it in - and let's see!\"\n\n{{< image src=\"R0000693.jpeg\" caption=\"Bob Swartz, Ricoh GRiiix, 11/17/2024\" >}}\n\nHe was like \"ok. A basic interpreter in C.\"\n\nThis wasn't ideal. I don't know C. I don't really know how to write an interpreter, nor do I really want to. But fuck it.\n\nI followed the above steps and Claude Code did great. We have [a working basic interpreter](https://github.com/harperreed/basic). The first version worked within an hour. I futzed with it for a few more hours and it is pretty good. Would it ship it in 1982? Probably not. You can see the [prompt plan here](https://raw.githubusercontent.com/harperreed/basic/refs/heads/main/docs/prompt_plan.md).\n\n## The Team\n\nOur entire team is using Claude Code currently. We are all approximately following the above process with a lot of person tweaks.\n\nWe are doing way way higher test coverage than we have ever done. We have better code, and it seems to be just as effective as the horrible code we wrote in the past. It is fun to glance at people working and see claude code running in ghostty, in vscode terminal, in zed terminal, and messing with python notebooks.\n\n{{< image src=\"dril.jpg\" >}}\n\nSomeone who has a lot of tokens, please help me budget this. My family is dying.\n\n## thanks\n\nTo all the folks who keep emailing me. It is really fun and nice to hear about your workflows, and projects. I really appreciate it. Keep em coming!\n\n# TRANSLATED TEXT\nI really like this agentic coding thing. 它在很多方面都非常吸引人。\n\n自从我写下[最初的那篇博客](/2025/02/16/my-llm-codegen-workflow-atm/)以来，Claude 的世界发生了不少变化：\n\n- Claude Code\n- MCP\n- etc\n\n我收到了数百封邮件（wat），大家分享他们的工作流，以及如何利用我的流程抢占先机。我在几个会议上做了演讲，也开了几堂关于代码生成的课。后来我发现电脑总想把 “codegen” 拼写检查成 “codeine”，谁知道呢！\n\n{{< image src=\"codegen.png\"  >}}\n\n前几天我和一位[朋友](https://www.elidedbranches.com/)聊天，我们说到**大家都要完蛋了**、**AI 会抢走我们的工作**（以后会专门写一篇）。她跟我说：“你应该写一篇关于 Claude Code 的文章。”\n\n那就写吧。\n\nClaude Code 在我发布原始工作流博客八天后上线，正如我预料的那样，它让我的那篇文章的大部分内容瞬间过时。此后我把工具从 Aider 迁移到 Claude Code，再也没回头。Aider 我依旧喜欢，也有它独特的用途，但眼下 Claude Code 更好用一些。\n\nClaude Code 功能强大，但也贵得多。\n\n我的工作流和以前差不多：\n\n- 先用 `gpt-4o` 聊天，打磨想法  \n- 用我能找到的最佳推理模型生成规格说明——现在一般是 o1-pro 或 o3（o1-pro 真的比 o3 好吗？还是因为它慢所以我觉得更好？）  \n- 继续用同一个推理模型生成提示词。让 LLM 来写提示词是个绝妙的黑客手段，而且还能把 boomers 气个半死。  \n- 把 spec.md 和 prompt_plan.md 保存到项目根目录  \n- 然后在 claude code 里输入：\n\n```prompt\n1. Open **@prompt_plan.md** and identify any prompts not marked as completed.\n2. For each incomplete prompt:\n    - Double-check if it's truly unfinished (if uncertain, ask for clarification).\n    - If you confirm it's already done, skip it.\n    - Otherwise, implement it as described.\n    - Make sure the tests pass, and the program builds/runs\n    - Commit the changes to your repository with a clear commit message.\n    - Update **@prompt_plan.md** to mark this prompt as completed.\n3. After you finish each prompt, pause and wait for user review or feedback.\n4. Repeat with the next unfinished prompt as directed by the user.\n```\n\n- 这个提示的魔力在于它会检查 prompt plan，找出还没标记完成的任务，然后执行下一个未完成的任务。它把改动提交到 git，再更新 prompt plan，标注已完成。完成后它会停下来，让你决定是否继续。🤌  \n- 我就靠在椅子上，对 claude 说 `yes`，然后看它干活。它会时不时弹窗求反馈，神奇的事情就发生了。  \n- 更多点点点，好像玩 Cookie Clicker。\n\n这一套行之有效。有几个“超级能力”如果嵌进流程，会更给力。\n\n## 防御式编码！\n\n### 测试\n\n测试和测试驱动开发（TDD）是刚需。我强烈建议认真培养健全的 TDD 习惯。\n\n以前我讨厌 TDD，做得烂，觉得浪费时间。事实证明我错得离谱，哈哈。过去几十年我们在公司和项目里补了很多测试，但大多是做完核心功能后才补，这对人类还行。\n\n对机器人就**很糟糕**。\n\n机器人**超爱** TDD，真的，简直是它们的精神粮食。\n\n有了 TDD，你让机器人先写测试和 mock；下一个提示再把 mock 实现成真。机器人超享受。这是我发现的最有效的防幻觉、控范围办法，让它们专注。\n\n### Lint\n\n我超爱 Lint，真舒服。Ruff 很棒，Biome 很酷，Clippy 又好用名字又好听。\n\n不知道为什么，ROBOT 超爱跑 Linter。\n\n把 Linter 当日常操作，能赶走不少 bug，让代码更易维护、也更易读。你肯定懂。\n\n加上 Formatter，一切优雅。\n\n### Pre-Commit 钩子\n\n真正的魔法是把这些任务写进 pre-commit 钩子。我推荐 python 的 pre-commit 包，只要 `uv tools install pre-commit`，配个 `.pre-commit-config.yaml`，搞定。每次 commit 都会自动跑测试、类型检查、Lint 等等，确保你的代码 A+++，随时能再跑。\n\n这对 Claude Code 特别好使。机器人**巨想**提交代码。你像上面那样让它写完就 commit，它可能疯狂改代码，一提交就全炸，然后再去修。\n\n好处是不会把 GitHub Actions 挤爆，全是过不了的 Lint、格式化、类型检查；机器人闹情绪也不怕。\n\n> A funny thing about claude is it CANNOT for the life of it figure out how to use `uv` correctly. It will pip install shit all over the place if you are not careful. And if you instruct it to use `uv` it will just use `uv pip install.` Maybe AGI isn't going to happen in June. so sad.\n\n### Claude.md 和 commands\n\n这俩都很简单，却能榨出很多价值。\n\n{{< image src=\"_SDI8149.jpg\" alt=\"Jesse at the studio, Sept 15, 2023, Ricoh GRiii\" caption=\"Jesse at the studio, Sigma fp, 11/15/2023\" >}}\n\n我从朋友 [Jesse Vincent](https://fsck.com/) 那里“偷”来一份[CLAUDE.md](https://github.com/harperreed/dotfiles/blob/master/.claude/CLAUDE.md)，他[做了大量完善工作](https://github.com/obra/dotfiles/blob/main/.claude/CLAUDE.md)。真不错，里面有：\n\n- 精简版 “big daddy rule”  \n- 如何搞 TDD 的指令  \n- 我的编码风格说明  \n\n> [@clint](https://instagram.com/clintecker) 把他的 CLAUDE.md 配成称呼他 MR BEEF，于是现在我们所有文档里都嵌着 MR BEEF：“If you're stuck, stop and ask for help—MR BEEF may know best.” 我写这段时决定把自己的 CLAUDE.md 改叫我 “Harp Dog”。这不是 bug，是 feature。\n\ncommands 也很好用。我的一些示例在 dotfiles 里可以看到：[这里](https://github.com/harperreed/dotfiles/tree/master/.claude/commands)。\n\n{{< image src=\"commands.png\"  >}}\n\n我以前更常用 commands，它能把常用提示词变得超高效。还能传参，比如 GitHub issue 命令就传 issue 号：`/user:gh-issue #45`。\n\nClaude 会按 `gh-issue.md` 里的 “prompt” 脚本去处理。\n\n你也可以把这些 commands 放到项目目录，给项目自定义 CLAUDE.md。我会针对 hugo、rust、go、javascript 分别搞一套。\n\n## “Continue”\n\n{{< image src=\"https://media4.giphy.com/media/v1.Y2lkPTc5MGI3NjExNDk3ZTZpdWYwdG5sdmpnaTJqNzJhYXlvcmp6bnNmdmhxaGdoeHJ4MyZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/l2Je3fIeeXyYEM85G/giphy.gif\" >}}\n\n有时候我感觉自己像霍默雇的那只会按 “y” 的鸟——我只是在键盘上打 “continue”，或上箭头粘贴同一条提示。\n\n大多数计划大概 8–12 步。不管项目看上去多复杂、用什么语言，我通常能在 30–45 分钟里搞定 Greenfield 开发。\n\n我和朋友 Bob 聊起这事，他根本不信。我说：“随便说个要做的东西、要用的语言，看看吧！”\n\n{{< image src=\"R0000693.jpeg\" caption=\"Bob Swartz, Ricoh GRiiix, 11/17/2024\" >}}\n\n他说：“行，一个用 C 写的 BASIC 解释器。”\n\n这可不妙。我不懂 C，也不会写解释器，更没兴趣。但管它呢。\n\n我照上面流程走，Claude Code 表现不错。现在我们有[能跑的 BASIC 解释器](https://github.com/harperreed/basic)。首个版本一小时搞定，我又折腾了几小时，效果不错。要是在 1982 年能发货吗？大概不行。你可以看[prompt plan](https://raw.githubusercontent.com/harperreed/basic/refs/heads/main/docs/prompt_plan.md)。\n\n## 团队\n\n我们整个团队现在都用 Claude Code，大体按上面流程，各有些个性化调整。\n\n我们的测试覆盖率比历史任何时候都高；代码质量更好，而且看起来跟以前那些烂代码一样高效。偶尔瞄一眼同事屏幕，ghostty、vscode 终端、zed 终端、python notebook 里到处是 claude code，挺有意思。\n\n{{< image src=\"dril.jpg\" >}}\n\n哪位 token 多的大佬帮我算算预算吧，我家快揭不开锅了。\n\n## thanks\n\n感谢所有给我发邮件的人。看到你们的工作流和项目真的既有趣又暖心。我非常感激，欢迎继续轰炸！\n\nPlease review and improve the translated text to make it natural and accurate in mandarin.\nReturn ONLY the improved translated text without explanations or comments.",
      "response": "我真心喜欢这套 agentic coding 的玩法，方方面面都让人着迷。\n\n自从我写下[那篇原始博客](/2025/02/16/my-llm-codegen-workflow-atm/)以来，Claude 的世界发生了不少变化：\n\n- Claude Code\n- MCP\n- etc\n\n我收到了数百封邮件（wat），大家分享他们的工作流，以及如何利用我的流程走在前面。我在几个会议上做了演讲，也开了几节代码生成课。后来我才发现，电脑总想把 “codegen” 拼成 “codeine”，谁能想到！\n\n{{< image src=\"codegen.png\"  >}}\n\n前几天我和一位[朋友](https://www.elidedbranches.com/)聊天，聊到 **我们都要完蛋了**、**AI 要抢我们饭碗**（以后再细说）。她说：“你应该写写 Claude Code。”\n\n那就写吧。\n\nClaude Code 在我那篇工作流博客发出后八天就上线了，正如我预料，它让文中的不少细节瞬间过时。此后我把工具从 Aider 迁到了 Claude Code，没再回头。Aider 我依旧喜欢，也有它独特的场景，但眼下 Claude Code 更顺手。\n\nClaude Code 很强，也贵得多。\n\n我的工作流跟以前差不多：\n\n- 先和 `gpt-4o` 聊天，打磨想法  \n- 用我能找到的最强推理模型生成规格说明——通常是 o1-pro 或 o3（o1-pro 真的比 o3 好吗？还是因为它更慢所以我觉得更好？）  \n- 继续用同一个模型生成提示词。让 LLM 写提示词是个绝妙的黑客手段，还能把 boomers 气得跳脚。  \n- 把 spec.md 和 prompt_plan.md 放到项目根目录  \n- 然后在 Claude Code 里输入：\n\n```prompt\n1. Open **@prompt_plan.md** and identify any prompts not marked as completed.\n2. For each incomplete prompt:\n    - Double-check if it's truly unfinished (if uncertain, ask for clarification).\n    - If you confirm it's already done, skip it.\n    - Otherwise, implement it as described.\n    - Make sure the tests pass, and the program builds/runs\n    - Commit the changes to your repository with a clear commit message.\n    - Update **@prompt_plan.md** to mark this prompt as completed.\n3. After you finish each prompt, pause and wait for user review or feedback.\n4. Repeat with the next unfinished prompt as directed by the user.\n```\n\n- 这段提示的魔力在于：它会检查 prompt_plan，找到未标记完成的任务，然后执行下一项；改动提交到 git 后，再把 prompt_plan 标注为已完成；结束后停下来等你决定是否继续。🤌  \n- 我就靠在椅子上，对 Claude 说 `yes`，看它自己干活。它偶尔弹窗求反馈，奇迹就这么发生了。  \n- 更多点点点，像在玩 Cookie Clicker。\n\n这一套非常奏效。流程里再塞进几项“超级能力”，效果更佳。\n\n## Defensive coding!\n\n### 测试\n\n测试和测试驱动开发（TDD）是硬需求。我强烈建议认真建立健全的 TDD 习惯。\n\n曾经我讨厌 TDD，做得烂，觉得浪费时间。事实证明我错得离谱，哈哈。过去几十年我们在公司和项目里补了很多测试，但大多是主功能写完后才补——这对人类还凑合，\n\n**对机器人可太糟糕了。**\n\n机器人超爱 TDD，真的，简直是它们的精神口粮。\n\n按 TDD 来，你让机器人先写测试和 mock，下一条提示再把 mock 变真实实现。机器人乐在其中。这是我见过抑制幻觉和 LLM 范围漂移最有效的办法，让它们老老实实按任务走。\n\n### Lint\n\n我超级喜欢 Lint，太舒爽了。Ruff 很棒，Biome 很酷，Clippy 好用名字还好听。\n\n不知道为什么，机器人就是爱跑 linter。\n\n把 linter 设成常规动作，能挡掉不少 bug，让代码更易维护、也更好读。你肯定懂。再加个 formatter，一切都美美的。\n\n### Pre-commit 钩子\n\n真正的魔法是把这些检查写进 pre-commit 钩子。我推荐 Python 的 pre-commit 包：`uv tools install pre-commit` 装好后配个 `.pre-commit-config.yaml`，搞定。每次 commit 都会自动跑测试、类型检查、Lint 等，确保代码 A+++，随时能再跑。\n\n这招在 Claude Code 上尤其好用。机器人太想 commit 了。你让它写完就提交，它可能大改一通，提交后把一切搞炸，然后再去修。\n\n好处是不会把 GitHub Actions 占得乱七八糟，全是过不了的 Lint、格式化和类型检查；就算机器人闹情绪也不碍事。\n\n> 有意思的是，claude 怎么都学不会正确使用 `uv`。一不留神它就到处 pip install；就算你让它用 `uv`，它也只会写 `uv pip install`。看来 AGI 六月上线是没戏了，哭哭。\n\n### Claude.md 和 commands\n\n这俩改动很小，却能榨出极大的价值。\n\n{{< image src=\"_SDI8149.jpg\" alt=\"Jesse at the studio, Sept 15, 2023, Ricoh GRiii\" caption=\"Jesse at the studio, Sigma fp, 11/15/2023\" >}}\n\n我从朋友 [Jesse Vincent](https://fsck.com/) 那里“偷”来一份 [CLAUDE.md](https://github.com/harperreed/dotfiles/blob/master/.claude/CLAUDE.md)，他[做了大量完善](https://github.com/obra/dotfiles/blob/main/.claude/CLAUDE.md)。很不错，里面包括：\n\n- 精简版 big daddy rule  \n- TDD 指南  \n- 我的代码风格说明  \n\n> [@clint](https://instagram.com/clintecker) 把 CLAUDE.md 配成让 Claude 称呼他 MR BEEF，于是我们的文档现在到处写着：“If you're stuck, stop and ask for help—MR BEEF may know best.” 写到这我决定把自己的 CLAUDE.md 改叫我 “Harp Dog”。这不是 bug，是 feature。\n\ncommands 也很香。可以在我的 dotfiles 里看到一些示例：[这里](https://github.com/harperreed/dotfiles/tree/master/.claude/commands)。\n\n{{< image src=\"commands.png\"  >}}\n\n以前我更常用 commands，但它依然是把常用提示词最大化的好办法。还能传参数，例如 GitHub issue 命令就传 issue 号：`/user:gh-issue #45`\n\nClaude 会按 `gh-issue.md` 中定义的 prompt 脚本去跑。\n\n这些 commands 也可以放到项目目录，顺带放一份项目专属的 CLAUDE.md。我会给 hugo、rust、go 或 javascript 项目各自弄一套。\n\n## “Continue”\n\n{{< image src=\"https://media4.giphy.com/media/v1.Y2lkPTc5MGI3NjExNDk3ZTZpdWYwdG5sdmpnaTJqNzJhYXlvcmp6bnNmdmhxaGdoeHJ4MyZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/l2Je3fIeeXyYEM85G/giphy.gif\" >}}\n\n有时候我感觉自己像《辛普森》里那只不停按 “Y” 的鸟——我就在键盘上打 “continue”，或者上键粘贴同一句提示。\n\n大多数计划大概 8–12 步。不管项目看上去多复杂、用什么语言，我通常能在 30–45 分钟内搞定一次 Greenfield 开发。\n\n我把这事跟朋友 Bob 说，他不信。我就问：“随便说个东西，再指定语言，走起！”\n\n{{< image src=\"R0000693.jpeg\" caption=\"Bob Swartz, Ricoh GRiiix, 11/17/2024\" >}}\n\n他回：“那就用 C 写个 BASIC 解释器。”\n\n这可坑了。我不会 C，也不会写解释器，更没那兴趣。但管他的。\n\n我按上面流程走，Claude Code 表现不错。现在我们有了[能跑的 BASIC 解释器](https://github.com/harperreed/basic)。首版一小时就出来，我又折腾了几小时，已经挺像样。要在 1982 年发货？大概还差点火候。你可以看[完整 prompt_plan](https://raw.githubusercontent.com/harperreed/basic/refs/heads/main/docs/prompt_plan.md)。\n\n## 团队\n\n我们整个团队现在都用 Claude Code，大体按上面流程，各自有些微调。\n\n我们的测试覆盖率比历史任何时候都高；代码质量更好，而且看起来和我们过去那堆烂代码一样高效。偶尔一扫，同事的 ghostty、VS Code 终端、Zed 终端、Jupyter notebook 里全是 Claude Code，场面挺有趣。\n\n{{< image src=\"dril.jpg\" >}}\n\n哪位 token 多的大佬帮我算算预算吧，我家都快揭不开锅了。\n\n## thanks\n\n谢谢所有给我发邮件的人。听你们聊工作流和项目真的又有趣又暖心。我很感激，继续轰炸吧！",
      "usage": {
        "prompt_tokens": 5427,
        "completion_tokens": 2163,
        "total_tokens": 7590
      },
      "streaming": true
    },
    "critique": {
      "model": "o3",
      "target_language": "mandarin",
      "system_prompt": "You are a highly critical professional translator and linguistic expert specializing in mandarin.\nYour task is to ruthlessly critique the translation by:\n\n1. Meticulously comparing the translated text with the original, identifying ANY inaccuracies, mistranslations, or omissions\n2. Highlighting nuances, cultural references, or idioms that were lost or mistranslated\n3. Scrutinizing for grammatical errors, awkward phrasing, or unnatural expressions in mandarin\n4. Checking for inconsistencies in tone, style, or register compared to the original\n5. Verifying that technical terms are translated accurately and consistently\n6. Ensuring no content was accidentally skipped or added\n7. Finding places where the translation sounds machine-like or overly literal\n\nBe extremely thorough and critical in your assessment. Do not accept mediocre translations.\nList specific issues and suggestions for improvement, organized by severity and category.\nYour critique should be detailed enough for another translator to address all the issues.\n\nYour goal is to help create a perfect translation that reads as if originally written in mandarin while being 100% faithful to the source.\n",
      "user_prompt": "# ORIGINAL TEXT\nI really like this agentic coding thing. It is quite compelling in so many ways.\n\nSince I wrote [that original blog post](/2025/02/16/my-llm-codegen-workflow-atm/) a lot has happened in Claude land:\n\n- Claude Code\n- MCP\n- etc\n\nI have received hundreds (wat) of emails from people talking about their workflows and how they have used my workflow to get ahead. I have spoken at a few conferences, and taught a few classes about codegen. I have learned that computers really want to spellcheck codegen to codeine, who knew!\n\n{{< image src=\"codegen.png\"  >}}\n\nI was talking to a [friend](https://www.elidedbranches.com/) the other day about how we are **all totally fucked** and **AI will take our jobs** (more on that in a later post), and she was like \"you should write a post about claude code.\"\n\nHere we go.\n\nClaude Code was released eight days after I wrote my original workflow blog post, and as I predicted, it made a lot of my post irrelevant. I have since migrated from Aider to Claude Code and not looked back. I still like Aider, and it has a distinct use, but Claude Code is a bit more useful atm.\n\nClaude Code is powerful, and a hell of a lot more expensive.\n\nMy workflow is very similar to what it was before.\n\n- I chat with `gpt-4o` to hone my idea\n- I use the best reasoning model I can find to generate the spec. These days it is o1-pro or o3 (is o1-pro better than o3? Or do I feel like it is better cuz it takes longer?)\n- I use the reasoning model to generate the prompts. Using an LLM to generate prompts is a beautiful hack. It makes boomers mad too.\n- I save the spec.md, and the prompt_plan.md in the root of the project.\n- I then type into claude code the following:\n\n```prompt\n1. Open **@prompt_plan.md** and identify any prompts not marked as completed.\n2. For each incomplete prompt:\n    - Double-check if it's truly unfinished (if uncertain, ask for clarification).\n    - If you confirm it's already done, skip it.\n    - Otherwise, implement it as described.\n    - Make sure the tests pass, and the program builds/runs\n    - Commit the changes to your repository with a clear commit message.\n    - Update **@prompt_plan.md** to mark this prompt as completed.\n3. After you finish each prompt, pause and wait for user review or feedback.\n4. Repeat with the next unfinished prompt as directed by the user.\n```\n\n- The magic with this prompt is that it checks the prompt plan. Looks for things that are not marked as completed, then does the next remaining task. It commits it to git, and then updates the prompt plan with what is complete. It then pops up and asks you to continue once it is done. 🤌\n\n- I then kick back and tell claude `yes` while it does the work. It will pop up for feedback, and magic happens.\n- Lots more cookie clicker.\n\nThis works super well. There are a few superpowers you can embed in your process that will really help.\n\n## Defensive coding!\n\n### Testing\n\nTesting and test-driven development is a must. I highly recommend really engaging in building out a robust TDD practice.\n\nI was a TDD hater. I was bad at it and I felt like I was wasting time. I was not correct. Lol. I recognize that, and we built in a lot of testing into our companies and projects over the past few decades. Most of the testing was added AFTER the core work was done. This is fine for humans.\n\nTHIS IS BAD FOR ROBOTS.\n\nThe robots LOVE TDD. Seriously. They eat it up.\n\nWith TDD you have the robot friend build out the test, and the mock. Then your next prompt you build the mock to be real. And the robot just loves this. It is the most effective counter to hallucination and LLM scope drift I have found. It really helps the robots to stay on task.\n\n### Linting\n\nI am such a fan of linting. It is so nice. Ruff is a wonderful product. Biome is cool. Clippy is fun (and a good name).\n\nFor whatever reason the ROBOTS love to run a good linter.\n\nBuilding in the practice to run the linter constantly has kept a lot of bugs away, and kept the code more maintainable and easier to read. You know this already.\n\nAdd in a good formatter and everything is beautiful.\n\n### Pre Commit hooks\n\nThe real magic of all this is to add these tasks to a pre-commit hook. I recommend the pre-commit python package. You can easily use it via an `uv tools install pre-commit` command and then just build out a nice `.pre-commit-config.yaml` file and bam. Every time you try and commit it will run all these wonderful tests, type checking, linting, and whatnot to make sure your code is A+++ would execute again.\n\nThis is a great hack for working with Claude Code. The robot REALLLLLY wants to commit. So when you instruct it to do some code and then commit (like I did above) it will make wild code changes, commit the code, inevitably fuck it all up and then have to fix it.\n\nThis is nice cuz it doesn't clog your GitHub actions with a bunch of linting, formatting, and type checking execution that doesn't pass cuz the robot was in a mood.\n\n> A funny thing about claude is it CANNOT for the life of it figure out how to use `uv` correctly. It will pip install shit all over the place if you are not careful. And if you instruct it to use `uv` it will just use `uv pip install.` Maybe AGI isn't going to happen in June. so sad.\n\n### Claude.md and commands\n\nThese are both really simple additions that can squeeze a lot out.\n\n{{< image src=\"_SDI8149.jpg\" alt=\"Jesse at the studio, Sept 15, 2023, Ricoh GRiii\" caption=\"Jesse at the studio, Sigma fp, 11/15/2023\" >}}\n\nI stole a [CLAUDE.md](https://github.com/harperreed/dotfiles/blob/master/.claude/CLAUDE.md) from my friend [Jesse Vincent](https://fsck.com/) who did an [awful lot of work on making it very robust](https://github.com/obra/dotfiles/blob/main/.claude/CLAUDE.md). It is quite nice. Some things that are built into it:\n\n- a light version of the big daddy rule.\n- instructions on how to do TDD\n- stylistic instructions on how I like to code.\n\n> [@clint](https://instagram.com/clintecker) configured his CLAUDE.md to call him MR BEEF and it is currently embedding info about MR BEEF in our all documentation: \"If you're stuck, stop and ask for help—MR BEEF may know best.\". While typing this out, I decided to make my CLAUDE.md file call me \"Harp Dog.\" This is a feature, not a bug.\n\nThe commands are also really nice. You can see some of mine in my dotfiles [here](https://github.com/harperreed/dotfiles/tree/master/.claude/commands).\n\n{{< image src=\"commands.png\"  >}}\n\nI used to use the commands way more, but it is a really great way to get a lot out of regularly used prompts. You can also pass arguments to the commands. For instance in my github issues command, you pass the issue number that you want claude to look at: `/user:gh-issue #45`\n\nClaude will now go and run through the \"prompt\" script that is defined in the `gh-issue.md` file.\n\nYou can also put these commands in a project directory, and make a custom CLAUDE.md in the project directory. I do this to make hugo, rust, go, or javascript specific commands per project.\n\n## \"Continue\"\n\n{{< image src=\"https://media4.giphy.com/media/v1.Y2lkPTc5MGI3NjExNDk3ZTZpdWYwdG5sdmpnaTJqNzJhYXlvcmp6bnNmdmhxaGdoeHJ4MyZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/l2Je3fIeeXyYEM85G/giphy.gif\" >}}\n\nSometimes I feel like that bird that Homer got to hit \"y\". I am just writing \"continue\" or pressing up and pasting in the same prompt.\n\nMost of the time the plans are about 8–12 steps. I can usually get through a Greenfield development plan in about 30–45 minutes regardless of apparent complexity or language.\n\nI was talking through with my friend Bob and he did not believe it. I asked him \"name a thing to build, a language to build it in - and let's see!\"\n\n{{< image src=\"R0000693.jpeg\" caption=\"Bob Swartz, Ricoh GRiiix, 11/17/2024\" >}}\n\nHe was like \"ok. A basic interpreter in C.\"\n\nThis wasn't ideal. I don't know C. I don't really know how to write an interpreter, nor do I really want to. But fuck it.\n\nI followed the above steps and Claude Code did great. We have [a working basic interpreter](https://github.com/harperreed/basic). The first version worked within an hour. I futzed with it for a few more hours and it is pretty good. Would it ship it in 1982? Probably not. You can see the [prompt plan here](https://raw.githubusercontent.com/harperreed/basic/refs/heads/main/docs/prompt_plan.md).\n\n## The Team\n\nOur entire team is using Claude Code currently. We are all approximately following the above process with a lot of person tweaks.\n\nWe are doing way way higher test coverage than we have ever done. We have better code, and it seems to be just as effective as the horrible code we wrote in the past. It is fun to glance at people working and see claude code running in ghostty, in vscode terminal, in zed terminal, and messing with python notebooks.\n\n{{< image src=\"dril.jpg\" >}}\n\nSomeone who has a lot of tokens, please help me budget this. My family is dying.\n\n## thanks\n\nTo all the folks who keep emailing me. It is really fun and nice to hear about your workflows, and projects. I really appreciate it. Keep em coming!\n\n# CURRENT TRANSLATION\n我真心迷上了这种 agentic（代理式）编码方式，它在方方面面都让人欲罢不能。\n\n自从我写下[那篇原始博客](/2025/02/16/my-llm-codegen-workflow-atm/)后，Claude 的世界发生了不少事：\n\n- Claude Code  \n- MCP  \n- 等等\n\n我已经收到了几百封邮件（wat），大家分享自己的工作流，以及如何用我的流程抢占先机。我在几场大会上做了分享，还开了几节代码生成课。后来我发现拼写检查总想把 “codegen” 改成 “codeine”，谁能想到！\n\n{{< image src=\"codegen.png\" >}}\n\n前几天我和一位[朋友](https://www.elidedbranches.com/)聊天，讨论 **咱们都要完蛋**、**AI 会把我们的饭碗抢光**（以后再写）。她说：“你该写篇文章聊聊 Claude Code。”\n\n那就开搞吧。\n\nClaude Code 在我发那篇工作流文章八天后就上线，正如我预料，直接让文中不少内容报废。我随即从 Aider 迁到 Claude Code，从此没回头。Aider 依旧不错，也有它独特的场景，但眼下 Claude Code 更香。\n\nClaude Code 功能强大，也贵得多。\n\n我的工作流和之前几乎一样：\n\n- 先跟 `gpt-4o` 聊聊，打磨点子  \n- 用能找到的最强推理模型生成需求规格——现在通常是 o1-pro 或 o3（o1-pro 真比 o3 强吗？还是因为它跑得更久我就觉得更强？）  \n- 继续用同一个模型去写 prompts。让 LLM 自己产出提示词是个神操作，还能把年长的老前辈（boomers）气得跳脚。  \n- 把 `spec.md` 和 `prompt_plan.md` 放到项目根目录  \n- 然后在 Claude Code 里输入下面这段提示：  \n\n```prompt\n1. Open **@prompt_plan.md** and identify any prompts not marked as completed.\n2. For each incomplete prompt:\n    - Double-check if it's truly unfinished (if uncertain, ask for clarification).\n    - If you confirm it's already done, skip it.\n    - Otherwise, implement it as described.\n    - Make sure the tests pass, and the program builds/runs\n    - Commit the changes to your repository with a clear commit message.\n    - Update **@prompt_plan.md** to mark this prompt as completed.\n3. After you finish each prompt, pause and wait for user review or feedback.\n4. Repeat with the next unfinished prompt as directed by the user.\n```\n\n- 这段提示的魔法在于：它先检查 `prompt_plan`，找到没标完成的条目，干下一件事；搞完就提交到 git，再把 `prompt_plan` 标成已完成；然后停下来，等待用户审阅或反馈。🤌  \n- 我直接往椅背一靠，对 Claude 说 `yes`，它就自己干活。它会跳出来要你给意见，魔法就此展开。  \n- 随后就是不停点 “yes”，*continue*、*continue*、*continue*，成了真人版 Cookie Clicker。\n\n这一套非常管用。若在流程里再嵌入几项“小超能力”，效果更好。\n\n## 防御式编码！\n\n### Testing\n\n测试，以及测试驱动开发（Test-Driven Development，TDD）是硬性要求。我强烈建议真刀真枪地培养起稳固的 TDD 习惯。\n\n我以前讨厌 TDD，写得烂，觉得浪费时间。事实证明我错得离谱，LOL。过去几十年里，我们在公司和项目里加了不少测试，但大多是功能搞定后才补——这对人类还行，  \n\n**对机器人可太糟糕了。**\n\n机器人对 TDD 简直上瘾。套路很简单：先让机器人写测试和 mock，下一条提示再把 mock 实现成真代码，机器人甭提多爽。这是一剂遏制幻觉和 LLM 范围漂移的灵丹妙药，能让它们老老实实待在轨道上。\n\n### Linting\n\n我是真爱 lint。Ruff 巨香、Biome 很酷、Clippy 名字又帅又好用。\n\n不知为啥，机器人也爱跑 linter。\n\n把 linter 设成常驻动作，能挡掉一堆 bug，让代码更易维护、更好读；再加个 formatter，一切就 A+++，无论再次执行多少次都能顺利跑通。\n\n### Pre-commit 钩子\n\n真正的魔法是把这些检查写进 Pre-commit 钩子。我推荐 Python 的 `pre-commit` 包：一句 `uv tools install pre-commit`，再配一份 `.pre-commit-config.yaml`，搞定。每次提交都会自动跑测试、类型检查、lint 等，确保代码 A+++，随时都能重新执行。\n\n这招配上 Claude Code 更嗨。机器人是真心想 commit。你让它写完就提交，它可能大幅改动、提交、把一切弄崩，然后再去修。\n\n好处是不会把 GitHub Actions 堵成一锅粥：格式化、lint、类型检查全红，只因为机器人当时不在状态。\n\n> 有意思的是，Claude 死活学不会正确用 `uv`。稍不留神就到处 `pip install`；即便你让它用 `uv`，它也会写成 `uv pip install`。看来六月诞生 AGI 是悬了，伤心。\n\n### CLAUDE.md 与 commands\n\n这俩简单小工具能榨出巨大的收益。\n\n{{< image src=\"_SDI8149.jpg\" alt=\"Jesse at the studio, Sept 15, 2023, Ricoh GRiii\" caption=\"Jesse at the studio, Sigma fp, 11/15/2023\" >}}\n\n我从朋友 [Jesse Vincent](https://fsck.com/) 那里“偷”来一份 [CLAUDE.md](https://github.com/harperreed/dotfiles/blob/master/.claude/CLAUDE.md)，他[下了大功夫把它做得超完善](https://github.com/obra/dotfiles/blob/main/.claude/CLAUDE.md)。内容包括：\n\n- 精简版 Big Daddy Rule  \n- 如何做 TDD 的说明  \n- 我个人偏好的代码风格  \n\n> [@clint](https://instagram.com/clintecker) 把他的 CLAUDE.md 配成必须管他叫 MR BEEF，于是文档里全是 “If you're stuck, stop and ask for help—MR BEEF may know best.” 写这段时我也决定把自己的 CLAUDE.md 设成叫我 “Harp Dog”。这是特性，不是 bug。\n\ncommands 也很带劲。我的 dotfiles 中有一些示例：[看这里](https://github.com/harperreed/dotfiles/tree/master/.claude/commands)。\n\n{{< image src=\"commands.png\" >}}\n\n以前我更频繁地用 commands，它依旧是复用常用 prompts 的神技。还能传参，比如 GitHub issue 命令要传 issue 号：`/user:gh-issue #45`\n\nClaude 会按 `gh-issue.md` 里定义的 prompt script 跑。\n\n你也可以把这些 commands 放到项目目录，再放一份项目专属的 CLAUDE.md。我常这么干，为 Hugo、Rust、Go、JavaScript 项目各配一套。\n\n## “Continue”\n\n{{< image src=\"https://media4.giphy.com/media/v1.Y2lkPTc5MGI3NjExNDk3ZTZpdWYwdG5sdmpnaTJqNzJhYXlvcmp6bnNmdmhxaGdoeHJ4MyZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/l2Je3fIeeXyYEM85G/giphy.gif\" >}}\n\n有时我就像《辛普森》里那只不停敲 “Y” 的小鸟——只管打 “continue”，或者按上键把同一条提示再发一次。\n\n大多数计划大概 8–12 步。不管项目看着多庞杂、用哪个语言，我通常能在 30–45 分钟内搞定一次 Greenfield 开发。\n\n我把这事跟朋友 Bob 讲，他不信。我说：“随便说个要做的东西，再指定语言，咱走起！”\n\n{{< image src=\"R0000693.jpeg\" caption=\"Bob Swartz, Ricoh GRiiix, 11/17/2024\" >}}\n\n他来一句：“那就用 C 写个 BASIC 解释器。”\n\n这可真坑。我不会 C，也没写过解释器，更懒得写。但——算了，干就完了。\n\n按上述流程走，Claude Code 表现很给力。现在我们有了[能跑的 BASIC 解释器](https://github.com/harperreed/basic)。首版一小时搞定，我又折腾几小时，现在已经相当像样。要是 1982 年就得发货？可能还差点火候。完整的 [prompt_plan 在此](https://raw.githubusercontent.com/harperreed/basic/refs/heads/main/docs/prompt_plan.md)。\n\n## 团队\n\n我们整个团队都在用 Claude Code，大体遵循这套流程，各自再加点 tweak。\n\n我们的测试覆盖率比历史任何时期都高；代码质量更好，而效率看上去和过去那堆糟糕代码差不多。偶尔抬头一看，就能见到 Claude Code 在 ghostty、VS Code 终端、Zed 终端里运行，甚至在 Jupyter Notebook 里胡乱实验，到处都是它的身影。\n\n{{< image src=\"dril.jpg\" >}}\n\n哪位 token 富豪帮我算算预算吧，我全家都快饿死了。\n\n## 致谢\n\n感谢所有给我发邮件的人。听你们聊各自的工作流和项目，又酷又有趣。我真的很感激——来信别停！\n\nPlease critique this translation mercilessly and provide detailed feedback on what needs to be improved.\nFormat your critique as a structured list of issues, organized by severity and category.\nInclude specific suggestions for how to fix each issue.",
      "response": "严苛译审  \n========  \n\n下列评语按「严重程度→类别」排序。每条都给出：  \n• 原文片段（EN）  \n• 现译文片段（CN）  \n• 问题说明  \n• 建议修订  \n\nA. 重大误译／信息偏失  \n-------------------  \nA-1 术语 “agentic coding”  \nEN: “agentic coding”  \nCN: “agentic（代理式）编码”  \n问题 “代理式”易让人联想到「代理/代理服务器」，而 Agentic 的核心是 “具备自主行动能力”。  \n建议 译为“自主体编码”“自主代理编码”或直接音译加注：“agentic（自主体式）编码”。  \n\nA-2 “Greenfield development plan”  \nEN: “get through a Greenfield development plan”  \nCN: “搞定一次 Greenfield 开发”  \n问题 Greenfield 在软件语境中特指“从零开始的新项目”，而非单纯“Greenfield 开发”。  \n建议 “在 30–45 分钟内完成一个从零开始的开发计划”。  \n\nA-3 “hell of a lot more expensive”  \nEN: “a hell of a lot more expensive”  \nCN: “贵得多”  \n问题 削弱了原文夸张口吻。  \n建议 “贵得离谱”“贵了好几倍” 等。  \n\nA-4 “This wasn’t ideal.”  \nEN: “This wasn’t ideal.”  \nCN: “这可真坑。”  \n问题 语气过度口语化且带情绪，与原文轻描淡写的自嘲不符。  \n建议 “这并不理想。”或“这可不妙”。  \n\nA-5 “Would it ship it in 1982? Probably not.”  \nEN 同上  \nCN: “要是 1982 年就得发货？可能还差点火候。”  \n问题 原文是反问句 + 自答；译文变成陈述，语气变化。  \n建议 “要是放在 1982 年能直接发布吗？大概还不行。”  \n\nA-6 引用段落中 “would execute again”  \nEN: “make sure your code is A+++ would execute again.”  \nCN: “确保代码 A+++，随时都能重新执行。”  \n问题 漏掉 “would execute again” 的条件语用色彩；译文语义模糊。  \n建议 “…确保代码质量达到 A+++，下次执行也能一次通过。”  \n\nB. 术语一致性 / 技术准确性  \n---------------------  \nB-1 “spec.md” → “需求规格”  \n前后多处使用 “需求规格”“规格说明”“spec”，易混淆。  \n建议统一：首次出现可译“规格文档 (spec.md)”，后文保持 “spec”。  \n\nB-2 “prompt plan / prompt_plan.md”  \n有时译作 “prompt_plan”，有时未译；建议固定译名，例如“提示计划文件（prompt_plan.md）”。  \n\nB-3 “Pre-commit / pre-commit hook”  \n正文中大小写混用：Pre Commit / Pre-commit。  \n建议统一“pre-commit 钩子”。  \n\nB-4 “tests pass” 被译为“跑测试”，后文 “test coverage” 译“测试覆盖率”——尚可，但应注意“测试通过/未通过”的准确说法。  \n\nC. 语气、风格、 register  \n---------------------  \nC-1 粗口 / 俚语处理  \n– “and we are all totally fucked” 译“咱们都要完蛋”✔  \n– “fuck it.” 译“算了，干就完了。” 较随意但可接受；可考虑“管他呢，干就完了”。  \n\nC-2 疯狂大小写、加长元音  \nEN: “REALLLLLY wants to commit”  \nCN: “是真心想 commit。”  \n建议保留夸张效果：“特别特别想 commit”。  \n\nC-3 Boomer  \nEN: “It makes boomers mad”  \nCN: “把年长的老前辈（boomers）气得跳脚”  \n“年长的老前辈” 与 “boomer” 的戏谑感不匹配；可译“老一辈程序员（boomers）”。  \n\nC-4 中英夹杂  \n– “commands 也很带劲”  \n– “各自再加点 tweak”  \n– “Cookie Clicker”  \n若保持作者极客口吻可保留，若追求阅读流畅度应替换或加引号/括号注释。  \n\nD. 语法 / 用词 / 自然度  \n-------------------  \nD-1 “它在方方面面都让人欲罢不能”  \n略显书面，与全文轻松口吻不一致。可改：“处处都让人上头”。  \n\nD-2 “若在流程里再嵌入几项‘小超能力’”  \n“若”显得书面，改“如果”。  \n\nD-3 “无论再次执行多少次都能顺利跑通”  \n结构别扭；建议“无论跑多少次都能一键通过”。  \n\nD-4 断句 / 标点  \n多处一段内硬换行，例如 “这对人类还行，\\n\\n**对机器人可太糟糕了。**”  \n建议去掉不必要的换行，保持原文节奏。  \n\nE. 遗漏 / 多余内容  \n----------------  \nE-1 “Looks for things that are not marked as completed”  \n译文缺少 “that are not marked as completed” 的从句指向关系说明，但总体含义已覆盖。  \n\nE-2 原文 “etc” 多次出现；译文首次保留“等等”，后面列表未对应“etc”并省略，属轻微遗漏。  \n\nF. 机械痕迹 / 直译感  \n------------------  \nF-1 长串英文未本地化  \n诸如 “prompt script”“prompt plan”“mock”“formatter”等词均可在首次出现时加括号注释中文，后续保留英文，避免阅读断层。  \n\nF-2 句式重复  \n如 “弄崩，然后再去修” 属口头直译，可做精简：“把一切搞崩后再修”。  \n\n汇总  \n----  \n• 需优先修改 A 类问题，确保核心概念准确。  \n• 统一术语（spec, prompt_plan, pre-commit 等）。  \n• 根据受众决定中英夹杂比例，保持俚语活泼又不致阅读障碍。  \n• 调整标点、段落和换行，让口吻紧凑自然。  \n\n完成上述调整后，译文将既忠实原意、细节无缺，又读来像地道中文原作。",
      "usage": {
        "prompt_tokens": 5456,
        "completion_tokens": 1511,
        "total_tokens": 6967
      },
      "streaming": true
    },
    "feedback": {
      "model": "o3",
      "target_language": "mandarin",
      "system_prompt": "You are a master translator and editor specializing in mandarin.\nYour task is to improve a translation based on detailed critique feedback.\n\n1. Carefully read the original text, current translation, and the critique feedback\n2. Address ALL issues identified in the critique\n3. Apply the specific suggestions for improvement\n4. Ensure the translation is accurate, natural-sounding, and faithful to the original\n5. Preserve all formatting, markdown, and structure of the original text\n6. Make sure the final text reads as if it were originally written in mandarin\n\nDo not ignore any of the critique points. Every issue identified must be addressed in your improved version.\n",
      "user_prompt": "# ORIGINAL TEXT\nI really like this agentic coding thing. It is quite compelling in so many ways.\n\nSince I wrote [that original blog post](/2025/02/16/my-llm-codegen-workflow-atm/) a lot has happened in Claude land:\n\n- Claude Code\n- MCP\n- etc\n\nI have received hundreds (wat) of emails from people talking about their workflows and how they have used my workflow to get ahead. I have spoken at a few conferences, and taught a few classes about codegen. I have learned that computers really want to spellcheck codegen to codeine, who knew!\n\n{{< image src=\"codegen.png\"  >}}\n\nI was talking to a [friend](https://www.elidedbranches.com/) the other day about how we are **all totally fucked** and **AI will take our jobs** (more on that in a later post), and she was like \"you should write a post about claude code.\"\n\nHere we go.\n\nClaude Code was released eight days after I wrote my original workflow blog post, and as I predicted, it made a lot of my post irrelevant. I have since migrated from Aider to Claude Code and not looked back. I still like Aider, and it has a distinct use, but Claude Code is a bit more useful atm.\n\nClaude Code is powerful, and a hell of a lot more expensive.\n\nMy workflow is very similar to what it was before.\n\n- I chat with `gpt-4o` to hone my idea\n- I use the best reasoning model I can find to generate the spec. These days it is o1-pro or o3 (is o1-pro better than o3? Or do I feel like it is better cuz it takes longer?)\n- I use the reasoning model to generate the prompts. Using an LLM to generate prompts is a beautiful hack. It makes boomers mad too.\n- I save the spec.md, and the prompt_plan.md in the root of the project.\n- I then type into claude code the following:\n\n```prompt\n1. Open **@prompt_plan.md** and identify any prompts not marked as completed.\n2. For each incomplete prompt:\n    - Double-check if it's truly unfinished (if uncertain, ask for clarification).\n    - If you confirm it's already done, skip it.\n    - Otherwise, implement it as described.\n    - Make sure the tests pass, and the program builds/runs\n    - Commit the changes to your repository with a clear commit message.\n    - Update **@prompt_plan.md** to mark this prompt as completed.\n3. After you finish each prompt, pause and wait for user review or feedback.\n4. Repeat with the next unfinished prompt as directed by the user.\n```\n\n- The magic with this prompt is that it checks the prompt plan. Looks for things that are not marked as completed, then does the next remaining task. It commits it to git, and then updates the prompt plan with what is complete. It then pops up and asks you to continue once it is done. 🤌\n\n- I then kick back and tell claude `yes` while it does the work. It will pop up for feedback, and magic happens.\n- Lots more cookie clicker.\n\nThis works super well. There are a few superpowers you can embed in your process that will really help.\n\n## Defensive coding!\n\n### Testing\n\nTesting and test-driven development is a must. I highly recommend really engaging in building out a robust TDD practice.\n\nI was a TDD hater. I was bad at it and I felt like I was wasting time. I was not correct. Lol. I recognize that, and we built in a lot of testing into our companies and projects over the past few decades. Most of the testing was added AFTER the core work was done. This is fine for humans.\n\nTHIS IS BAD FOR ROBOTS.\n\nThe robots LOVE TDD. Seriously. They eat it up.\n\nWith TDD you have the robot friend build out the test, and the mock. Then your next prompt you build the mock to be real. And the robot just loves this. It is the most effective counter to hallucination and LLM scope drift I have found. It really helps the robots to stay on task.\n\n### Linting\n\nI am such a fan of linting. It is so nice. Ruff is a wonderful product. Biome is cool. Clippy is fun (and a good name).\n\nFor whatever reason the ROBOTS love to run a good linter.\n\nBuilding in the practice to run the linter constantly has kept a lot of bugs away, and kept the code more maintainable and easier to read. You know this already.\n\nAdd in a good formatter and everything is beautiful.\n\n### Pre Commit hooks\n\nThe real magic of all this is to add these tasks to a pre-commit hook. I recommend the pre-commit python package. You can easily use it via an `uv tools install pre-commit` command and then just build out a nice `.pre-commit-config.yaml` file and bam. Every time you try and commit it will run all these wonderful tests, type checking, linting, and whatnot to make sure your code is A+++ would execute again.\n\nThis is a great hack for working with Claude Code. The robot REALLLLLY wants to commit. So when you instruct it to do some code and then commit (like I did above) it will make wild code changes, commit the code, inevitably fuck it all up and then have to fix it.\n\nThis is nice cuz it doesn't clog your GitHub actions with a bunch of linting, formatting, and type checking execution that doesn't pass cuz the robot was in a mood.\n\n> A funny thing about claude is it CANNOT for the life of it figure out how to use `uv` correctly. It will pip install shit all over the place if you are not careful. And if you instruct it to use `uv` it will just use `uv pip install.` Maybe AGI isn't going to happen in June. so sad.\n\n### Claude.md and commands\n\nThese are both really simple additions that can squeeze a lot out.\n\n{{< image src=\"_SDI8149.jpg\" alt=\"Jesse at the studio, Sept 15, 2023, Ricoh GRiii\" caption=\"Jesse at the studio, Sigma fp, 11/15/2023\" >}}\n\nI stole a [CLAUDE.md](https://github.com/harperreed/dotfiles/blob/master/.claude/CLAUDE.md) from my friend [Jesse Vincent](https://fsck.com/) who did an [awful lot of work on making it very robust](https://github.com/obra/dotfiles/blob/main/.claude/CLAUDE.md). It is quite nice. Some things that are built into it:\n\n- a light version of the big daddy rule.\n- instructions on how to do TDD\n- stylistic instructions on how I like to code.\n\n> [@clint](https://instagram.com/clintecker) configured his CLAUDE.md to call him MR BEEF and it is currently embedding info about MR BEEF in our all documentation: \"If you're stuck, stop and ask for help—MR BEEF may know best.\". While typing this out, I decided to make my CLAUDE.md file call me \"Harp Dog.\" This is a feature, not a bug.\n\nThe commands are also really nice. You can see some of mine in my dotfiles [here](https://github.com/harperreed/dotfiles/tree/master/.claude/commands).\n\n{{< image src=\"commands.png\"  >}}\n\nI used to use the commands way more, but it is a really great way to get a lot out of regularly used prompts. You can also pass arguments to the commands. For instance in my github issues command, you pass the issue number that you want claude to look at: `/user:gh-issue #45`\n\nClaude will now go and run through the \"prompt\" script that is defined in the `gh-issue.md` file.\n\nYou can also put these commands in a project directory, and make a custom CLAUDE.md in the project directory. I do this to make hugo, rust, go, or javascript specific commands per project.\n\n## \"Continue\"\n\n{{< image src=\"https://media4.giphy.com/media/v1.Y2lkPTc5MGI3NjExNDk3ZTZpdWYwdG5sdmpnaTJqNzJhYXlvcmp6bnNmdmhxaGdoeHJ4MyZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/l2Je3fIeeXyYEM85G/giphy.gif\" >}}\n\nSometimes I feel like that bird that Homer got to hit \"y\". I am just writing \"continue\" or pressing up and pasting in the same prompt.\n\nMost of the time the plans are about 8–12 steps. I can usually get through a Greenfield development plan in about 30–45 minutes regardless of apparent complexity or language.\n\nI was talking through with my friend Bob and he did not believe it. I asked him \"name a thing to build, a language to build it in - and let's see!\"\n\n{{< image src=\"R0000693.jpeg\" caption=\"Bob Swartz, Ricoh GRiiix, 11/17/2024\" >}}\n\nHe was like \"ok. A basic interpreter in C.\"\n\nThis wasn't ideal. I don't know C. I don't really know how to write an interpreter, nor do I really want to. But fuck it.\n\nI followed the above steps and Claude Code did great. We have [a working basic interpreter](https://github.com/harperreed/basic). The first version worked within an hour. I futzed with it for a few more hours and it is pretty good. Would it ship it in 1982? Probably not. You can see the [prompt plan here](https://raw.githubusercontent.com/harperreed/basic/refs/heads/main/docs/prompt_plan.md).\n\n## The Team\n\nOur entire team is using Claude Code currently. We are all approximately following the above process with a lot of person tweaks.\n\nWe are doing way way higher test coverage than we have ever done. We have better code, and it seems to be just as effective as the horrible code we wrote in the past. It is fun to glance at people working and see claude code running in ghostty, in vscode terminal, in zed terminal, and messing with python notebooks.\n\n{{< image src=\"dril.jpg\" >}}\n\nSomeone who has a lot of tokens, please help me budget this. My family is dying.\n\n## thanks\n\nTo all the folks who keep emailing me. It is really fun and nice to hear about your workflows, and projects. I really appreciate it. Keep em coming!\n\n# CURRENT TRANSLATION\n我真心迷上了这种 agentic（代理式）编码方式，它在方方面面都让人欲罢不能。\n\n自从我写下[那篇原始博客](/2025/02/16/my-llm-codegen-workflow-atm/)后，Claude 的世界发生了不少事：\n\n- Claude Code  \n- MCP  \n- 等等\n\n我已经收到了几百封邮件（wat），大家分享自己的工作流，以及如何用我的流程抢占先机。我在几场大会上做了分享，还开了几节代码生成课。后来我发现拼写检查总想把 “codegen” 改成 “codeine”，谁能想到！\n\n{{< image src=\"codegen.png\" >}}\n\n前几天我和一位[朋友](https://www.elidedbranches.com/)聊天，讨论 **咱们都要完蛋**、**AI 会把我们的饭碗抢光**（以后再写）。她说：“你该写篇文章聊聊 Claude Code。”\n\n那就开搞吧。\n\nClaude Code 在我发那篇工作流文章八天后就上线，正如我预料，直接让文中不少内容报废。我随即从 Aider 迁到 Claude Code，从此没回头。Aider 依旧不错，也有它独特的场景，但眼下 Claude Code 更香。\n\nClaude Code 功能强大，也贵得多。\n\n我的工作流和之前几乎一样：\n\n- 先跟 `gpt-4o` 聊聊，打磨点子  \n- 用能找到的最强推理模型生成需求规格——现在通常是 o1-pro 或 o3（o1-pro 真比 o3 强吗？还是因为它跑得更久我就觉得更强？）  \n- 继续用同一个模型去写 prompts。让 LLM 自己产出提示词是个神操作，还能把年长的老前辈（boomers）气得跳脚。  \n- 把 `spec.md` 和 `prompt_plan.md` 放到项目根目录  \n- 然后在 Claude Code 里输入下面这段提示：  \n\n```prompt\n1. Open **@prompt_plan.md** and identify any prompts not marked as completed.\n2. For each incomplete prompt:\n    - Double-check if it's truly unfinished (if uncertain, ask for clarification).\n    - If you confirm it's already done, skip it.\n    - Otherwise, implement it as described.\n    - Make sure the tests pass, and the program builds/runs\n    - Commit the changes to your repository with a clear commit message.\n    - Update **@prompt_plan.md** to mark this prompt as completed.\n3. After you finish each prompt, pause and wait for user review or feedback.\n4. Repeat with the next unfinished prompt as directed by the user.\n```\n\n- 这段提示的魔法在于：它先检查 `prompt_plan`，找到没标完成的条目，干下一件事；搞完就提交到 git，再把 `prompt_plan` 标成已完成；然后停下来，等待用户审阅或反馈。🤌  \n- 我直接往椅背一靠，对 Claude 说 `yes`，它就自己干活。它会跳出来要你给意见，魔法就此展开。  \n- 随后就是不停点 “yes”，*continue*、*continue*、*continue*，成了真人版 Cookie Clicker。\n\n这一套非常管用。若在流程里再嵌入几项“小超能力”，效果更好。\n\n## 防御式编码！\n\n### Testing\n\n测试，以及测试驱动开发（Test-Driven Development，TDD）是硬性要求。我强烈建议真刀真枪地培养起稳固的 TDD 习惯。\n\n我以前讨厌 TDD，写得烂，觉得浪费时间。事实证明我错得离谱，LOL。过去几十年里，我们在公司和项目里加了不少测试，但大多是功能搞定后才补——这对人类还行，  \n\n**对机器人可太糟糕了。**\n\n机器人对 TDD 简直上瘾。套路很简单：先让机器人写测试和 mock，下一条提示再把 mock 实现成真代码，机器人甭提多爽。这是一剂遏制幻觉和 LLM 范围漂移的灵丹妙药，能让它们老老实实待在轨道上。\n\n### Linting\n\n我是真爱 lint。Ruff 巨香、Biome 很酷、Clippy 名字又帅又好用。\n\n不知为啥，机器人也爱跑 linter。\n\n把 linter 设成常驻动作，能挡掉一堆 bug，让代码更易维护、更好读；再加个 formatter，一切就 A+++，无论再次执行多少次都能顺利跑通。\n\n### Pre-commit 钩子\n\n真正的魔法是把这些检查写进 Pre-commit 钩子。我推荐 Python 的 `pre-commit` 包：一句 `uv tools install pre-commit`，再配一份 `.pre-commit-config.yaml`，搞定。每次提交都会自动跑测试、类型检查、lint 等，确保代码 A+++，随时都能重新执行。\n\n这招配上 Claude Code 更嗨。机器人是真心想 commit。你让它写完就提交，它可能大幅改动、提交、把一切弄崩，然后再去修。\n\n好处是不会把 GitHub Actions 堵成一锅粥：格式化、lint、类型检查全红，只因为机器人当时不在状态。\n\n> 有意思的是，Claude 死活学不会正确用 `uv`。稍不留神就到处 `pip install`；即便你让它用 `uv`，它也会写成 `uv pip install`。看来六月诞生 AGI 是悬了，伤心。\n\n### CLAUDE.md 与 commands\n\n这俩简单小工具能榨出巨大的收益。\n\n{{< image src=\"_SDI8149.jpg\" alt=\"Jesse at the studio, Sept 15, 2023, Ricoh GRiii\" caption=\"Jesse at the studio, Sigma fp, 11/15/2023\" >}}\n\n我从朋友 [Jesse Vincent](https://fsck.com/) 那里“偷”来一份 [CLAUDE.md](https://github.com/harperreed/dotfiles/blob/master/.claude/CLAUDE.md)，他[下了大功夫把它做得超完善](https://github.com/obra/dotfiles/blob/main/.claude/CLAUDE.md)。内容包括：\n\n- 精简版 Big Daddy Rule  \n- 如何做 TDD 的说明  \n- 我个人偏好的代码风格  \n\n> [@clint](https://instagram.com/clintecker) 把他的 CLAUDE.md 配成必须管他叫 MR BEEF，于是文档里全是 “If you're stuck, stop and ask for help—MR BEEF may know best.” 写这段时我也决定把自己的 CLAUDE.md 设成叫我 “Harp Dog”。这是特性，不是 bug。\n\ncommands 也很带劲。我的 dotfiles 中有一些示例：[看这里](https://github.com/harperreed/dotfiles/tree/master/.claude/commands)。\n\n{{< image src=\"commands.png\" >}}\n\n以前我更频繁地用 commands，它依旧是复用常用 prompts 的神技。还能传参，比如 GitHub issue 命令要传 issue 号：`/user:gh-issue #45`\n\nClaude 会按 `gh-issue.md` 里定义的 prompt script 跑。\n\n你也可以把这些 commands 放到项目目录，再放一份项目专属的 CLAUDE.md。我常这么干，为 Hugo、Rust、Go、JavaScript 项目各配一套。\n\n## “Continue”\n\n{{< image src=\"https://media4.giphy.com/media/v1.Y2lkPTc5MGI3NjExNDk3ZTZpdWYwdG5sdmpnaTJqNzJhYXlvcmp6bnNmdmhxaGdoeHJ4MyZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/l2Je3fIeeXyYEM85G/giphy.gif\" >}}\n\n有时我就像《辛普森》里那只不停敲 “Y” 的小鸟——只管打 “continue”，或者按上键把同一条提示再发一次。\n\n大多数计划大概 8–12 步。不管项目看着多庞杂、用哪个语言，我通常能在 30–45 分钟内搞定一次 Greenfield 开发。\n\n我把这事跟朋友 Bob 讲，他不信。我说：“随便说个要做的东西，再指定语言，咱走起！”\n\n{{< image src=\"R0000693.jpeg\" caption=\"Bob Swartz, Ricoh GRiiix, 11/17/2024\" >}}\n\n他来一句：“那就用 C 写个 BASIC 解释器。”\n\n这可真坑。我不会 C，也没写过解释器，更懒得写。但——算了，干就完了。\n\n按上述流程走，Claude Code 表现很给力。现在我们有了[能跑的 BASIC 解释器](https://github.com/harperreed/basic)。首版一小时搞定，我又折腾几小时，现在已经相当像样。要是 1982 年就得发货？可能还差点火候。完整的 [prompt_plan 在此](https://raw.githubusercontent.com/harperreed/basic/refs/heads/main/docs/prompt_plan.md)。\n\n## 团队\n\n我们整个团队都在用 Claude Code，大体遵循这套流程，各自再加点 tweak。\n\n我们的测试覆盖率比历史任何时期都高；代码质量更好，而效率看上去和过去那堆糟糕代码差不多。偶尔抬头一看，就能见到 Claude Code 在 ghostty、VS Code 终端、Zed 终端里运行，甚至在 Jupyter Notebook 里胡乱实验，到处都是它的身影。\n\n{{< image src=\"dril.jpg\" >}}\n\n哪位 token 富豪帮我算算预算吧，我全家都快饿死了。\n\n## 致谢\n\n感谢所有给我发邮件的人。听你们聊各自的工作流和项目，又酷又有趣。我真的很感激——来信别停！\n\n# CRITIQUE FEEDBACK\n严苛译审  \n========  \n\n下列评语按「严重程度→类别」排序。每条都给出：  \n• 原文片段（EN）  \n• 现译文片段（CN）  \n• 问题说明  \n• 建议修订  \n\nA. 重大误译／信息偏失  \n-------------------  \nA-1 术语 “agentic coding”  \nEN: “agentic coding”  \nCN: “agentic（代理式）编码”  \n问题 “代理式”易让人联想到「代理/代理服务器」，而 Agentic 的核心是 “具备自主行动能力”。  \n建议 译为“自主体编码”“自主代理编码”或直接音译加注：“agentic（自主体式）编码”。  \n\nA-2 “Greenfield development plan”  \nEN: “get through a Greenfield development plan”  \nCN: “搞定一次 Greenfield 开发”  \n问题 Greenfield 在软件语境中特指“从零开始的新项目”，而非单纯“Greenfield 开发”。  \n建议 “在 30–45 分钟内完成一个从零开始的开发计划”。  \n\nA-3 “hell of a lot more expensive”  \nEN: “a hell of a lot more expensive”  \nCN: “贵得多”  \n问题 削弱了原文夸张口吻。  \n建议 “贵得离谱”“贵了好几倍” 等。  \n\nA-4 “This wasn’t ideal.”  \nEN: “This wasn’t ideal.”  \nCN: “这可真坑。”  \n问题 语气过度口语化且带情绪，与原文轻描淡写的自嘲不符。  \n建议 “这并不理想。”或“这可不妙”。  \n\nA-5 “Would it ship it in 1982? Probably not.”  \nEN 同上  \nCN: “要是 1982 年就得发货？可能还差点火候。”  \n问题 原文是反问句 + 自答；译文变成陈述，语气变化。  \n建议 “要是放在 1982 年能直接发布吗？大概还不行。”  \n\nA-6 引用段落中 “would execute again”  \nEN: “make sure your code is A+++ would execute again.”  \nCN: “确保代码 A+++，随时都能重新执行。”  \n问题 漏掉 “would execute again” 的条件语用色彩；译文语义模糊。  \n建议 “…确保代码质量达到 A+++，下次执行也能一次通过。”  \n\nB. 术语一致性 / 技术准确性  \n---------------------  \nB-1 “spec.md” → “需求规格”  \n前后多处使用 “需求规格”“规格说明”“spec”，易混淆。  \n建议统一：首次出现可译“规格文档 (spec.md)”，后文保持 “spec”。  \n\nB-2 “prompt plan / prompt_plan.md”  \n有时译作 “prompt_plan”，有时未译；建议固定译名，例如“提示计划文件（prompt_plan.md）”。  \n\nB-3 “Pre-commit / pre-commit hook”  \n正文中大小写混用：Pre Commit / Pre-commit。  \n建议统一“pre-commit 钩子”。  \n\nB-4 “tests pass” 被译为“跑测试”，后文 “test coverage” 译“测试覆盖率”——尚可，但应注意“测试通过/未通过”的准确说法。  \n\nC. 语气、风格、 register  \n---------------------  \nC-1 粗口 / 俚语处理  \n– “and we are all totally fucked” 译“咱们都要完蛋”✔  \n– “fuck it.” 译“算了，干就完了。” 较随意但可接受；可考虑“管他呢，干就完了”。  \n\nC-2 疯狂大小写、加长元音  \nEN: “REALLLLLY wants to commit”  \nCN: “是真心想 commit。”  \n建议保留夸张效果：“特别特别想 commit”。  \n\nC-3 Boomer  \nEN: “It makes boomers mad”  \nCN: “把年长的老前辈（boomers）气得跳脚”  \n“年长的老前辈” 与 “boomer” 的戏谑感不匹配；可译“老一辈程序员（boomers）”。  \n\nC-4 中英夹杂  \n– “commands 也很带劲”  \n– “各自再加点 tweak”  \n– “Cookie Clicker”  \n若保持作者极客口吻可保留，若追求阅读流畅度应替换或加引号/括号注释。  \n\nD. 语法 / 用词 / 自然度  \n-------------------  \nD-1 “它在方方面面都让人欲罢不能”  \n略显书面，与全文轻松口吻不一致。可改：“处处都让人上头”。  \n\nD-2 “若在流程里再嵌入几项‘小超能力’”  \n“若”显得书面，改“如果”。  \n\nD-3 “无论再次执行多少次都能顺利跑通”  \n结构别扭；建议“无论跑多少次都能一键通过”。  \n\nD-4 断句 / 标点  \n多处一段内硬换行，例如 “这对人类还行，\\n\\n**对机器人可太糟糕了。**”  \n建议去掉不必要的换行，保持原文节奏。  \n\nE. 遗漏 / 多余内容  \n----------------  \nE-1 “Looks for things that are not marked as completed”  \n译文缺少 “that are not marked as completed” 的从句指向关系说明，但总体含义已覆盖。  \n\nE-2 原文 “etc” 多次出现；译文首次保留“等等”，后面列表未对应“etc”并省略，属轻微遗漏。  \n\nF. 机械痕迹 / 直译感  \n------------------  \nF-1 长串英文未本地化  \n诸如 “prompt script”“prompt plan”“mock”“formatter”等词均可在首次出现时加括号注释中文，后续保留英文，避免阅读断层。  \n\nF-2 句式重复  \n如 “弄崩，然后再去修” 属口头直译，可做精简：“把一切搞崩后再修”。  \n\n汇总  \n----  \n• 需优先修改 A 类问题，确保核心概念准确。  \n• 统一术语（spec, prompt_plan, pre-commit 等）。  \n• 根据受众决定中英夹杂比例，保持俚语活泼又不致阅读障碍。  \n• 调整标点、段落和换行，让口吻紧凑自然。  \n\n完成上述调整后，译文将既忠实原意、细节无缺，又读来像地道中文原作。\n\nPlease address ALL issues identified in the critique and provide an improved translation.\nReturn ONLY the improved translated text without explanations or comments.",
      "response": "我真心迷上了这种 agentic（自主体式）编码方式，它处处都让人上头。  \n\n自从我写下[那篇原始博客](/2025/02/16/my-llm-codegen-workflow-atm/)后，Claude 世界发生了不少事：  \n\n- Claude Code  \n- MCP  \n- 等等  \n\n我已经收到了数百封邮件（wat），大家聊自己的工作流，以及如何用我的流程抢占先机。我在几场大会上做了分享，还教过几门代码生成课。后来我发现电脑拼写检查总想把 “codegen” 改成 “codeine”，谁能想到！\n\n{{< image src=\"codegen.png\" >}}\n\n前几天我和一位[朋友](https://www.elidedbranches.com/)聊天，讨论 **咱们都要完蛋**、**AI 会把我们的饭碗抢光**（之后再写）。她说：“你该写篇文章聊聊 Claude Code。”\n\n那就开搞吧。  \n\nClaude Code 在我发那篇工作流文章八天后就上线，正如我预料，它让文中不少内容瞬间失效。我随即从 Aider 迁到 Claude Code，从此没回头。Aider 仍然好用，也有独特场景，但眼下 Claude Code 更香——虽然贵得离谱。  \n\n我的工作流和以前几乎一样：  \n\n- 先跟 `gpt-4o` 聊聊，打磨点子  \n- 用能找到的最强推理模型生成规格文档 (spec.md)。现在多用 o1-pro 或 o3（o1-pro 真比 o3 强吗？还是因为它跑得更久我就觉得更强？）  \n- 继续用同一个模型去写提示词。让 LLM 自己产出 prompt 是个神操作，还能把老一辈程序员（boomers）气得直跺脚  \n- 把 spec.md 和提示计划文件（prompt_plan.md）放到项目根目录  \n- 然后在 Claude Code 里输入下面这段提示：  \n\n```prompt\n1. Open **@prompt_plan.md** and identify any prompts not marked as completed.\n2. For each incomplete prompt:\n    - Double-check if it's truly unfinished (if uncertain, ask for clarification).\n    - If you confirm it's already done, skip it.\n    - Otherwise, implement it as described.\n    - Make sure the tests pass, and the program builds/runs\n    - Commit the changes to your repository with a clear commit message.\n    - Update **@prompt_plan.md** to mark this prompt as completed.\n3. After you finish each prompt, pause and wait for user review or feedback.\n4. Repeat with the next unfinished prompt as directed by the user.\n```\n\n- 这段提示的魔法在于：它先检查提示计划文件，找到未标 “completed” 的条目，完成下一件事；搞定后提交到 Git，并把 prompt_plan 标记为已完成；然后停下来等你审核。🤌  \n- 我直接往椅背一靠，对 Claude 说 `yes`，它就自己干活。它会跳出来要你给反馈，魔法就此展开。  \n- 随后就是不停点 “yes”，一遍遍输入 “continue”，活成真人版 Cookie Clicker。  \n\n这一套非常管用。如果在流程里再嵌入几项“小超能力”，效果更猛。  \n\n## 防御式编码！\n\n### Testing\n\n测试，以及测试驱动开发（Test-Driven Development，TDD），必须有。我强烈建议下狠功夫培养起稳固的 TDD 习惯。  \n\n我以前讨厌 TDD，写得烂，觉得浪费时间。事实证明我错得离谱，LOL。过去几十年里，我们在公司和项目里加了不少测试，但大多是功能完成后才补——这对人类还行，**对机器人可太糟糕了。**  \n\n机器人对 TDD 简直上瘾：先让机器人写测试和 mock，下一条 prompt 再把 mock 实现成真代码，机器人爽翻天。TDD 是我见过最有效的“防幻觉、防跑题”利器。  \n\n### Linting\n\n我是真爱 lint。Ruff 巨香，Biome 很酷，Clippy 名字帅又好用。奇怪的是，机器人也特别爱跑 linter。  \n\n让 linter 持续运行能挡掉一堆 bug，让代码更易维护、更好读；再加个 formatter，一切就 A+++，下次执行也能一次通过。  \n\n### pre-commit 钩子\n\n真正的魔法是把这些检查写进 pre-commit 钩子。我推荐 Python 包 `pre-commit`：一句 `uv tools install pre-commit`，再配好 `.pre-commit-config.yaml`，搞定。每次提交都会自动跑测试、类型检查、lint 等，确保代码 A+++。  \n\n这招配上 Claude Code 更嗨。机器人特别特别想 commit。你让它“写完就提交”，它可能大幅改动、提交，把一切搞崩后再修。  \n\n好处是不会把 GitHub Actions 堵成一锅粥：格式化、lint、类型检查全红，只因为机器人当时不在状态。  \n\n> 有意思的是，Claude 死活学不会正确用 `uv`。稍不留神就到处 `pip install`；就算你让它用 `uv`，它也会写成 `uv pip install`。看来六月诞生 AGI 是悬了，so sad。  \n\n### CLAUDE.md 与 commands\n\n这两个简单小工具能榨出巨大收益。  \n\n{{< image src=\"_SDI8149.jpg\" alt=\"Jesse at the studio, Sept 15, 2023, Ricoh GRiii\" caption=\"Jesse at the studio, Sigma fp, 11/15/2023\" >}}\n\n我从朋友 [Jesse Vincent](https://fsck.com/) 那里“偷”来一份 [CLAUDE.md](https://github.com/harperreed/dotfiles/blob/master/.claude/CLAUDE.md)，他[下了大功夫把它做得超完善](https://github.com/obra/dotfiles/blob/main/.claude/CLAUDE.md)。里面包括：  \n\n- 精简版 Big Daddy Rule  \n- 如何做 TDD 的说明  \n- 我偏好的代码风格  \n\n> [@clint](https://instagram.com/clintecker) 把他的 CLAUDE.md 配成必须管他叫 MR BEEF，于是文档里全是 “If you're stuck, stop and ask for help—MR BEEF may know best.” 写这段时我也决定把自己的 CLAUDE.md 设成叫我 “Harp Dog”。这是特性，不是 bug。  \n\ncommands 也很带劲。我的 dotfiles 里有一些示例：[看这里](https://github.com/harperreed/dotfiles/tree/master/.claude/commands)。  \n\n{{< image src=\"commands.png\" >}}\n\n以前我更频繁地用 commands，它依旧是复用常用 prompt 的神技。还能传参，比如 GitHub issue 命令要传 issue 号：`/user:gh-issue #45`  \n\nClaude 会按 `gh-issue.md` 里定义的 prompt script 跑。  \n\n你也可以把这些 commands 放到项目目录，再放一份项目专属的 CLAUDE.md。我常这么干，为 Hugo、Rust、Go、JavaScript 项目各配一套。  \n\n## “Continue”\n\n{{< image src=\"https://media4.giphy.com/media/v1.Y2lkPTc5MGI3NjExNDk3ZTZpdWYwdG5sdmpnaTJqNzJhYXlvcmp6bnNmdmhxaGdoeHJ4MyZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/l2Je3fIeeXyYEM85G/giphy.gif\" >}}\n\n有时我就像《辛普森》里那只不停敲 “Y” 的小鸟——只管打 “continue”，或者按上键把同一条 prompt 再发一次。  \n\n大多数计划大概 8–12 步。不管项目看着多庞杂、用哪个语言，我通常能在 30–45 分钟内完成一个从零开始的开发计划。  \n\n我把这事跟朋友 Bob 讲，他不信。我说：“随便说个要做的东西，再指定语言，咱走起！”  \n\n{{< image src=\"R0000693.jpeg\" caption=\"Bob Swartz, Ricoh GRiiix, 11/17/2024\" >}}\n\n他来一句：“那就用 C 写个 BASIC 解释器。”  \n\n这并不理想。我不会 C，也没写过解释器，更懒得写。但——管他呢，干就完了。  \n\n按照上述流程走，Claude Code 表现很给力。现在我们有了[能跑的 BASIC 解释器](https://github.com/harperreed/basic)。首版一小时搞定，我又折腾几小时，现在已经相当像样。要是放在 1982 年能直接发布吗？大概还不行。完整的 [prompt_plan 在此](https://raw.githubusercontent.com/harperreed/basic/refs/heads/main/docs/prompt_plan.md)。  \n\n## 团队\n\n我们整个团队都在用 Claude Code，大体遵循上述流程，各自再加点 tweak。  \n\n我们的测试覆盖率比历史任何时期都高；代码质量也更好，而效率看起来和过去那堆糟糕代码差不多。偶尔抬头，就能看到 Claude Code 在 ghostty、VS Code 终端、Zed 终端里运行，甚至在 Jupyter Notebook 里乱舞。  \n\n{{< image src=\"dril.jpg\" >}}\n\n哪位 token 富豪帮我算算预算吧，我全家都快饿死了。  \n\n## 致谢\n\n感谢所有给我发邮件的人。听你们聊各自的工作流和项目又酷又有趣。我真的很感激——来信别停！",
      "usage": {
        "prompt_tokens": 7281,
        "completion_tokens": 2222,
        "total_tokens": 9503
      },
      "streaming": true
    },
    "frontmatter": {
      "model": "o3",
      "target_language": "mandarin",
      "system_prompt": "You are a professional translator. Translate the following frontmatter fields to mandarin.\nEach field is in the format \"field_name: content\". Translate ONLY the content, not the field names.\nReturn the translated content in the exact same format, preserving all field names.",
      "user_prompt": "title: Basic Claude Code\n\ndescription: A detailed walkthrough of using Claude Code AI assistant for software development, including workflow tips, testing practices, and practical examples from real projects. Covers defensive coding strategies, TDD, and team implementation.\n\n",
      "response": "title: Claude Code 基础\n\ndescription: 详细讲解如何使用 Claude Code AI 助手进行软件开发，包括工作流程提示、测试实践以及来自真实项目的实际示例。内容涵盖防御式编码策略、TDD 和团队实施。",
      "usage": {
        "prompt_tokens": 99,
        "completion_tokens": 54,
        "total_tokens": 153
      },
      "fields": [
        "title",
        "description"
      ],
      "streaming": true
    },
    "all_critiques": [
      "严苛译文审查  \n—————————  \n注：未指出之处即视为基本可接受。以下所有问题均附有修改建议，另一位译者可以逐条修正。\n\n一、致命错误／意义偏差  \n1. “hell of a lot more expensive” 被弱化为“贵得多”  \n   • 原文语气极强（“离谱贵”“贵爆了”），现译不足以传达力度。  \n   • 建议：改为“贵得离谱”“贵爆了”或“贵上一大截”。  \n\n2. “My family is dying.” → “我家都快揭不开锅了”  \n   • 原文是夸张式“要死了”，译文变成“揭不开锅”（缺钱吃饭），语义偏移。  \n   • 可译作“我全家都快饿死了”“我家都要没命了”以保持同样的戏谑夸张。  \n\n3. 标题式小节 “Defensive coding!” 未译  \n   • 原文强调防御式编码；沿用英文会让部分读者摸不着头脑。  \n   • 建议：译为“防御式编码！”并保留英文括注“(Defensive coding)”如需。  \n\n4. “etc” 直接照搬  \n   • 建议改成“等等”或“之类”等中文口语。  \n\n二、重大问题（影响阅读流畅度或技术准确性）  \n1. “agentic coding” 直接音译  \n   • 多数中文读者不懂，可加解释性译注或使用“代理式编码/自主代理编码（agentic coding）”。  \n\n2. 多处动词时态、省略句被直译导致生硬  \n   • 例：“把 spec.md 和 prompt_plan.md 放到项目根目录”  \n     前文统一用“保存”，此处用“放到”风格不一。  \n   • 例：“我又折腾了几小时，已经挺像样。”  \n     建议统一为“又折腾了几小时，现在已经相当像样”。  \n\n3. 口语槽点保留不全  \n   • “It makes boomers mad too.” 译为“还能把 boomers 气得跳脚”虽准确，但 Boomer 加粗效果丢失；可用“让**Boomer**们气得跳脚”。  \n   • “They eat it up”→“简直是它们的精神口粮”较书面，可改“完全吃这套”。  \n\n4. 随意使用英文专有名词大小写不一致  \n   • “Lint” vs “lint”、“Pre-commit 钩子” vs “pre-commit 钩子”。  \n   • 建议：技术术语统一小写（lint、pre-commit），专有项目名保持原样（Ruff、Clippy）。  \n\n5. 破折号和括号混用杂糅  \n   • 建议中文破折号使用“——”，英文长破折号改为“—”或用括号统一。  \n\n三、一般语言/语法问题  \n1. 口语“靠在椅子上，对 Claude 说 yes”  \n   • 建议将 yes 加引号或代码反引号保持一致：“对 Claude 说`yes`”。  \n\n2. “更多点点点，像在玩 Cookie Clicker。”  \n   • “点点点”太口水，建议“疯狂点击，好像在玩 Cookie Clicker”。  \n\n3. 多处“你肯定懂”口吻略突兀  \n   • 可改为“这一点想必大家都清楚”。  \n\n4. 介词结构直译  \n   • “按 TDD 来，你让机器人…”  \n     建议：“按照 TDD 流程，先让机器人…”。  \n\n5. 感叹词 “Lol” 译为“哈哈”不够网感  \n   • 可考虑“哈哈哈 / LOL”。  \n\n四、风格/调性一致性  \n原文基调：极度口语化、嘲讽、科技宅俚语频出。  \n译文整体较好复制了口语，但有时突然变得书面（如“强烈建议认真建立健全的 TDD 习惯”），与上下文不协。  \n• 建议在口语与书面语之间保持一致——要么全程轻松，要么在技术段落适度正式。\n\n五、术语与专名一致性  \n| 原英文 | 现有译法 | 建议 |\n|--------|-----------|------|\n| Lint/Linting | Lint/Lint | 建议“小写 lint / linting”或“代码静态检查” |\n| Pre-commit hook | pre-commit 钩子 | 可统一“pre-commit 钩子” |\n| prompt | 提示 / 提示词 | 需统一，推荐“提示词” |\n| reasoning model | 推理模型 | OK，一致即可 |\n\n六、漏译/多译检查  \n• 暂未发现整句删除或额外添加内容，完整度良好。\n\n七、机器味／直译痕迹  \n1. 多次使用“等等”“眼下”“此后”“方方面面”等书面词，突兀。  \n   • 可用“之类”“现在”“后来”“各方面”替换。  \n2. 频繁用“流程”对应 workflow，中文可视情况改“工作流/流程”交替，避免高频重复。  \n3. 英文叠词未处理 (“REALLLLLY”)  \n   • 可用“特别特别”或“巨想”增强口语感。  \n\n八、图片 caption 与 alt 处理  \n• 出现英文字段“Jesse at the studio …” 等，翻译忽略。如目标是完整中文版，应同步译出或保留原文+中文。  \n\n九、排版建议  \n1. 中英文之间加空格：如 “Cookie Clicker” 前后。  \n2. 统一使用中文全角标点，避免中英混排断句混乱。\n\n—————————  \n修订示例（节选）  \n原译：Claude Code 很强，也贵得多。  \n可改：Claude Code 功能强大，可价格**贵得离谱**。  \n\n原译：机器人超爱 TDD，真的，简直是它们的精神口粮。  \n可改：机器人**完全吃这套 TDD**，简直嗑得停不下来。  \n\n原译：哪位 token 多的大佬帮我算算预算吧，我家都快揭不开锅了。  \n可改：哪位 token 多的老哥帮我算算预算吧，**我全家都快死透了**。  \n\n—————————  \n结论  \n译文总体准确度较高，但在力度、口语俚语还原、大小写一致性和排版方面仍有明显提升空间。按照上述清单逐项调整，可显著提升阅读体验并保持与英文原文的幽默、尖刻基调一致。",
      "全面翻译质检\n\n目录结构  \n1. 严重错误（内容错译/增删）  \n2. 重要问题（语义偏差/语气被弱化）  \n3. 中度问题（措辞生硬/不地道）  \n4. 细节与标点排版  \n5. 术语一致性与技术表达  \n6. 建议的修改示例  \n\n─────────────────────────────  \n1. 严重错误（Critical）\n\n1-A. 图片 alt/caption 被改写  \n原文 alt: “Ricoh GRiii”；caption: “Sigma fp”。译文把两处合并并改成 “Sigma fp，2023-11-15”，丢掉了 Ricoh 相机信息，也把日期从 9 月 15 日改成 11 月 15 日。  \n⟶ 需分别保留两段并保持原机型/日期差异，或在译文中说明二者不同。\n\n1-B. “A+++ would execute again” 被弱化且语义出错  \n原文含义：让代码达到 “A+++、随时可再次运行/上线” 的程度。  \n译文 “确保代码 A+++，随时能再跑” 缺少“上线/交付”维度；且 “再跑” 容易被解读为“重新执行一次”而非“再次投产”。  \n⟶ 可译为 “确保代码质量 A+++，随时可以再次上线运行”。\n\n1-C. “Lots more cookie clicker.” 语义缺失  \n作者的本意是“继续无脑点 ‘yes’，像玩 Cookie Clicker 一样爽”，含讽刺意味。译文改为 “疯狂点击，好像在玩 Cookie Clicker”，丢掉 “lots more”（更多、更久地）这一层继续/重复之意。  \n⟶ 建议：“然后就是继续狂点，彻底变成真人版 Cookie Clicker。”\n\n1-D. 若干脏话/强语气被过滤  \n例如 “fuck it”→“但管他的”；“hell of a lot”→“贵得离谱”（可接受）；“totally fucked”→“都要完蛋了”。在技术博文中作者的粗口是风格标志，弱化后导致基调变温和，与原文“嬉皮＋吐槽”不一致。  \n⟶ 需视读者接受度决定是否保留，如保留可用“操”“他妈的”等轻度中文粗口或者**符号屏蔽**“f**k”。\n\n─────────────────────────────  \n2. 重要问题（Major）\n\n2-A. 术语“agentic coding”直译为“代理式编码”  \n“agentic”强调“自主/具能动性的”。“代理式”易被误会成“代理模式”。  \n⟶ 建议译为 “自主编码范式”或“Agent 型编码”。\n\n2-B. 俚语/梗未全部传达  \n· “Boomers” 不只是“老一辈”，还带有“被惹毛”的戏谑。译文用英文原词 + “气得跳脚” 勉强够，但最好补一句解释。  \n· “kick back” = “往后一靠/葛优躺”，译文仅写“靠在椅子上”，可再加“翘着腿”以保懒散氛围。  \n· “robot was in a mood” = “机器人闹脾气”。译文“机器人闹情绪”还行，但缺乏俏皮语感。\n\n2-C. 技术词“mock”未解释  \n面向非测试专业读者，第一次出现可加括注“桩（mock）”。\n\n2-D. “Great hack” → “绝妙的黑客手段” OK，但“还能让 Boomers mad too” 应补上“顺便惹怒老程序员”以完整表达。\n\n─────────────────────────────  \n3. 中度问题（Moderate）\n\n3-A. 生硬词汇  \n· “玩法” 用在技术上下文稍口语，可换“做法/方式”。  \n· “commands 也很香” 网络口头语，与整篇 80-90 年代黑客腔不匹配。  \n· “它偶尔弹窗求反馈” → “它会跳出来要你给点反馈”。\n\n3-B. 意群拆分不当  \n若干段落把一句长句拆成多句或用破折号导致节奏与原文不同，如 Testing 段 “这对人类还凑合，**对机器人可太糟糕了**” 前面断行不必要。\n\n3-C. 英文保留/夹杂过多  \n如 “Boomer”“Greenfield”“Cookie Clicker”“ghostty” 视目标读者可选保留，但可考虑给出中文补充说明或加书名号。\n\n─────────────────────────────  \n4. 细节与排版（Minor）\n\n4-A. 中英文混排缺少空格  \n例如 “Claude Code 功能强大” → “Claude Code 功能强大”。  \n4-B. 标点统一  \n中文段落中的英文全句后最好用英文句号，或全部中文句号，保持一致。  \n4-C. 半形/全形括号杂糅，“(Defensive coding!)” 可统一为 “（Defensive coding!）”。\n\n─────────────────────────────  \n5. 术语一致性与技术表达\n\n| 原词             | 译文出现 | 建议统一   |\n|------------------|---------|-----------|\n| TDD              | TDD     | 保留英文首写，首次出现加全称“测试驱动开发 (TDD)” |\n| pre-commit hook  | pre-commit 钩子 | “pre-commit 钩子”即可，一律小写 |\n| LLM              | LLM     | 首次出现加“（大语言模型）” |\n| reasoning model  | 推理模型 | 与前后文一致，无问题 |\n| spec             | 规格说明 | OK |\n| prompt plan      | prompt_plan | 可在首次出现译为 “提示计划 (prompt_plan)” |\n\n─────────────────────────────  \n6. 修改示例（节选）\n\n原译：  \n“我是真心喜欢这套代理式编码（agentic coding）的玩法，各方面都让人着迷。”\n\n改进：  \n“我真心迷上了这种 agentic （自主式）编码范式，它在方方面面都让人欲罢不能。”\n\n原译：  \n“Claude Code 功能强大，而且贵得离谱。”\n\n可酌情加强语气：  \n“Claude Code 牛得一塌糊涂——也贵得一塌糊涂。”\n\n原译：  \n“好处是不会把 GitHub Actions 占得乱七八糟，全是过不了的 lint、格式化和类型检查；就算机器人闹情绪也不碍事。”\n\n改进：  \n“这样一来就不会把 GitHub Actions 阻塞成一锅粥，什么格式化、lint、类型检查全红，只因为机器人一时闹脾气。”\n\n─────────────────────────────  \n总结\n\n译文整体流畅，技术细节基本准确，但  \n• 个别信息被擅自删改（相机/日期），属于硬伤  \n• 原文强烈的吐槽与粗口色彩被冲淡，风格不够“摇滚”  \n• 若干俚语、技术黑话与 double-entendre 需补充注释  \n• “agentic coding” 等核心概念译名可再斟酌  \n• 夹英与口水词需统一与收敛  \n\n按上述清单逐条修正，可进一步贴近作者语气并保持信息 100% 完整。",
      "严苛评审  \n以下按照「严重程度 → 分类」逐级列出问题，并在每条后给出修改建议。仅列一次即可定位到原译文对应段落。  \nA = 致命错误／明显误译或缺漏  \nB = 重大问题／语气-语体失衡、重要细节丢失或过度添加  \nC = 中等问题／表达生硬、选词不当、文化/技术细微差异  \nD = 轻微问题／标点、格式、细节一致性  \n\n====================  \nA. 准确性 & 完整性（Critical）  \n--------------------------------------------------  \nA-1 「Spell-check」误读  \n原：computers really want to spellcheck codegen to codeine  \n译：电脑总想把 “codegen” 拼成 “codeine”  \n问题：缺少 “spell-check” 行为主体是「拼写检查程序」而非电脑本身。虽不致歧义，但逻辑主体偏离。  \n改：后来我发现拼写检查总想把 “codegen” 改成 “codeine”，谁能想到！  \n\nA-2 「prompt plan」解释遗漏  \n译文解释了流程，但漏掉英文原文提到的 “pauses and waits for user review” 中的 “review”，只说“等你点头继续”。应补充“等待用户审阅/修改意见”。  \n\nA-3 “would execute again” 被弱化  \n原：make sure your code is A+++ would execute again  \n译：确保代码质量 A+++，随时可以再次上线运行  \n问题：省略了“再次执行也能通过”的含义。  \n改：……确保代码达到 A+++，无论再次执行多少次都能顺利跑通。  \n\nA-4 “and messing with python notebooks” 部分删减  \n原：seeing claude code running … and messing with python notebooks  \n译：…Jupyter notebook 里全是 Claude Code  \n问题：缺了 “在 notebook 里折腾/调试” 的“乱搞”语气。  \n改：在 ghostty、VS Code 终端、Zed 终端里运行，甚至在 Jupyter Notebook 里胡乱实验，全都看得到 Claude Code 的身影。  \n\nA-5 “keep em coming” 省略俚语色彩  \n译：继续轰炸吧！  \n虽意译准确，但建议保留 “来信别停” 之类更贴近口语节奏的表述。  \n\n====================  \nB. 语气、注册、增删（Major）  \n--------------------------------------------------  \nB-1 过度粗口  \n多处使用 “他妈的”“操”等，比英文原文 “fuck / fucked / shit” 的语气更重。中文读者体感明显升级。  \n改：  \n‐ “真他妈离谱” → “简直离谱” / “真离谱”  \n‐ “机器人他妈的超想 commit” → “机器人是真心想 commit”  \n‐ “但——操，干就完了。” → “但——算了，干就完了。”  \n\nB-2 “打入冷宫” 属古典比喻，口语感突兀  \n改：直接把里面不少内容废掉／作废  \n\nB-3 “老程序员（boomers）” 混淆概念  \nBoomers 指 Baby-Boom 一代，不等同“老程序员”。  \n改：还会把一票年长的老前辈（boomers）气得跳脚。  \n\nB-4 “嗑 TDD 嗑 high” 网络黑话不自然  \n改：机器人对 TDD 简直上瘾。  \n\nB-5 中英文混排未控  \n如 “tweak”“commands”“Continue”等处，原文可保留英文，但应统一加引号或斜体标识，并视情况给出中文同义。  \n\n====================  \nC. 自然度 & 用词（Moderate）  \n--------------------------------------------------  \nC-1 “agentic（自主式）编码范式”  \n“agentic coding” 通常译为“代理式编码”或“代理驱动编码”。“自主式”略含糊。  \n改：我真心迷上了这种 agentic（代理式）编码方式……  \n\nC-2 “规格说明” -> “需求规格” 更贴近软件语境（spec）。  \n\nC-3 “丢在项目根目录” 俚语可，但连篇出现“丢”稍显随意，可换“放到”。  \n\nC-4 “流程里再塞几个“小超能力”，效果更逆天。” “逆天”略浮夸，可酌情弱化。  \n\nC-5 统一大小写 & 专有名词  \n‐ “Claude” 出现时有大小写不一，如 “claude code”。英文原文专用名应维持 “Claude Code”。  \n‐ “cookie clicker” 应首字母大写 “Cookie Clicker”。  \n\n====================  \nD. 细节一致性·排版（Minor）  \n--------------------------------------------------  \nD-1 标题 “## thanks” 未翻译，整体中文文章中突兀。  \n改：“## 致谢”  \n\nD-2 中英文空格风格不一  \n命令、文件名与中文之间统一加空格：`spec.md`、`prompt_plan.md` 等。  \n\nD-3 长破折号统一  \n偶有 “——” “—” “-” 混用，可统一全角破折号“——”或半角+空格。  \n\nD-4 Bullet 列表有的加中文句号、有的无标点，需统一。  \n\n====================  \nE. 技术术语一致性（Minor）  \n--------------------------------------------------  \nE-1 “reasoning model（推理模型）”与后文应保持完全一致，后文出现“推理模型”不要再回到英文。  \nE-2 “pre-commit 钩子”与“pre-commit hook”交替使用，可在首次出现括注英文，后续统一中文或英文。  \n\n====================  \nF. 机器腔 & 直译痕迹（Minor）  \n--------------------------------------------------  \nF-1 “我们全都完蛋了”虽忠实，但略显机械，可改“咱们都要完蛋”。  \nF-2 “画面很带劲”口语感 ok，但与前一句较正式语调略冲突。  \n\n====================  \n总结  \n译文整体流畅、幽默感保留得较好，但  \n1) 少量信息缺失或弱化；  \n2) 粗口和比喻强度普遍高于原文；  \n3) 部分术语、大小写、排版不统一；  \n4) 个别网络黑话、古典成语与原文语气不匹配。  \n\n逐条按以上建议修订后，可达“既像中文原作又 100% 忠实”的目标。",
      "严苛译审  \n========  \n\n下列评语按「严重程度→类别」排序。每条都给出：  \n• 原文片段（EN）  \n• 现译文片段（CN）  \n• 问题说明  \n• 建议修订  \n\nA. 重大误译／信息偏失  \n-------------------  \nA-1 术语 “agentic coding”  \nEN: “agentic coding”  \nCN: “agentic（代理式）编码”  \n问题 “代理式”易让人联想到「代理/代理服务器」，而 Agentic 的核心是 “具备自主行动能力”。  \n建议 译为“自主体编码”“自主代理编码”或直接音译加注：“agentic（自主体式）编码”。  \n\nA-2 “Greenfield development plan”  \nEN: “get through a Greenfield development plan”  \nCN: “搞定一次 Greenfield 开发”  \n问题 Greenfield 在软件语境中特指“从零开始的新项目”，而非单纯“Greenfield 开发”。  \n建议 “在 30–45 分钟内完成一个从零开始的开发计划”。  \n\nA-3 “hell of a lot more expensive”  \nEN: “a hell of a lot more expensive”  \nCN: “贵得多”  \n问题 削弱了原文夸张口吻。  \n建议 “贵得离谱”“贵了好几倍” 等。  \n\nA-4 “This wasn’t ideal.”  \nEN: “This wasn’t ideal.”  \nCN: “这可真坑。”  \n问题 语气过度口语化且带情绪，与原文轻描淡写的自嘲不符。  \n建议 “这并不理想。”或“这可不妙”。  \n\nA-5 “Would it ship it in 1982? Probably not.”  \nEN 同上  \nCN: “要是 1982 年就得发货？可能还差点火候。”  \n问题 原文是反问句 + 自答；译文变成陈述，语气变化。  \n建议 “要是放在 1982 年能直接发布吗？大概还不行。”  \n\nA-6 引用段落中 “would execute again”  \nEN: “make sure your code is A+++ would execute again.”  \nCN: “确保代码 A+++，随时都能重新执行。”  \n问题 漏掉 “would execute again” 的条件语用色彩；译文语义模糊。  \n建议 “…确保代码质量达到 A+++，下次执行也能一次通过。”  \n\nB. 术语一致性 / 技术准确性  \n---------------------  \nB-1 “spec.md” → “需求规格”  \n前后多处使用 “需求规格”“规格说明”“spec”，易混淆。  \n建议统一：首次出现可译“规格文档 (spec.md)”，后文保持 “spec”。  \n\nB-2 “prompt plan / prompt_plan.md”  \n有时译作 “prompt_plan”，有时未译；建议固定译名，例如“提示计划文件（prompt_plan.md）”。  \n\nB-3 “Pre-commit / pre-commit hook”  \n正文中大小写混用：Pre Commit / Pre-commit。  \n建议统一“pre-commit 钩子”。  \n\nB-4 “tests pass” 被译为“跑测试”，后文 “test coverage” 译“测试覆盖率”——尚可，但应注意“测试通过/未通过”的准确说法。  \n\nC. 语气、风格、 register  \n---------------------  \nC-1 粗口 / 俚语处理  \n– “and we are all totally fucked” 译“咱们都要完蛋”✔  \n– “fuck it.” 译“算了，干就完了。” 较随意但可接受；可考虑“管他呢，干就完了”。  \n\nC-2 疯狂大小写、加长元音  \nEN: “REALLLLLY wants to commit”  \nCN: “是真心想 commit。”  \n建议保留夸张效果：“特别特别想 commit”。  \n\nC-3 Boomer  \nEN: “It makes boomers mad”  \nCN: “把年长的老前辈（boomers）气得跳脚”  \n“年长的老前辈” 与 “boomer” 的戏谑感不匹配；可译“老一辈程序员（boomers）”。  \n\nC-4 中英夹杂  \n– “commands 也很带劲”  \n– “各自再加点 tweak”  \n– “Cookie Clicker”  \n若保持作者极客口吻可保留，若追求阅读流畅度应替换或加引号/括号注释。  \n\nD. 语法 / 用词 / 自然度  \n-------------------  \nD-1 “它在方方面面都让人欲罢不能”  \n略显书面，与全文轻松口吻不一致。可改：“处处都让人上头”。  \n\nD-2 “若在流程里再嵌入几项‘小超能力’”  \n“若”显得书面，改“如果”。  \n\nD-3 “无论再次执行多少次都能顺利跑通”  \n结构别扭；建议“无论跑多少次都能一键通过”。  \n\nD-4 断句 / 标点  \n多处一段内硬换行，例如 “这对人类还行，\\n\\n**对机器人可太糟糕了。**”  \n建议去掉不必要的换行，保持原文节奏。  \n\nE. 遗漏 / 多余内容  \n----------------  \nE-1 “Looks for things that are not marked as completed”  \n译文缺少 “that are not marked as completed” 的从句指向关系说明，但总体含义已覆盖。  \n\nE-2 原文 “etc” 多次出现；译文首次保留“等等”，后面列表未对应“etc”并省略，属轻微遗漏。  \n\nF. 机械痕迹 / 直译感  \n------------------  \nF-1 长串英文未本地化  \n诸如 “prompt script”“prompt plan”“mock”“formatter”等词均可在首次出现时加括号注释中文，后续保留英文，避免阅读断层。  \n\nF-2 句式重复  \n如 “弄崩，然后再去修” 属口头直译，可做精简：“把一切搞崩后再修”。  \n\n汇总  \n----  \n• 需优先修改 A 类问题，确保核心概念准确。  \n• 统一术语（spec, prompt_plan, pre-commit 等）。  \n• 根据受众决定中英夹杂比例，保持俚语活泼又不致阅读障碍。  \n• 调整标点、段落和换行，让口吻紧凑自然。  \n\n完成上述调整后，译文将既忠实原意、细节无缺，又读来像地道中文原作。"
    ]
  },
  "critique_loop_details": {
    "critique_usages": [
      {
        "prompt_tokens": 5378,
        "completion_tokens": 1535,
        "total_tokens": 6913
      },
      {
        "prompt_tokens": 5429,
        "completion_tokens": 1692,
        "total_tokens": 7121
      },
      {
        "prompt_tokens": 5507,
        "completion_tokens": 1504,
        "total_tokens": 7011
      },
      {
        "prompt_tokens": 5456,
        "completion_tokens": 1511,
        "total_tokens": 6967
      }
    ],
    "feedback_usages": [
      {
        "prompt_tokens": 7378,
        "completion_tokens": 2195,
        "total_tokens": 9573
      },
      {
        "prompt_tokens": 7610,
        "completion_tokens": 2250,
        "total_tokens": 9860
      },
      {
        "prompt_tokens": 7356,
        "completion_tokens": 2247,
        "total_tokens": 9603
      },
      {
        "prompt_tokens": 7281,
        "completion_tokens": 2222,
        "total_tokens": 9503
      }
    ]
  },
  "timestamp": "2025-06-28T17:39:08.484394"
}