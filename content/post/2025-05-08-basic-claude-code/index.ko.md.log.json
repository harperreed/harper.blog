{
  "input_file": "index.md",
  "output_file": "index.ko.md",
  "target_language": "korean",
  "language_code": "ko",
  "model": "o3",
  "skip_edit": false,
  "do_critique": true,
  "critique_loops": 4,
  "has_frontmatter": true,
  "translation_context": "a blog post about my codegen workflow iwth claude code",
  "token_usage": {
    "prompt_tokens": 67528,
    "completion_tokens": 21973,
    "total_tokens": 89501
  },
  "cost": "$1.5542",
  "prompts_and_responses": {
    "translation": {
      "model": "o3",
      "target_language": "korean",
      "system_prompt": "\n        1. Read the provided text carefully, preserving all formatting, markdown, and structure exactly as they appear.\n        2. Identify any block quotes and code blocks.\n        3. Do not translate text in block quotes or in code blocks (including text within code blocks).\n        4. Translate everything else into korean.\n        5. Maintain the original formatting, markdown, and structure in your output.\n        6. Provide a natural-sounding translation rather than a word-for-word one.\n        7. For idioms, colloquialisms, or slang, render them in an equivalent, natural way in korean whenever possible.\n        8. If there isn't a direct or natural translation for a particular term or phrase, keep it in the original language and surround it with quotes if necessary.\n        9. Ensure that technical terms or jargon remain accurate; if there's no suitable translation, keep the original term.\n        10. Strive for fluid, native-sounding prose that retains the tone and intent of the original text.\n        11. If context about the text is provided, use it to inform your translation choices, especially regarding tone, style, and cultural adaptations.\n        ",
      "user_prompt": "# CONTEXT\na blog post about my codegen workflow iwth claude code\n\n# TEXT TO TRANSLATE\nI really like this agentic coding thing. It is quite compelling in so many ways.\n\nSince I wrote [that original blog post](/2025/02/16/my-llm-codegen-workflow-atm/) a lot has happened in Claude land:\n\n- Claude Code\n- MCP\n- etc\n\nI have received hundreds (wat) of emails from people talking about their workflows and how they have used my workflow to get ahead. I have spoken at a few conferences, and taught a few classes about codegen. I have learned that computers really want to spellcheck codegen to codeine, who knew!\n\n{{< image src=\"codegen.png\"  >}}\n\nI was talking to a [friend](https://www.elidedbranches.com/) the other day about how we are **all totally fucked** and **AI will take our jobs** (more on that in a later post), and she was like \"you should write a post about claude code.\"\n\nHere we go.\n\nClaude Code was released eight days after I wrote my original workflow blog post, and as I predicted, it made a lot of my post irrelevant. I have since migrated from Aider to Claude Code and not looked back. I still like Aider, and it has a distinct use, but Claude Code is a bit more useful atm.\n\nClaude Code is powerful, and a hell of a lot more expensive.\n\nMy workflow is very similar to what it was before.\n\n- I chat with `gpt-4o` to hone my idea\n- I use the best reasoning model I can find to generate the spec. These days it is o1-pro or o3 (is o1-pro better than o3? Or do I feel like it is better cuz it takes longer?)\n- I use the reasoning model to generate the prompts. Using an LLM to generate prompts is a beautiful hack. It makes boomers mad too.\n- I save the spec.md, and the prompt_plan.md in the root of the project.\n- I then type into claude code the following:\n\n```prompt\n1. Open **@prompt_plan.md** and identify any prompts not marked as completed.\n2. For each incomplete prompt:\n    - Double-check if it's truly unfinished (if uncertain, ask for clarification).\n    - If you confirm it's already done, skip it.\n    - Otherwise, implement it as described.\n    - Make sure the tests pass, and the program builds/runs\n    - Commit the changes to your repository with a clear commit message.\n    - Update **@prompt_plan.md** to mark this prompt as completed.\n3. After you finish each prompt, pause and wait for user review or feedback.\n4. Repeat with the next unfinished prompt as directed by the user.\n```\n\n- The magic with this prompt is that it checks the prompt plan. Looks for things that are not marked as completed, then does the next remaining task. It commits it to git, and then updates the prompt plan with what is complete. It then pops up and asks you to continue once it is done. 🤌\n\n- I then kick back and tell claude `yes` while it does the work. It will pop up for feedback, and magic happens.\n- Lots more cookie clicker.\n\nThis works super well. There are a few superpowers you can embed in your process that will really help.\n\n## Defensive coding!\n\n### Testing\n\nTesting and test-driven development is a must. I highly recommend really engaging in building out a robust TDD practice.\n\nI was a TDD hater. I was bad at it and I felt like I was wasting time. I was not correct. Lol. I recognize that, and we built in a lot of testing into our companies and projects over the past few decades. Most of the testing was added AFTER the core work was done. This is fine for humans.\n\nTHIS IS BAD FOR ROBOTS.\n\nThe robots LOVE TDD. Seriously. They eat it up.\n\nWith TDD you have the robot friend build out the test, and the mock. Then your next prompt you build the mock to be real. And the robot just loves this. It is the most effective counter to hallucination and LLM scope drift I have found. It really helps the robots to stay on task.\n\n### Linting\n\nI am such a fan of linting. It is so nice. Ruff is a wonderful product. Biome is cool. Clippy is fun (and a good name).\n\nFor whatever reason the ROBOTS love to run a good linter.\n\nBuilding in the practice to run the linter constantly has kept a lot of bugs away, and kept the code more maintainable and easier to read. You know this already.\n\nAdd in a good formatter and everything is beautiful.\n\n### Pre Commit hooks\n\nThe real magic of all this is to add these tasks to a pre-commit hook. I recommend the pre-commit python package. You can easily use it via an `uv tools install pre-commit` command and then just build out a nice `.pre-commit-config.yaml` file and bam. Every time you try and commit it will run all these wonderful tests, type checking, linting, and whatnot to make sure your code is A+++ would execute again.\n\nThis is a great hack for working with Claude Code. The robot REALLLLLY wants to commit. So when you instruct it to do some code and then commit (like I did above) it will make wild code changes, commit the code, inevitably fuck it all up and then have to fix it.\n\nThis is nice cuz it doesn't clog your GitHub actions with a bunch of linting, formatting, and type checking execution that doesn't pass cuz the robot was in a mood.\n\n> A funny thing about claude is it CANNOT for the life of it figure out how to use `uv` correctly. It will pip install shit all over the place if you are not careful. And if you instruct it to use `uv` it will just use `uv pip install.` Maybe AGI isn't going to happen in June. so sad.\n\n### Claude.md and commands\n\nThese are both really simple additions that can squeeze a lot out.\n\n{{< image src=\"_SDI8149.jpg\" alt=\"Jesse at the studio, Sept 15, 2023, Ricoh GRiii\" caption=\"Jesse at the studio, Sigma fp, 11/15/2023\" >}}\n\nI stole a [CLAUDE.md](https://github.com/harperreed/dotfiles/blob/master/.claude/CLAUDE.md) from my friend [Jesse Vincent](https://fsck.com/) who did an [awful lot of work on making it very robust](https://github.com/obra/dotfiles/blob/main/.claude/CLAUDE.md). It is quite nice. Some things that are built into it:\n\n- a light version of the big daddy rule.\n- instructions on how to do TDD\n- stylistic instructions on how I like to code.\n\n> [@clint](https://instagram.com/clintecker) configured his CLAUDE.md to call him MR BEEF and it is currently embedding info about MR BEEF in our all documentation: \"If you're stuck, stop and ask for help—MR BEEF may know best.\". While typing this out, I decided to make my CLAUDE.md file call me \"Harp Dog.\" This is a feature, not a bug.\n\nThe commands are also really nice. You can see some of mine in my dotfiles [here](https://github.com/harperreed/dotfiles/tree/master/.claude/commands).\n\n{{< image src=\"commands.png\"  >}}\n\nI used to use the commands way more, but it is a really great way to get a lot out of regularly used prompts. You can also pass arguments to the commands. For instance in my github issues command, you pass the issue number that you want claude to look at: `/user:gh-issue #45`\n\nClaude will now go and run through the \"prompt\" script that is defined in the `gh-issue.md` file.\n\nYou can also put these commands in a project directory, and make a custom CLAUDE.md in the project directory. I do this to make hugo, rust, go, or javascript specific commands per project.\n\n## \"Continue\"\n\n{{< image src=\"https://media4.giphy.com/media/v1.Y2lkPTc5MGI3NjExNDk3ZTZpdWYwdG5sdmpnaTJqNzJhYXlvcmp6bnNmdmhxaGdoeHJ4MyZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/l2Je3fIeeXyYEM85G/giphy.gif\" >}}\n\nSometimes I feel like that bird that Homer got to hit \"y\". I am just writing \"continue\" or pressing up and pasting in the same prompt.\n\nMost of the time the plans are about 8–12 steps. I can usually get through a Greenfield development plan in about 30–45 minutes regardless of apparent complexity or language.\n\nI was talking through with my friend Bob and he did not believe it. I asked him \"name a thing to build, a language to build it in - and let's see!\"\n\n{{< image src=\"R0000693.jpeg\" caption=\"Bob Swartz, Ricoh GRiiix, 11/17/2024\" >}}\n\nHe was like \"ok. A basic interpreter in C.\"\n\nThis wasn't ideal. I don't know C. I don't really know how to write an interpreter, nor do I really want to. But fuck it.\n\nI followed the above steps and Claude Code did great. We have [a working basic interpreter](https://github.com/harperreed/basic). The first version worked within an hour. I futzed with it for a few more hours and it is pretty good. Would it ship it in 1982? Probably not. You can see the [prompt plan here](https://raw.githubusercontent.com/harperreed/basic/refs/heads/main/docs/prompt_plan.md).\n\n## The Team\n\nOur entire team is using Claude Code currently. We are all approximately following the above process with a lot of person tweaks.\n\nWe are doing way way higher test coverage than we have ever done. We have better code, and it seems to be just as effective as the horrible code we wrote in the past. It is fun to glance at people working and see claude code running in ghostty, in vscode terminal, in zed terminal, and messing with python notebooks.\n\n{{< image src=\"dril.jpg\" >}}\n\nSomeone who has a lot of tokens, please help me budget this. My family is dying.\n\n## thanks\n\nTo all the folks who keep emailing me. It is really fun and nice to hear about your workflows, and projects. I really appreciate it. Keep em coming!",
      "context": "a blog post about my codegen workflow iwth claude code",
      "response": "나는 이 에이전틱 코딩 방식이 정말 마음에 든다. 여러 면에서 아주 매력적이다.\n\n[그 원본 블로그 글](/2025/02/16/my-llm-codegen-workflow-atm/)을 쓴 이후로 Claude 쪽에서는 정말 많은 변화가 있었다:\n\n- Claude Code\n- MCP\n- 기타 등등\n\n사람들로부터 워크플로우 이야기를 담은 이메일을 수백 통(헉)이나 받았고, 여러 컨퍼런스에서 발표도 하고 코드젠 관련 수업도 몇 차례 진행했다. 컴퓨터는 코드젠을 코드인(codeine)으로 오타 교정하려 들더라—알고 보니 그런 사실!\n\n{{< image src=\"codegen.png\"  >}}\n\n며칠 전 [친구](https://www.elidedbranches.com/)와 “우린 **다 망했어** 그리고 **AI가 우리의 일자리를 빼앗을 거야**”라는 얘기를 나누다(자세한 내용은 나중 글에서) “클로드 코드에 대한 글을 써보라”는 말을 들었다.\n\n자, 시작한다.\n\nClaude Code는 내가 첫 워크플로우 글을 쓴 지 여드레 만에 공개됐고, 예상했던 대로 내 글의 상당 부분을 무용지물로 만들었다. 그때부터 Aider에서 Claude Code로 갈아탔고 뒤돌아보지 않았다. Aider도 여전히 좋고 고유 용도가 있지만, 현시점엔 Claude Code가 좀 더 유용하다.\n\nClaude Code는 강력하지만, 비용도 훨씬 비싸다.\n\n내 워크플로우는 예전과 거의 비슷하다.\n\n- 아이디어를 다듬을 땐 `gpt-4o`와 대화한다.\n- 사양(spec)은 가능한 최고의 추론 모델로 생성한다. 요즘은 o1-pro나 o3(과연 o1-pro가 o3보다 나을까? 아니면 오래 걸려서 더 나은 것처럼 느끼는 걸까?)\n- 프롬프트도 같은 추론 모델로 작성한다. LLM을 이용해 프롬프트를 만드는 건 훌륭한 핵이며, 꼰대들을 빡치게 만든다.\n- spec.md와 prompt_plan.md를 프로젝트 루트에 저장한다.\n- 그리고 Claude Code에 다음을 입력한다:\n\n```prompt\n1. Open **@prompt_plan.md** and identify any prompts not marked as completed.\n2. For each incomplete prompt:\n    - Double-check if it's truly unfinished (if uncertain, ask for clarification).\n    - If you confirm it's already done, skip it.\n    - Otherwise, implement it as described.\n    - Make sure the tests pass, and the program builds/runs\n    - Commit the changes to your repository with a clear commit message.\n    - Update **@prompt_plan.md** to mark this prompt as completed.\n3. After you finish each prompt, pause and wait for user review or feedback.\n4. Repeat with the next unfinished prompt as directed by the user.\n```\n\n- 이 프롬프트의 묘미는 prompt_plan을 읽어 완료되지 않은 항목을 찾은 뒤 다음 작업을 처리한다는 점이다. git에 커밋하고, 완료된 작업을 prompt_plan에 표시한 뒤 작업이 끝나면 계속할지 물어본다. 🤌\n\n- 나는 뒤로 물러나 ‘yes’만 입력하면 Claude가 알아서 일한다. 피드백을 요청하면 거기서 마법이 펼쳐진다.\n- 쿠키 클릭커를 훨씬 더 많이 하게 됐다.\n\n효과가 상당히 좋다. 여기에 몇 가지 ‘슈퍼파워’를 추가하면 훨씬 도움이 된다.\n\n## Defensive coding!\n\n### Testing\n\n테스트 및 테스트 주도 개발(TDD)은 필수다. 견고한 TDD 습관을 적극적으로 들일 것을 강력 추천한다.\n\n예전 나는 TDD 혐오자였다. 잘하지 못했고 시간 낭비라 생각했다. 틀렸었다. ㅋㅋ. 그 사실을 인정했고, 우리는 지난 수십 년간 회사와 프로젝트에 테스트를 많이 추가했다. 다만 대부분은 핵심 작업 이후에야 테스트를 넣었다. 인간에게는 괜찮다.\n\n하지만 로봇에게는 이러면 **안 된다**.\n\n로봇은 TDD를 **사랑**한다. 정말이다. 미친 듯이 좋아한다.\n\nTDD를 쓰면 로봇 친구가 테스트와 목(mock)을 먼저 만든다. 다음 프롬프트에서 그 목을 실제 구현으로 교체한다. 로봇이 이에 열광한다. 이는 환각(hallucination)과 LLM 범위 확장을 막는 가장 효과적인 방법이었다. 로봇이 작업에 집중하도록 크게 도움 된다.\n\n### Linting\n\n나는 린팅의 열렬한 팬이다. 정말 좋다. Ruff는 훌륭하고, Biome도 멋지며, Clippy는 재미있고(이름도 좋다).\n\n이상하게도 로봇은 좋은 린터를 돌리는 걸 **엄청** 좋아한다.\n\n린터를 지속적으로 돌리는 습관 덕분에 많은 버그를 막고 코드 유지보수와 가독성을 높일 수 있었다. 이미 알고 있을 것이다.\n\n좋은 포매터까지 더하면 퍼펙트하다.\n\n### Pre Commit hooks\n\n진짜 마법은 이런 작업을 pre-commit 훅에 넣는 것이다. python 패키지인 pre-commit을 추천한다. `uv tools install pre-commit` 명령으로 간단히 설치한 뒤 `.pre-commit-config.yaml` 파일만 잘 구성하면 끝. 커밋할 때마다 테스트, 타입 체크, 린팅 등 멋진 점검이 돌아가며 “이 코드는 A+++! 다시 실행해도 OK” 상태를 보장해준다.\n\nClaude Code와 함께 쓰면 정말 좋은 해킹이다. 로봇은 **무조건 커밋**하고 싶어 한다. 위처럼 “코드 작성 후 커밋” 지시를 내리면, 로봇은 과감히 코드를 바꾼 뒤 커밋하고, 당연히 망치고, 이후 고친다.\n\n덕분에 GitHub Actions를 린팅·포매팅·타입체크 실패 로그로 도배하지 않아도 된다. 로봇의 기분 탓에 오류가 나도 말이다.\n\n> A funny thing about claude is it CANNOT for the life of it figure out how to use `uv` correctly. It will pip install shit all over the place if you are not careful. And if you instruct it to use `uv` it will just use `uv pip install.` Maybe AGI isn't going to happen in June. so sad.\n\n### Claude.md and commands\n\n작지만 큰 효과를 내는 요소가 두 가지 더 있다.\n\n{{< image src=\"_SDI8149.jpg\" alt=\"Jesse at the studio, Sept 15, 2023, Ricoh GRiii\" caption=\"Jesse at the studio, Sigma fp, 11/15/2023\" >}}\n\n친구 [Jesse Vincent](https://fsck.com/)이 [매우 탄탄하게 다듬어둔](https://github.com/obra/dotfiles/blob/main/.claude/CLAUDE.md) [CLAUDE.md](https://github.com/harperreed/dotfiles/blob/master/.claude/CLAUDE.md)를 슬쩍 가져와 쓰고 있다. 특징은 다음과 같다:\n\n- 빅 대디 룰의 라이트 버전\n- TDD 수행 방법\n- 내가 선호하는 코딩 스타일 가이드\n\n> [@clint](https://instagram.com/clintecker) configured his CLAUDE.md to call him MR BEEF and it is currently embedding info about MR BEEF in our all documentation: \"If you're stuck, stop and ask for help—MR BEEF may know best.\". While typing this out, I decided to make my CLAUDE.md file call me \"Harp Dog.\" This is a feature, not a bug.\n\ncommands도 꽤 쓸 만하다. 내 dotfiles에서 일부 예시를 확인할 수 있다: [링크](https://github.com/harperreed/dotfiles/tree/master/.claude/commands).\n\n{{< image src=\"commands.png\"  >}}\n\n예전엔 commands를 훨씬 자주 썼지만, 자주 사용하는 프롬프트를 크게 활용할 수 있는 좋은 방법이다. 인자를 전달할 수도 있다. 예를 들어 GitHub 이슈 명령은 이슈 번호를 넘겨주면 된다: `/user:gh-issue #45`\n\n그러면 Claude가 `gh-issue.md`에 정의된 “prompt” 스크립트를 실행한다.\n\n또 commands와 커스텀 CLAUDE.md를 프로젝트 디렉터리에 넣어 프로젝트별로 활용할 수 있다. 나도 hugo, rust, go, javascript 프로젝트마다 이렇게 한다.\n\n## \"Continue\"\n\n{{< image src=\"https://media4.giphy.com/media/v1.Y2lkPTc5MGI3NjExNDk3ZTZpdWYwdG5sdmpnaTJqNzJhYXlvcmp6bnNmdmhxaGdoeHJ4MyZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/l2Je3fIeeXyYEM85G/giphy.gif\" >}}\n\n가끔은 ‘y’를 누르도록 설정한 호머의 새처럼 느껴진다. 그냥 “continue”를 쓰거나 ↑ 키로 직전에 입력한 프롬프트를 붙여 넣는다.\n\n대부분 계획은 8–12단계 정도다. 겉보기 복잡도나 언어와 무관하게 그린필드 개발 계획을 30–45분이면 끝낸다.\n\n친구 Bob에게 설명했더니 믿기지 않는다며 “만들 것과 언어를 정해보라”고 했다.\n\n{{< image src=\"R0000693.jpeg\" caption=\"Bob Swartz, Ricoh GRiiix, 11/17/2024\" >}}\n\n그는 “C로 베이식 인터프리터”라고 했다.\n\n최악이다. C도 잘 모르고 인터프리터 작성 경험도 거의 없다. 하지만 해보자.\n\n앞서 설명한 단계를 그대로 따라 했고 Claude Code는 훌륭히 해냈다. [작동하는 베이식 인터프리터](https://github.com/harperreed/basic)가 완성됐다. 첫 버전은 한 시간 안에 돌아갔다. 이후 몇 시간 더 손봐 그럴듯하다. 1982년에 출시했을까? 아마 아니겠지만. [prompt_plan은 여기](https://raw.githubusercontent.com/harperreed/basic/refs/heads/main/docs/prompt_plan.md)에서 볼 수 있다.\n\n## 팀 이야기\n\n우리 팀 전원이 현재 Claude Code를 사용 중이다. 위 과정을 기본으로 개인별 커스터마이징을 하고 있다.\n\n이전에 비해 테스트 커버리지가 훨씬 높다. 코드 품질도 좋아졌고, 과거 끔찍한 코드와 비슷한 효율을 유지한다. 주변을 보면 ghostty, VSCode 터미널, Zed 터미널, 파이썬 노트북 등에서 Claude Code가 돌아가는 모습이 재미있다.\n\n{{< image src=\"dril.jpg\" >}}\n\n토큰이 넉넉한 분, 제발 예산 좀 계산해 주세요. 가족이 죽어갑니다.\n\n## 감사\n\n계속 메일 보내주시는 모든 분들께 감사드린다. 여러분의 워크플로우와 프로젝트 이야기를 듣는 것은 정말 즐겁고 고마운 일이다. 앞으로도 많이 들려달라!",
      "usage": {
        "prompt_tokens": 2551,
        "completion_tokens": 2473,
        "total_tokens": 5024
      },
      "streaming": true
    },
    "editing": {
      "model": "o3",
      "target_language": "korean",
      "system_prompt": "\n        1. Carefully read the translated text alongside the original text in its entirety.\n        2. Compare both texts to ensure the translation accurately reflects the original meaning.\n        3. Correct any grammatical errors you find in the korean text.\n        4. Adjust phrasing to make it sound natural and fluent for korean speakers, making sure idioms and expressions are culturally appropriate.\n        5. Preserve the original tone, nuance, and style, including any formatting, markdown, and structure.\n        6. Avoid adding new information or altering the core meaning.\n        7. Ensure the final result doesn't feel machine-translated but remains faithful to the source.\n        8. Make only changes that genuinely improve the text's quality in korean.\n        9. Don't be too literal. If there isn't a direct translation, provide a natural-sounding translation.\n        10. If the text contains idioms or colloquialisms, translate them into the target language while maintaining their original meaning.\n        11. If the text contains technical terms or jargon, ensure that the translation is accurate and appropriate for the target audience, if there isn't a natural translation, keep it in the original language.\n        12. If there is not natural translation, keep it in the original language.\n        ",
      "user_prompt": "# ORIGINAL TEXT\nI really like this agentic coding thing. It is quite compelling in so many ways.\n\nSince I wrote [that original blog post](/2025/02/16/my-llm-codegen-workflow-atm/) a lot has happened in Claude land:\n\n- Claude Code\n- MCP\n- etc\n\nI have received hundreds (wat) of emails from people talking about their workflows and how they have used my workflow to get ahead. I have spoken at a few conferences, and taught a few classes about codegen. I have learned that computers really want to spellcheck codegen to codeine, who knew!\n\n{{< image src=\"codegen.png\"  >}}\n\nI was talking to a [friend](https://www.elidedbranches.com/) the other day about how we are **all totally fucked** and **AI will take our jobs** (more on that in a later post), and she was like \"you should write a post about claude code.\"\n\nHere we go.\n\nClaude Code was released eight days after I wrote my original workflow blog post, and as I predicted, it made a lot of my post irrelevant. I have since migrated from Aider to Claude Code and not looked back. I still like Aider, and it has a distinct use, but Claude Code is a bit more useful atm.\n\nClaude Code is powerful, and a hell of a lot more expensive.\n\nMy workflow is very similar to what it was before.\n\n- I chat with `gpt-4o` to hone my idea\n- I use the best reasoning model I can find to generate the spec. These days it is o1-pro or o3 (is o1-pro better than o3? Or do I feel like it is better cuz it takes longer?)\n- I use the reasoning model to generate the prompts. Using an LLM to generate prompts is a beautiful hack. It makes boomers mad too.\n- I save the spec.md, and the prompt_plan.md in the root of the project.\n- I then type into claude code the following:\n\n```prompt\n1. Open **@prompt_plan.md** and identify any prompts not marked as completed.\n2. For each incomplete prompt:\n    - Double-check if it's truly unfinished (if uncertain, ask for clarification).\n    - If you confirm it's already done, skip it.\n    - Otherwise, implement it as described.\n    - Make sure the tests pass, and the program builds/runs\n    - Commit the changes to your repository with a clear commit message.\n    - Update **@prompt_plan.md** to mark this prompt as completed.\n3. After you finish each prompt, pause and wait for user review or feedback.\n4. Repeat with the next unfinished prompt as directed by the user.\n```\n\n- The magic with this prompt is that it checks the prompt plan. Looks for things that are not marked as completed, then does the next remaining task. It commits it to git, and then updates the prompt plan with what is complete. It then pops up and asks you to continue once it is done. 🤌\n\n- I then kick back and tell claude `yes` while it does the work. It will pop up for feedback, and magic happens.\n- Lots more cookie clicker.\n\nThis works super well. There are a few superpowers you can embed in your process that will really help.\n\n## Defensive coding!\n\n### Testing\n\nTesting and test-driven development is a must. I highly recommend really engaging in building out a robust TDD practice.\n\nI was a TDD hater. I was bad at it and I felt like I was wasting time. I was not correct. Lol. I recognize that, and we built in a lot of testing into our companies and projects over the past few decades. Most of the testing was added AFTER the core work was done. This is fine for humans.\n\nTHIS IS BAD FOR ROBOTS.\n\nThe robots LOVE TDD. Seriously. They eat it up.\n\nWith TDD you have the robot friend build out the test, and the mock. Then your next prompt you build the mock to be real. And the robot just loves this. It is the most effective counter to hallucination and LLM scope drift I have found. It really helps the robots to stay on task.\n\n### Linting\n\nI am such a fan of linting. It is so nice. Ruff is a wonderful product. Biome is cool. Clippy is fun (and a good name).\n\nFor whatever reason the ROBOTS love to run a good linter.\n\nBuilding in the practice to run the linter constantly has kept a lot of bugs away, and kept the code more maintainable and easier to read. You know this already.\n\nAdd in a good formatter and everything is beautiful.\n\n### Pre Commit hooks\n\nThe real magic of all this is to add these tasks to a pre-commit hook. I recommend the pre-commit python package. You can easily use it via an `uv tools install pre-commit` command and then just build out a nice `.pre-commit-config.yaml` file and bam. Every time you try and commit it will run all these wonderful tests, type checking, linting, and whatnot to make sure your code is A+++ would execute again.\n\nThis is a great hack for working with Claude Code. The robot REALLLLLY wants to commit. So when you instruct it to do some code and then commit (like I did above) it will make wild code changes, commit the code, inevitably fuck it all up and then have to fix it.\n\nThis is nice cuz it doesn't clog your GitHub actions with a bunch of linting, formatting, and type checking execution that doesn't pass cuz the robot was in a mood.\n\n> A funny thing about claude is it CANNOT for the life of it figure out how to use `uv` correctly. It will pip install shit all over the place if you are not careful. And if you instruct it to use `uv` it will just use `uv pip install.` Maybe AGI isn't going to happen in June. so sad.\n\n### Claude.md and commands\n\nThese are both really simple additions that can squeeze a lot out.\n\n{{< image src=\"_SDI8149.jpg\" alt=\"Jesse at the studio, Sept 15, 2023, Ricoh GRiii\" caption=\"Jesse at the studio, Sigma fp, 11/15/2023\" >}}\n\nI stole a [CLAUDE.md](https://github.com/harperreed/dotfiles/blob/master/.claude/CLAUDE.md) from my friend [Jesse Vincent](https://fsck.com/) who did an [awful lot of work on making it very robust](https://github.com/obra/dotfiles/blob/main/.claude/CLAUDE.md). It is quite nice. Some things that are built into it:\n\n- a light version of the big daddy rule.\n- instructions on how to do TDD\n- stylistic instructions on how I like to code.\n\n> [@clint](https://instagram.com/clintecker) configured his CLAUDE.md to call him MR BEEF and it is currently embedding info about MR BEEF in our all documentation: \"If you're stuck, stop and ask for help—MR BEEF may know best.\". While typing this out, I decided to make my CLAUDE.md file call me \"Harp Dog.\" This is a feature, not a bug.\n\nThe commands are also really nice. You can see some of mine in my dotfiles [here](https://github.com/harperreed/dotfiles/tree/master/.claude/commands).\n\n{{< image src=\"commands.png\"  >}}\n\nI used to use the commands way more, but it is a really great way to get a lot out of regularly used prompts. You can also pass arguments to the commands. For instance in my github issues command, you pass the issue number that you want claude to look at: `/user:gh-issue #45`\n\nClaude will now go and run through the \"prompt\" script that is defined in the `gh-issue.md` file.\n\nYou can also put these commands in a project directory, and make a custom CLAUDE.md in the project directory. I do this to make hugo, rust, go, or javascript specific commands per project.\n\n## \"Continue\"\n\n{{< image src=\"https://media4.giphy.com/media/v1.Y2lkPTc5MGI3NjExNDk3ZTZpdWYwdG5sdmpnaTJqNzJhYXlvcmp6bnNmdmhxaGdoeHJ4MyZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/l2Je3fIeeXyYEM85G/giphy.gif\" >}}\n\nSometimes I feel like that bird that Homer got to hit \"y\". I am just writing \"continue\" or pressing up and pasting in the same prompt.\n\nMost of the time the plans are about 8–12 steps. I can usually get through a Greenfield development plan in about 30–45 minutes regardless of apparent complexity or language.\n\nI was talking through with my friend Bob and he did not believe it. I asked him \"name a thing to build, a language to build it in - and let's see!\"\n\n{{< image src=\"R0000693.jpeg\" caption=\"Bob Swartz, Ricoh GRiiix, 11/17/2024\" >}}\n\nHe was like \"ok. A basic interpreter in C.\"\n\nThis wasn't ideal. I don't know C. I don't really know how to write an interpreter, nor do I really want to. But fuck it.\n\nI followed the above steps and Claude Code did great. We have [a working basic interpreter](https://github.com/harperreed/basic). The first version worked within an hour. I futzed with it for a few more hours and it is pretty good. Would it ship it in 1982? Probably not. You can see the [prompt plan here](https://raw.githubusercontent.com/harperreed/basic/refs/heads/main/docs/prompt_plan.md).\n\n## The Team\n\nOur entire team is using Claude Code currently. We are all approximately following the above process with a lot of person tweaks.\n\nWe are doing way way higher test coverage than we have ever done. We have better code, and it seems to be just as effective as the horrible code we wrote in the past. It is fun to glance at people working and see claude code running in ghostty, in vscode terminal, in zed terminal, and messing with python notebooks.\n\n{{< image src=\"dril.jpg\" >}}\n\nSomeone who has a lot of tokens, please help me budget this. My family is dying.\n\n## thanks\n\nTo all the folks who keep emailing me. It is really fun and nice to hear about your workflows, and projects. I really appreciate it. Keep em coming!\n\n# TRANSLATED TEXT\n나는 이 에이전틱 코딩 방식이 정말 마음에 든다. 여러 면에서 아주 매력적이다.\n\n[그 원본 블로그 글](/2025/02/16/my-llm-codegen-workflow-atm/)을 쓴 이후로 Claude 쪽에서는 정말 많은 변화가 있었다:\n\n- Claude Code\n- MCP\n- 기타 등등\n\n사람들로부터 워크플로우 이야기를 담은 이메일을 수백 통(헉)이나 받았고, 여러 컨퍼런스에서 발표도 하고 코드젠 관련 수업도 몇 차례 진행했다. 컴퓨터는 코드젠을 코드인(codeine)으로 오타 교정하려 들더라—알고 보니 그런 사실!\n\n{{< image src=\"codegen.png\"  >}}\n\n며칠 전 [친구](https://www.elidedbranches.com/)와 “우린 **다 망했어** 그리고 **AI가 우리의 일자리를 빼앗을 거야**”라는 얘기를 나누다(자세한 내용은 나중 글에서) “클로드 코드에 대한 글을 써보라”는 말을 들었다.\n\n자, 시작한다.\n\nClaude Code는 내가 첫 워크플로우 글을 쓴 지 여드레 만에 공개됐고, 예상했던 대로 내 글의 상당 부분을 무용지물로 만들었다. 그때부터 Aider에서 Claude Code로 갈아탔고 뒤돌아보지 않았다. Aider도 여전히 좋고 고유 용도가 있지만, 현시점엔 Claude Code가 좀 더 유용하다.\n\nClaude Code는 강력하지만, 비용도 훨씬 비싸다.\n\n내 워크플로우는 예전과 거의 비슷하다.\n\n- 아이디어를 다듬을 땐 `gpt-4o`와 대화한다.\n- 사양(spec)은 가능한 최고의 추론 모델로 생성한다. 요즘은 o1-pro나 o3(과연 o1-pro가 o3보다 나을까? 아니면 오래 걸려서 더 나은 것처럼 느끼는 걸까?)\n- 프롬프트도 같은 추론 모델로 작성한다. LLM을 이용해 프롬프트를 만드는 건 훌륭한 핵이며, 꼰대들을 빡치게 만든다.\n- spec.md와 prompt_plan.md를 프로젝트 루트에 저장한다.\n- 그리고 Claude Code에 다음을 입력한다:\n\n```prompt\n1. Open **@prompt_plan.md** and identify any prompts not marked as completed.\n2. For each incomplete prompt:\n    - Double-check if it's truly unfinished (if uncertain, ask for clarification).\n    - If you confirm it's already done, skip it.\n    - Otherwise, implement it as described.\n    - Make sure the tests pass, and the program builds/runs\n    - Commit the changes to your repository with a clear commit message.\n    - Update **@prompt_plan.md** to mark this prompt as completed.\n3. After you finish each prompt, pause and wait for user review or feedback.\n4. Repeat with the next unfinished prompt as directed by the user.\n```\n\n- 이 프롬프트의 묘미는 prompt_plan을 읽어 완료되지 않은 항목을 찾은 뒤 다음 작업을 처리한다는 점이다. git에 커밋하고, 완료된 작업을 prompt_plan에 표시한 뒤 작업이 끝나면 계속할지 물어본다. 🤌\n\n- 나는 뒤로 물러나 ‘yes’만 입력하면 Claude가 알아서 일한다. 피드백을 요청하면 거기서 마법이 펼쳐진다.\n- 쿠키 클릭커를 훨씬 더 많이 하게 됐다.\n\n효과가 상당히 좋다. 여기에 몇 가지 ‘슈퍼파워’를 추가하면 훨씬 도움이 된다.\n\n## Defensive coding!\n\n### Testing\n\n테스트 및 테스트 주도 개발(TDD)은 필수다. 견고한 TDD 습관을 적극적으로 들일 것을 강력 추천한다.\n\n예전 나는 TDD 혐오자였다. 잘하지 못했고 시간 낭비라 생각했다. 틀렸었다. ㅋㅋ. 그 사실을 인정했고, 우리는 지난 수십 년간 회사와 프로젝트에 테스트를 많이 추가했다. 다만 대부분은 핵심 작업 이후에야 테스트를 넣었다. 인간에게는 괜찮다.\n\n하지만 로봇에게는 이러면 **안 된다**.\n\n로봇은 TDD를 **사랑**한다. 정말이다. 미친 듯이 좋아한다.\n\nTDD를 쓰면 로봇 친구가 테스트와 목(mock)을 먼저 만든다. 다음 프롬프트에서 그 목을 실제 구현으로 교체한다. 로봇이 이에 열광한다. 이는 환각(hallucination)과 LLM 범위 확장을 막는 가장 효과적인 방법이었다. 로봇이 작업에 집중하도록 크게 도움 된다.\n\n### Linting\n\n나는 린팅의 열렬한 팬이다. 정말 좋다. Ruff는 훌륭하고, Biome도 멋지며, Clippy는 재미있고(이름도 좋다).\n\n이상하게도 로봇은 좋은 린터를 돌리는 걸 **엄청** 좋아한다.\n\n린터를 지속적으로 돌리는 습관 덕분에 많은 버그를 막고 코드 유지보수와 가독성을 높일 수 있었다. 이미 알고 있을 것이다.\n\n좋은 포매터까지 더하면 퍼펙트하다.\n\n### Pre Commit hooks\n\n진짜 마법은 이런 작업을 pre-commit 훅에 넣는 것이다. python 패키지인 pre-commit을 추천한다. `uv tools install pre-commit` 명령으로 간단히 설치한 뒤 `.pre-commit-config.yaml` 파일만 잘 구성하면 끝. 커밋할 때마다 테스트, 타입 체크, 린팅 등 멋진 점검이 돌아가며 “이 코드는 A+++! 다시 실행해도 OK” 상태를 보장해준다.\n\nClaude Code와 함께 쓰면 정말 좋은 해킹이다. 로봇은 **무조건 커밋**하고 싶어 한다. 위처럼 “코드 작성 후 커밋” 지시를 내리면, 로봇은 과감히 코드를 바꾼 뒤 커밋하고, 당연히 망치고, 이후 고친다.\n\n덕분에 GitHub Actions를 린팅·포매팅·타입체크 실패 로그로 도배하지 않아도 된다. 로봇의 기분 탓에 오류가 나도 말이다.\n\n> A funny thing about claude is it CANNOT for the life of it figure out how to use `uv` correctly. It will pip install shit all over the place if you are not careful. And if you instruct it to use `uv` it will just use `uv pip install.` Maybe AGI isn't going to happen in June. so sad.\n\n### Claude.md and commands\n\n작지만 큰 효과를 내는 요소가 두 가지 더 있다.\n\n{{< image src=\"_SDI8149.jpg\" alt=\"Jesse at the studio, Sept 15, 2023, Ricoh GRiii\" caption=\"Jesse at the studio, Sigma fp, 11/15/2023\" >}}\n\n친구 [Jesse Vincent](https://fsck.com/)이 [매우 탄탄하게 다듬어둔](https://github.com/obra/dotfiles/blob/main/.claude/CLAUDE.md) [CLAUDE.md](https://github.com/harperreed/dotfiles/blob/master/.claude/CLAUDE.md)를 슬쩍 가져와 쓰고 있다. 특징은 다음과 같다:\n\n- 빅 대디 룰의 라이트 버전\n- TDD 수행 방법\n- 내가 선호하는 코딩 스타일 가이드\n\n> [@clint](https://instagram.com/clintecker) configured his CLAUDE.md to call him MR BEEF and it is currently embedding info about MR BEEF in our all documentation: \"If you're stuck, stop and ask for help—MR BEEF may know best.\". While typing this out, I decided to make my CLAUDE.md file call me \"Harp Dog.\" This is a feature, not a bug.\n\ncommands도 꽤 쓸 만하다. 내 dotfiles에서 일부 예시를 확인할 수 있다: [링크](https://github.com/harperreed/dotfiles/tree/master/.claude/commands).\n\n{{< image src=\"commands.png\"  >}}\n\n예전엔 commands를 훨씬 자주 썼지만, 자주 사용하는 프롬프트를 크게 활용할 수 있는 좋은 방법이다. 인자를 전달할 수도 있다. 예를 들어 GitHub 이슈 명령은 이슈 번호를 넘겨주면 된다: `/user:gh-issue #45`\n\n그러면 Claude가 `gh-issue.md`에 정의된 “prompt” 스크립트를 실행한다.\n\n또 commands와 커스텀 CLAUDE.md를 프로젝트 디렉터리에 넣어 프로젝트별로 활용할 수 있다. 나도 hugo, rust, go, javascript 프로젝트마다 이렇게 한다.\n\n## \"Continue\"\n\n{{< image src=\"https://media4.giphy.com/media/v1.Y2lkPTc5MGI3NjExNDk3ZTZpdWYwdG5sdmpnaTJqNzJhYXlvcmp6bnNmdmhxaGdoeHJ4MyZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/l2Je3fIeeXyYEM85G/giphy.gif\" >}}\n\n가끔은 ‘y’를 누르도록 설정한 호머의 새처럼 느껴진다. 그냥 “continue”를 쓰거나 ↑ 키로 직전에 입력한 프롬프트를 붙여 넣는다.\n\n대부분 계획은 8–12단계 정도다. 겉보기 복잡도나 언어와 무관하게 그린필드 개발 계획을 30–45분이면 끝낸다.\n\n친구 Bob에게 설명했더니 믿기지 않는다며 “만들 것과 언어를 정해보라”고 했다.\n\n{{< image src=\"R0000693.jpeg\" caption=\"Bob Swartz, Ricoh GRiiix, 11/17/2024\" >}}\n\n그는 “C로 베이식 인터프리터”라고 했다.\n\n최악이다. C도 잘 모르고 인터프리터 작성 경험도 거의 없다. 하지만 해보자.\n\n앞서 설명한 단계를 그대로 따라 했고 Claude Code는 훌륭히 해냈다. [작동하는 베이식 인터프리터](https://github.com/harperreed/basic)가 완성됐다. 첫 버전은 한 시간 안에 돌아갔다. 이후 몇 시간 더 손봐 그럴듯하다. 1982년에 출시했을까? 아마 아니겠지만. [prompt_plan은 여기](https://raw.githubusercontent.com/harperreed/basic/refs/heads/main/docs/prompt_plan.md)에서 볼 수 있다.\n\n## 팀 이야기\n\n우리 팀 전원이 현재 Claude Code를 사용 중이다. 위 과정을 기본으로 개인별 커스터마이징을 하고 있다.\n\n이전에 비해 테스트 커버리지가 훨씬 높다. 코드 품질도 좋아졌고, 과거 끔찍한 코드와 비슷한 효율을 유지한다. 주변을 보면 ghostty, VSCode 터미널, Zed 터미널, 파이썬 노트북 등에서 Claude Code가 돌아가는 모습이 재미있다.\n\n{{< image src=\"dril.jpg\" >}}\n\n토큰이 넉넉한 분, 제발 예산 좀 계산해 주세요. 가족이 죽어갑니다.\n\n## 감사\n\n계속 메일 보내주시는 모든 분들께 감사드린다. 여러분의 워크플로우와 프로젝트 이야기를 듣는 것은 정말 즐겁고 고마운 일이다. 앞으로도 많이 들려달라!\n\nPlease review and improve the translated text to make it natural and accurate in korean.\nReturn ONLY the improved translated text without explanations or comments.",
      "response": "나는 이 에이전틱(Agentic) 코딩 방식이 정말 마음에 든다. 여러 모로 아주 매력적이다.\n\n[그 원본 블로그 글](/2025/02/16/my-llm-codegen-workflow-atm/)을 쓴 이후 Claude 세상에서는 많은 일이 일어났다:\n\n- Claude Code\n- MCP\n- 기타 등등\n\n사람들로부터 워크플로우 이야기를 담은 이메일을 수백 통(헉)이나 받았고, 여러 컨퍼런스에서 발표도 하고 코드젠 관련 수업도 몇 차례 진행했다. 컴퓨터는 codegen을 codeine으로 고쳐 쓰려고 하더라—누가 알았겠어!\n\n{{< image src=\"codegen.png\"  >}}\n\n며칠 전 [친구](https://www.elidedbranches.com/)와 “우린 **다 망했어**, **AI가 우리의 일자리를 빼앗을 거야**” 같은 얘기를 하다가(자세한 이야기는 나중 글에서 다룰 예정이다) “클로드 코드에 대해 글을 써보라”는 제안을 들었다.\n\n그럼, 시작해 보자.\n\nClaude Code는 내가 첫 워크플로우 글을 올린 지 정확히 여드레 만에 공개됐고, 예상대로 그 글의 상당 부분을 무의미하게 만들었다. 그때부터 Aider에서 Claude Code로 갈아탔고 뒤돌아보지 않았다. Aider도 여전히 좋고 고유한 쓸모가 있지만, 지금은 Claude Code가 더 유용하다.\n\nClaude Code는 강력하지만 훨씬 비싸다.\n\n내 워크플로우는 예전과 거의 같다.\n\n- 아이디어를 다듬을 때는 `gpt-4o`와 대화한다.\n- 사양(spec)은 가능한 최고의 추론 모델로 만든다. 요즘은 o1-pro나 o3(과연 o1-pro가 o3보다 나을까, 아니면 오래 걸려서 그렇게 느끼는 걸까?).\n- 프롬프트도 같은 추론 모델로 작성한다. LLM으로 프롬프트를 만드는 건 멋진 꼼수이고, 꼰대들을 빡치게도 만든다.\n- spec.md와 prompt_plan.md를 프로젝트 루트에 저장한다.\n- 그리고 Claude Code에 다음을 입력한다:\n\n```prompt\n1. Open **@prompt_plan.md** and identify any prompts not marked as completed.\n2. For each incomplete prompt:\n    - Double-check if it's truly unfinished (if uncertain, ask for clarification).\n    - If you confirm it's already done, skip it.\n    - Otherwise, implement it as described.\n    - Make sure the tests pass, and the program builds/runs\n    - Commit the changes to your repository with a clear commit message.\n    - Update **@prompt_plan.md** to mark this prompt as completed.\n3. After you finish each prompt, pause and wait for user review or feedback.\n4. Repeat with the next unfinished prompt as directed by the user.\n```\n\n- 이 프롬프트의 묘미는 prompt_plan을 읽어 완료되지 않은 항목을 찾은 뒤, 다음 작업을 처리한다는 것이다. git에 커밋하고 prompt_plan에 완료 표시까지 한 뒤, 끝나면 계속 진행할지 물어본다. 🤌\n- 나는 뒤로 물러나 ‘yes’만 입력하면 Claude가 알아서 일한다. 피드백을 요청하면 그때부터 마법이 펼쳐진다.\n- 덕분에 쿠키 클릭커를 훨씬 더 많이 하게 됐다.\n\n효과가 상당히 좋다. 여기에 몇 가지 ‘슈퍼파워’를 더하면 훨씬 유용해진다.\n\n## Defensive coding!\n\n### Testing\n\n테스트와 테스트 주도 개발(TDD)은 필수다. 견고한 TDD 습관을 적극적으로 들일 것을 강력히 추천한다.\n\n예전에는 TDD를 싫어했다. 잘하지도 못했고 시간 낭비라고 생각했다. 완전히 틀렸더라. ㅋㅋ 우리가 지난 수십 년 동안 회사와 프로젝트에 테스트를 잔뜩 추가해 왔지만, 대부분 핵심 기능을 만든 뒤에야 테스트를 붙였다. 인간에게는 괜찮다.\n\n하지만 로봇에게는 이러면 **안 된다**.\n\n로봇은 TDD를 **사랑**한다. 진짜다. 미친 듯이 좋아한다.\n\nTDD를 적용하면 로봇 친구가 테스트와 목(mock)을 먼저 만든다. 그다음 프롬프트에서 그 목을 실제 구현으로 교체한다. 로봇이 여기에 열광한다. 내가 찾은 환각(hallucination)과 LLM 범위 이탈을 막는 가장 효과적인 방법이다. 로봇이 작업에 집중하도록 크게 도와준다.\n\n### Linting\n\n나는 린팅의 열렬한 팬이다. 정말 좋다. Ruff는 훌륭하고, Biome도 멋지며, Clippy는 재미있고(이름도 귀엽다).\n\n이상하게도 로봇은 좋은 린터를 돌리는 걸 **엄청** 좋아한다.\n\n린터를 항상 돌리는 습관 덕분에 많은 버그를 막고 코드가 더 읽기 쉽고 유지보수하기 쉬워졌다. 이미 잘 알고 있을 것이다.\n\n좋은 포매터까지 더하면 완벽하다.\n\n### Pre-commit hooks\n\n진짜 마법은 이런 작업을 pre-commit 훅에 넣는 것이다. 파이썬 패키지인 pre-commit을 추천한다. `uv tools install pre-commit` 한 줄로 설치한 뒤 `.pre-commit-config.yaml`만 잘 만들어 두면 된다. 커밋할 때마다 테스트, 타입 체크, 린팅 등이 돌아가며 “이 코드는 A+++! 다시 실행해도 OK” 상태를 보장한다.\n\nClaude Code와 함께 쓰면 정말 좋은 해킹이다. 로봇은 **무조건 커밋**하고 싶어 한다. “코드 작성 후 커밋”이라고 지시하면 로봇은 거침없이 코드를 바꾸고 커밋하고, inevitably 망치고, 다시 고친다.\n\n덕분에 GitHub Actions를 린팅·포매팅·타입 체크 실패 로그로 도배하지 않아도 된다. 로봇이 기분 때문에 삐끗해도 말이다.\n\n> A funny thing about claude is it CANNOT for the life of it figure out how to use `uv` correctly. It will pip install shit all over the place if you are not careful. And if you instruct it to use `uv` it will just use `uv pip install.` Maybe AGI isn't going to happen in June. so sad.\n\n### CLAUDE.md와 commands\n\n작지만 큰 효과를 내는 요소 두 가지가 있다.\n\n{{< image src=\"_SDI8149.jpg\" alt=\"Jesse at the studio, Sept 15, 2023, Ricoh GRiii\" caption=\"Jesse at the studio, Sigma fp, 11/15/2023\" >}}\n\n친구 [Jesse Vincent](https://fsck.com/)이 [아주 탄탄하게 다듬어 둔](https://github.com/obra/dotfiles/blob/main/.claude/CLAUDE.md) [CLAUDE.md](https://github.com/harperreed/dotfiles/blob/master/.claude/CLAUDE.md)를 그대로 가져다 쓴다. 주요 내용은 다음과 같다.\n\n- Big Daddy Rule 라이트 버전\n- TDD 수행 방법\n- 내가 선호하는 코딩 스타일 가이드\n\n> [@clint](https://instagram.com/clintecker)은 CLAUDE.md에서 자기 호칭을 MR BEEF로 설정해 놨더니, 현재 모든 문서에 MR BEEF 관련 문구가 삽입되고 있다: “막히면 멈추고 도움을 요청하세요—MR BEEF가 답을 알고 있을지도 모릅니다.” 이 글을 쓰다 보니 나도 CLAUDE.md에서 나를 “Harp Dog”라고 부르도록 바꾸었다. 기능이지 버그가 아니다.\n\ncommands도 꽤 유용하다. 내 dotfiles에 일부 예시가 있으니 참고하길: [링크](https://github.com/harperreed/dotfiles/tree/master/.claude/commands).\n\n{{< image src=\"commands.png\"  >}}\n\n예전엔 commands를 훨씬 자주 썼지만, 자주 쓰는 프롬프트를 재사용하기에 정말 좋다. 인자를 넘길 수도 있다. 예를 들어 GitHub 이슈 명령은 이슈 번호만 넘기면 된다: `/user:gh-issue #45`\n\n그러면 Claude가 `gh-issue.md`에 정의된 “prompt” 스크립트를 실행한다.\n\ncommands와 커스텀 CLAUDE.md를 프로젝트 디렉터리에 넣어 프로젝트별로도 사용할 수 있다. 나도 hugo, rust, go, javascript 프로젝트마다 이렇게 설정해 둔다.\n\n## \"Continue\"\n\n{{< image src=\"https://media4.giphy.com/media/v1.Y2lkPTc5MGI3NjExNDk3ZTZpdWYwdG5sdmpnaTJqNzJhYXlvcmp6bnNmdmhxaGdoeHJ4MyZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/l2Je3fIeeXyYEM85G/giphy.gif\" >}}\n\n가끔은 ‘y’를 누르도록 설정한 호머의 새처럼 느껴진다. 그냥 “continue”를 입력하거나 위 화살표 키로 직전 프롬프트를 붙여 넣는다.\n\n대부분의 계획은 8–12단계 정도다. 언어가 무엇이든, 겉보기 복잡도와 상관없이 그린필드 개발 계획을 30~45분이면 끝낸다.\n\n친구 Bob에게 설명했더니 믿지 못했다. 그래서 “뭘 만들고, 어떤 언어로 할지 정해 봐”라고 했다.\n\n{{< image src=\"R0000693.jpeg\" caption=\"Bob Swartz, Ricoh GRiiix, 11/17/2024\" >}}\n\n그는 “C로 베이식 인터프리터”라고 했다.\n\n최선은 아니었다. C도 잘 모르고 인터프리터를 써 본 적도 거의 없다. 그래도 해보자.\n\n위에서 설명한 단계를 그대로 따랐더니 Claude Code가 멋지게 해냈다. [작동하는 베이식 인터프리터](https://github.com/harperreed/basic)가 완성됐다. 첫 버전은 한 시간도 안 돼 돌아갔다. 이후 몇 시간 더 손봐서 꽤 괜찮다. 1982년에 출시했을까? 아마 아니겠지만. [prompt_plan은 여기서](https://raw.githubusercontent.com/harperreed/basic/refs/heads/main/docs/prompt_plan.md) 확인할 수 있다.\n\n## 팀 이야기\n\n우리 팀 전원이 현재 Claude Code를 사용 중이다. 기본적으로 위 과정을 따르되 각자 약간씩 튜닝해서 쓴다.\n\n이전보다 테스트 커버리지가 훨씬 높아졌다. 코드 품질도 좋아졌고, 과거 끔찍한 코드와 비슷한 효율을 유지한다. 사무실을 둘러보면 ghostty, VSCode 터미널, Zed 터미널, 파이썬 노트북 등에서 Claude Code가 돌아가는 모습을 보는 재미가 있다.\n\n{{< image src=\"dril.jpg\" >}}\n\n토큰이 넘쳐나는 분, 제발 예산 좀 계산해 주세요. 가족이 죽어갑니다.\n\n## 감사\n\n계속 메일을 보내 주시는 모든 분들께 감사드린다. 여러분의 워크플로우와 프로젝트 이야기를 듣는 건 정말 즐겁고 고마운 일이다. 앞으로도 많이 들려 달라!",
      "usage": {
        "prompt_tokens": 6203,
        "completion_tokens": 2514,
        "total_tokens": 8717
      },
      "streaming": true
    },
    "critique": {
      "model": "o3",
      "target_language": "korean",
      "system_prompt": "You are a highly critical professional translator and linguistic expert specializing in korean.\nYour task is to ruthlessly critique the translation by:\n\n1. Meticulously comparing the translated text with the original, identifying ANY inaccuracies, mistranslations, or omissions\n2. Highlighting nuances, cultural references, or idioms that were lost or mistranslated\n3. Scrutinizing for grammatical errors, awkward phrasing, or unnatural expressions in korean\n4. Checking for inconsistencies in tone, style, or register compared to the original\n5. Verifying that technical terms are translated accurately and consistently\n6. Ensuring no content was accidentally skipped or added\n7. Finding places where the translation sounds machine-like or overly literal\n\nBe extremely thorough and critical in your assessment. Do not accept mediocre translations.\nList specific issues and suggestions for improvement, organized by severity and category.\nYour critique should be detailed enough for another translator to address all the issues.\n\nYour goal is to help create a perfect translation that reads as if originally written in korean while being 100% faithful to the source.\n",
      "user_prompt": "# ORIGINAL TEXT\nI really like this agentic coding thing. It is quite compelling in so many ways.\n\nSince I wrote [that original blog post](/2025/02/16/my-llm-codegen-workflow-atm/) a lot has happened in Claude land:\n\n- Claude Code\n- MCP\n- etc\n\nI have received hundreds (wat) of emails from people talking about their workflows and how they have used my workflow to get ahead. I have spoken at a few conferences, and taught a few classes about codegen. I have learned that computers really want to spellcheck codegen to codeine, who knew!\n\n{{< image src=\"codegen.png\"  >}}\n\nI was talking to a [friend](https://www.elidedbranches.com/) the other day about how we are **all totally fucked** and **AI will take our jobs** (more on that in a later post), and she was like \"you should write a post about claude code.\"\n\nHere we go.\n\nClaude Code was released eight days after I wrote my original workflow blog post, and as I predicted, it made a lot of my post irrelevant. I have since migrated from Aider to Claude Code and not looked back. I still like Aider, and it has a distinct use, but Claude Code is a bit more useful atm.\n\nClaude Code is powerful, and a hell of a lot more expensive.\n\nMy workflow is very similar to what it was before.\n\n- I chat with `gpt-4o` to hone my idea\n- I use the best reasoning model I can find to generate the spec. These days it is o1-pro or o3 (is o1-pro better than o3? Or do I feel like it is better cuz it takes longer?)\n- I use the reasoning model to generate the prompts. Using an LLM to generate prompts is a beautiful hack. It makes boomers mad too.\n- I save the spec.md, and the prompt_plan.md in the root of the project.\n- I then type into claude code the following:\n\n```prompt\n1. Open **@prompt_plan.md** and identify any prompts not marked as completed.\n2. For each incomplete prompt:\n    - Double-check if it's truly unfinished (if uncertain, ask for clarification).\n    - If you confirm it's already done, skip it.\n    - Otherwise, implement it as described.\n    - Make sure the tests pass, and the program builds/runs\n    - Commit the changes to your repository with a clear commit message.\n    - Update **@prompt_plan.md** to mark this prompt as completed.\n3. After you finish each prompt, pause and wait for user review or feedback.\n4. Repeat with the next unfinished prompt as directed by the user.\n```\n\n- The magic with this prompt is that it checks the prompt plan. Looks for things that are not marked as completed, then does the next remaining task. It commits it to git, and then updates the prompt plan with what is complete. It then pops up and asks you to continue once it is done. 🤌\n\n- I then kick back and tell claude `yes` while it does the work. It will pop up for feedback, and magic happens.\n- Lots more cookie clicker.\n\nThis works super well. There are a few superpowers you can embed in your process that will really help.\n\n## Defensive coding!\n\n### Testing\n\nTesting and test-driven development is a must. I highly recommend really engaging in building out a robust TDD practice.\n\nI was a TDD hater. I was bad at it and I felt like I was wasting time. I was not correct. Lol. I recognize that, and we built in a lot of testing into our companies and projects over the past few decades. Most of the testing was added AFTER the core work was done. This is fine for humans.\n\nTHIS IS BAD FOR ROBOTS.\n\nThe robots LOVE TDD. Seriously. They eat it up.\n\nWith TDD you have the robot friend build out the test, and the mock. Then your next prompt you build the mock to be real. And the robot just loves this. It is the most effective counter to hallucination and LLM scope drift I have found. It really helps the robots to stay on task.\n\n### Linting\n\nI am such a fan of linting. It is so nice. Ruff is a wonderful product. Biome is cool. Clippy is fun (and a good name).\n\nFor whatever reason the ROBOTS love to run a good linter.\n\nBuilding in the practice to run the linter constantly has kept a lot of bugs away, and kept the code more maintainable and easier to read. You know this already.\n\nAdd in a good formatter and everything is beautiful.\n\n### Pre Commit hooks\n\nThe real magic of all this is to add these tasks to a pre-commit hook. I recommend the pre-commit python package. You can easily use it via an `uv tools install pre-commit` command and then just build out a nice `.pre-commit-config.yaml` file and bam. Every time you try and commit it will run all these wonderful tests, type checking, linting, and whatnot to make sure your code is A+++ would execute again.\n\nThis is a great hack for working with Claude Code. The robot REALLLLLY wants to commit. So when you instruct it to do some code and then commit (like I did above) it will make wild code changes, commit the code, inevitably fuck it all up and then have to fix it.\n\nThis is nice cuz it doesn't clog your GitHub actions with a bunch of linting, formatting, and type checking execution that doesn't pass cuz the robot was in a mood.\n\n> A funny thing about claude is it CANNOT for the life of it figure out how to use `uv` correctly. It will pip install shit all over the place if you are not careful. And if you instruct it to use `uv` it will just use `uv pip install.` Maybe AGI isn't going to happen in June. so sad.\n\n### Claude.md and commands\n\nThese are both really simple additions that can squeeze a lot out.\n\n{{< image src=\"_SDI8149.jpg\" alt=\"Jesse at the studio, Sept 15, 2023, Ricoh GRiii\" caption=\"Jesse at the studio, Sigma fp, 11/15/2023\" >}}\n\nI stole a [CLAUDE.md](https://github.com/harperreed/dotfiles/blob/master/.claude/CLAUDE.md) from my friend [Jesse Vincent](https://fsck.com/) who did an [awful lot of work on making it very robust](https://github.com/obra/dotfiles/blob/main/.claude/CLAUDE.md). It is quite nice. Some things that are built into it:\n\n- a light version of the big daddy rule.\n- instructions on how to do TDD\n- stylistic instructions on how I like to code.\n\n> [@clint](https://instagram.com/clintecker) configured his CLAUDE.md to call him MR BEEF and it is currently embedding info about MR BEEF in our all documentation: \"If you're stuck, stop and ask for help—MR BEEF may know best.\". While typing this out, I decided to make my CLAUDE.md file call me \"Harp Dog.\" This is a feature, not a bug.\n\nThe commands are also really nice. You can see some of mine in my dotfiles [here](https://github.com/harperreed/dotfiles/tree/master/.claude/commands).\n\n{{< image src=\"commands.png\"  >}}\n\nI used to use the commands way more, but it is a really great way to get a lot out of regularly used prompts. You can also pass arguments to the commands. For instance in my github issues command, you pass the issue number that you want claude to look at: `/user:gh-issue #45`\n\nClaude will now go and run through the \"prompt\" script that is defined in the `gh-issue.md` file.\n\nYou can also put these commands in a project directory, and make a custom CLAUDE.md in the project directory. I do this to make hugo, rust, go, or javascript specific commands per project.\n\n## \"Continue\"\n\n{{< image src=\"https://media4.giphy.com/media/v1.Y2lkPTc5MGI3NjExNDk3ZTZpdWYwdG5sdmpnaTJqNzJhYXlvcmp6bnNmdmhxaGdoeHJ4MyZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/l2Je3fIeeXyYEM85G/giphy.gif\" >}}\n\nSometimes I feel like that bird that Homer got to hit \"y\". I am just writing \"continue\" or pressing up and pasting in the same prompt.\n\nMost of the time the plans are about 8–12 steps. I can usually get through a Greenfield development plan in about 30–45 minutes regardless of apparent complexity or language.\n\nI was talking through with my friend Bob and he did not believe it. I asked him \"name a thing to build, a language to build it in - and let's see!\"\n\n{{< image src=\"R0000693.jpeg\" caption=\"Bob Swartz, Ricoh GRiiix, 11/17/2024\" >}}\n\nHe was like \"ok. A basic interpreter in C.\"\n\nThis wasn't ideal. I don't know C. I don't really know how to write an interpreter, nor do I really want to. But fuck it.\n\nI followed the above steps and Claude Code did great. We have [a working basic interpreter](https://github.com/harperreed/basic). The first version worked within an hour. I futzed with it for a few more hours and it is pretty good. Would it ship it in 1982? Probably not. You can see the [prompt plan here](https://raw.githubusercontent.com/harperreed/basic/refs/heads/main/docs/prompt_plan.md).\n\n## The Team\n\nOur entire team is using Claude Code currently. We are all approximately following the above process with a lot of person tweaks.\n\nWe are doing way way higher test coverage than we have ever done. We have better code, and it seems to be just as effective as the horrible code we wrote in the past. It is fun to glance at people working and see claude code running in ghostty, in vscode terminal, in zed terminal, and messing with python notebooks.\n\n{{< image src=\"dril.jpg\" >}}\n\nSomeone who has a lot of tokens, please help me budget this. My family is dying.\n\n## thanks\n\nTo all the folks who keep emailing me. It is really fun and nice to hear about your workflows, and projects. I really appreciate it. Keep em coming!\n\n# CURRENT TRANSLATION\n나는 요즘 ‘에이전틱(Agentic) 코딩’에 푹 빠져 있다. 여러모로 *엄청* 매력적이다.\n\n[그 원본 블로그 글](/2025/02/16/my-llm-codegen-workflow-atm/)을 올린 뒤 Claude 세상에서는 일이 우르르 벌어졌다.\n\n- Claude Code  \n- MCP  \n- etc\n\n내 워크플로우 이야기, 그리고 *내 방식을 써서 앞서 나갔다*는 내용의 이메일을 수백 통(wat)이나 받았다. 몇몇 컨퍼런스에서 발표도 하고, 코드제너레이션 수업도 몇 번 했다. 한 가지 깨달은 건—컴퓨터는 ‘codegen’을 ‘codeine’으로 자꾸 오타 교정한다는 사실. 누가 알았겠나!\n\n{{< image src=\"codegen.png\"  >}}\n\n며칠 전 [친구](https://www.elidedbranches.com/)와 “우린 **완전히 망했다**, **AI가 우리의 일자리를 싹 가져갈 거다**” 같은 얘기를 하다가(이건 나중 포스트에서!) 그녀가 “클로드 코드 얘기도 써 봐”라고 하더라.\n\n자, 시작해 보자.\n\nClaude Code는 내 워크플로우 글이 올라간 지 딱 여드레 만에 출시됐다. 예상대로 글의 상당 부분이 바로 퇴물 신세가 됐다. 나는 Aider에서 Claude Code로 갈아탄 뒤 뒤돌아본 적 없다. Aider도 좋고 쓸모가 확실히 있지만, 지금 시점에선 Claude Code가 더 유용하다.\n\nClaude Code는 강력하고, *겁나* 비싸다.\n\n내 워크플로우는 예전과 거의 같다.\n\n- 아이디어를 다듬을 땐 `gpt-4o`와 수다를 떤다.  \n- 사양은 최고의 추론 모델로 뽑아낸다. 요즘은 o1-pro나 o3(과연 o1-pro가 o3보다 나을까, 아니면 오래 걸려서 그렇게 느끼는 걸까?).  \n- 같은 모델로 프롬프트도 생성한다. LLM으로 프롬프트를 짜게 하는 건 진짜 기막힌 해킹이다. 베이비붐 세대는 또 혈압이 오른다.  \n- `spec.md`와 `prompt_plan.md`를 프로젝트 루트에 저장한다.  \n- 그리고 Claude Code에 이렇게 입력한다:\n\n```prompt\n1. Open **@prompt_plan.md** and identify any prompts not marked as completed.\n2. For each incomplete prompt:\n    - Double-check if it's truly unfinished (if uncertain, ask for clarification).\n    - If you confirm it's already done, skip it.\n    - Otherwise, implement it as described.\n    - Make sure the tests pass, and the program builds/runs\n    - Commit the changes to your repository with a clear commit message.\n    - Update **@prompt_plan.md** to mark this prompt as completed.\n3. After you finish each prompt, pause and wait for user review or feedback.\n4. Repeat with the next unfinished prompt as directed by the user.\n```\n\n- 이 프롬프트의 묘미는 `prompt_plan.md`를 열어 “완료 표시 안 된 항목”을 찾고, 그다음 작업을 처리한다. Git에 커밋하고 `prompt_plan.md`에 완료 체크까지 해 준 뒤, 끝나면 “계속할까?”를 묻는다. 🤌  \n- 나는 등받이에 몸을 기대고 ‘yes’만 치면 된다. 피드백 타임이 오면 마법이 펼쳐진다.  \n- 덕분에 쿠키 클릭커(Cookie Clicker) 같은 방치형 게임을 더 오래 돌릴 수 있다.\n\n이 방식, 기가 막히게 잘 먹힌다. 여기에 몇 가지 ‘슈퍼파워’를 더하면 효과가 훨씬 커진다.\n\n## 방어적 코딩!\n\n### Testing\n\n테스트, 특히 테스트 주도 개발(TDD)은 필수다. 정말로, 빡세게 TDD 습관을 들이길 권한다.\n\n나도 한때 TDD 혐오자였다. 서툴렀고, 시간 낭비 같았다. 완전 착각이었다 ㅋㅋ. 지난 수십 년 동안 회사와 프로젝트에 테스트를 왕창 붙여 왔지만, 대개는 핵심 기능을 만든 *뒤에* 테스트를 달았다. 사람한텐 그럭저럭 괜찮다.\n\n**로봇한테는 끔찍하다.**\n\n로봇들은 TDD를 *미친 듯이* 좋아한다.\n\nTDD를 쓰면 로봇 친구가 테스트와 목(mock)을 먼저 짜고, 다음 프롬프트에서 그 목을 실제 구현으로 바꾼다. 환각과 범위 이탈을 막는 가장 효과적인 방법이다. 로봇이 한눈 안 팔고 일한다.\n\n### Linting\n\n나는 린트(Lint)를 정말 사랑한다. Ruff는 훌륭하고, Biome도 멋지며, Clippy는 귀엽다.\n\n신기하게도 로봇은 좋은 린트를 돌리는 걸 **엄청** 좋아한다.\n\n린트를 수시로 돌리면 버그가 줄고 코드가 깔끔해진다. 포매터까지 더하면 금상첨화다.\n\n### Pre-commit 훅\n\n진짜 마법은 이 모든 작업을 pre-commit 훅에 넣는 것이다. Python 패키지 `pre-commit`을 `uv tools install pre-commit` 한 줄로 깔고 `.pre-commit-config.yaml`만 작성하면 끝. 커밋할 때마다 테스트·타입 체크·린트가 돌아서 코드가 ‘A+++라면 다시 실행해도 100 % 통과’하는 수준을 보장한다.\n\nClaude Code와 함께 쓰면 더 맛있다. 로봇은 *커밋하고 싶어 몸이 근질근질*하다. “코드 짜고 커밋해”라고 시키면 로봇은 코드를 마구 갈아엎고 커밋하고, 깨진 걸 다시 고친다.\n\n덕분에 GitHub Actions가 린트·포맷 실패 로그로 범람하지 않는다.\n\n> 한 가지 웃긴 건, Claude가 `uv`를 도저히 제대로 못 쓴다는 점이다. 방심하면 여기저기 `pip install`을 난사한다. `uv`를 쓰라고 지시해도 결국 `uv pip install`만 반복한다. AGI가 6월에 온다더니, 글렀나 보다. 슬프다.\n\n### CLAUDE.md와 commands\n\n작지만 생산성을 크게 끌어올리는 두 가지 추가 요소다.\n\n{{< image src=\"_SDI8149.jpg\" alt=\"Jesse at the studio, Sept 15, 2023, Ricoh GRiii\" caption=\"Jesse at the studio, Sigma fp, 11/15/2023\" >}}\n\n나는 친구 [Jesse Vincent](https://fsck.com/)이 [정성 들여 만든](https://github.com/obra/dotfiles/blob/main/.claude/CLAUDE.md) [CLAUDE.md](https://github.com/harperreed/dotfiles/blob/master/.claude/CLAUDE.md)를 살짝 빌려 쓴다. 주요 내용은 다음과 같다.\n\n- Big Daddy Rule(빅 대디 룰)의 라이트 버전  \n- TDD 가이드  \n- 내가 선호하는 코딩 스타일  \n\n> [@clint](https://instagram.com/clintecker)은 CLAUDE.md에서 자길 ‘MR BEEF’라 부르도록 해 두었는데, 덕분에 문서마다 “막히면 MR BEEF에게 물어봐”라는 문구가 삽입되고 있다. 이 글을 쓰다가 나도 ‘Harp Dog’로 바꿨다. 기능이지 버그가 아니다.\n\n명령어(commands)도 꽤 쓸만하다. 내 dotfiles 예시는 여기에 있다: [link](https://github.com/harperreed/dotfiles/tree/master/.claude/commands).\n\n{{< image src=\"commands.png\"  >}}\n\n예전엔 더 자주 썼지만, 자주 쓰는 프롬프트를 재사용하기엔 여전히 최고다. 인자를 넘길 수도 있다. 예컨대 GitHub 이슈는 이렇게: `/user:gh-issue #45`\n\n그러면 Claude가 `gh-issue.md`에 정의된 프롬프트 스크립트를 수행한다.\n\n이 명령어와 커스텀 CLAUDE.md를 프로젝트 디렉터리에 두면 Hugo, Rust, Go, JavaScript 등 언어·프레임워크별 전용 세팅도 가능하다.\n\n## “Continue”\n\n{{< image src=\"https://media4.giphy.com/media/v1.Y2lkPTc5MGI3NjExNDk3ZTZpdWYwdG5sdmpnaTJqNzJhYXlvcmp6bnNmdmhxaGdoeHJ4MyZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/l2Je3fIeeXyYEM85G/giphy.gif\" >}}\n\n가끔은 ‘y’ 키를 자동으로 눌러 주는 새를 옆에 둔 호머 심슨이 된 기분이다. 그저 “continue”를 입력하거나 ↑를 눌러 직전 프롬프트를 붙여 넣는다.\n\n대부분 계획은 8~12단계다. 언어가 무엇이든, 겉보기 난도가 어떻든, 그린필드 프로젝트 하나를 30~45분이면 뚝딱 끝낸다.\n\n친구 Bob은 믿지 못하겠다고 했다. 그래서 “뭘 만들고 싶은데? 언어도 골라 봐”라고 했다.\n\n{{< image src=\"R0000693.jpeg\" caption=\"Bob Swartz, Ricoh GRiiix, 11/17/2024\" >}}\n\n그가 “C로 BASIC 인터프리터”라고 했다.\n\n썩 좋지는 않았다. C도 잘 모르고, 인터프리터를 쓰고 싶지도 않았지만—에라 모르겠다, 그냥 해 보자.\n\n위 단계를 그대로 밟았더니 Claude Code가 일을 냈다. [작동하는 BASIC 인터프리터](https://github.com/harperreed/basic)가 나왔다. 첫 버전은 한 시간도 안 돼 돌아갔고, 몇 시간 더 만지니 꽤 괜찮아졌다. 1982년에 출시했을까? 글쎄. [prompt_plan.md는 여기](https://raw.githubusercontent.com/harperreed/basic/refs/heads/main/docs/prompt_plan.md)에서 볼 수 있다.\n\n## 팀 이야기\n\n우리 팀 전원이 Claude Code를 쓰고 있다. 위 과정을 기본으로 깔고, 각자 살짝 튜닝했다.\n\n테스트 커버리지는 역대 최고, 코드 품질도 좋아졌다. 과거의 끔찍한 코드와 성과는 비슷하다. 사무실을 둘러보면 Ghostty, VS Code 터미널, Zed 터미널, 파이썬 노트북 등에서 Claude Code가 돌아가는 모습이 한눈에 들어온다.\n\n{{< image src=\"dril.jpg\" >}}\n\n토큰이 남아도는 분, 제발 예산 좀 짜 달라. 우리 가족이 굶어 죽기 직전이다.\n\n## thanks\n\n이메일을 보내 준 모든 분께 감사한다. 여러분의 워크플로우와 프로젝트 이야기를 듣는 건 정말 즐겁다. 계속 보내 달라!\n\nPlease critique this translation mercilessly and provide detailed feedback on what needs to be improved.\nFormat your critique as a structured list of issues, organized by severity and category.\nInclude specific suggestions for how to fix each issue.",
      "response": "전체적으로 번역의 완성도가 높지만, ‘거의 완벽’과는 거리가 있습니다. 의미 왜곡·누락은 크지 않으나, 원문 특유의 헐거우면서도 공격적인 톤, 욕설·은어, 기이한 리듬감이 곳곳에서 희석됐고, 기술 / 문화 레퍼런스가 살짝 빗나가거나 빠진 부분도 있습니다. 아래를 참고해 세부 수정 작업을 진행해 주십시오.\n\n──────────────────\n[1] 의미 오류·누락 (Critical)\n──────────────────\n1-1. pre-commit 문단 – “A+++ would execute again”\n   • 번역: “코드가 ‘A+++라면 다시 실행해도 100 % 통과’하는 수준을 보장한다.”\n   • 문제: “would execute again”은 ‘다시 실행해도 통과한다’가 아니라 ‘다시 실행할 만하다(퀄리티가 매우 높다)’에 가까움.   \n   • 제안: “코드가 A+++ 등급이어서 *언제든 다시 돌려도 될* 정도로 깔끔하게 유지된다.”\n\n1-2. prompt 설명 – “then does the next remaining task”\n   • 번역: “그다음 작업을 처리한다.”\n   • 문제: ‘가장 먼저 남은 작업(next remaining)’이라는 순차 로직이 빠짐.   \n   • 제안: “아직 남아 있는 항목 중 *가장 위/다음 순번*의 작업을 수행한다.”\n\n1-3. “pause and wait for user review or feedback”\n   • 요약 서술에서 “잠시 멈추어 사용자 리뷰를 기다린다”를 ‘끝나면 “계속할까?”를 묻는다’로 압축.   \n   • 뉘앙스 손실은 미묘하지만 사용자의 ‘리뷰/피드백 기회’가 의미적으로 중요함.   \n   • 제안: “작업을 끝내면 일단 멈추고 사용자 리뷰‧피드백을 기다린 뒤 ‘계속할까요?’라고 묻는다.”\n\n1-4. “hell of a lot more expensive”\n   • 번역: “*겁나* 비싸다.”\n   • 문제: ‘헬 오브 어 롯’은 ‘살벌하게, 훨씬’이라는 비교 의미 포함. ‘겁나’만으론 상대적 뉘앙스 부족.   \n   • 제안: “살벌하게 비싸다” 또는 “전보다 *훨씬* 겁나 비싸다”.\n\n1-5. “They eat it up”\n   • 번역: “로봇들은 TDD를 *미친 듯이* 좋아한다.”\n   • 의미엔 문제 없으나 ‘eat it up’의 ‘게걸스럽게 먹어 치우다’ 이미지는 약함.  \n   • 제안(선택): “게걸스럽게 받아먹는다” 등으로 이미지 강화.\n\n──────────────────\n[2] 레퍼런스·문화/은어 번역 (Major)\n──────────────────\n2-1. “boomers”\n   • 번역: “베이비붐 세대”.\n   • 문제: 원문은 조롱 섞인 ‘boomers’(인터넷 밈). ‘베이비붐 세대’는 중립적·설명적이라 힘이 빠짐.  \n   • 제안: “붐머들” 혹은 “부머들”로 음역하여 조롱 톤 유지.\n\n2-2. “Cookie Clicker”\n   • ‘방치형 게임’ 설명은 좋은데, 원문의 자조적 뉘앙스(“lots more cookie clicker”)는 다소 흐려짐.  \n   • 제안: “쿠키 클릭커나 더 돌리면서 손가락만 까딱하면 된다” 정도로 빈정거림 보강.\n\n2-3. “Claude land”\n   • 번역: “Claude 세상”.\n   • 자연스럽지만, land 특유의 ‘~월드’ 느낌이 약함.  \n   • 제안(선택): “Claude 월드” 또는 “Claude 월드(land)”로 캐주얼함 유지.\n\n2-4. “wat”\n   • 괄호 그대로 살렸으나 한국 밈 독자가 뜻을 모를 수 있음.  \n   • 제안: “수백 통(wat; ‘뭐라고?’ 수준의 당황)” 등 짤막한 주 해설.\n\n──────────────────\n[3] 톤·욕설 강도·일관성 (Major)\n──────────────────\n3-1. 욕설 완화\n   • “we are all totally fucked” → “우린 완전히 망했다”  \n   • “But fuck it.” → “에라 모르겠다, 그냥 해 보자.”  \n   • 원문이 구사하는 거칠고 self-deprecating 톤이 일부 순화돼 원문의 캐릭터성이 살짝 날아감.\n   • 제안: “우린 좆 됐다”, “씨X 모르겠다” 등은 과하겠지만, 최소한 “우린 완전히 좆됐다”, “그냥 X까고 해 보자”처럼 균형 유지 검토.\n\n3-2. 감탄사·구어체 리듬\n   • “bam”, “lol”, 과도한 “really” 등이 번역 과정에서 누락·완화.  \n   • 예: “bam” → “끝. 뿅.” / “Lol.” → “ㅋㅋ”.\n   • 원문 리듬을 살리고자 의성·의태어·짧은 인터넷 용어를 더 활용.\n\n──────────────────\n[4] 용어·표기 일관성 (Major)\n──────────────────\n4-1. Codegen vs 코드제너레이션\n   • ‘코드 제너레이션’, ‘codegen’, ‘codegen(코드 생성)’ 등 혼재.  \n   • 제안: 한 곳에서 정의 후 일관 사용. 예) “codegen(코드 생성)” 첫 등장 → 이후 ‘codegen’.\n\n4-2. mock\n   • “목(mock)”은 ‘모의 객체’가 일반적. “목”은 표준어와도 겹쳐 혼동.  \n   • 제안: “모의(mock) 객체” 또는 그냥 ‘mock’.\n\n4-3. 프롬프트/Prompt\n   • 영문·한글 표기 섞임. 기술 글에서는 ‘프롬프트(prompt)’ 식 병기 후 한글화가 무난.\n\n──────────────────\n[5] 문장·어휘 자연도 (Minor)\n──────────────────\n5-1. “일이 우르르 벌어졌다”\n   • 다소 유아체. “우르르”→“우후죽순 터져 나왔다” 등 선택.\n\n5-2. “…확실히 있지만”\n   • “쓸모가 확실히 있지만”→“용도는 분명하지만”으로 부드럽게.\n\n5-3. “더 맛있다”\n   • 소프트웨어 흐름에서 ‘맛있다’는 다소 부자연. “더 쾌적하다” 등으로 교체 검토.\n\n5-4. “왕창 붙여 왔지만”\n   • 구어체 OK지만 빈도 많음. 일부 ‘잔뜩’, ‘수두룩’ 등으로 변주.\n\n──────────────────\n[6] 문법·표점·타이포 (Minor)\n──────────────────\n6-1. 영어 고유명사 대소문자\n   • “Ghostty”는 대문자 G 유지했으나 “VS Code” → “VS Code”로 비공식 띄어쓰기 맞춰야 함.\n6-2. 불필요 공백\n   • “100 %” → “100%”.\n\n6-3. Markdown 굵게 표기\n   • 일부 굵게(*) 표시가 영어 원문 의도보다 과도하거나 누락. 전반 점검 요망.\n\n──────────────────\n[7] 기계적 어투·직역 흔적 (Minor)\n──────────────────\n7-1. “프로젝트 루트에 저장한다.” \n   • IT 독자는 알지만, 루트 디렉터리→‘프로젝트 최상위 경로’ 등 덜 직역 표현 병행 가능.\n\n7-2. “자주 쓰는 프롬프트를 재사용하기엔 여전히 최고다.”\n   • ‘best way to get a lot out of’ 직역 티. “꽤 많은 효과를 뽑아낼 수 있는 훌륭한 수단” 등 자연화.\n\n──────────────────\n[8] 추가 개선 포인트\n──────────────────\n8-1. 이미지 캡션\n   • 원문과 다른 날짜 장비 표기가 생략·축약됨. 필요 시 번역·보존 여부 결정.\n\n8-2. 장면전환 부호\n   • 원문은 ‘## Defensive coding!’ 같이 헤더 자체에 느낌표 포함. 일부 헤더에서 느낌표 누락 확인.\n\n──────────────────\n정리\n──────────────────\n의미 왜곡은 적지만,  \n① 원문의 거친 농담·밈·욕설·리듬,  \n② 비유(boomers, bam, wat) / 강조 표현,  \n③ ‘A+++ would execute again’처럼 번역이 살짝 어긋난 미묘한 뉘앙스를 교정하면 한층 ‘원문이 바로 한국어로 쓰인 듯한’ 자연스러움과 충실도를 확보할 수 있습니다.",
      "usage": {
        "prompt_tokens": 6106,
        "completion_tokens": 2009,
        "total_tokens": 8115
      },
      "streaming": true
    },
    "feedback": {
      "model": "o3",
      "target_language": "korean",
      "system_prompt": "You are a master translator and editor specializing in korean.\nYour task is to improve a translation based on detailed critique feedback.\n\n1. Carefully read the original text, current translation, and the critique feedback\n2. Address ALL issues identified in the critique\n3. Apply the specific suggestions for improvement\n4. Ensure the translation is accurate, natural-sounding, and faithful to the original\n5. Preserve all formatting, markdown, and structure of the original text\n6. Make sure the final text reads as if it were originally written in korean\n\nDo not ignore any of the critique points. Every issue identified must be addressed in your improved version.\n",
      "user_prompt": "# ORIGINAL TEXT\nI really like this agentic coding thing. It is quite compelling in so many ways.\n\nSince I wrote [that original blog post](/2025/02/16/my-llm-codegen-workflow-atm/) a lot has happened in Claude land:\n\n- Claude Code\n- MCP\n- etc\n\nI have received hundreds (wat) of emails from people talking about their workflows and how they have used my workflow to get ahead. I have spoken at a few conferences, and taught a few classes about codegen. I have learned that computers really want to spellcheck codegen to codeine, who knew!\n\n{{< image src=\"codegen.png\"  >}}\n\nI was talking to a [friend](https://www.elidedbranches.com/) the other day about how we are **all totally fucked** and **AI will take our jobs** (more on that in a later post), and she was like \"you should write a post about claude code.\"\n\nHere we go.\n\nClaude Code was released eight days after I wrote my original workflow blog post, and as I predicted, it made a lot of my post irrelevant. I have since migrated from Aider to Claude Code and not looked back. I still like Aider, and it has a distinct use, but Claude Code is a bit more useful atm.\n\nClaude Code is powerful, and a hell of a lot more expensive.\n\nMy workflow is very similar to what it was before.\n\n- I chat with `gpt-4o` to hone my idea\n- I use the best reasoning model I can find to generate the spec. These days it is o1-pro or o3 (is o1-pro better than o3? Or do I feel like it is better cuz it takes longer?)\n- I use the reasoning model to generate the prompts. Using an LLM to generate prompts is a beautiful hack. It makes boomers mad too.\n- I save the spec.md, and the prompt_plan.md in the root of the project.\n- I then type into claude code the following:\n\n```prompt\n1. Open **@prompt_plan.md** and identify any prompts not marked as completed.\n2. For each incomplete prompt:\n    - Double-check if it's truly unfinished (if uncertain, ask for clarification).\n    - If you confirm it's already done, skip it.\n    - Otherwise, implement it as described.\n    - Make sure the tests pass, and the program builds/runs\n    - Commit the changes to your repository with a clear commit message.\n    - Update **@prompt_plan.md** to mark this prompt as completed.\n3. After you finish each prompt, pause and wait for user review or feedback.\n4. Repeat with the next unfinished prompt as directed by the user.\n```\n\n- The magic with this prompt is that it checks the prompt plan. Looks for things that are not marked as completed, then does the next remaining task. It commits it to git, and then updates the prompt plan with what is complete. It then pops up and asks you to continue once it is done. 🤌\n\n- I then kick back and tell claude `yes` while it does the work. It will pop up for feedback, and magic happens.\n- Lots more cookie clicker.\n\nThis works super well. There are a few superpowers you can embed in your process that will really help.\n\n## Defensive coding!\n\n### Testing\n\nTesting and test-driven development is a must. I highly recommend really engaging in building out a robust TDD practice.\n\nI was a TDD hater. I was bad at it and I felt like I was wasting time. I was not correct. Lol. I recognize that, and we built in a lot of testing into our companies and projects over the past few decades. Most of the testing was added AFTER the core work was done. This is fine for humans.\n\nTHIS IS BAD FOR ROBOTS.\n\nThe robots LOVE TDD. Seriously. They eat it up.\n\nWith TDD you have the robot friend build out the test, and the mock. Then your next prompt you build the mock to be real. And the robot just loves this. It is the most effective counter to hallucination and LLM scope drift I have found. It really helps the robots to stay on task.\n\n### Linting\n\nI am such a fan of linting. It is so nice. Ruff is a wonderful product. Biome is cool. Clippy is fun (and a good name).\n\nFor whatever reason the ROBOTS love to run a good linter.\n\nBuilding in the practice to run the linter constantly has kept a lot of bugs away, and kept the code more maintainable and easier to read. You know this already.\n\nAdd in a good formatter and everything is beautiful.\n\n### Pre Commit hooks\n\nThe real magic of all this is to add these tasks to a pre-commit hook. I recommend the pre-commit python package. You can easily use it via an `uv tools install pre-commit` command and then just build out a nice `.pre-commit-config.yaml` file and bam. Every time you try and commit it will run all these wonderful tests, type checking, linting, and whatnot to make sure your code is A+++ would execute again.\n\nThis is a great hack for working with Claude Code. The robot REALLLLLY wants to commit. So when you instruct it to do some code and then commit (like I did above) it will make wild code changes, commit the code, inevitably fuck it all up and then have to fix it.\n\nThis is nice cuz it doesn't clog your GitHub actions with a bunch of linting, formatting, and type checking execution that doesn't pass cuz the robot was in a mood.\n\n> A funny thing about claude is it CANNOT for the life of it figure out how to use `uv` correctly. It will pip install shit all over the place if you are not careful. And if you instruct it to use `uv` it will just use `uv pip install.` Maybe AGI isn't going to happen in June. so sad.\n\n### Claude.md and commands\n\nThese are both really simple additions that can squeeze a lot out.\n\n{{< image src=\"_SDI8149.jpg\" alt=\"Jesse at the studio, Sept 15, 2023, Ricoh GRiii\" caption=\"Jesse at the studio, Sigma fp, 11/15/2023\" >}}\n\nI stole a [CLAUDE.md](https://github.com/harperreed/dotfiles/blob/master/.claude/CLAUDE.md) from my friend [Jesse Vincent](https://fsck.com/) who did an [awful lot of work on making it very robust](https://github.com/obra/dotfiles/blob/main/.claude/CLAUDE.md). It is quite nice. Some things that are built into it:\n\n- a light version of the big daddy rule.\n- instructions on how to do TDD\n- stylistic instructions on how I like to code.\n\n> [@clint](https://instagram.com/clintecker) configured his CLAUDE.md to call him MR BEEF and it is currently embedding info about MR BEEF in our all documentation: \"If you're stuck, stop and ask for help—MR BEEF may know best.\". While typing this out, I decided to make my CLAUDE.md file call me \"Harp Dog.\" This is a feature, not a bug.\n\nThe commands are also really nice. You can see some of mine in my dotfiles [here](https://github.com/harperreed/dotfiles/tree/master/.claude/commands).\n\n{{< image src=\"commands.png\"  >}}\n\nI used to use the commands way more, but it is a really great way to get a lot out of regularly used prompts. You can also pass arguments to the commands. For instance in my github issues command, you pass the issue number that you want claude to look at: `/user:gh-issue #45`\n\nClaude will now go and run through the \"prompt\" script that is defined in the `gh-issue.md` file.\n\nYou can also put these commands in a project directory, and make a custom CLAUDE.md in the project directory. I do this to make hugo, rust, go, or javascript specific commands per project.\n\n## \"Continue\"\n\n{{< image src=\"https://media4.giphy.com/media/v1.Y2lkPTc5MGI3NjExNDk3ZTZpdWYwdG5sdmpnaTJqNzJhYXlvcmp6bnNmdmhxaGdoeHJ4MyZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/l2Je3fIeeXyYEM85G/giphy.gif\" >}}\n\nSometimes I feel like that bird that Homer got to hit \"y\". I am just writing \"continue\" or pressing up and pasting in the same prompt.\n\nMost of the time the plans are about 8–12 steps. I can usually get through a Greenfield development plan in about 30–45 minutes regardless of apparent complexity or language.\n\nI was talking through with my friend Bob and he did not believe it. I asked him \"name a thing to build, a language to build it in - and let's see!\"\n\n{{< image src=\"R0000693.jpeg\" caption=\"Bob Swartz, Ricoh GRiiix, 11/17/2024\" >}}\n\nHe was like \"ok. A basic interpreter in C.\"\n\nThis wasn't ideal. I don't know C. I don't really know how to write an interpreter, nor do I really want to. But fuck it.\n\nI followed the above steps and Claude Code did great. We have [a working basic interpreter](https://github.com/harperreed/basic). The first version worked within an hour. I futzed with it for a few more hours and it is pretty good. Would it ship it in 1982? Probably not. You can see the [prompt plan here](https://raw.githubusercontent.com/harperreed/basic/refs/heads/main/docs/prompt_plan.md).\n\n## The Team\n\nOur entire team is using Claude Code currently. We are all approximately following the above process with a lot of person tweaks.\n\nWe are doing way way higher test coverage than we have ever done. We have better code, and it seems to be just as effective as the horrible code we wrote in the past. It is fun to glance at people working and see claude code running in ghostty, in vscode terminal, in zed terminal, and messing with python notebooks.\n\n{{< image src=\"dril.jpg\" >}}\n\nSomeone who has a lot of tokens, please help me budget this. My family is dying.\n\n## thanks\n\nTo all the folks who keep emailing me. It is really fun and nice to hear about your workflows, and projects. I really appreciate it. Keep em coming!\n\n# CURRENT TRANSLATION\n나는 요즘 ‘에이전틱(Agentic) 코딩’에 푹 빠져 있다. 여러모로 *엄청* 매력적이다.\n\n[그 원본 블로그 글](/2025/02/16/my-llm-codegen-workflow-atm/)을 올린 뒤 Claude 세상에서는 일이 우르르 벌어졌다.\n\n- Claude Code  \n- MCP  \n- etc\n\n내 워크플로우 이야기, 그리고 *내 방식을 써서 앞서 나갔다*는 내용의 이메일을 수백 통(wat)이나 받았다. 몇몇 컨퍼런스에서 발표도 하고, 코드제너레이션 수업도 몇 번 했다. 한 가지 깨달은 건—컴퓨터는 ‘codegen’을 ‘codeine’으로 자꾸 오타 교정한다는 사실. 누가 알았겠나!\n\n{{< image src=\"codegen.png\"  >}}\n\n며칠 전 [친구](https://www.elidedbranches.com/)와 “우린 **완전히 망했다**, **AI가 우리의 일자리를 싹 가져갈 거다**” 같은 얘기를 하다가(이건 나중 포스트에서!) 그녀가 “클로드 코드 얘기도 써 봐”라고 하더라.\n\n자, 시작해 보자.\n\nClaude Code는 내 워크플로우 글이 올라간 지 딱 여드레 만에 출시됐다. 예상대로 글의 상당 부분이 바로 퇴물 신세가 됐다. 나는 Aider에서 Claude Code로 갈아탄 뒤 뒤돌아본 적 없다. Aider도 좋고 쓸모가 확실히 있지만, 지금 시점에선 Claude Code가 더 유용하다.\n\nClaude Code는 강력하고, *겁나* 비싸다.\n\n내 워크플로우는 예전과 거의 같다.\n\n- 아이디어를 다듬을 땐 `gpt-4o`와 수다를 떤다.  \n- 사양은 최고의 추론 모델로 뽑아낸다. 요즘은 o1-pro나 o3(과연 o1-pro가 o3보다 나을까, 아니면 오래 걸려서 그렇게 느끼는 걸까?).  \n- 같은 모델로 프롬프트도 생성한다. LLM으로 프롬프트를 짜게 하는 건 진짜 기막힌 해킹이다. 베이비붐 세대는 또 혈압이 오른다.  \n- `spec.md`와 `prompt_plan.md`를 프로젝트 루트에 저장한다.  \n- 그리고 Claude Code에 이렇게 입력한다:\n\n```prompt\n1. Open **@prompt_plan.md** and identify any prompts not marked as completed.\n2. For each incomplete prompt:\n    - Double-check if it's truly unfinished (if uncertain, ask for clarification).\n    - If you confirm it's already done, skip it.\n    - Otherwise, implement it as described.\n    - Make sure the tests pass, and the program builds/runs\n    - Commit the changes to your repository with a clear commit message.\n    - Update **@prompt_plan.md** to mark this prompt as completed.\n3. After you finish each prompt, pause and wait for user review or feedback.\n4. Repeat with the next unfinished prompt as directed by the user.\n```\n\n- 이 프롬프트의 묘미는 `prompt_plan.md`를 열어 “완료 표시 안 된 항목”을 찾고, 그다음 작업을 처리한다. Git에 커밋하고 `prompt_plan.md`에 완료 체크까지 해 준 뒤, 끝나면 “계속할까?”를 묻는다. 🤌  \n- 나는 등받이에 몸을 기대고 ‘yes’만 치면 된다. 피드백 타임이 오면 마법이 펼쳐진다.  \n- 덕분에 쿠키 클릭커(Cookie Clicker) 같은 방치형 게임을 더 오래 돌릴 수 있다.\n\n이 방식, 기가 막히게 잘 먹힌다. 여기에 몇 가지 ‘슈퍼파워’를 더하면 효과가 훨씬 커진다.\n\n## 방어적 코딩!\n\n### Testing\n\n테스트, 특히 테스트 주도 개발(TDD)은 필수다. 정말로, 빡세게 TDD 습관을 들이길 권한다.\n\n나도 한때 TDD 혐오자였다. 서툴렀고, 시간 낭비 같았다. 완전 착각이었다 ㅋㅋ. 지난 수십 년 동안 회사와 프로젝트에 테스트를 왕창 붙여 왔지만, 대개는 핵심 기능을 만든 *뒤에* 테스트를 달았다. 사람한텐 그럭저럭 괜찮다.\n\n**로봇한테는 끔찍하다.**\n\n로봇들은 TDD를 *미친 듯이* 좋아한다.\n\nTDD를 쓰면 로봇 친구가 테스트와 목(mock)을 먼저 짜고, 다음 프롬프트에서 그 목을 실제 구현으로 바꾼다. 환각과 범위 이탈을 막는 가장 효과적인 방법이다. 로봇이 한눈 안 팔고 일한다.\n\n### Linting\n\n나는 린트(Lint)를 정말 사랑한다. Ruff는 훌륭하고, Biome도 멋지며, Clippy는 귀엽다.\n\n신기하게도 로봇은 좋은 린트를 돌리는 걸 **엄청** 좋아한다.\n\n린트를 수시로 돌리면 버그가 줄고 코드가 깔끔해진다. 포매터까지 더하면 금상첨화다.\n\n### Pre-commit 훅\n\n진짜 마법은 이 모든 작업을 pre-commit 훅에 넣는 것이다. Python 패키지 `pre-commit`을 `uv tools install pre-commit` 한 줄로 깔고 `.pre-commit-config.yaml`만 작성하면 끝. 커밋할 때마다 테스트·타입 체크·린트가 돌아서 코드가 ‘A+++라면 다시 실행해도 100 % 통과’하는 수준을 보장한다.\n\nClaude Code와 함께 쓰면 더 맛있다. 로봇은 *커밋하고 싶어 몸이 근질근질*하다. “코드 짜고 커밋해”라고 시키면 로봇은 코드를 마구 갈아엎고 커밋하고, 깨진 걸 다시 고친다.\n\n덕분에 GitHub Actions가 린트·포맷 실패 로그로 범람하지 않는다.\n\n> 한 가지 웃긴 건, Claude가 `uv`를 도저히 제대로 못 쓴다는 점이다. 방심하면 여기저기 `pip install`을 난사한다. `uv`를 쓰라고 지시해도 결국 `uv pip install`만 반복한다. AGI가 6월에 온다더니, 글렀나 보다. 슬프다.\n\n### CLAUDE.md와 commands\n\n작지만 생산성을 크게 끌어올리는 두 가지 추가 요소다.\n\n{{< image src=\"_SDI8149.jpg\" alt=\"Jesse at the studio, Sept 15, 2023, Ricoh GRiii\" caption=\"Jesse at the studio, Sigma fp, 11/15/2023\" >}}\n\n나는 친구 [Jesse Vincent](https://fsck.com/)이 [정성 들여 만든](https://github.com/obra/dotfiles/blob/main/.claude/CLAUDE.md) [CLAUDE.md](https://github.com/harperreed/dotfiles/blob/master/.claude/CLAUDE.md)를 살짝 빌려 쓴다. 주요 내용은 다음과 같다.\n\n- Big Daddy Rule(빅 대디 룰)의 라이트 버전  \n- TDD 가이드  \n- 내가 선호하는 코딩 스타일  \n\n> [@clint](https://instagram.com/clintecker)은 CLAUDE.md에서 자길 ‘MR BEEF’라 부르도록 해 두었는데, 덕분에 문서마다 “막히면 MR BEEF에게 물어봐”라는 문구가 삽입되고 있다. 이 글을 쓰다가 나도 ‘Harp Dog’로 바꿨다. 기능이지 버그가 아니다.\n\n명령어(commands)도 꽤 쓸만하다. 내 dotfiles 예시는 여기에 있다: [link](https://github.com/harperreed/dotfiles/tree/master/.claude/commands).\n\n{{< image src=\"commands.png\"  >}}\n\n예전엔 더 자주 썼지만, 자주 쓰는 프롬프트를 재사용하기엔 여전히 최고다. 인자를 넘길 수도 있다. 예컨대 GitHub 이슈는 이렇게: `/user:gh-issue #45`\n\n그러면 Claude가 `gh-issue.md`에 정의된 프롬프트 스크립트를 수행한다.\n\n이 명령어와 커스텀 CLAUDE.md를 프로젝트 디렉터리에 두면 Hugo, Rust, Go, JavaScript 등 언어·프레임워크별 전용 세팅도 가능하다.\n\n## “Continue”\n\n{{< image src=\"https://media4.giphy.com/media/v1.Y2lkPTc5MGI3NjExNDk3ZTZpdWYwdG5sdmpnaTJqNzJhYXlvcmp6bnNmdmhxaGdoeHJ4MyZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/l2Je3fIeeXyYEM85G/giphy.gif\" >}}\n\n가끔은 ‘y’ 키를 자동으로 눌러 주는 새를 옆에 둔 호머 심슨이 된 기분이다. 그저 “continue”를 입력하거나 ↑를 눌러 직전 프롬프트를 붙여 넣는다.\n\n대부분 계획은 8~12단계다. 언어가 무엇이든, 겉보기 난도가 어떻든, 그린필드 프로젝트 하나를 30~45분이면 뚝딱 끝낸다.\n\n친구 Bob은 믿지 못하겠다고 했다. 그래서 “뭘 만들고 싶은데? 언어도 골라 봐”라고 했다.\n\n{{< image src=\"R0000693.jpeg\" caption=\"Bob Swartz, Ricoh GRiiix, 11/17/2024\" >}}\n\n그가 “C로 BASIC 인터프리터”라고 했다.\n\n썩 좋지는 않았다. C도 잘 모르고, 인터프리터를 쓰고 싶지도 않았지만—에라 모르겠다, 그냥 해 보자.\n\n위 단계를 그대로 밟았더니 Claude Code가 일을 냈다. [작동하는 BASIC 인터프리터](https://github.com/harperreed/basic)가 나왔다. 첫 버전은 한 시간도 안 돼 돌아갔고, 몇 시간 더 만지니 꽤 괜찮아졌다. 1982년에 출시했을까? 글쎄. [prompt_plan.md는 여기](https://raw.githubusercontent.com/harperreed/basic/refs/heads/main/docs/prompt_plan.md)에서 볼 수 있다.\n\n## 팀 이야기\n\n우리 팀 전원이 Claude Code를 쓰고 있다. 위 과정을 기본으로 깔고, 각자 살짝 튜닝했다.\n\n테스트 커버리지는 역대 최고, 코드 품질도 좋아졌다. 과거의 끔찍한 코드와 성과는 비슷하다. 사무실을 둘러보면 Ghostty, VS Code 터미널, Zed 터미널, 파이썬 노트북 등에서 Claude Code가 돌아가는 모습이 한눈에 들어온다.\n\n{{< image src=\"dril.jpg\" >}}\n\n토큰이 남아도는 분, 제발 예산 좀 짜 달라. 우리 가족이 굶어 죽기 직전이다.\n\n## thanks\n\n이메일을 보내 준 모든 분께 감사한다. 여러분의 워크플로우와 프로젝트 이야기를 듣는 건 정말 즐겁다. 계속 보내 달라!\n\n# CRITIQUE FEEDBACK\n전체적으로 번역의 완성도가 높지만, ‘거의 완벽’과는 거리가 있습니다. 의미 왜곡·누락은 크지 않으나, 원문 특유의 헐거우면서도 공격적인 톤, 욕설·은어, 기이한 리듬감이 곳곳에서 희석됐고, 기술 / 문화 레퍼런스가 살짝 빗나가거나 빠진 부분도 있습니다. 아래를 참고해 세부 수정 작업을 진행해 주십시오.\n\n──────────────────\n[1] 의미 오류·누락 (Critical)\n──────────────────\n1-1. pre-commit 문단 – “A+++ would execute again”\n   • 번역: “코드가 ‘A+++라면 다시 실행해도 100 % 통과’하는 수준을 보장한다.”\n   • 문제: “would execute again”은 ‘다시 실행해도 통과한다’가 아니라 ‘다시 실행할 만하다(퀄리티가 매우 높다)’에 가까움.   \n   • 제안: “코드가 A+++ 등급이어서 *언제든 다시 돌려도 될* 정도로 깔끔하게 유지된다.”\n\n1-2. prompt 설명 – “then does the next remaining task”\n   • 번역: “그다음 작업을 처리한다.”\n   • 문제: ‘가장 먼저 남은 작업(next remaining)’이라는 순차 로직이 빠짐.   \n   • 제안: “아직 남아 있는 항목 중 *가장 위/다음 순번*의 작업을 수행한다.”\n\n1-3. “pause and wait for user review or feedback”\n   • 요약 서술에서 “잠시 멈추어 사용자 리뷰를 기다린다”를 ‘끝나면 “계속할까?”를 묻는다’로 압축.   \n   • 뉘앙스 손실은 미묘하지만 사용자의 ‘리뷰/피드백 기회’가 의미적으로 중요함.   \n   • 제안: “작업을 끝내면 일단 멈추고 사용자 리뷰‧피드백을 기다린 뒤 ‘계속할까요?’라고 묻는다.”\n\n1-4. “hell of a lot more expensive”\n   • 번역: “*겁나* 비싸다.”\n   • 문제: ‘헬 오브 어 롯’은 ‘살벌하게, 훨씬’이라는 비교 의미 포함. ‘겁나’만으론 상대적 뉘앙스 부족.   \n   • 제안: “살벌하게 비싸다” 또는 “전보다 *훨씬* 겁나 비싸다”.\n\n1-5. “They eat it up”\n   • 번역: “로봇들은 TDD를 *미친 듯이* 좋아한다.”\n   • 의미엔 문제 없으나 ‘eat it up’의 ‘게걸스럽게 먹어 치우다’ 이미지는 약함.  \n   • 제안(선택): “게걸스럽게 받아먹는다” 등으로 이미지 강화.\n\n──────────────────\n[2] 레퍼런스·문화/은어 번역 (Major)\n──────────────────\n2-1. “boomers”\n   • 번역: “베이비붐 세대”.\n   • 문제: 원문은 조롱 섞인 ‘boomers’(인터넷 밈). ‘베이비붐 세대’는 중립적·설명적이라 힘이 빠짐.  \n   • 제안: “붐머들” 혹은 “부머들”로 음역하여 조롱 톤 유지.\n\n2-2. “Cookie Clicker”\n   • ‘방치형 게임’ 설명은 좋은데, 원문의 자조적 뉘앙스(“lots more cookie clicker”)는 다소 흐려짐.  \n   • 제안: “쿠키 클릭커나 더 돌리면서 손가락만 까딱하면 된다” 정도로 빈정거림 보강.\n\n2-3. “Claude land”\n   • 번역: “Claude 세상”.\n   • 자연스럽지만, land 특유의 ‘~월드’ 느낌이 약함.  \n   • 제안(선택): “Claude 월드” 또는 “Claude 월드(land)”로 캐주얼함 유지.\n\n2-4. “wat”\n   • 괄호 그대로 살렸으나 한국 밈 독자가 뜻을 모를 수 있음.  \n   • 제안: “수백 통(wat; ‘뭐라고?’ 수준의 당황)” 등 짤막한 주 해설.\n\n──────────────────\n[3] 톤·욕설 강도·일관성 (Major)\n──────────────────\n3-1. 욕설 완화\n   • “we are all totally fucked” → “우린 완전히 망했다”  \n   • “But fuck it.” → “에라 모르겠다, 그냥 해 보자.”  \n   • 원문이 구사하는 거칠고 self-deprecating 톤이 일부 순화돼 원문의 캐릭터성이 살짝 날아감.\n   • 제안: “우린 좆 됐다”, “씨X 모르겠다” 등은 과하겠지만, 최소한 “우린 완전히 좆됐다”, “그냥 X까고 해 보자”처럼 균형 유지 검토.\n\n3-2. 감탄사·구어체 리듬\n   • “bam”, “lol”, 과도한 “really” 등이 번역 과정에서 누락·완화.  \n   • 예: “bam” → “끝. 뿅.” / “Lol.” → “ㅋㅋ”.\n   • 원문 리듬을 살리고자 의성·의태어·짧은 인터넷 용어를 더 활용.\n\n──────────────────\n[4] 용어·표기 일관성 (Major)\n──────────────────\n4-1. Codegen vs 코드제너레이션\n   • ‘코드 제너레이션’, ‘codegen’, ‘codegen(코드 생성)’ 등 혼재.  \n   • 제안: 한 곳에서 정의 후 일관 사용. 예) “codegen(코드 생성)” 첫 등장 → 이후 ‘codegen’.\n\n4-2. mock\n   • “목(mock)”은 ‘모의 객체’가 일반적. “목”은 표준어와도 겹쳐 혼동.  \n   • 제안: “모의(mock) 객체” 또는 그냥 ‘mock’.\n\n4-3. 프롬프트/Prompt\n   • 영문·한글 표기 섞임. 기술 글에서는 ‘프롬프트(prompt)’ 식 병기 후 한글화가 무난.\n\n──────────────────\n[5] 문장·어휘 자연도 (Minor)\n──────────────────\n5-1. “일이 우르르 벌어졌다”\n   • 다소 유아체. “우르르”→“우후죽순 터져 나왔다” 등 선택.\n\n5-2. “…확실히 있지만”\n   • “쓸모가 확실히 있지만”→“용도는 분명하지만”으로 부드럽게.\n\n5-3. “더 맛있다”\n   • 소프트웨어 흐름에서 ‘맛있다’는 다소 부자연. “더 쾌적하다” 등으로 교체 검토.\n\n5-4. “왕창 붙여 왔지만”\n   • 구어체 OK지만 빈도 많음. 일부 ‘잔뜩’, ‘수두룩’ 등으로 변주.\n\n──────────────────\n[6] 문법·표점·타이포 (Minor)\n──────────────────\n6-1. 영어 고유명사 대소문자\n   • “Ghostty”는 대문자 G 유지했으나 “VS Code” → “VS Code”로 비공식 띄어쓰기 맞춰야 함.\n6-2. 불필요 공백\n   • “100 %” → “100%”.\n\n6-3. Markdown 굵게 표기\n   • 일부 굵게(*) 표시가 영어 원문 의도보다 과도하거나 누락. 전반 점검 요망.\n\n──────────────────\n[7] 기계적 어투·직역 흔적 (Minor)\n──────────────────\n7-1. “프로젝트 루트에 저장한다.” \n   • IT 독자는 알지만, 루트 디렉터리→‘프로젝트 최상위 경로’ 등 덜 직역 표현 병행 가능.\n\n7-2. “자주 쓰는 프롬프트를 재사용하기엔 여전히 최고다.”\n   • ‘best way to get a lot out of’ 직역 티. “꽤 많은 효과를 뽑아낼 수 있는 훌륭한 수단” 등 자연화.\n\n──────────────────\n[8] 추가 개선 포인트\n──────────────────\n8-1. 이미지 캡션\n   • 원문과 다른 날짜 장비 표기가 생략·축약됨. 필요 시 번역·보존 여부 결정.\n\n8-2. 장면전환 부호\n   • 원문은 ‘## Defensive coding!’ 같이 헤더 자체에 느낌표 포함. 일부 헤더에서 느낌표 누락 확인.\n\n──────────────────\n정리\n──────────────────\n의미 왜곡은 적지만,  \n① 원문의 거친 농담·밈·욕설·리듬,  \n② 비유(boomers, bam, wat) / 강조 표현,  \n③ ‘A+++ would execute again’처럼 번역이 살짝 어긋난 미묘한 뉘앙스를 교정하면 한층 ‘원문이 바로 한국어로 쓰인 듯한’ 자연스러움과 충실도를 확보할 수 있습니다.\n\nPlease address ALL issues identified in the critique and provide an improved translation.\nReturn ONLY the improved translated text without explanations or comments.",
      "response": "나는 요즘 ‘에이전틱(Agentic) 코딩’에 푹 빠져 있다. 여러모로 *존나* 매력적이다.\n\n[그 원본 블로그 글](/2025/02/16/my-llm-codegen-workflow-atm/)을 올린 뒤 Claude 월드(land)에서는 우후죽순 일이 터져 나왔다.\n\n- Claude Code  \n- MCP  \n- etc\n\n내 워크플로우 얘기, 그리고 *내 방식을 베껴 써서 앞서 나갔다*는 내용의 이메일을 수백 통(wat; “뭐라고?” 싶은 숫자)이나 받았다. 몇몇 컨퍼런스에서 발표도 하고, 코드 생성(codegen) 수업도 몇 번 했다. 한 가지 깨달은 건—컴퓨터는 ‘codegen’을 ‘codeine’으로 자꾸 교정하더라. ㅋㅋ\n\n{{< image src=\"codegen.png\"  >}}\n\n며칠 전 [친구](https://www.elidedbranches.com/)랑 “우리 **다 같이 좆됐다**, **AI가 우리 일자리 싹 쓸어갈 거다**”(자세한 얘기는 다음 글에서!) 따위 얘기를 하다가, 그녀가 “클로드 코드 얘기도 좀 써 봐”라고 하더라.\n\n자, 고!\n\nClaude Code는 내 워크플로우 글이 올라간 지 딱 여드레 만에 출시됐다. 예측한 대로 글의 상당 부분이 바로 구닥다리가 됐다. 나는 Aider에서 Claude Code로 갈아탄 뒤 뒤돌아본 적 없다. Aider도 좋고 용도는 분명하지만, 지금은 Claude Code 쪽이 더 쓸만하다.\n\nClaude Code는 강력하고, 전보다 *살벌하게* 겁나 비싸다.\n\n내 워크플로우는 예전과 거의 같다.\n\n- 아이디어는 `gpt-4o`랑 수다 떨면서 갈고닦는다.  \n- 사양(spec)은 최고 추론 모델로 뽑아낸다. 요즘은 o1-pro나 o3(도대체 o1-pro가 더 나은 걸까, 아니면 오래 걸려서 그렇게 느끼는 걸까?).  \n- 같은 모델로 프롬프트(prompt)도 짜게 한다. LLM에게 프롬프트를 쓰게 하는 건 정말 기가 막힌 해킹이다. 그러면 붐머들 혈압이 치솟는다.  \n- `spec.md`와 `prompt_plan.md`를 프로젝트 최상위 경로에 저장한다.  \n- 그리고 Claude Code에 이렇게 입력한다:\n\n```prompt\n1. Open **@prompt_plan.md** and identify any prompts not marked as completed.\n2. For each incomplete prompt:\n    - Double-check if it's truly unfinished (if uncertain, ask for clarification).\n    - If you confirm it's already done, skip it.\n    - Otherwise, implement it as described.\n    - Make sure the tests pass, and the program builds/runs\n    - Commit the changes to your repository with a clear commit message.\n    - Update **@prompt_plan.md** to mark this prompt as completed.\n3. After you finish each prompt, pause and wait for user review or feedback.\n4. Repeat with the next unfinished prompt as directed by the user.\n```\n\n- 이 프롬프트의 묘미는 `prompt_plan.md`를 열어 “완료 표시 안 된 항목”을 찾은 다음, *가장 먼저 남아 있는* 작업을 처리한다는 점이다. Git에 커밋하고 `prompt_plan.md`에 완료 체크까지 해 둔 뒤, 멈춰서 사용자 리뷰·피드백을 기다리고 “계속할까요?”를 묻는다. 🤌  \n- 나는 의자 뒤로 기대 “yes”만 치면 된다. 피드백 타임이 오면 마법이 펼쳐진다.  \n- 그동안 쿠키 클릭커나 더 돌리면서 손가락만 까딱하면 된다.\n\n이 방식, 기가 막히게 잘 먹힌다. 여기에 몇 가지 ‘슈퍼파워’를 더하면 효과가 훨씬 커진다.\n\n## Defensive coding!\n\n### Testing\n\n테스트, 특히 테스트 주도 개발(TDD)은 필수다. 정말, 빡세게 TDD 습관을 들이길 권한다.\n\n나도 한때 TDD 혐오자였다. 서툴렀고, 시간 낭비 같았다. 완전 착각이었다. ㅋㅋ 지난 수십 년 동안 회사와 프로젝트에 테스트를 잔뜩 달아 왔지만, 대개는 핵심 기능을 만든 *뒤에* 테스트를 붙였다. 사람한텐 그럭저럭 괜찮다.\n\n**로봇한텐 최악이다.**\n\n로봇들은 TDD를 *게걸스럽게* 받아먹는다.\n\nTDD를 쓰면 로봇 친구가 테스트와 모의(mock) 객체를 먼저 짜고, 다음 프롬프트에서 그 모의를 실제 구현으로 바꾼다. 내가 찾은 환각·스코프 드리프트 방지책 중 가장 효과적이다. 로봇이 한눈 안 팔고 일한다.\n\n### Linting\n\n나는 린트(lint)를 정말 사랑한다. Ruff는 훌륭하고, Biome도 멋지며, Clippy는 귀엽다.\n\n희한하게도 로봇은 좋은 린트를 돌리는 걸 **엄청** 좋아한다.\n\n린트를 수시로 돌리면 버그가 줄고 코드가 더 읽기 쉬워진다. 포매터까지 더하면 뿅.\n\n### Pre-commit 훅\n\n진짜 마법은 이 모든 작업을 pre-commit 훅에 넣는 것이다. Python 패키지 `pre-commit`을 `uv tools install pre-commit` 한 줄로 깔고 `.pre-commit-config.yaml`만 작성하면 끝. 커밋할 때마다 테스트·타입 검증·린트가 돌아서 코드가 A+++ 등급이라 *언제든 다시 돌려도 될* 정도로 깔끔하게 유지된다.\n\nClaude Code와 함께 쓰면 더욱 쾌적하다. 로봇은 *커밋하고 싶어 몸이 근질근질*하다. “코드 짜고 커밋해”라고 시키면 로봇은 코드를 마구 갈아엎고 커밋하고, 깨진 걸 다시 고친다.\n\n덕분에 GitHub Actions가 린트·포맷 실패 로그로 범람하지 않는다.\n\n> 웃긴 점 하나: Claude는 `uv`를 *도저히* 제대로 못 쓴다. 방심하면 `pip install`을 난사한다. `uv`를 쓰라고 지시해도 결국 `uv pip install`만 반복한다. AGI가 6월에 온다더니 글렀나. 슬프다.\n\n### CLAUDE.md와 commands\n\n작지만 생산성을 확 끌어올리는 두 가지 추가 옵션이다.\n\n{{< image src=\"_SDI8149.jpg\" alt=\"Jesse at the studio, Sept 15, 2023, Ricoh GRiii\" caption=\"Jesse at the studio, Sigma fp, 11/15/2023\" >}}\n\n나는 친구 [Jesse Vincent](https://fsck.com/)이 [피 땀 흘려 만든](https://github.com/obra/dotfiles/blob/main/.claude/CLAUDE.md) [CLAUDE.md](https://github.com/harperreed/dotfiles/blob/master/.claude/CLAUDE.md)를 슬쩍 훔쳐 쓴다. 주요 내용은 다음과 같다.\n\n- Big Daddy Rule의 라이트 버전  \n- TDD 가이드  \n- 내가 선호하는 코딩 스타일  \n\n> [@clint](https://instagram.com/clintecker)은 CLAUDE.md에서 자길 ‘MR BEEF’라 부르도록 해 두었는데, 덕분에 문서마다 “막히면 MR BEEF에게 물어봐”라는 문구가 삽입되고 있다. 이 글을 쓰다가 나도 ‘Harp Dog’로 바꿨다. 기능이지 버그 아니다.\n\n명령어(commands)도 꽤 쏠쏠하다. 내 dotfiles 예시는 [여기](https://github.com/harperreed/dotfiles/tree/master/.claude/commands).\n\n{{< image src=\"commands.png\"  >}}\n\n예전엔 더 자주 썼지만, 자주 쓰는 프롬프트를 불러다 쓰기엔 여전히 훌륭한 수단이다. 인자를 넘길 수도 있다. 예컨대 GitHub 이슈는 이렇게: `/user:gh-issue #45`\n\n그러면 Claude가 `gh-issue.md`에 정의된 프롬프트 스크립트를 수행한다.\n\n이 명령어와 커스텀 CLAUDE.md를 프로젝트 디렉터리에 두면 Hugo, Rust, Go, JavaScript 등 언어·프레임워크별 전용 세팅도 가능하다.\n\n## “Continue”\n\n{{< image src=\"https://media4.giphy.com/media/v1.Y2lkPTc5MGI3NjExNDk3ZTZpdWYwdG5sdmpnaTJqNzJhYXlvcmp6bnNmdmhxaGdoeHJ4MyZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/l2Je3fIeeXyYEM85G/giphy.gif\" >}}\n\n가끔은 ‘y’ 키를 눌러 주는 새를 책상 위에 올려 놓은 호머 심슨이 된 기분이다. 그저 “continue”를 입력하거나 ↑를 눌러 직전 프롬프트를 붙여 넣는다.\n\n대부분 계획은 8~12단계다. 언어가 무엇이든, 겉보기 난도가 어떻든, 그린필드 프로젝트 하나를 30~45분이면 뚝딱 끝낸다.\n\n친구 Bob은 못 믿겠다고 했다. 그래서 “뭘 만들고 싶은데? 언어도 골라 봐”라고 했다.\n\n{{< image src=\"R0000693.jpeg\" caption=\"Bob Swartz, Ricoh GRiiix, 11/17/2024\" >}}\n\n그가 “C로 BASIC 인터프리터”라고 했다.\n\n썩 좋진 않았다. C도 잘 모르고, 인터프리터를 쓰고 싶지도 않았지만—그냥 X까고 해 보자.\n\n위 단계를 그대로 밟았더니 Claude Code가 일을 냈다. [작동하는 BASIC 인터프리터](https://github.com/harperreed/basic)가 나왔다. 첫 버전은 한 시간도 안 돼 돌아갔고, 몇 시간 더 만지니 꽤 괜찮아졌다. 1982년에 출시했을까? 글쎄. [prompt_plan.md는 여기](https://raw.githubusercontent.com/harperreed/basic/refs/heads/main/docs/prompt_plan.md)서 볼 수 있다.\n\n## 팀 이야기\n\n우리 팀 전원이 Claude Code를 쓰고 있다. 위 과정을 기본으로 깔고, 각자 살짝 튜닝했다.\n\n테스트 커버리지는 역대 최고, 코드 품질도 좋아졌다. 과거의 끔찍한 코드랑 결과는 비슷하다. 사무실을 둘러보면 Ghostty, VS Code 터미널, Zed 터미널, 파이썬 노트북 등에서 Claude Code가 돌아가는 모습이 한눈에 들어온다.\n\n{{< image src=\"dril.jpg\" >}}\n\n토큰이 남아도는 분, 제발 예산 좀 짜 달라. 우리 가족이 죽어 간다.\n\n## thanks\n\n이메일을 보내 준 모든 분께 감사한다. 여러분의 워크플로우와 프로젝트 이야기를 듣는 건 정말 즐겁다. 계속 보내 달라!",
      "usage": {
        "prompt_tokens": 8935,
        "completion_tokens": 2469,
        "total_tokens": 11404
      },
      "streaming": true
    },
    "frontmatter": {
      "model": "o3",
      "target_language": "korean",
      "system_prompt": "You are a professional translator. Translate the following frontmatter fields to korean.\nEach field is in the format \"field_name: content\". Translate ONLY the content, not the field names.\nReturn the translated content in the exact same format, preserving all field names.",
      "user_prompt": "title: Basic Claude Code\n\ndescription: A detailed walkthrough of using Claude Code AI assistant for software development, including workflow tips, testing practices, and practical examples from real projects. Covers defensive coding strategies, TDD, and team implementation.\n\n",
      "response": "title: 클로드 코드 기초\ndescription: 워크플로 팁, 테스트 실천법, 실제 프로젝트 사례를 포함해 소프트웨어 개발에 Claude Code AI 어시스턴트를 활용하는 방법을 자세히 안내합니다. 방어적 코딩 전략, TDD, 팀 적용 방법을 다룹니다",
      "usage": {
        "prompt_tokens": 99,
        "completion_tokens": 66,
        "total_tokens": 165
      },
      "fields": [
        "title",
        "description"
      ],
      "streaming": true
    },
    "all_critiques": [
      "[CRITIQUE OF THE KOREAN TRANSLATION]\n\n────────────────────────\nA. CRITICAL ISSUES (meaning & completeness)\n────────────────────────\n1. Missing content / partial omissions  \n   • “and how they have used my workflow to get ahead” → 번역에서 ‘내 워크플로우를 이용해 앞서 나갔다’ 부분이 빠져 원문의 핵심 뉘앙스가 누락.  \n     → “사람들이 자신의 워크플로우 경험과 *내 워크플로우를 활용해 어떻게 앞서나갔는지* 담아 보낸” 등으로 복원.  \n\n2. Quote block left wholly in English (uv install rant)  \n   • 원문의 유머를 전달하지 못하고 의미가 통째로 영어로 남아 있음.  \n     → 전체를 자연스럽게 옮기고, `uv pip install` 같은 명령어만 원문 유지:\n       “웃긴 건 Claude는 `uv`를 제대로 쓰지 못한다는 점이다 … ‘uv pip install’​만 연발한다. 6월에 AGI가 오지 않을 수도 있겠다. 슬프다.”  \n\n3. English adverb “inevitably” left untranslated  \n   • “commit하고, inevitably 망치고” → 코드 흐름 설명에서 중요한 ‘결국’ 의미 빠짐.  \n     → “결국 망치고” 로 수정.  \n\n4. Strong profanity toned-down, diluting tone  \n   • “We are **all totally fucked**” → “우린 **다 망했어**” 는 무난하지만 “fuck it.” → “그래도 해보자” 로 순화됨.  \n   • 원문의 거칠고 장난스러운 캐주얼함이 전체적으로 순화돼 원저자 캐릭터가 약화.  \n     → “에라 모르겠다, 해보자” 정도로 강도 보전.  \n\n────────────────────────\nB. MAJOR ISSUES (tone, register, naturalness)\n────────────────────────\n1. Key term “agentic coding”  \n   • ‘에이전틱(Agentic) 코딩’은 한국어 화자에게 난해.  \n     → ‘에이전트 지향(Agentic) 코딩’ 또는 ‘에이전트 기반 코딩’ 같이 해설 병기.  \n\n2. Mixed-language clutter  \n   • 잔류 영어: Greenfield, boomers, defensive coding, superpowers, commands 등.  \n     → 전문용어·고유명사 제외하고는 ‘그린필드’, ‘베이비붐 세대’, ‘방어적 코딩’, ‘비장의 무기’ 등 자연어화.  \n\n3. Register inconsistency  \n   • 문장마다 반말/존댓말 섞임: “알고 있을 것이다” (높임) ↔ “ㅋㅋ” (반말).  \n     → 원문은 완전 구어체. 한국어도 일관된 반말 or 블로그체 유지 필요.  \n\n4. Comic filler words not localised  \n   • “wat” → “헉” 은 의미만 살고 밈 느낌 사라짐. “왓?!” or “왓ㅋㅋ” 등으로 인터넷 밈 질감 살리기.  \n\n5. Tone softening of emphatics  \n   • “hell of a lot more expensive” → “훨씬 비싸다” 로 세기 감소.  \n     → “말도 안 되게 비싸다” 등 과장 표현 필요.  \n\n6. Heading “Defensive coding!” 그대로  \n   • 한국어 제목엔 느낌표만 남아 어색.  \n     → “방어적 코딩!” 혹은 “디펜시브 코딩!”으로.  \n\n────────────────────────\nC. MINOR ISSUES (grammar, style, mechanics)\n────────────────────────\n1. 띄어쓰기/맞춤법  \n   • “코드젠” → 일반적으로 “코드젠”보다는 “코드 생성(코드젠)” 등 병기 권장.  \n   • “프로젝트 디렉터리” → “프로젝트 디렉터리(폴더)” 로 직관성 향상.  \n\n2. 불필요한 괄호·영문 병기  \n   • “사양(spec)” → 처음만 “사양(spec)” 이후엔 “사양”으로.  \n\n3. 영문 따옴표와 한국어 따옴표 혼재  \n   • “prompt” → ‘prompt’ 로統一.  \n\n4. 이모지·기호 위치  \n   • “🤌” 앞뒤 띄어쓰기 불일관.  \n\n────────────────────────\nD. TERMINOLOGY & CONSISTENCY\n────────────────────────\n• “prompt_plan” / “prompt_plan.md” 혼용 → 파일명은 ‘prompt_plan.md’ 로 통일.  \n• Pre-commit / pre-commit hooks → ‘pre-commit 훅’ 으로 동일하게.  \n\n────────────────────────\nE. SUGGESTED REWRITE EXCERPTS\n────────────────────────\n• (첫 문단)  \n  “나는 ‘에이전트 지향 코딩(agentic coding)’이라는 개념이 마음에 든다. 여러모로 *엄청* 끌린다.”  \n\n• (이메일 부분)  \n  “내 워크플로우 덕분에 한 발 앞서 나갔다는 경험담과 함께, 작업 흐름을 소개한 이메일을 수백 통(왓?!)이나 받았다.”  \n\n• (pre-commit 단락 중)  \n  “커밋할 때마다 테스트·타입체크·린트가 돌면서 ‘A+++ 등급, 다시 실행해도 이상 없음’임을 보장해 준다.”  \n\n────────────────────────\nF. SUMMARY\n────────────────────────\n내용 손실은 크지 않지만,  \n• 일부 문장 누락,  \n• 잔류 영어·어투 뒤섞임,  \n• 원문의 거친 구어체·유머 약화가 문제.\n\n위의 비판 사항을 반영해  \n1) 누락된 의미 복원,  \n2) 불필요한 영어 제거 및 용어 통일,  \n3) 원문과 같은 캐주얼·유쾌·조금은 거친 톤 유지,  \n4) 전체 어조를 한 가지(반말 블로그체 등)로 맞추면  \n‘처음부터 한국어로 쓴 것 같은’ 완성도 높은 번역이 될 것입니다.",
      "[전체 평점]  \n원문의 유머·구어체·날것의 어조를 상당 부분 잘 살렸고 기술‧용어 선택도 대체로 정확하다. 그러나 세세하게 들여다보면 의미 왜곡·누락, 뉘앙스 손실, 불필요한 의역/과역, 어색한 구문, 일관성 문제, 용어 통일 미흡 등이 곳곳에 존재한다. 아래 문제 목록을 수정하면 “원래 한국어로 쓴 글”처럼 매끈해질 것이다.\n\n──────────────────────────  \n1. 의미 왜곡·누락 (Severity = Critical)  \n──────────────────────────  \n1-1 “agentic coding” → “에이전트 지향 코딩”  \n • ‘지향’(-oriented)이라는 뉘앙스가 원문에 없다. ‘Agentic’은 ‘에이전트(형)’, ‘에이전트 기반’ 정도가 자연.  \n → 수정안: “에이전트 기반(Agentic) 코딩” 혹은 “에이전트식 코딩”.\n\n1-2 “who knew!” → “누가 알았겠어!”  \n • 가벼운 감탄인데 번역이 살짝 비아냥조. 큰 문제는 아니지만 어감 차이 존재.\n\n1-3 “and bam.”(pre-commit 설명) 누락  \n • ‘bam’의 의성어적 효과가 빠져 재미·강조가 사라짐.  \n → “그리고 ‘뿅!’ 하고 끝.” 같이 살리기.\n\n1-4 “and bam. Every time you try and commit it will run … would execute again”  \n • ‘would execute again’의 ‘다시 돌아도 성공할 정도(A+++급)’라는 ‘안정성 보장’ 뉘앙스가 살짝 축약됨.  \n → “A+++ 품질이라 다시 돌려도 언제나 통과할 정도” 등으로 보강.\n\n1-5 “cuz the robot was in a mood” → “로봇이 기분이 안 좋았을 때” 부분 삭제  \n • 원문은 ‘로봇(LLM)이 땡깡 부려 린트/타입체크를 통과 못 할 때’라는 농담. 번역에 해당 농담 미반영.  \n → “로봇이 삘이 안 맞아 테스트를 깨뜨릴 때도” 등으로 회복.\n\n1-6 “nor do I really want to” → 빠짐  \n • C 인터프리터 사례에서 “굳이 그러고 싶지도 않았다” 문구 누락.  \n → “인터프리터를 쓰고 싶지도 않았지만” 추가.\n\n1-7 “fun to glance” → “귀엽다”  \n • ‘fun’(재미/흥미)과 ‘cute’(귀엽다)는 결이 다름.  \n → “보는 재미가 쏠쏠하다/흥미롭다”로 수정.\n\n──────────────────────────  \n2. 뉘앙스·톤·욕설 재현 (Severity = Major)  \n──────────────────────────  \n2-1 욕설 강도  \n • ‘totally fucked’, ‘fuck it’, ‘hell of a lot’, ‘inevitably fuck it all up’ 등을 ‘끝장’, ‘에라 모르겠다’, ‘상상을 초월하게’, ‘망치고’ 등으로 순화했는데, 글 전반의 거친 구어체가 매력인 만큼 톤을 한 단계만 낮추는 편이 좋다.  \n → “존나 비싸다”, “조졌지만 고치면 됨” 등으로 일부 복원 고려(사이트 편집 방침에 따라 선택).\n\n2-2 ‘wat’  \n • “(wat)”를 “왓?!”으로 옮겼는데 ‘밈(meme)식 당황’ 뉘앙스는 살았으나 괄호까지 포함해 원형을 유지해 주면 더 좋음.  \n → “(wat)” 그대로 두고 뒤에 “(???)” 구어체로 보강.\n\n2-3 “cookie clicker”  \n • ‘쿠키 클릭커를 훨씬 더 오래 두들긴다’의 ‘두들긴다’는 한국식 구어지만 ‘클릭커’와 충돌.  \n → “쿠키 클릭커를 훨씬 오래 눌러댄다” 등으로 조정.\n\n2-4 “Big daddy rule”  \n • ‘big daddy rule’은 번역 안 됨(괜찮지만 각주라도 있으면 이해 용이).  \n → “Big Daddy Rule(대부 규칙 비슷한 내부 규칙)” 등 주석.\n\n──────────────────────────  \n3. 문법·어순·자연스러움 (Severity = Major)  \n──────────────────────────  \n3-1 과도한 줄임말·반말 혼용  \n • ‘수다를 떤다, 왕창, 짱, 쏠쏠하다, 귀엽다’ 등 구어가 많아 친근하지만, 영어 욕설을 순화한 대신 한국어에서는 다소 가벼워져 원문 대비 톤 업다운이 뒤섞임.  \n → 욕설을 조금 되살리고, 한국어 구어체는 약간만 정리해 균형 맞추기.\n\n3-2 “난 뒤로 물러나”  \n • ‘kick back’은 ‘느긋이 쉬다’ 정도. ‘뒤로 물러나’는 물리적 후퇴 느낌.  \n → “난 편히 기대 앉아” 등.\n\n3-3 “린트·포맷 실패 메시지로 도배”  \n • 한국어 ‘도배’(spamming) 괜찮지만 좀 더 기술 블로그 어조와 맞추면 “로그가 범람하는” 정도가 부드러움.\n\n3-4 괄호 위치와 띄어쓰기  \n • “o1-pro나 o3(과연 …?)” : ‘o3’ 뒤에 공백 필요. 곳곳의 괄호·인용부호 앞뒤 띄어쓰기 통일 필요.\n\n3-5 고급 따옴표·기울임  \n • ‘*엄청*’, ‘*비장의 무기*’ 등 마크다운 이탤릭이 다소 과다. 원문과 동일하지만 한국어에서는 밑줄/굵게를 섞어 가독성 조정 권장.\n\n──────────────────────────  \n4. 용어·일관성 (Severity = Minor)  \n──────────────────────────  \n4-1 ‘codegen’ 표기  \n • “코드 생성(코드젠)” ↔ 이후엔 ‘코드 생성’만 사용. 하나로 통일.  \n → ‘코드제너레이션(codegen)’ 혹은 ‘코드 생성’으로 일관.\n\n4-2 LLM 번역  \n • ‘로봇’으로 의인화한 부분은 재미있으나 LLM·AI와 혼용. 문맥 따라 ‘로봇(LLM)’ 첫 등장 시 병기해 두면 혼동 방지.\n\n4-3 ‘Ghostty’ 대소문자  \n • 고유 명칭은 대문자 G가 공식. ‘ghostty’ ↔ ‘Ghostty’ 통일.\n\n──────────────────────────  \n5. 과잉 의역/과잉 축약 (Severity = Minor)  \n──────────────────────────  \n5-1 “These are both really simple additions that can squeeze a lot out.” → “작지만 효과 확실한 두 가지.”  \n • ‘squeeze a lot out’(짠―하고 최대한 뽑아내다) 이미지 소실.  \n → “작지만 쥐어짜듯 생산성을 크게 끌어낼 두 가지 추가 기능” 등.\n\n5-2 “I futzed with it for a few more hours” → “몇 시간 더 만지니 꽤 괜찮아졌다.”  \n • ‘futz’(이것저것 만지작거리며 삽질) 뉘앙스 축소. ‘삽질하다’ 등으로 살리기.\n\n──────────────────────────  \n6. 기계 번역 티 (Severity = Minor)  \n──────────────────────────  \n• 전반적으로 자연스럽지만, 영어 관용구 직역 흔적(“뒤로 물러나”, “해치운다”)이 가끔 보임. 위 항목들 손보면 해결.\n\n──────────────────────────  \n[요약 Fix-List]  \n1. ‘agentic’ → ‘에이전트 기반/식’ 등으로 수정.  \n2. 욕설·강조 톤 원문과 균형 재조정.  \n3. 누락 문구(“nor do I really want to”, “cuz the robot was in a mood”, ‘bam’ 등) 보강.  \n4. 어색한 직역(뒤로 물러나, 두들긴다 등) 자연어로 교체.  \n5. 용어 통일: codegen, Ghostty, lint, TDD 등.  \n6. 괄호·띄어쓰기 정리, ‘*강조*’ 남발 줄이기.  \n7. 빅 대디 룰·MCP 등 특수 용어 간단 주석 추가 검토.\n\n이 수정안을 반영하면, 원문의 거칠고 위트 있는 기술 블로그 느낌을 완전히 재현하면서도 한국어 독자가 읽기 편한 자연스러운 텍스트가 될 것이다.",
      "TRANSLATION REVIEW  \n(원문 ↔ 번역 대조 / 오류·뉘앙스·문체·용어·누락·추가 항목별)\n\n────────────────────\nI. Critical-impact issues (의미 훼손·중대한 누락)\n────────────────────\n1. “agentic coding” → “에이전트 기반(Agentic) 코딩”  \n   • agentic 은 ‘주체성을 지닌, 스스로 행동하는’의 뉘앙스. ‘에이전트 기반’(agent-based)과는 결이 다름.  \n   → 제안: “에이전틱(Agentic) 코딩” 또는 “에이전트형 코딩(Agentic coding)” 등 원형을 살려 설명 추가.\n\n2. “A+++ would execute again” 문장 누락  \n   • Pre-commit 훅 설명부에서 “A+++ would execute again” 구(“다시 돌려도 언제나 통과할 정도로 최고”)가 빠져 의도 축약됨.  \n   → 제안: “코드가 ‘A+++라면 다시 실행해도 100% 통과한다’는 수준” 등으로 복원.\n\n3. “But fuck it.” → “좆까, 그냥 해보자.”  \n   • fuck it = “에라 모르겠다/까짓거 해 보자” 정도. “좆까”는 ‘꺼져’ 뉘앙스(대상 타인), 의미 달라짐.  \n   → 제안: “에라 모르겠다, 그냥 해 보자.” 또는 “까짓거 해 보자.”\n\n4. Big Daddy Rule 설명 왜곡  \n   • “사내 ‘대부 규칙’” 삽입은 원문에 없는 정보·해석.  \n   → 제안: 직역 혹은 각주: “Big Daddy Rule(대형 규칙 모음)” 등 중립 표현.\n\n────────────────────\nII. Major issues (어색한 어휘·뉘앙스 손실·톤 불일치)\n────────────────────\nA. 어휘/표현\n1. “(wat) (???)”  \n   • 원문 “wat”는 인터넷식 놀람. “(???)”는 불필요한 자의적 추가.  \n   → “(wat)”만 보존하거나 “(wat, 헉)” 등.\n\n2. “줄줄이 터졌다”  \n   • 비속어 느낌 강해 글 전체 톤보다 한층 거칠다.  \n   → “우르르 일어났다”, “연달아 벌어졌다” 등.\n\n3. “편히 기대 앉아”  \n   • ‘기대 앉다’는 부자연.  \n   → “등받이에 몸을 기대고”, “느긋이 앉아”.\n\n4. “쿠키 클릭커를 훨씬 오래 눌러댄다”  \n   • ‘오래 누르다’ 어색.  \n   → “쿠키 클릭커를 더 오래 돌린다/하게 된다”.\n\n5. “작지만, 쥐어짜듯 생산성을…”  \n   • ‘쥐어짜듯’ 부정 뉘앙스.  \n   → “작지만 생산성을 크게 끌어올리는”.\n\nB. 톤·레지스터\n1. 욕설 선택 폭  \n   • 원문 욕설 유지 필요성 인정. 다만 “존나”, “좆됐다” 등은 한국어에서 수위·품격이 더 높음. 조정 권고:  \n     ‑ hell of a → “겁나/엄청”  \n     ‑ totally fucked → “완전히 망했다/끝장이다”.  \n   • 욕설을 유지하되 일관·정도 통제.\n\n2. 문체 고르지 못함  \n   • ‘~했다’, ‘~해 봤다’, ‘~하더라’ 혼용으로 구어체/서술체 뒤섞임.  \n   → 원문의 블로그체(구어) 살리되 종결형 일관.\n\nC. 문화·뉘앙스\n1. “cookie clicker”는 특정 게임명. 번역에 설명 추가하면 이해 용이.  \n   → “…쿠키 클릭커(Cookie Clicker) 같은 방치형 게임을 더 돌릴 수 있다”.\n\n2. “boomers” → “베이비붐 세대”  \n   • 직역 OK. 다만 ‘베붐’ 등 축약어 가능.\n\n────────────────────\nIII. Moderate issues (문법·자잘한 누락·용어 통일)\n────────────────────\n1. 용어 통일  \n   • Linting/린트, pre-commit/프리커밋 등 혼용.  \n   → 첫 언급 시 영문 병기 후 한글 고정.\n\n2. “…를 **미친 듯이 사랑한다**” 등 동일 패턴 과다.  \n   → 다양한 표현 분산.\n\n3. Ghostty, zed 등 고유명사 대소문자 유지 필요. 일부 “Ghostty” 소문자 사용.\n\n4. “압도적 커버리지” 같은 강조어 추가 가능 (원문 강조 반영).\n\n────────────────────\nIV. Minor issues (띄어쓰기·기호·형식)\n────────────────────\n1. 마크다운 강조  \n   • 한국어 조사까지 **굵게** 포함되면 가독성 저하.  \n   → 형태소 단위 강조.\n\n2. 괄호 앞 공백 불일치: “(???)”, “(wat)” 등.\n\n3. foreign term 표기: “Ruff 짱, Biome 멋짐, Clippy 귀염”  → ‘Clippy 귀여움’ 등.\n\n4. ‘_’ 기울임, ‘*’ 굵게 사용 혼재. 일관성 필요.\n\n────────────────────\nV. Machine-like / literal spots\n────────────────────\n• “테스트·TDD는 필수다. 단언컨대, 빡세게 TDD 버릇을 들여라.” 직역+명령형 반복으로 기계적.  \n• “프로젝트 디렉터리에 두면, hugo·rust·go·javascript 프로젝트별 전용 세팅도 가능하다.” 원문 어조보다 건조.\n\n→ 문장 길이 변주·은유 도입.\n\n────────────────────\nVI. Suggested rewrites (대표 예시)\n────────────────────\n• 첫 문단  \n  현) “나는 ‘에이전트 기반(Agentic) 코딩’이 정말 마음에 든다. 여러모로 *엄청* 끌린다.”  \n  개) “요즘 ‘에이전틱(Agentic) 코딩’에 푹 빠져 있다. 여러모로 참 매력적이다.”\n\n• uv 인용부  \n  “> 웃긴 점 하나…”  \n  → “> 한 가지 웃긴 건, Claude가 `uv`를 도저히 제대로 못 쓴다는 점이다 …”\n\n• continue 섹션 첫 줄  \n  현) “가끔은 ‘y’ 눌러주는 새를 둔 호머 심슨 기분이다.”  \n  개) “가끔은 ‘y’ 키를 눌러 주는 새를 옆에 둔 호머 심슨이 된 기분이다.”\n\n────────────────────\nVII. Summary (우선 정비 목록)\n1. agentic → ‘에이전틱’으로 교정, 의미 주석.  \n2. “좆까” 교체, 욕설 수위·일관성 조정.  \n3. 누락된 “A+++ would execute again” 등 세부 문장 복원.  \n4. 임의 추가 “(???)”, ‘사내’ 등 삭제.  \n5. 문체·종결형 일관화, 지나치게 기계적 직역 구간 가다듬기.  \n6. 기술 용어 대소문자·영문 병기 통일.  \n7. 강조/마크다운 형식 정리.\n\n위 항목을 반영하면 원문의 위트·거친 농담·기술적 정확성이 자연스러운 한국어로 구현될 것입니다.",
      "전체적으로 번역의 완성도가 높지만, ‘거의 완벽’과는 거리가 있습니다. 의미 왜곡·누락은 크지 않으나, 원문 특유의 헐거우면서도 공격적인 톤, 욕설·은어, 기이한 리듬감이 곳곳에서 희석됐고, 기술 / 문화 레퍼런스가 살짝 빗나가거나 빠진 부분도 있습니다. 아래를 참고해 세부 수정 작업을 진행해 주십시오.\n\n──────────────────\n[1] 의미 오류·누락 (Critical)\n──────────────────\n1-1. pre-commit 문단 – “A+++ would execute again”\n   • 번역: “코드가 ‘A+++라면 다시 실행해도 100 % 통과’하는 수준을 보장한다.”\n   • 문제: “would execute again”은 ‘다시 실행해도 통과한다’가 아니라 ‘다시 실행할 만하다(퀄리티가 매우 높다)’에 가까움.   \n   • 제안: “코드가 A+++ 등급이어서 *언제든 다시 돌려도 될* 정도로 깔끔하게 유지된다.”\n\n1-2. prompt 설명 – “then does the next remaining task”\n   • 번역: “그다음 작업을 처리한다.”\n   • 문제: ‘가장 먼저 남은 작업(next remaining)’이라는 순차 로직이 빠짐.   \n   • 제안: “아직 남아 있는 항목 중 *가장 위/다음 순번*의 작업을 수행한다.”\n\n1-3. “pause and wait for user review or feedback”\n   • 요약 서술에서 “잠시 멈추어 사용자 리뷰를 기다린다”를 ‘끝나면 “계속할까?”를 묻는다’로 압축.   \n   • 뉘앙스 손실은 미묘하지만 사용자의 ‘리뷰/피드백 기회’가 의미적으로 중요함.   \n   • 제안: “작업을 끝내면 일단 멈추고 사용자 리뷰‧피드백을 기다린 뒤 ‘계속할까요?’라고 묻는다.”\n\n1-4. “hell of a lot more expensive”\n   • 번역: “*겁나* 비싸다.”\n   • 문제: ‘헬 오브 어 롯’은 ‘살벌하게, 훨씬’이라는 비교 의미 포함. ‘겁나’만으론 상대적 뉘앙스 부족.   \n   • 제안: “살벌하게 비싸다” 또는 “전보다 *훨씬* 겁나 비싸다”.\n\n1-5. “They eat it up”\n   • 번역: “로봇들은 TDD를 *미친 듯이* 좋아한다.”\n   • 의미엔 문제 없으나 ‘eat it up’의 ‘게걸스럽게 먹어 치우다’ 이미지는 약함.  \n   • 제안(선택): “게걸스럽게 받아먹는다” 등으로 이미지 강화.\n\n──────────────────\n[2] 레퍼런스·문화/은어 번역 (Major)\n──────────────────\n2-1. “boomers”\n   • 번역: “베이비붐 세대”.\n   • 문제: 원문은 조롱 섞인 ‘boomers’(인터넷 밈). ‘베이비붐 세대’는 중립적·설명적이라 힘이 빠짐.  \n   • 제안: “붐머들” 혹은 “부머들”로 음역하여 조롱 톤 유지.\n\n2-2. “Cookie Clicker”\n   • ‘방치형 게임’ 설명은 좋은데, 원문의 자조적 뉘앙스(“lots more cookie clicker”)는 다소 흐려짐.  \n   • 제안: “쿠키 클릭커나 더 돌리면서 손가락만 까딱하면 된다” 정도로 빈정거림 보강.\n\n2-3. “Claude land”\n   • 번역: “Claude 세상”.\n   • 자연스럽지만, land 특유의 ‘~월드’ 느낌이 약함.  \n   • 제안(선택): “Claude 월드” 또는 “Claude 월드(land)”로 캐주얼함 유지.\n\n2-4. “wat”\n   • 괄호 그대로 살렸으나 한국 밈 독자가 뜻을 모를 수 있음.  \n   • 제안: “수백 통(wat; ‘뭐라고?’ 수준의 당황)” 등 짤막한 주 해설.\n\n──────────────────\n[3] 톤·욕설 강도·일관성 (Major)\n──────────────────\n3-1. 욕설 완화\n   • “we are all totally fucked” → “우린 완전히 망했다”  \n   • “But fuck it.” → “에라 모르겠다, 그냥 해 보자.”  \n   • 원문이 구사하는 거칠고 self-deprecating 톤이 일부 순화돼 원문의 캐릭터성이 살짝 날아감.\n   • 제안: “우린 좆 됐다”, “씨X 모르겠다” 등은 과하겠지만, 최소한 “우린 완전히 좆됐다”, “그냥 X까고 해 보자”처럼 균형 유지 검토.\n\n3-2. 감탄사·구어체 리듬\n   • “bam”, “lol”, 과도한 “really” 등이 번역 과정에서 누락·완화.  \n   • 예: “bam” → “끝. 뿅.” / “Lol.” → “ㅋㅋ”.\n   • 원문 리듬을 살리고자 의성·의태어·짧은 인터넷 용어를 더 활용.\n\n──────────────────\n[4] 용어·표기 일관성 (Major)\n──────────────────\n4-1. Codegen vs 코드제너레이션\n   • ‘코드 제너레이션’, ‘codegen’, ‘codegen(코드 생성)’ 등 혼재.  \n   • 제안: 한 곳에서 정의 후 일관 사용. 예) “codegen(코드 생성)” 첫 등장 → 이후 ‘codegen’.\n\n4-2. mock\n   • “목(mock)”은 ‘모의 객체’가 일반적. “목”은 표준어와도 겹쳐 혼동.  \n   • 제안: “모의(mock) 객체” 또는 그냥 ‘mock’.\n\n4-3. 프롬프트/Prompt\n   • 영문·한글 표기 섞임. 기술 글에서는 ‘프롬프트(prompt)’ 식 병기 후 한글화가 무난.\n\n──────────────────\n[5] 문장·어휘 자연도 (Minor)\n──────────────────\n5-1. “일이 우르르 벌어졌다”\n   • 다소 유아체. “우르르”→“우후죽순 터져 나왔다” 등 선택.\n\n5-2. “…확실히 있지만”\n   • “쓸모가 확실히 있지만”→“용도는 분명하지만”으로 부드럽게.\n\n5-3. “더 맛있다”\n   • 소프트웨어 흐름에서 ‘맛있다’는 다소 부자연. “더 쾌적하다” 등으로 교체 검토.\n\n5-4. “왕창 붙여 왔지만”\n   • 구어체 OK지만 빈도 많음. 일부 ‘잔뜩’, ‘수두룩’ 등으로 변주.\n\n──────────────────\n[6] 문법·표점·타이포 (Minor)\n──────────────────\n6-1. 영어 고유명사 대소문자\n   • “Ghostty”는 대문자 G 유지했으나 “VS Code” → “VS Code”로 비공식 띄어쓰기 맞춰야 함.\n6-2. 불필요 공백\n   • “100 %” → “100%”.\n\n6-3. Markdown 굵게 표기\n   • 일부 굵게(*) 표시가 영어 원문 의도보다 과도하거나 누락. 전반 점검 요망.\n\n──────────────────\n[7] 기계적 어투·직역 흔적 (Minor)\n──────────────────\n7-1. “프로젝트 루트에 저장한다.” \n   • IT 독자는 알지만, 루트 디렉터리→‘프로젝트 최상위 경로’ 등 덜 직역 표현 병행 가능.\n\n7-2. “자주 쓰는 프롬프트를 재사용하기엔 여전히 최고다.”\n   • ‘best way to get a lot out of’ 직역 티. “꽤 많은 효과를 뽑아낼 수 있는 훌륭한 수단” 등 자연화.\n\n──────────────────\n[8] 추가 개선 포인트\n──────────────────\n8-1. 이미지 캡션\n   • 원문과 다른 날짜 장비 표기가 생략·축약됨. 필요 시 번역·보존 여부 결정.\n\n8-2. 장면전환 부호\n   • 원문은 ‘## Defensive coding!’ 같이 헤더 자체에 느낌표 포함. 일부 헤더에서 느낌표 누락 확인.\n\n──────────────────\n정리\n──────────────────\n의미 왜곡은 적지만,  \n① 원문의 거친 농담·밈·욕설·리듬,  \n② 비유(boomers, bam, wat) / 강조 표현,  \n③ ‘A+++ would execute again’처럼 번역이 살짝 어긋난 미묘한 뉘앙스를 교정하면 한층 ‘원문이 바로 한국어로 쓰인 듯한’ 자연스러움과 충실도를 확보할 수 있습니다."
    ]
  },
  "critique_loop_details": {
    "critique_usages": [
      {
        "prompt_tokens": 6249,
        "completion_tokens": 1373,
        "total_tokens": 7622
      },
      {
        "prompt_tokens": 6049,
        "completion_tokens": 1983,
        "total_tokens": 8032
      },
      {
        "prompt_tokens": 6136,
        "completion_tokens": 1753,
        "total_tokens": 7889
      },
      {
        "prompt_tokens": 6106,
        "completion_tokens": 2009,
        "total_tokens": 8115
      }
    ],
    "feedback_usages": [
      {
        "prompt_tokens": 8020,
        "completion_tokens": 2417,
        "total_tokens": 10437
      },
      {
        "prompt_tokens": 8755,
        "completion_tokens": 2465,
        "total_tokens": 11220
      },
      {
        "prompt_tokens": 8425,
        "completion_tokens": 2451,
        "total_tokens": 10876
      },
      {
        "prompt_tokens": 8935,
        "completion_tokens": 2469,
        "total_tokens": 11404
      }
    ]
  },
  "timestamp": "2025-06-28T17:20:14.457678"
}