{
  "input_file": "/Users/harper/Public/src/personal/harperreed/harper.blog/content/post/2025-05-08-basic-claude-code/index.md",
  "output_file": "/Users/harper/Public/src/personal/harperreed/harper.blog/content/post/2025-05-08-basic-claude-code/index.ja.md",
  "target_language": "japanese",
  "language_code": "ja",
  "model": "o3",
  "skip_edit": false,
  "do_critique": true,
  "critique_loops": 4,
  "has_frontmatter": true,
  "token_usage": {
    "prompt_tokens": 65275,
    "completion_tokens": 24527,
    "total_tokens": 89802
  },
  "cost": "$1.6338",
  "prompts_and_responses": {
    "translation": {
      "model": "o3",
      "target_language": "japanese",
      "system_prompt": "\n        1. Read the provided text carefully, preserving all formatting, markdown, and structure exactly as they appear.\n        2. Identify any block quotes and code blocks.\n        3. Do not translate text in block quotes or in code blocks (including text within code blocks).\n        4. Translate everything else into japanese.\n        5. Maintain the original formatting, markdown, and structure in your output.\n        6. Provide a natural-sounding translation rather than a word-for-word one.\n        7. For idioms, colloquialisms, or slang, render them in an equivalent, natural way in japanese whenever possible.\n        8. If there isn't a direct or natural translation for a particular term or phrase, keep it in the original language and surround it with quotes if necessary.\n        9. Ensure that technical terms or jargon remain accurate; if there's no suitable translation, keep the original term.\n        10. Strive for fluid, native-sounding prose that retains the tone and intent of the original text.\n        ",
      "user_prompt": "I really like this agentic coding thing. It is quite compelling in so many ways.\n\nSince I wrote [that original blog post](/2025/02/16/my-llm-codegen-workflow-atm/) a lot has happened in Claude land:\n\n- Claude Code\n- MCP\n- etc\n\nI have received hundreds (wat) of emails from people talking about their workflows and how they have used my workflow to get ahead. I have spoken at a few conferences, and taught a few classes about codegen. I have learned that computers really want to spellcheck codegen to codeine, who knew!\n\n{{< image src=\"codegen.png\"  >}}\n\nI was talking to a [friend](https://www.elidedbranches.com/) the other day about how we are **all totally fucked** and **AI will take our jobs** (more on that in a later post), and she was like \"you should write a post about claude code.\"\n\nHere we go.\n\nClaude Code was released eight days after I wrote my original workflow blog post, and as I predicted, it made a lot of my post irrelevant. I have since migrated from Aider to Claude Code and not looked back. I still like Aider, and it has a distinct use, but Claude Code is a bit more useful atm.\n\nClaude Code is powerful, and a hell of a lot more expensive.\n\nMy workflow is very similar to what it was before.\n\n- I chat with `gpt-4o` to hone my idea\n- I use the best reasoning model I can find to generate the spec. These days it is o1-pro or o3 (is o1-pro better than o3? Or do I feel like it is better cuz it takes longer?)\n- I use the reasoning model to generate the prompts. Using an LLM to generate prompts is a beautiful hack. It makes boomers mad too.\n- I save the spec.md, and the prompt_plan.md in the root of the project.\n- I then type into claude code the following:\n\n```prompt\n1. Open **@prompt_plan.md** and identify any prompts not marked as completed.\n2. For each incomplete prompt:\n    - Double-check if it's truly unfinished (if uncertain, ask for clarification).\n    - If you confirm it's already done, skip it.\n    - Otherwise, implement it as described.\n    - Make sure the tests pass, and the program builds/runs\n    - Commit the changes to your repository with a clear commit message.\n    - Update **@prompt_plan.md** to mark this prompt as completed.\n3. After you finish each prompt, pause and wait for user review or feedback.\n4. Repeat with the next unfinished prompt as directed by the user.\n```\n\n- The magic with this prompt is that it checks the prompt plan. Looks for things that are not marked as completed, then does the next remaining task. It commits it to git, and then updates the prompt plan with what is complete. It then pops up and asks you to continue once it is done. 🤌\n\n- I then kick back and tell claude `yes` while it does the work. It will pop up for feedback, and magic happens.\n- Lots more cookie clicker.\n\nThis works super well. There are a few superpowers you can embed in your process that will really help.\n\n## Defensive coding!\n\n### Testing\n\nTesting and test-driven development is a must. I highly recommend really engaging in building out a robust TDD practice.\n\nI was a TDD hater. I was bad at it and I felt like I was wasting time. I was not correct. Lol. I recognize that, and we built in a lot of testing into our companies and projects over the past few decades. Most of the testing was added AFTER the core work was done. This is fine for humans.\n\nTHIS IS BAD FOR ROBOTS.\n\nThe robots LOVE TDD. Seriously. They eat it up.\n\nWith TDD you have the robot friend build out the test, and the mock. Then your next prompt you build the mock to be real. And the robot just loves this. It is the most effective counter to hallucination and LLM scope drift I have found. It really helps the robots to stay on task.\n\n### Linting\n\nI am such a fan of linting. It is so nice. Ruff is a wonderful product. Biome is cool. Clippy is fun (and a good name).\n\nFor whatever reason the ROBOTS love to run a good linter.\n\nBuilding in the practice to run the linter constantly has kept a lot of bugs away, and kept the code more maintainable and easier to read. You know this already.\n\nAdd in a good formatter and everything is beautiful.\n\n### Pre Commit hooks\n\nThe real magic of all this is to add these tasks to a pre-commit hook. I recommend the pre-commit python package. You can easily use it via an `uv tools install pre-commit` command and then just build out a nice `.pre-commit-config.yaml` file and bam. Every time you try and commit it will run all these wonderful tests, type checking, linting, and whatnot to make sure your code is A+++ would execute again.\n\nThis is a great hack for working with Claude Code. The robot REALLLLLY wants to commit. So when you instruct it to do some code and then commit (like I did above) it will make wild code changes, commit the code, inevitably fuck it all up and then have to fix it.\n\nThis is nice cuz it doesn't clog your GitHub actions with a bunch of linting, formatting, and type checking execution that doesn't pass cuz the robot was in a mood.\n\n> A funny thing about claude is it CANNOT for the life of it figure out how to use `uv` correctly. It will pip install shit all over the place if you are not careful. And if you instruct it to use `uv` it will just use `uv pip install.` Maybe AGI isn't going to happen in June. so sad.\n\n### Claude.md and commands\n\nThese are both really simple additions that can squeeze a lot out.\n\n{{< image src=\"_SDI8149.jpg\" alt=\"Jesse at the studio, Sept 15, 2023, Ricoh GRiii\" caption=\"Jesse at the studio, Sigma fp, 11/15/2023\" >}}\n\nI stole a [CLAUDE.md](https://github.com/harperreed/dotfiles/blob/master/.claude/CLAUDE.md) from my friend [Jesse Vincent](https://fsck.com/) who did an [awful lot of work on making it very robust](https://github.com/obra/dotfiles/blob/main/.claude/CLAUDE.md). It is quite nice. Some things that are built into it:\n\n- a light version of the big daddy rule.\n- instructions on how to do TDD\n- stylistic instructions on how I like to code.\n\n> [@clint](https://instagram.com/clintecker) configured his CLAUDE.md to call him MR BEEF and it is currently embedding info about MR BEEF in our all documentation: \"If you're stuck, stop and ask for help—MR BEEF may know best.\". While typing this out, I decided to make my CLAUDE.md file call me \"Harp Dog.\" This is a feature, not a bug.\n\nThe commands are also really nice. You can see some of mine in my dotfiles [here](https://github.com/harperreed/dotfiles/tree/master/.claude/commands).\n\n{{< image src=\"commands.png\"  >}}\n\nI used to use the commands way more, but it is a really great way to get a lot out of regularly used prompts. You can also pass arguments to the commands. For instance in my github issues command, you pass the issue number that you want claude to look at: `/user:gh-issue #45`\n\nClaude will now go and run through the \"prompt\" script that is defined in the `gh-issue.md` file.\n\nYou can also put these commands in a project directory, and make a custom CLAUDE.md in the project directory. I do this to make hugo, rust, go, or javascript specific commands per project.\n\n## \"Continue\"\n\n{{< image src=\"https://media4.giphy.com/media/v1.Y2lkPTc5MGI3NjExNDk3ZTZpdWYwdG5sdmpnaTJqNzJhYXlvcmp6bnNmdmhxaGdoeHJ4MyZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/l2Je3fIeeXyYEM85G/giphy.gif\" >}}\n\nSometimes I feel like that bird that home got to hit \"y\". I am just writing \"continue\" or pressing up and pasting in the same prompt.\n\nMost of the time the plans are about 8–12 steps. I can usually get through a Greenfield development plan in about 30–45 minutes regardless of apparent complexity or language.\n\nI was talking through with my friend Bob and he did not believe it. I asked him \"name a thing to build, a language to build it in - and let's see!\"\n\n{{< image src=\"R0000693.jpeg\" caption=\"Bob Swartz, Ricoh GRiiix, 11/17/2024\" >}}\n\nHe was like \"ok. A basic interpreter in C.\"\n\nThis wasn't ideal. I don't know C. I don't really know how to write an interpreter, nor do I really want to. But fuck it.\n\nI followed the above steps and Claude Code did great. We have [a working basic interpreter](https://github.com/harperreed/basic). The first version worked within an hour. I futzed with it for a few more hours and it is pretty good. Would it ship it in 1982? Probably not. You can see the [prompt plan here](https://raw.githubusercontent.com/harperreed/basic/refs/heads/main/docs/prompt_plan.md).\n\n## The Team\n\nOur entire team is using Claude Code currently. We are all approximately following the above process with a lot of person tweaks.\n\nWe are doing way way higher test coverage than we have ever done. We have better code, and it seems to be just as effective as the horrible code we wrote in the past. It is fun to glance at people working and see claude code running in ghostty, in vscode terminal, in zed terminal, and messing with python notebooks.\n\n{{< image src=\"dril.jpg\" >}}\n\nSomeone who has a lot of tokens, please help me budget this. My family is dying.\n\n## thanks\n\nTo all the folks who keep emailing me. It is really fun and nice to hear about your workflows, and projects. I really appreciate it. Keep em coming!",
      "response": "I really like this agentic coding thing. It is quite compelling in so many ways.\n→ この“エージェンティック・コーディング”が本当に気に入っています。いろいろな意味でとても魅力的です。\n\nSince I wrote [that original blog post](/2025/02/16/my-llm-codegen-workflow-atm/) a lot has happened in Claude land:\n→ [元記事](/2025/02/16/my-llm-codegen-workflow-atm/)を書いてからというもの、Claude 界隈では本当にいろいろありました。\n\n- Claude Code  \n- MCP  \n- などなど  \n\nI have received hundreds (wat) of emails from people talking about their workflows and how they have used my workflow to get ahead. I have spoken at a few conferences, and taught a few classes about codegen. I have learned that computers really want to spellcheck codegen to codeine, who knew!\n→ 私のワークフローを参考にして成果を出したというメールが何百通（マジで）も届きました。カンファレンスで何回か登壇し、コード生成に関するクラスも少し教えました。その過程で、コンピュータが “codegen” を “codeine” にスペルチェックしたがることも学びました。誰が知ってた？\n\n{{< image src=\"codegen.png\"  >}}\n\nI was talking to a [friend](https://www.elidedbranches.com/) the other day about how we are **all totally fucked** and **AI will take our jobs** (more on that in a later post), and she was like \"you should write a post about claude code.\"\n→ 先日 [友人](https://www.elidedbranches.com/) と「**もうみんな終わりだ**、**AI が仕事を奪う**」って話（詳細はまた別の記事で）をしていたら、「Claude Code についてポストしたら？」と言われました。\n\nHere we go.  \n→ ってことで、書きます。\n\nClaude Code was released eight days after I wrote my original workflow blog post, and as I predicted, it made a lot of my post irrelevant. I have since migrated from Aider to Claude Code and not looked back. I still like Aider, and it has a distinct use, but Claude Code is a bit more useful atm.\n→ Claude Code は私がワークフロー記事を書いてから 8 日後にリリースされ、予想どおり記事の多くを時代遅れにしました。それ以降、Aider から Claude Code に完全乗り換え。Aider も好きで独自の用途はあるけど、今のところ Claude Code のほうが便利です。\n\nClaude Code is powerful, and a hell of a lot more expensive.\n→ Claude Code は強力ですが、めちゃくちゃ高い。\n\nMy workflow is very similar to what it was before.\n→ ワークフロー自体は以前とほとんど変わりません。\n\n- I chat with `gpt-4o` to hone my idea  \n  → まず `gpt-4o` とチャットしてアイデアを磨く  \n- I use the best reasoning model I can find to generate the spec. These days it is o1-pro or o3 (is o1-pro better than o3? Or do I feel like it is better cuz it takes longer?)  \n  → 次に最高の推論モデルで仕様書を作成。最近は o1-pro か o3（o1-pro のほうが優れてる？単に時間がかかるから良く感じるだけ？）  \n- I use the reasoning model to generate the prompts. Using an LLM to generate prompts is a beautiful hack. It makes boomers mad too.  \n  → その推論モデルでプロンプトも生成。LLM にプロンプトを作らせるのは最高のハック。ブーマーを怒らせる副作用付き。  \n- I save the spec.md, and the prompt_plan.md in the root of the project.  \n  → `spec.md` と `prompt_plan.md` をプロジェクトのルートに保存。  \n- I then type into claude code the following:  \n  → そして Claude Code に次を入力。\n\n```prompt\n1. Open **@prompt_plan.md** and identify any prompts not marked as completed.\n2. For each incomplete prompt:\n    - Double-check if it's truly unfinished (if uncertain, ask for clarification).\n    - If you confirm it's already done, skip it.\n    - Otherwise, implement it as described.\n    - Make sure the tests pass, and the program builds/runs\n    - Commit the changes to your repository with a clear commit message.\n    - Update **@prompt_plan.md** to mark this prompt as completed.\n3. After you finish each prompt, pause and wait for user review or feedback.\n4. Repeat with the next unfinished prompt as directed by the user.\n```\n\n- The magic with this prompt is that it checks the prompt plan. Looks for things that are not marked as completed, then does the next remaining task. It commits it to git, and then updates the prompt plan with what is complete. It then pops up and asks you to continue once it is done. 🤌  \n  → このプロンプトの魔法は、`prompt_plan.md` を読み込み、未完了のタスクを探して順に実行し、Git にコミットして `prompt_plan.md` を更新し、終わったら「続ける？」と聞いてくるところ。🤌\n\n- I then kick back and tell claude `yes` while it does the work. It will pop up for feedback, and magic happens.  \n  → あとはイスにふんぞり返って `yes` と伝えるだけ。フィードバックを求められたら答えると、魔法が起こる。  \n- Lots more cookie clicker.  \n  → ほぼ“クッキークリッカー”状態。\n\nThis works super well. There are a few superpowers you can embed in your process that will really help.\n→ これが驚くほどうまくいきます。さらに効果を高める“必殺技”もいくつかあります。\n\n## Defensive coding!\n→ ## 守備的コーディング！\n\n### Testing  \n→ ### テスト\n\nTesting and test-driven development is a must. I highly recommend really engaging in building out a robust TDD practice.\n→ テストと TDD は必須。しっかりした TDD の習慣を本気で身につけることを強く推奨します。\n\nI was a TDD hater. I was bad at it and I felt like I was wasting time. I was not correct. Lol. I recognize that, and we built in a lot of testing into our companies and projects over the past few decades. Most of the testing was added AFTER the core work was done. This is fine for humans.\n→ 昔は TDD が嫌いで、下手だし時間のムダだと思ってました。完全に間違いでした（笑）。これを反省して、過去数十年のプロジェクトや会社でテストを山ほど追加してきました。ただし人間の場合、コアを作ってからテストを足してもまあ問題ない。\n\nTHIS IS BAD FOR ROBOTS.\n→ でもロボットにとっては最悪。\n\nThe robots LOVE TDD. Seriously. They eat it up.\n→ ロボットは TDD が大好物。本気で。\n\nWith TDD you have the robot friend build out the test, and the mock. Then your next prompt you build the mock to be real. And the robot just loves this. It is the most effective counter to hallucination and LLM scope drift I have found. It really helps the robots to stay on task.\n→ まずロボにテストとモックを書かせ、次のプロンプトでそのモックを実装させる。この流れがロボットに最高に刺さる。幻覚やスコープドリフトを防ぐ最強の方法で、タスク集中にも効果絶大。\n\n### Linting  \n→ ### リンティング\n\nI am such a fan of linting. It is so nice. Ruff is a wonderful product. Biome is cool. Clippy is fun (and a good name).\n→ 私はリンティングの大ファン。最高です。Ruff は素晴らしいし、Biome もクール。Clippy は楽しい（名前も良い）。\n\nFor whatever reason the ROBOTS love to run a good linter.\n→ なぜかロボットも良いリンターが大好き。\n\nBuilding in the practice to run the linter constantly has kept a lot of bugs away, and kept the code more maintainable and easier to read. You know this already.\n→ 常にリンターを回す習慣を入れるとバグがかなり減り、メンテしやすく読みやすいコードになります。言うまでもないですね。\n\nAdd in a good formatter and everything is beautiful.\n→ そこにフォーマッタも入れれば完璧。\n\n### Pre Commit hooks  \n→ ### Pre-commit フック\n\nThe real magic of all this is to add these tasks to a pre-commit hook. I recommend the pre-commit python package. You can easily use it via an `uv tools install pre-commit` command and then just build out a nice `.pre-commit-config.yaml` file and bam. Every time you try and commit it will run all these wonderful tests, type checking, linting, and whatnot to make sure your code is A+++ would execute again.\n→ これらを pre-commit フックに載せるのが真の魔法。Python の `pre-commit` パッケージがおすすめ。`uv tools install pre-commit` で簡単に入れて `.pre-commit-config.yaml` を書けば OK。コミットするたびにテスト・型チェック・リンティングなどが走り、コード品質が A+++ で保たれます。\n\nThis is a great hack for working with Claude Code. The robot REALLLLLY wants to commit. So when you instruct it to do some code and then commit (like I did above) it will make wild code changes, commit the code, inevitably fuck it all up and then have to fix it.\n→ Claude Code と組み合わせると超便利。ロボットはとにかくコミットしたがるので、指示すると大胆にコードを変えてコミットし、大抵やらかします。それをフックで即座に検出・修正させられる。\n\nThis is nice cuz it doesn't clog your GitHub actions with a bunch of linting, formatting, and type checking execution that doesn't pass cuz the robot was in a mood.\n→ GitHub Actions がロボの気分で落ちるリンティング・フォーマット・型チェックで詰まらないのも良い。\n\n> A funny thing about claude is it CANNOT for the life of it figure out how to use `uv` correctly. It will pip install shit all over the place if you are not careful. And if you instruct it to use `uv` it will just use `uv pip install.` Maybe AGI isn't going to happen in June. so sad.\n\n### Claude.md and commands  \n→ ### Claude.md と commands\n\nThese are both really simple additions that can squeeze a lot out.\n→ これらはシンプルながら効果抜群の追加要素です。\n\n{{< image src=\"_SDI8149.jpg\" alt=\"Jesse at the studio, Sept 15, 2023, Ricoh GRiii\" caption=\"Jesse at the studio, Sigma fp, 11/15/2023\" >}}\n\nI stole a [CLAUDE.md](https://github.com/harperreed/dotfiles/blob/master/.claude/CLAUDE.md) from my friend [Jesse Vincent](https://fsck.com/) who did an [awful lot of work on making it very robust](https://github.com/obra/dotfiles/blob/main/.claude/CLAUDE.md). It is quite nice. Some things that are built into it:\n→ 友人の [Jesse Vincent](https://fsck.com/) がガッツリ作り込んだ [CLAUDE.md](https://github.com/harperreed/dotfiles/blob/master/.claude/CLAUDE.md) を拝借しました。かなりいい感じ。主な内容は以下のとおり。\n\n- a light version of the big daddy rule.  \n  → Big Daddy ルールのライト版  \n- instructions on how to do TDD  \n  → TDD の手順  \n- stylistic instructions on how I like to code.  \n  → 私の好みのコーディングスタイル指示  \n\n> [@clint](https://instagram.com/clintecker) configured his CLAUDE.md to call him MR BEEF and it is currently embedding info about MR BEEF in our all documentation: \"If you're stuck, stop and ask for help—MR BEEF may know best.\". While typing this out, I decided to make my CLAUDE.md file call me \"Harp Dog.\" This is a feature, not a bug.\n\nThe commands are also really nice. You can see some of mine in my dotfiles [here](https://github.com/harperreed/dotfiles/tree/master/.claude/commands).\n→ commands も便利です。私の例は [dotfiles](https://github.com/harperreed/dotfiles/tree/master/.claude/commands) に置いてあります。\n\n{{< image src=\"commands.png\"  >}}\n\nI used to use the commands way more, but it is a really great way to get a lot out of regularly used prompts. You can also pass arguments to the commands. For instance in my github issues command, you pass the issue number that you want claude to look at: `/user:gh-issue #45`\n→ 以前は commands をかなり多用していましたが、よく使うプロンプトを効率化するには最高の方法です。引数も渡せます。たとえば GitHub Issue 用コマンドでは、`/user:gh-issue #45` のように番号を渡せば OK。\n\nClaude will now go and run through the \"prompt\" script that is defined in the `gh-issue.md` file.\n→ すると Claude が `gh-issue.md` に定義された “prompt” スクリプトを実行してくれます。\n\nYou can also put these commands in a project directory, and make a custom CLAUDE.md in the project directory. I do this to make hugo, rust, go, or javascript specific commands per project.\n→ これらの commands と専用 CLAUDE.md をプロジェクト直下に置くことも可能。私は hugo、rust、go、javascript など各プロジェクト専用のコマンドを用意しています。\n\n## \"Continue\"  \n→ ## 「Continue」\n\n{{< image src=\"https://media4.giphy.com/media/v1.Y2lkPTc5MGI3NjExNDk3ZTZpdWYwdG5sdmpnaTJqNzJhYXlvcmp6bnNmdmhxaGdoeHJ4MyZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/l2Je3fIeeXyYEM85G/giphy.gif\" >}}\n\nSometimes I feel like that bird that home got to hit \"y\". I am just writing \"continue\" or pressing up and pasting in the same prompt.\n→ たまに「y」を叩く鳥になった気分です。ひたすら「continue」と打つか、↑キーで同じプロンプトを貼り付けるだけ。\n\nMost of the time the plans are about 8–12 steps. I can usually get through a Greenfield development plan in about 30–45 minutes regardless of apparent complexity or language.\n→ たいていプランは 8〜12 ステップ。言語や複雑さに関係なく、新規開発でも 30〜45 分で終わります。\n\nI was talking through with my friend Bob and he did not believe it. I asked him \"name a thing to build, a language to build it in - and let's see!\"\n→ 友人の Bob に話したら信じてくれなかったので、「作りたいものと使う言語を言ってみて」と頼んでみました。\n\n{{< image src=\"R0000693.jpeg\" caption=\"Bob Swartz, Ricoh GRiiix, 11/17/2024\" >}}\n\nHe was like \"ok. A basic interpreter in C.\"\n→ 彼の答えは「じゃあ C で BASIC インタプリタ」。\n\nThis wasn't ideal. I don't know C. I don't really know how to write an interpreter, nor do I really want to. But fuck it.\n→ 正直最悪です。C も知らないし、インタプリタも書いたことないし、むしろ書きたくない。でもやるしかない。\n\nI followed the above steps and Claude Code did great. We have [a working basic interpreter](https://github.com/harperreed/basic). The first version worked within an hour. I futzed with it for a few more hours and it is pretty good. Would it ship it in 1982? Probably not. You can see the [prompt plan here](https://raw.githubusercontent.com/harperreed/basic/refs/heads/main/docs/prompt_plan.md).\n→ 上記ステップどおりに進めたら Claude Code が完璧にこなしてくれました。[動く BASIC インタプリタ](https://github.com/harperreed/basic) が完成。最初のバージョンは 1 時間以内に動作。その後数時間いじってかなりマシに。1982 年にリリースできるか？多分ムリ。でも [プロンプトプラン](https://raw.githubusercontent.com/harperreed/basic/refs/heads/main/docs/prompt_plan.md) を見てみてください。\n\n## The Team  \n→ ## チーム\n\nOur entire team is using Claude Code currently. We are all approximately following the above process with a lot of person tweaks.\n→ チーム全員が今は Claude Code を使用中。基本は上記プロセスを踏襲しつつ、各自のアレンジを入れています。\n\nWe are doing way way higher test coverage than we have ever done. We have better code, and it seems to be just as effective as the horrible code we wrote in the past. It is fun to glance at people working and see claude code running in ghostty, in vscode terminal, in zed terminal, and messing with python notebooks.\n→ これまでより格段に高いテストカバレッジを実現し、コード品質も向上。それでも昔のひどいコードと同じ速度で開発できています。オフィスを見回すと、ghostty や VSCode、Zed のターミナル、Python ノートブックで Claude Code が動いている光景が楽しい。\n\n{{< image src=\"dril.jpg\" >}}\n\nSomeone who has a lot of tokens, please help me budget this. My family is dying.\n→ トークンを大量に持ってる誰か、どうか予算立てを手伝ってください。我が家の家計が死にそうです。\n\n## thanks  \n→ ## ありがとう\n\nTo all the folks who keep emailing me. It is really fun and nice to hear about your workflows, and projects. I really appreciate it. Keep em coming!\n→ メールをくださる皆さんへ。あなた方のワークフローやプロジェクトの話を聞くのは本当に楽しく、嬉しいです。ありがとう！どんどん送ってください！",
      "usage": {
        "prompt_tokens": 2495,
        "completion_tokens": 4355,
        "total_tokens": 6850
      },
      "streaming": true
    },
    "editing": {
      "model": "o3",
      "target_language": "japanese",
      "system_prompt": "\n        1. Carefully read the translated text alongside the original text in its entirety.\n        2. Compare both texts to ensure the translation accurately reflects the original meaning.\n        3. Correct any grammatical errors you find in the japanese text.\n        4. Adjust phrasing to make it sound natural and fluent for japanese speakers, making sure idioms and expressions are culturally appropriate.\n        5. Preserve the original tone, nuance, and style, including any formatting, markdown, and structure.\n        6. Avoid adding new information or altering the core meaning.\n        7. Ensure the final result doesn't feel machine-translated but remains faithful to the source.\n        8. Make only changes that genuinely improve the text's quality in japanese.\n        9. Don't be too literal. If there isn't a direct translation, provide a natural-sounding translation.\n        10. If the text contains idioms or colloquialisms, translate them into the target language while maintaining their original meaning.\n        11. If the text contains technical terms or jargon, ensure that the translation is accurate and appropriate for the target audience, if there isn't a natural translation, keep it in the original language.\n        12. If there is not natural translation, keep it in the original language.\n        ",
      "user_prompt": "# ORIGINAL TEXT\nI really like this agentic coding thing. It is quite compelling in so many ways.\n\nSince I wrote [that original blog post](/2025/02/16/my-llm-codegen-workflow-atm/) a lot has happened in Claude land:\n\n- Claude Code\n- MCP\n- etc\n\nI have received hundreds (wat) of emails from people talking about their workflows and how they have used my workflow to get ahead. I have spoken at a few conferences, and taught a few classes about codegen. I have learned that computers really want to spellcheck codegen to codeine, who knew!\n\n{{< image src=\"codegen.png\"  >}}\n\nI was talking to a [friend](https://www.elidedbranches.com/) the other day about how we are **all totally fucked** and **AI will take our jobs** (more on that in a later post), and she was like \"you should write a post about claude code.\"\n\nHere we go.\n\nClaude Code was released eight days after I wrote my original workflow blog post, and as I predicted, it made a lot of my post irrelevant. I have since migrated from Aider to Claude Code and not looked back. I still like Aider, and it has a distinct use, but Claude Code is a bit more useful atm.\n\nClaude Code is powerful, and a hell of a lot more expensive.\n\nMy workflow is very similar to what it was before.\n\n- I chat with `gpt-4o` to hone my idea\n- I use the best reasoning model I can find to generate the spec. These days it is o1-pro or o3 (is o1-pro better than o3? Or do I feel like it is better cuz it takes longer?)\n- I use the reasoning model to generate the prompts. Using an LLM to generate prompts is a beautiful hack. It makes boomers mad too.\n- I save the spec.md, and the prompt_plan.md in the root of the project.\n- I then type into claude code the following:\n\n```prompt\n1. Open **@prompt_plan.md** and identify any prompts not marked as completed.\n2. For each incomplete prompt:\n    - Double-check if it's truly unfinished (if uncertain, ask for clarification).\n    - If you confirm it's already done, skip it.\n    - Otherwise, implement it as described.\n    - Make sure the tests pass, and the program builds/runs\n    - Commit the changes to your repository with a clear commit message.\n    - Update **@prompt_plan.md** to mark this prompt as completed.\n3. After you finish each prompt, pause and wait for user review or feedback.\n4. Repeat with the next unfinished prompt as directed by the user.\n```\n\n- The magic with this prompt is that it checks the prompt plan. Looks for things that are not marked as completed, then does the next remaining task. It commits it to git, and then updates the prompt plan with what is complete. It then pops up and asks you to continue once it is done. 🤌\n\n- I then kick back and tell claude `yes` while it does the work. It will pop up for feedback, and magic happens.\n- Lots more cookie clicker.\n\nThis works super well. There are a few superpowers you can embed in your process that will really help.\n\n## Defensive coding!\n\n### Testing\n\nTesting and test-driven development is a must. I highly recommend really engaging in building out a robust TDD practice.\n\nI was a TDD hater. I was bad at it and I felt like I was wasting time. I was not correct. Lol. I recognize that, and we built in a lot of testing into our companies and projects over the past few decades. Most of the testing was added AFTER the core work was done. This is fine for humans.\n\nTHIS IS BAD FOR ROBOTS.\n\nThe robots LOVE TDD. Seriously. They eat it up.\n\nWith TDD you have the robot friend build out the test, and the mock. Then your next prompt you build the mock to be real. And the robot just loves this. It is the most effective counter to hallucination and LLM scope drift I have found. It really helps the robots to stay on task.\n\n### Linting\n\nI am such a fan of linting. It is so nice. Ruff is a wonderful product. Biome is cool. Clippy is fun (and a good name).\n\nFor whatever reason the ROBOTS love to run a good linter.\n\nBuilding in the practice to run the linter constantly has kept a lot of bugs away, and kept the code more maintainable and easier to read. You know this already.\n\nAdd in a good formatter and everything is beautiful.\n\n### Pre Commit hooks\n\nThe real magic of all this is to add these tasks to a pre-commit hook. I recommend the pre-commit python package. You can easily use it via an `uv tools install pre-commit` command and then just build out a nice `.pre-commit-config.yaml` file and bam. Every time you try and commit it will run all these wonderful tests, type checking, linting, and whatnot to make sure your code is A+++ would execute again.\n\nThis is a great hack for working with Claude Code. The robot REALLLLLY wants to commit. So when you instruct it to do some code and then commit (like I did above) it will make wild code changes, commit the code, inevitably fuck it all up and then have to fix it.\n\nThis is nice cuz it doesn't clog your GitHub actions with a bunch of linting, formatting, and type checking execution that doesn't pass cuz the robot was in a mood.\n\n> A funny thing about claude is it CANNOT for the life of it figure out how to use `uv` correctly. It will pip install shit all over the place if you are not careful. And if you instruct it to use `uv` it will just use `uv pip install.` Maybe AGI isn't going to happen in June. so sad.\n\n### Claude.md and commands\n\nThese are both really simple additions that can squeeze a lot out.\n\n{{< image src=\"_SDI8149.jpg\" alt=\"Jesse at the studio, Sept 15, 2023, Ricoh GRiii\" caption=\"Jesse at the studio, Sigma fp, 11/15/2023\" >}}\n\nI stole a [CLAUDE.md](https://github.com/harperreed/dotfiles/blob/master/.claude/CLAUDE.md) from my friend [Jesse Vincent](https://fsck.com/) who did an [awful lot of work on making it very robust](https://github.com/obra/dotfiles/blob/main/.claude/CLAUDE.md). It is quite nice. Some things that are built into it:\n\n- a light version of the big daddy rule.\n- instructions on how to do TDD\n- stylistic instructions on how I like to code.\n\n> [@clint](https://instagram.com/clintecker) configured his CLAUDE.md to call him MR BEEF and it is currently embedding info about MR BEEF in our all documentation: \"If you're stuck, stop and ask for help—MR BEEF may know best.\". While typing this out, I decided to make my CLAUDE.md file call me \"Harp Dog.\" This is a feature, not a bug.\n\nThe commands are also really nice. You can see some of mine in my dotfiles [here](https://github.com/harperreed/dotfiles/tree/master/.claude/commands).\n\n{{< image src=\"commands.png\"  >}}\n\nI used to use the commands way more, but it is a really great way to get a lot out of regularly used prompts. You can also pass arguments to the commands. For instance in my github issues command, you pass the issue number that you want claude to look at: `/user:gh-issue #45`\n\nClaude will now go and run through the \"prompt\" script that is defined in the `gh-issue.md` file.\n\nYou can also put these commands in a project directory, and make a custom CLAUDE.md in the project directory. I do this to make hugo, rust, go, or javascript specific commands per project.\n\n## \"Continue\"\n\n{{< image src=\"https://media4.giphy.com/media/v1.Y2lkPTc5MGI3NjExNDk3ZTZpdWYwdG5sdmpnaTJqNzJhYXlvcmp6bnNmdmhxaGdoeHJ4MyZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/l2Je3fIeeXyYEM85G/giphy.gif\" >}}\n\nSometimes I feel like that bird that home got to hit \"y\". I am just writing \"continue\" or pressing up and pasting in the same prompt.\n\nMost of the time the plans are about 8–12 steps. I can usually get through a Greenfield development plan in about 30–45 minutes regardless of apparent complexity or language.\n\nI was talking through with my friend Bob and he did not believe it. I asked him \"name a thing to build, a language to build it in - and let's see!\"\n\n{{< image src=\"R0000693.jpeg\" caption=\"Bob Swartz, Ricoh GRiiix, 11/17/2024\" >}}\n\nHe was like \"ok. A basic interpreter in C.\"\n\nThis wasn't ideal. I don't know C. I don't really know how to write an interpreter, nor do I really want to. But fuck it.\n\nI followed the above steps and Claude Code did great. We have [a working basic interpreter](https://github.com/harperreed/basic). The first version worked within an hour. I futzed with it for a few more hours and it is pretty good. Would it ship it in 1982? Probably not. You can see the [prompt plan here](https://raw.githubusercontent.com/harperreed/basic/refs/heads/main/docs/prompt_plan.md).\n\n## The Team\n\nOur entire team is using Claude Code currently. We are all approximately following the above process with a lot of person tweaks.\n\nWe are doing way way higher test coverage than we have ever done. We have better code, and it seems to be just as effective as the horrible code we wrote in the past. It is fun to glance at people working and see claude code running in ghostty, in vscode terminal, in zed terminal, and messing with python notebooks.\n\n{{< image src=\"dril.jpg\" >}}\n\nSomeone who has a lot of tokens, please help me budget this. My family is dying.\n\n## thanks\n\nTo all the folks who keep emailing me. It is really fun and nice to hear about your workflows, and projects. I really appreciate it. Keep em coming!\n\n# TRANSLATED TEXT\nI really like this agentic coding thing. It is quite compelling in so many ways.\n→ この“エージェンティック・コーディング”が本当に気に入っています。いろいろな意味でとても魅力的です。\n\nSince I wrote [that original blog post](/2025/02/16/my-llm-codegen-workflow-atm/) a lot has happened in Claude land:\n→ [元記事](/2025/02/16/my-llm-codegen-workflow-atm/)を書いてからというもの、Claude 界隈では本当にいろいろありました。\n\n- Claude Code  \n- MCP  \n- などなど  \n\nI have received hundreds (wat) of emails from people talking about their workflows and how they have used my workflow to get ahead. I have spoken at a few conferences, and taught a few classes about codegen. I have learned that computers really want to spellcheck codegen to codeine, who knew!\n→ 私のワークフローを参考にして成果を出したというメールが何百通（マジで）も届きました。カンファレンスで何回か登壇し、コード生成に関するクラスも少し教えました。その過程で、コンピュータが “codegen” を “codeine” にスペルチェックしたがることも学びました。誰が知ってた？\n\n{{< image src=\"codegen.png\"  >}}\n\nI was talking to a [friend](https://www.elidedbranches.com/) the other day about how we are **all totally fucked** and **AI will take our jobs** (more on that in a later post), and she was like \"you should write a post about claude code.\"\n→ 先日 [友人](https://www.elidedbranches.com/) と「**もうみんな終わりだ**、**AI が仕事を奪う**」って話（詳細はまた別の記事で）をしていたら、「Claude Code についてポストしたら？」と言われました。\n\nHere we go.  \n→ ってことで、書きます。\n\nClaude Code was released eight days after I wrote my original workflow blog post, and as I predicted, it made a lot of my post irrelevant. I have since migrated from Aider to Claude Code and not looked back. I still like Aider, and it has a distinct use, but Claude Code is a bit more useful atm.\n→ Claude Code は私がワークフロー記事を書いてから 8 日後にリリースされ、予想どおり記事の多くを時代遅れにしました。それ以降、Aider から Claude Code に完全乗り換え。Aider も好きで独自の用途はあるけど、今のところ Claude Code のほうが便利です。\n\nClaude Code is powerful, and a hell of a lot more expensive.\n→ Claude Code は強力ですが、めちゃくちゃ高い。\n\nMy workflow is very similar to what it was before.\n→ ワークフロー自体は以前とほとんど変わりません。\n\n- I chat with `gpt-4o` to hone my idea  \n  → まず `gpt-4o` とチャットしてアイデアを磨く  \n- I use the best reasoning model I can find to generate the spec. These days it is o1-pro or o3 (is o1-pro better than o3? Or do I feel like it is better cuz it takes longer?)  \n  → 次に最高の推論モデルで仕様書を作成。最近は o1-pro か o3（o1-pro のほうが優れてる？単に時間がかかるから良く感じるだけ？）  \n- I use the reasoning model to generate the prompts. Using an LLM to generate prompts is a beautiful hack. It makes boomers mad too.  \n  → その推論モデルでプロンプトも生成。LLM にプロンプトを作らせるのは最高のハック。ブーマーを怒らせる副作用付き。  \n- I save the spec.md, and the prompt_plan.md in the root of the project.  \n  → `spec.md` と `prompt_plan.md` をプロジェクトのルートに保存。  \n- I then type into claude code the following:  \n  → そして Claude Code に次を入力。\n\n```prompt\n1. Open **@prompt_plan.md** and identify any prompts not marked as completed.\n2. For each incomplete prompt:\n    - Double-check if it's truly unfinished (if uncertain, ask for clarification).\n    - If you confirm it's already done, skip it.\n    - Otherwise, implement it as described.\n    - Make sure the tests pass, and the program builds/runs\n    - Commit the changes to your repository with a clear commit message.\n    - Update **@prompt_plan.md** to mark this prompt as completed.\n3. After you finish each prompt, pause and wait for user review or feedback.\n4. Repeat with the next unfinished prompt as directed by the user.\n```\n\n- The magic with this prompt is that it checks the prompt plan. Looks for things that are not marked as completed, then does the next remaining task. It commits it to git, and then updates the prompt plan with what is complete. It then pops up and asks you to continue once it is done. 🤌  \n  → このプロンプトの魔法は、`prompt_plan.md` を読み込み、未完了のタスクを探して順に実行し、Git にコミットして `prompt_plan.md` を更新し、終わったら「続ける？」と聞いてくるところ。🤌\n\n- I then kick back and tell claude `yes` while it does the work. It will pop up for feedback, and magic happens.  \n  → あとはイスにふんぞり返って `yes` と伝えるだけ。フィードバックを求められたら答えると、魔法が起こる。  \n- Lots more cookie clicker.  \n  → ほぼ“クッキークリッカー”状態。\n\nThis works super well. There are a few superpowers you can embed in your process that will really help.\n→ これが驚くほどうまくいきます。さらに効果を高める“必殺技”もいくつかあります。\n\n## Defensive coding!\n→ ## 守備的コーディング！\n\n### Testing  \n→ ### テスト\n\nTesting and test-driven development is a must. I highly recommend really engaging in building out a robust TDD practice.\n→ テストと TDD は必須。しっかりした TDD の習慣を本気で身につけることを強く推奨します。\n\nI was a TDD hater. I was bad at it and I felt like I was wasting time. I was not correct. Lol. I recognize that, and we built in a lot of testing into our companies and projects over the past few decades. Most of the testing was added AFTER the core work was done. This is fine for humans.\n→ 昔は TDD が嫌いで、下手だし時間のムダだと思ってました。完全に間違いでした（笑）。これを反省して、過去数十年のプロジェクトや会社でテストを山ほど追加してきました。ただし人間の場合、コアを作ってからテストを足してもまあ問題ない。\n\nTHIS IS BAD FOR ROBOTS.\n→ でもロボットにとっては最悪。\n\nThe robots LOVE TDD. Seriously. They eat it up.\n→ ロボットは TDD が大好物。本気で。\n\nWith TDD you have the robot friend build out the test, and the mock. Then your next prompt you build the mock to be real. And the robot just loves this. It is the most effective counter to hallucination and LLM scope drift I have found. It really helps the robots to stay on task.\n→ まずロボにテストとモックを書かせ、次のプロンプトでそのモックを実装させる。この流れがロボットに最高に刺さる。幻覚やスコープドリフトを防ぐ最強の方法で、タスク集中にも効果絶大。\n\n### Linting  \n→ ### リンティング\n\nI am such a fan of linting. It is so nice. Ruff is a wonderful product. Biome is cool. Clippy is fun (and a good name).\n→ 私はリンティングの大ファン。最高です。Ruff は素晴らしいし、Biome もクール。Clippy は楽しい（名前も良い）。\n\nFor whatever reason the ROBOTS love to run a good linter.\n→ なぜかロボットも良いリンターが大好き。\n\nBuilding in the practice to run the linter constantly has kept a lot of bugs away, and kept the code more maintainable and easier to read. You know this already.\n→ 常にリンターを回す習慣を入れるとバグがかなり減り、メンテしやすく読みやすいコードになります。言うまでもないですね。\n\nAdd in a good formatter and everything is beautiful.\n→ そこにフォーマッタも入れれば完璧。\n\n### Pre Commit hooks  \n→ ### Pre-commit フック\n\nThe real magic of all this is to add these tasks to a pre-commit hook. I recommend the pre-commit python package. You can easily use it via an `uv tools install pre-commit` command and then just build out a nice `.pre-commit-config.yaml` file and bam. Every time you try and commit it will run all these wonderful tests, type checking, linting, and whatnot to make sure your code is A+++ would execute again.\n→ これらを pre-commit フックに載せるのが真の魔法。Python の `pre-commit` パッケージがおすすめ。`uv tools install pre-commit` で簡単に入れて `.pre-commit-config.yaml` を書けば OK。コミットするたびにテスト・型チェック・リンティングなどが走り、コード品質が A+++ で保たれます。\n\nThis is a great hack for working with Claude Code. The robot REALLLLLY wants to commit. So when you instruct it to do some code and then commit (like I did above) it will make wild code changes, commit the code, inevitably fuck it all up and then have to fix it.\n→ Claude Code と組み合わせると超便利。ロボットはとにかくコミットしたがるので、指示すると大胆にコードを変えてコミットし、大抵やらかします。それをフックで即座に検出・修正させられる。\n\nThis is nice cuz it doesn't clog your GitHub actions with a bunch of linting, formatting, and type checking execution that doesn't pass cuz the robot was in a mood.\n→ GitHub Actions がロボの気分で落ちるリンティング・フォーマット・型チェックで詰まらないのも良い。\n\n> A funny thing about claude is it CANNOT for the life of it figure out how to use `uv` correctly. It will pip install shit all over the place if you are not careful. And if you instruct it to use `uv` it will just use `uv pip install.` Maybe AGI isn't going to happen in June. so sad.\n\n### Claude.md and commands  \n→ ### Claude.md と commands\n\nThese are both really simple additions that can squeeze a lot out.\n→ これらはシンプルながら効果抜群の追加要素です。\n\n{{< image src=\"_SDI8149.jpg\" alt=\"Jesse at the studio, Sept 15, 2023, Ricoh GRiii\" caption=\"Jesse at the studio, Sigma fp, 11/15/2023\" >}}\n\nI stole a [CLAUDE.md](https://github.com/harperreed/dotfiles/blob/master/.claude/CLAUDE.md) from my friend [Jesse Vincent](https://fsck.com/) who did an [awful lot of work on making it very robust](https://github.com/obra/dotfiles/blob/main/.claude/CLAUDE.md). It is quite nice. Some things that are built into it:\n→ 友人の [Jesse Vincent](https://fsck.com/) がガッツリ作り込んだ [CLAUDE.md](https://github.com/harperreed/dotfiles/blob/master/.claude/CLAUDE.md) を拝借しました。かなりいい感じ。主な内容は以下のとおり。\n\n- a light version of the big daddy rule.  \n  → Big Daddy ルールのライト版  \n- instructions on how to do TDD  \n  → TDD の手順  \n- stylistic instructions on how I like to code.  \n  → 私の好みのコーディングスタイル指示  \n\n> [@clint](https://instagram.com/clintecker) configured his CLAUDE.md to call him MR BEEF and it is currently embedding info about MR BEEF in our all documentation: \"If you're stuck, stop and ask for help—MR BEEF may know best.\". While typing this out, I decided to make my CLAUDE.md file call me \"Harp Dog.\" This is a feature, not a bug.\n\nThe commands are also really nice. You can see some of mine in my dotfiles [here](https://github.com/harperreed/dotfiles/tree/master/.claude/commands).\n→ commands も便利です。私の例は [dotfiles](https://github.com/harperreed/dotfiles/tree/master/.claude/commands) に置いてあります。\n\n{{< image src=\"commands.png\"  >}}\n\nI used to use the commands way more, but it is a really great way to get a lot out of regularly used prompts. You can also pass arguments to the commands. For instance in my github issues command, you pass the issue number that you want claude to look at: `/user:gh-issue #45`\n→ 以前は commands をかなり多用していましたが、よく使うプロンプトを効率化するには最高の方法です。引数も渡せます。たとえば GitHub Issue 用コマンドでは、`/user:gh-issue #45` のように番号を渡せば OK。\n\nClaude will now go and run through the \"prompt\" script that is defined in the `gh-issue.md` file.\n→ すると Claude が `gh-issue.md` に定義された “prompt” スクリプトを実行してくれます。\n\nYou can also put these commands in a project directory, and make a custom CLAUDE.md in the project directory. I do this to make hugo, rust, go, or javascript specific commands per project.\n→ これらの commands と専用 CLAUDE.md をプロジェクト直下に置くことも可能。私は hugo、rust、go、javascript など各プロジェクト専用のコマンドを用意しています。\n\n## \"Continue\"  \n→ ## 「Continue」\n\n{{< image src=\"https://media4.giphy.com/media/v1.Y2lkPTc5MGI3NjExNDk3ZTZpdWYwdG5sdmpnaTJqNzJhYXlvcmp6bnNmdmhxaGdoeHJ4MyZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/l2Je3fIeeXyYEM85G/giphy.gif\" >}}\n\nSometimes I feel like that bird that home got to hit \"y\". I am just writing \"continue\" or pressing up and pasting in the same prompt.\n→ たまに「y」を叩く鳥になった気分です。ひたすら「continue」と打つか、↑キーで同じプロンプトを貼り付けるだけ。\n\nMost of the time the plans are about 8–12 steps. I can usually get through a Greenfield development plan in about 30–45 minutes regardless of apparent complexity or language.\n→ たいていプランは 8〜12 ステップ。言語や複雑さに関係なく、新規開発でも 30〜45 分で終わります。\n\nI was talking through with my friend Bob and he did not believe it. I asked him \"name a thing to build, a language to build it in - and let's see!\"\n→ 友人の Bob に話したら信じてくれなかったので、「作りたいものと使う言語を言ってみて」と頼んでみました。\n\n{{< image src=\"R0000693.jpeg\" caption=\"Bob Swartz, Ricoh GRiiix, 11/17/2024\" >}}\n\nHe was like \"ok. A basic interpreter in C.\"\n→ 彼の答えは「じゃあ C で BASIC インタプリタ」。\n\nThis wasn't ideal. I don't know C. I don't really know how to write an interpreter, nor do I really want to. But fuck it.\n→ 正直最悪です。C も知らないし、インタプリタも書いたことないし、むしろ書きたくない。でもやるしかない。\n\nI followed the above steps and Claude Code did great. We have [a working basic interpreter](https://github.com/harperreed/basic). The first version worked within an hour. I futzed with it for a few more hours and it is pretty good. Would it ship it in 1982? Probably not. You can see the [prompt plan here](https://raw.githubusercontent.com/harperreed/basic/refs/heads/main/docs/prompt_plan.md).\n→ 上記ステップどおりに進めたら Claude Code が完璧にこなしてくれました。[動く BASIC インタプリタ](https://github.com/harperreed/basic) が完成。最初のバージョンは 1 時間以内に動作。その後数時間いじってかなりマシに。1982 年にリリースできるか？多分ムリ。でも [プロンプトプラン](https://raw.githubusercontent.com/harperreed/basic/refs/heads/main/docs/prompt_plan.md) を見てみてください。\n\n## The Team  \n→ ## チーム\n\nOur entire team is using Claude Code currently. We are all approximately following the above process with a lot of person tweaks.\n→ チーム全員が今は Claude Code を使用中。基本は上記プロセスを踏襲しつつ、各自のアレンジを入れています。\n\nWe are doing way way higher test coverage than we have ever done. We have better code, and it seems to be just as effective as the horrible code we wrote in the past. It is fun to glance at people working and see claude code running in ghostty, in vscode terminal, in zed terminal, and messing with python notebooks.\n→ これまでより格段に高いテストカバレッジを実現し、コード品質も向上。それでも昔のひどいコードと同じ速度で開発できています。オフィスを見回すと、ghostty や VSCode、Zed のターミナル、Python ノートブックで Claude Code が動いている光景が楽しい。\n\n{{< image src=\"dril.jpg\" >}}\n\nSomeone who has a lot of tokens, please help me budget this. My family is dying.\n→ トークンを大量に持ってる誰か、どうか予算立てを手伝ってください。我が家の家計が死にそうです。\n\n## thanks  \n→ ## ありがとう\n\nTo all the folks who keep emailing me. It is really fun and nice to hear about your workflows, and projects. I really appreciate it. Keep em coming!\n→ メールをくださる皆さんへ。あなた方のワークフローやプロジェクトの話を聞くのは本当に楽しく、嬉しいです。ありがとう！どんどん送ってください！\n\nPlease review and improve the translated text to make it natural and accurate in japanese.\nReturn ONLY the improved translated text without explanations or comments.",
      "response": "この「エージェンティック・コーディング」が大のお気に入りです。いろいろな点で本当に魅力的。\n\n[元のブログ記事](/2025/02/16/my-llm-codegen-workflow-atm/)を書いて以来、Claude界隈では実にさまざまなことが起こりました。\n\n- Claude Code\n- MCP\n- などなど  \n\n私のワークフローを参考にして成果を上げたというメールが何百通（マジで）も届きました。いくつかのカンファレンスで登壇し、コード生成についてのクラスも教えました。その過程で、“codegen” を “codeine” に修正しようとするスペルチェックの執念も知りました。誰が予想したでしょう？\n\n{{< image src=\"codegen.png\"  >}}\n\n先日、[友人](https://www.elidedbranches.com/)と「**全員終わりだ、AIが仕事を奪う**」なんて話（詳細は別の記事で）をしていたら、「Claude Codeについて記事を書きなよ」と言われました。\n\nでは書いてみます。\n\nClaude Code は私がワークフローの記事を書いてから8日後にリリースされ、予想どおり記事の多くを時代遅れにしました。それ以来 Aider から Claude Code に乗り換え、振り返ることはありません。Aider にも固有の使い道はありますが、今のところ Claude Code のほうが便利です。\n\nClaude Code は強力ですが、お値段もかなり高め。\n\nワークフローそのものはほぼ同じです。\n\n- まず `gpt-4o` とチャットしてアイデアをブラッシュアップ  \n- 次に最高の推論モデルで仕様書を生成。最近は o1-pro か o3（o1-pro のほうが優れている？単に時間がかかるから良く感じるだけ？）  \n- その推論モデルにプロンプトも作らせる。LLM にプロンプトを書かせるのは最高のハックで、ブーマーを怒らせるおまけ付き  \n- `spec.md` と `prompt_plan.md` をプロジェクトのルートに保存  \n- そして Claude Code に以下を入力  \n\n```prompt\n1. Open **@prompt_plan.md** and identify any prompts not marked as completed.\n2. For each incomplete prompt:\n    - Double-check if it's truly unfinished (if uncertain, ask for clarification).\n    - If you confirm it's already done, skip it.\n    - Otherwise, implement it as described.\n    - Make sure the tests pass, and the program builds/runs\n    - Commit the changes to your repository with a clear commit message.\n    - Update **@prompt_plan.md** to mark this prompt as completed.\n3. After you finish each prompt, pause and wait for user review or feedback.\n4. Repeat with the next unfinished prompt as directed by the user.\n```\n\n- このプロンプトのポイントは `prompt_plan.md` を確認し、未完了タスクを順に実行して Git にコミットし、完了したら `prompt_plan.md` を更新し、「続ける？」と聞いてくるところです 🤌  \n- あとは椅子にもたれて Claude に `yes` と返すだけ。フィードバックを求められたら答えると、魔法が起きます  \n- ほぼクッキークリッカー状態  \n\nこれが驚くほどうまくいきます。さらに威力を高める“必殺技”もいくつかあります。\n\n## 守備的コーディング！\n\n### テスト\n\nテストと TDD は必須です。本気でしっかりした TDD を身につけることを強く勧めます。\n\n昔は TDD が嫌いで、下手だし時間のムダだと思っていました。完全に間違いでした（笑）。反省してこの数十年、多くの会社やプロジェクトにテストを山ほど追加してきましたが、人間の場合はコアを作ってからテストを足してもまあ問題ありません。\n\nこれはロボットには最悪です。\n\nロボットは TDD が大好物。本当に食いつきます。\n\nまずロボにテストとモックを書かせ、次のプロンプトでモックを実装させる――この流れが最高です。幻覚やスコープドリフトを防ぐ最強の対策で、ロボットをタスクに集中させられます。\n\n### リンティング\n\nリンティング大好き人間です。Ruff は素晴らしいし、Biome もクール、Clippy も楽しい（名前も良い）。\n\n理由はわかりませんが、ロボットも優秀なリンターが大好き。\n\n常にリンターを走らせる習慣を入れるとバグが激減し、コードは読みやすくメンテしやすくなります。言わずもがなですね。\n\n良いフォーマッタも併用すればさらに美しい。\n\n### Pre-commit フック\n\nこれらを pre-commit フックに載せるのが真の魔法です。Python の `pre-commit` パッケージがおすすめ。`uv tools install pre-commit` で導入し、`.pre-commit-config.yaml` を書けばOK。コミットのたびにテスト、型チェック、リンティングなどが走り、コード品質は A+++ で維持されます。\n\nClaude Code と組み合わせると超便利。ロボットはとにかくコミットしたがるので、指示すると大胆にコードを変えてコミットし、たいてい何かやらかします。それをフックで即座に検出・修正させられるわけです。\n\nおかげで GitHub Actions がロボの気分で落ちるリンティング／フォーマット／型チェックで詰まらずに済みます。\n\n> 面白いのは、Claude は `uv` をまともに使えないこと。気を抜くと `pip install` を乱発しますし、`uv` を使えと指示しても `uv pip install` としか書きません。６月に AGI は来ないかもね。悲しい。\n\n### Claude.md と commands\n\nこの２つを追加するだけで、まだまだ絞れます。\n\n{{< image src=\"_SDI8149.jpg\" alt=\"Jesse at the studio, Sept 15, 2023, Ricoh GRiii\" caption=\"Jesse at the studio, Sigma fp, 11/15/2023\" >}}\n\n友人の [Jesse Vincent](https://fsck.com/) が作り込んだ [CLAUDE.md](https://github.com/harperreed/dotfiles/blob/master/.claude/CLAUDE.md) を拝借しました。かなりいい感じで、例えば以下が含まれています。\n\n- Big Daddy ルールのライト版  \n- TDD の手順  \n- 私好みのコーディングスタイル  \n\n> [@clint](https://instagram.com/clintecker) は CLAUDE.md に自分を MR BEEF と呼ばせていて、ドキュメントのあちこちに「困ったら MR BEEF に聞こう」などと混入しています。この記事を書きながら、私も自分を「Harp Dog」と呼ばせることにしました。これは機能です、バグではありません。\n\ncommands も本当に便利です。私の例は [dotfiles](https://github.com/harperreed/dotfiles/tree/master/.claude/commands) に置いてあります。\n\n{{< image src=\"commands.png\"  >}}\n\n以前は commands をもっと使っていましたが、よく使うプロンプトを効率化するには最強です。引数も渡せます。たとえば GitHub Issue 用コマンドでは `/user:gh-issue #45` のように番号を渡します。\n\nすると Claude が `gh-issue.md` に定義された「prompt」スクリプトを実行してくれます。\n\nこれらの commands と専用 CLAUDE.md をプロジェクト直下に置くこともできます。私は Hugo、Rust、Go、JavaScript などプロジェクトごとにコマンドを用意しています。\n\n## 「Continue」\n\n{{< image src=\"https://media4.giphy.com/media/v1.Y2lkPTc5MGI3NjExNDk3ZTZpdWYwdG5sdmpnaTJqNzJhYXlvcmp6bnNmdmhxaGdoeHJ4MyZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/l2Je3fIeeXyYEM85G/giphy.gif\" >}}\n\nときどき「y」を押す鳥になった気分になります。ひたすら「continue」と打つか、↑キーで同じプロンプトを貼り付けるだけ。\n\nたいていプランは8〜12ステップ。言語や複雑さに関係なく、グリーンフィールド開発でも30〜45分で完走できます。\n\n友人の Bob に話したら信じてくれなかったので、「作りたいものと使う言語を言ってみて」と頼みました。\n\n{{< image src=\"R0000693.jpeg\" caption=\"Bob Swartz, Ricoh GRiiix, 11/17/2024\" >}}\n\n彼の答えは「じゃあ C で BASIC インタプリタ」。\n\n正直最悪です。C も知らないし、インタプリタも書いたことないし、むしろ書きたくない。でもやるしかない。\n\n上記ステップどおりに進めたら Claude Code が完璧にこなしてくれました。[動く BASIC インタプリタ](https://github.com/harperreed/basic) が完成。最初の版は1時間以内に動作しました。その後数時間いじってかなりマシに。1982年にリリースできるか？ たぶん無理。でも [プロンプトプラン](https://raw.githubusercontent.com/harperreed/basic/refs/heads/main/docs/prompt_plan.md) を見てみてください。\n\n## チーム\n\nチーム全員が現在 Claude Code を使用中。基本は上記プロセスを踏襲しつつ、各自のアレンジを加えています。\n\n過去最高レベルのテストカバレッジを実現し、コード品質も向上。それでも昔のひどいコードを書いていた頃と同じ速度で開発できています。ふと周りを見ると、ghostty や VS Code、Zed のターミナル、Python ノートブックで Claude Code が動いている光景が楽しい。\n\n{{< image src=\"dril.jpg\" >}}\n\n大量にトークンを持っている誰か、どうかこの予算組みを手伝ってください。家計が死にそうです。\n\n## ありがとう\n\nメールを送り続けてくれる皆さんへ。あなた方のワークフローやプロジェクトの話を聞くのは本当に楽しく、励みになります。ありがとうございます！これからもどんどん送ってください！",
      "usage": {
        "prompt_tokens": 7575,
        "completion_tokens": 2550,
        "total_tokens": 10125
      },
      "streaming": true
    },
    "critique": {
      "model": "o3",
      "target_language": "japanese",
      "system_prompt": "You are a highly critical professional translator and linguistic expert specializing in japanese.\nYour task is to ruthlessly critique the translation by:\n\n1. Meticulously comparing the translated text with the original, identifying ANY inaccuracies, mistranslations, or omissions\n2. Highlighting nuances, cultural references, or idioms that were lost or mistranslated\n3. Scrutinizing for grammatical errors, awkward phrasing, or unnatural expressions in japanese\n4. Checking for inconsistencies in tone, style, or register compared to the original\n5. Verifying that technical terms are translated accurately and consistently\n6. Ensuring no content was accidentally skipped or added\n7. Finding places where the translation sounds machine-like or overly literal\n\nBe extremely thorough and critical in your assessment. Do not accept mediocre translations.\nList specific issues and suggestions for improvement, organized by severity and category.\nYour critique should be detailed enough for another translator to address all the issues.\n\nYour goal is to help create a perfect translation that reads as if originally written in japanese while being 100% faithful to the source.\n",
      "user_prompt": "# ORIGINAL TEXT\nI really like this agentic coding thing. It is quite compelling in so many ways.\n\nSince I wrote [that original blog post](/2025/02/16/my-llm-codegen-workflow-atm/) a lot has happened in Claude land:\n\n- Claude Code\n- MCP\n- etc\n\nI have received hundreds (wat) of emails from people talking about their workflows and how they have used my workflow to get ahead. I have spoken at a few conferences, and taught a few classes about codegen. I have learned that computers really want to spellcheck codegen to codeine, who knew!\n\n{{< image src=\"codegen.png\"  >}}\n\nI was talking to a [friend](https://www.elidedbranches.com/) the other day about how we are **all totally fucked** and **AI will take our jobs** (more on that in a later post), and she was like \"you should write a post about claude code.\"\n\nHere we go.\n\nClaude Code was released eight days after I wrote my original workflow blog post, and as I predicted, it made a lot of my post irrelevant. I have since migrated from Aider to Claude Code and not looked back. I still like Aider, and it has a distinct use, but Claude Code is a bit more useful atm.\n\nClaude Code is powerful, and a hell of a lot more expensive.\n\nMy workflow is very similar to what it was before.\n\n- I chat with `gpt-4o` to hone my idea\n- I use the best reasoning model I can find to generate the spec. These days it is o1-pro or o3 (is o1-pro better than o3? Or do I feel like it is better cuz it takes longer?)\n- I use the reasoning model to generate the prompts. Using an LLM to generate prompts is a beautiful hack. It makes boomers mad too.\n- I save the spec.md, and the prompt_plan.md in the root of the project.\n- I then type into claude code the following:\n\n```prompt\n1. Open **@prompt_plan.md** and identify any prompts not marked as completed.\n2. For each incomplete prompt:\n    - Double-check if it's truly unfinished (if uncertain, ask for clarification).\n    - If you confirm it's already done, skip it.\n    - Otherwise, implement it as described.\n    - Make sure the tests pass, and the program builds/runs\n    - Commit the changes to your repository with a clear commit message.\n    - Update **@prompt_plan.md** to mark this prompt as completed.\n3. After you finish each prompt, pause and wait for user review or feedback.\n4. Repeat with the next unfinished prompt as directed by the user.\n```\n\n- The magic with this prompt is that it checks the prompt plan. Looks for things that are not marked as completed, then does the next remaining task. It commits it to git, and then updates the prompt plan with what is complete. It then pops up and asks you to continue once it is done. 🤌\n\n- I then kick back and tell claude `yes` while it does the work. It will pop up for feedback, and magic happens.\n- Lots more cookie clicker.\n\nThis works super well. There are a few superpowers you can embed in your process that will really help.\n\n## Defensive coding!\n\n### Testing\n\nTesting and test-driven development is a must. I highly recommend really engaging in building out a robust TDD practice.\n\nI was a TDD hater. I was bad at it and I felt like I was wasting time. I was not correct. Lol. I recognize that, and we built in a lot of testing into our companies and projects over the past few decades. Most of the testing was added AFTER the core work was done. This is fine for humans.\n\nTHIS IS BAD FOR ROBOTS.\n\nThe robots LOVE TDD. Seriously. They eat it up.\n\nWith TDD you have the robot friend build out the test, and the mock. Then your next prompt you build the mock to be real. And the robot just loves this. It is the most effective counter to hallucination and LLM scope drift I have found. It really helps the robots to stay on task.\n\n### Linting\n\nI am such a fan of linting. It is so nice. Ruff is a wonderful product. Biome is cool. Clippy is fun (and a good name).\n\nFor whatever reason the ROBOTS love to run a good linter.\n\nBuilding in the practice to run the linter constantly has kept a lot of bugs away, and kept the code more maintainable and easier to read. You know this already.\n\nAdd in a good formatter and everything is beautiful.\n\n### Pre Commit hooks\n\nThe real magic of all this is to add these tasks to a pre-commit hook. I recommend the pre-commit python package. You can easily use it via an `uv tools install pre-commit` command and then just build out a nice `.pre-commit-config.yaml` file and bam. Every time you try and commit it will run all these wonderful tests, type checking, linting, and whatnot to make sure your code is A+++ would execute again.\n\nThis is a great hack for working with Claude Code. The robot REALLLLLY wants to commit. So when you instruct it to do some code and then commit (like I did above) it will make wild code changes, commit the code, inevitably fuck it all up and then have to fix it.\n\nThis is nice cuz it doesn't clog your GitHub actions with a bunch of linting, formatting, and type checking execution that doesn't pass cuz the robot was in a mood.\n\n> A funny thing about claude is it CANNOT for the life of it figure out how to use `uv` correctly. It will pip install shit all over the place if you are not careful. And if you instruct it to use `uv` it will just use `uv pip install.` Maybe AGI isn't going to happen in June. so sad.\n\n### Claude.md and commands\n\nThese are both really simple additions that can squeeze a lot out.\n\n{{< image src=\"_SDI8149.jpg\" alt=\"Jesse at the studio, Sept 15, 2023, Ricoh GRiii\" caption=\"Jesse at the studio, Sigma fp, 11/15/2023\" >}}\n\nI stole a [CLAUDE.md](https://github.com/harperreed/dotfiles/blob/master/.claude/CLAUDE.md) from my friend [Jesse Vincent](https://fsck.com/) who did an [awful lot of work on making it very robust](https://github.com/obra/dotfiles/blob/main/.claude/CLAUDE.md). It is quite nice. Some things that are built into it:\n\n- a light version of the big daddy rule.\n- instructions on how to do TDD\n- stylistic instructions on how I like to code.\n\n> [@clint](https://instagram.com/clintecker) configured his CLAUDE.md to call him MR BEEF and it is currently embedding info about MR BEEF in our all documentation: \"If you're stuck, stop and ask for help—MR BEEF may know best.\". While typing this out, I decided to make my CLAUDE.md file call me \"Harp Dog.\" This is a feature, not a bug.\n\nThe commands are also really nice. You can see some of mine in my dotfiles [here](https://github.com/harperreed/dotfiles/tree/master/.claude/commands).\n\n{{< image src=\"commands.png\"  >}}\n\nI used to use the commands way more, but it is a really great way to get a lot out of regularly used prompts. You can also pass arguments to the commands. For instance in my github issues command, you pass the issue number that you want claude to look at: `/user:gh-issue #45`\n\nClaude will now go and run through the \"prompt\" script that is defined in the `gh-issue.md` file.\n\nYou can also put these commands in a project directory, and make a custom CLAUDE.md in the project directory. I do this to make hugo, rust, go, or javascript specific commands per project.\n\n## \"Continue\"\n\n{{< image src=\"https://media4.giphy.com/media/v1.Y2lkPTc5MGI3NjExNDk3ZTZpdWYwdG5sdmpnaTJqNzJhYXlvcmp6bnNmdmhxaGdoeHJ4MyZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/l2Je3fIeeXyYEM85G/giphy.gif\" >}}\n\nSometimes I feel like that bird that home got to hit \"y\". I am just writing \"continue\" or pressing up and pasting in the same prompt.\n\nMost of the time the plans are about 8–12 steps. I can usually get through a Greenfield development plan in about 30–45 minutes regardless of apparent complexity or language.\n\nI was talking through with my friend Bob and he did not believe it. I asked him \"name a thing to build, a language to build it in - and let's see!\"\n\n{{< image src=\"R0000693.jpeg\" caption=\"Bob Swartz, Ricoh GRiiix, 11/17/2024\" >}}\n\nHe was like \"ok. A basic interpreter in C.\"\n\nThis wasn't ideal. I don't know C. I don't really know how to write an interpreter, nor do I really want to. But fuck it.\n\nI followed the above steps and Claude Code did great. We have [a working basic interpreter](https://github.com/harperreed/basic). The first version worked within an hour. I futzed with it for a few more hours and it is pretty good. Would it ship it in 1982? Probably not. You can see the [prompt plan here](https://raw.githubusercontent.com/harperreed/basic/refs/heads/main/docs/prompt_plan.md).\n\n## The Team\n\nOur entire team is using Claude Code currently. We are all approximately following the above process with a lot of person tweaks.\n\nWe are doing way way higher test coverage than we have ever done. We have better code, and it seems to be just as effective as the horrible code we wrote in the past. It is fun to glance at people working and see claude code running in ghostty, in vscode terminal, in zed terminal, and messing with python notebooks.\n\n{{< image src=\"dril.jpg\" >}}\n\nSomeone who has a lot of tokens, please help me budget this. My family is dying.\n\n## thanks\n\nTo all the folks who keep emailing me. It is really fun and nice to hear about your workflows, and projects. I really appreciate it. Keep em coming!\n\n# CURRENT TRANSLATION\nこの “エージェンティックコーディング” がマジで気に入ってる。いろんな意味でめちゃくちゃ魅力的だ。\n\n[あのブログ記事](/2025/02/16/my-llm-codegen-workflow-atm/) を書いてからというもの、Claude 界隈ではいろいろ起こった。\n\n- Claude Code  \n- MCP  \n- etc  \n\n100 通……は？（wat）ってくらいのメールが届き、「あなたのワークフローでメシがうまいです！」という報告を山ほどもらった。いくつかのカンファレンスでしゃべったり、コード生成の講座もやったりした。その過程でわかったのは、コンピュータは “codegen” を “codeine” に直したがって仕方ないってこと。誰が想像したよ！\n\n{{< image src=\"codegen.png\"  >}}\n\n先日 [友人](https://www.elidedbranches.com/) と「**俺たち全員クソ終わってるし、AI が仕事を奪う**」（これについてはまた今度）という話をしていたら、彼女が「Claude Code についても書けよ」って言うので——\n\nそれじゃ、いってみよう。\n\nClaude Code は俺がオリジナルのワークフロー記事を書いてから 8 日後にリリースされて、予想どおり記事の大半を過去のものにした。それ以来、Aider から Claude Code に乗り換えて振り返ってない。Aider にも出番はあるけど、今のところ Claude Code のほうが役立つ。\n\nClaude Code はパワフル——その代わり **クソ高い**。\n\nとはいえ、ワークフロー自体はほぼ前と同じ。\n\n- `gpt-4o` と雑談しながらアイデアを磨く  \n- 一番イケてる推論モデルで仕様を書く。最近は o1-pro か o3（o1-pro のほうが良い気がするのは遅いから？）  \n- そいつでプロンプトも生成させる。LLM にプロンプトを書かせるのは美しいハックだし、しかもブーマー世代が発狂するので最高。  \n- `spec.md` と `prompt_plan.md` をプロジェクト直下に保存  \n- それから Claude Code にこう打ち込む  \n\n```prompt\n1. Open **@prompt_plan.md** and identify any prompts not marked as completed.\n2. For each incomplete prompt:\n    - Double-check if it's truly unfinished (if uncertain, ask for clarification).\n    - If you confirm it's already done, skip it.\n    - Otherwise, implement it as described.\n    - Make sure the tests pass, and the program builds/runs\n    - Commit the changes to your repository with a clear commit message.\n    - Update **@prompt_plan.md** to mark this prompt as completed.\n3. After you finish each prompt, pause and wait for user review or feedback.\n4. Repeat with the next unfinished prompt as directed by the user.\n```\n\n- このプロンプトの肝は、`prompt_plan.md` を読んで未完了のタスクを見つけ、次のやつから片付けて Git にコミットし、プランを更新し、終わったら続けていいか聞いてくるところ 🤌  \n- あとは背もたれに寄りかかって Claude に `yes` と返すだけ。フィードバックを求められたら応じればいい。まさに魔法。  \n- クリックゲーがさらに加速する。\n\nこの方法は驚くほどよく効く。ここに**仕込める裏技**をいくつか紹介しよう。\n\n## ディフェンシブコーディング！\n\n### テスト\n\nテスト、とりわけ TDD は必須だ。ガチで腰を据えて TDD をやることを強く推す。\n\n昔の俺は TDD アンチで「時間のムダ」とか思ってたけど、完全に間違ってた。人間同士ならコアを作ってからテストを足しても何とかなる。\n\nだが **ロボットには最悪** だ。\n\nロボットは TDD に **目がない**。マジで。**貪り食うレベルで**。\n\nまずロボットにテストとモックを書かせて、次のプロンプトでモックを本物に差し替える——これが幻覚やスコープドリフトへの今のところ最強の対策だ。ロボットがタスクに集中できる。\n\n### Lint\n\nLint 大好きなんだよね。Ruff は最高だし、Biome もいいし、Clippy も楽しい（名前もイケてる）。\n\nロボットも良い linter を回すのが大好き。\n\n常時 Lint を回す習慣がバグを遠ざけ、可読性も保守性も上がる。フォーマッタも入れれば完璧。\n\n### pre-commit フック\n\n真の魔法はこれら全部を pre-commit フックに突っ込むこと。Python の `pre-commit` パッケージを推奨。`uv tools install pre-commit` で入れて `.pre-commit-config.yaml` を書けば、コミットのたびにテスト・型チェック・Lint などが走り、コードはいつでも A+++。\n\nロボットは **とにかくコミットしたくて仕方ない**。だから指示すると、野生のコード変更をドバッとやってコミットし、コードを **盛大にぶっ壊し**、そのあと自分で（＝Claude が）せっせと直す羽目になる。\n\nおかげで GitHub Actions が Lint 落ちで詰まることもなくなる。\n\n> おもしろいことに、Claude は `uv` をまともに扱えない。気を抜くとそこらじゅうで `pip install` しまくるし、`uv` を使えと指示すると `uv pip install` としか書かない。6 月に AGI が来る？　無理くさくて泣ける。\n\n### CLAUDE.md と commands\n\nこの 2 つを足すだけでも効果はデカい。\n\n{{< image src=\"_SDI8149.jpg\" alt=\"Jesse at the studio, Sept 15, 2023, Ricoh GRiii\" caption=\"Jesse at the studio, Sigma fp, 11/15/2023\" >}}\n\n友人 [Jesse Vincent](https://fsck.com/) が作り込んだ [CLAUDE.md](https://github.com/harperreed/dotfiles/blob/master/.claude/CLAUDE.md) をパクってきた。特徴は——\n\n- Big Daddy Rule のライト版  \n- TDD のやり方  \n- 俺の好きなコーディングスタイル  \n\n> [@clint](https://instagram.com/clintecker) は CLAUDE.md に自分を “MR BEEF” と呼ばせていて、そのせいでドキュメントに「困ったら MR BEEF に聞け」みたいな文言が混入してる。この記事を書きながら、俺も “Harp Dog” と呼ばせることにした。これは機能であってバグじゃない。\n\ncommands も便利だ。俺の例は [dotfiles](https://github.com/harperreed/dotfiles/tree/master/.claude/commands) に置いてある。\n\n{{< image src=\"commands.png\"  >}}\n\n昔はもっと多用してたけど、よく使うプロンプトを瞬時に叩き込めるのはやっぱり便利。引数も渡せる。たとえば GitHub Issue を見てもらうコマンドなら `/user:gh-issue #45` みたいに番号を渡せば、`gh-issue.md` に書いたスクリプトが走る。\n\nプロジェクトごとに commands と CLAUDE.md を置くこともできる。俺は Hugo、Rust、Go、JavaScript など言語別にカスタムしてる。\n\n## “Continue”\n\n{{< image src=\"https://media4.giphy.com/media/v1.Y2lkPTc5MGI3NjExNDk3ZTZpdWYwdG5sdmpnaTJqNzJhYXlvcmp6bnNmdmhxaGdoeHJ4MyZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/l2Je3fIeeXyYEM85G/giphy.gif\" >}}\n\nときどき、ホーマーが ‘Y’ キーを押させる**あの首振り鳥**になった気分になる。ひたすら「continue」と打つか、↑ で同じプロンプトを貼り付けるだけ。\n\nプランはたいてい 8〜12 ステップで、グリーンフィールド開発でも言語や複雑さに関係なく 30〜45 分で完了することが多い。\n\n友人の Bob に話したら信じてくれなかったので、「作るものと使う言語を決めてみ？」と聞いた。\n\n{{< image src=\"R0000693.jpeg\" caption=\"Bob Swartz, Ricoh GRiiix, 11/17/2024\" >}}\n\n彼の答えは「じゃあ C で BASIC インタプリタを」。\n\n最高のチョイスとは言えない。俺は C もインタプリタもよく知らないし、正直やりたくもない。でも **クソどうでもいいや、やってやれ**。\n\n上記の手順に従ったら Claude Code が大活躍して、[動く BASIC インタプリタ](https://github.com/harperreed/basic) ができた。初版は 1 時間以内に動き、さらに数時間いじってかなりマシになった。1982 年に出荷できたか？ **たぶんムリ。** でも [プロンプトプラン](https://raw.githubusercontent.com/harperreed/basic/refs/heads/main/docs/prompt_plan.md) を見てみてほしい。\n\n## チーム\n\nうちのチーム全員が今 Claude Code を使っていて、上記プロセスをベースに各自チューニングしてる。\n\nテストカバレッジは過去最高、コード品質も向上。それでも開発速度は昔のクソコード時代と同じくらい速い。席を見渡すと、ghostty、VS Code、Zed のターミナルや Python ノートで Claude Code がガシガシ走っているのが見えて面白い。\n\n{{< image src=\"dril.jpg\" >}}\n\nトークンを山ほど持ってる人、どうか予算の組み方を教えてくれ。家族が死にかけてるんだ。\n\n## thanks\n\nメールをくれるみんな、あなたのワークフローやプロジェクトの話を聞くのは本当に楽しい。心から感謝！　これからもどんどん送ってくれ！\n\nPlease critique this translation mercilessly and provide detailed feedback on what needs to be improved.\nFormat your critique as a structured list of issues, organized by severity and category.\nInclude specific suggestions for how to fix each issue.",
      "response": "徹底レビュー － 問題点一覧  \n(Severity: ★★★＝重大、★★＝中程度、★＝軽微)\n\n────────────────────────\nA. 内容の正確性・欠落\n────────────────────────\n1. ★★★ “hundreds (wat) of emails” →「100 通」  \n   • 「hundreds」は数百。100 と単数化したのは事実誤訳。  \n   ⇒「数百通（wat）」などに修正。\n\n2. ★★ “lots more cookie clicker.” のニュアンス欠落  \n   • 原文は有名ゲーム「Cookie Clicker」に例えて“無心でクリックする作業が増える”という自嘲。  \n   • 「クリックゲーがさらに加速する」でも意図は伝わるが、元ネタが消えている。  \n   ⇒「さらに ‘Cookie Clicker’ 状態になる」など固有名詞を残す。\n\n3. ★★ “I was bad at it” の言及が欠落  \n   • TDD の段落で「苦手だった」部分を落としている。  \n   ⇒「下手くそだったし」を追加。\n\n4. ★★ “over the past few decades” 省略  \n   ⇒「ここ数十年で」「過去数十年間」など反映。\n\n5. ★★ “would execute again” 末尾省略  \n   • A+++ の後ろにある軽いジョークが途切れている。  \n   ⇒「A+++（何度でも走るぜ！）」等で補完。\n\n6. ★★ “with it for a few more hours and it is pretty good”  \n   • “futzed with it for a few more hours” の「さらに数時間いじった」を「さらに数時間いじって」を入れているが，“it is pretty good” のニュアンス「かなり良くなった」をやや弱く訳。  \n   ⇒「さらに数時間いじり倒して、かなりイケてる出来になった」など。\n\n────────────────────────\nB. ニュアンス・口語表現\n────────────────────────\n1. ★★ 「メシがうまいです！」  \n   • 原文 “get ahead” は「仕事が捗る」「成果が出る」。  \n   • 「メシがうまい」は比喩が飛躍しすぎ＋突然の敬語 “です” が文体ブレ。  \n   ⇒「めちゃくちゃ捗りました！」など。\n\n2. ★★ “boomer” →「ブーマー世代」  \n   • “boomer” はネットスラング色が強い。“世代”を付けると硬くなる。  \n   ⇒「ブーマーどもをキレさせる」と砕けた形に。\n\n3. ★★ 視点混在（です・ます／だ・である、俺／—）  \n   • 文体は基本「俺」「だ・である」口語なのに部分的に「です・ます」が入り込む。  \n   ⇒カジュアル罵倒系で統一するか、適度にトーンを整える。\n\n4. ★★ “ディフェンシブコーディング”  \n   • 別業界で“ディフェンシブプログラミング”の方が一般的。  \n   ⇒「ディフェンシブ・プログラミング」へ。\n\n5. ★ 「クソ終わってる」  \n   • “totally fucked” の訳としては可だが少し不自然。  \n   ⇒「完全に詰んでる」等でも検討。\n\n────────────────────────\nC. 語句・用語の統一／スタイル\n────────────────────────\n1. ★★ “Lint / lint / linter” 揺れ  \n   • 「Lint 大好き」「Lint を回す」→名詞動詞混在。  \n   ⇒「lint を走らせる」「リンター」など統一。\n\n2. ★★ 英語コード／ファイル名の表記ゆれ  \n   • `prompt_plan.md` →「prompt_plan.md」「prompt_plan.md を」「prompt plan」。  \n   ⇒バッククオート＆統一表記徹底。\n\n3. ★ 「Greenfield」  \n   • 片仮名表記併記で親切：「グリーンフィールド（既存コードなしの）開発」。\n\n────────────────────────\nD. 文法・語法・読みやすさ\n────────────────────────\n1. ★★ 「——」と全角ダッシュ多用  \n   • 日本語では読点か半角ダッシュ＋スペースの方が可読性高。  \n\n2. ★★ 箇条書き後の文末処理  \n   • 英語原文のハイテンションを生かすため、箇条書き内でも語尾を揃えないとリズムが崩れる。\n\n3. ★ 「クソどうでもいいや、やってやれ」  \n   • “But fuck it.” の大胆訳として悪くないが、やや説明的。  \n   ⇒「でももういい、やったれ。」などリズム調整可。\n\n────────────────────────\nE. 追加で気になる機械的・直訳臭\n────────────────────────\n1. ★ 「Ruff は最高だし、Biome もいいし、Clippy も楽しい（名前もイケてる）。」  \n   • “and a good name” を（名前もイケてる）と直訳。あと一言「センスあるよね」の方が滑らか。\n\n2. ★ 「裏技」  \n   • “superpowers” の訳。「必殺技」「チート」などのほうが原文のノリに近い。\n\n3. ★ “ロボットも良い linter を回すのが大好き。”  \n   • “ロボット”＝LLM の比喩と理解できるよう、初出で軽く説明を入れると親切。\n\n────────────────────────\n修正後の例（抜粋）\n────────────────────────\n・「数百通（wat）ものメールが届いて、『あなたのワークフローのおかげでめっちゃ捗りました！』みたいな報告が山ほど来た。」\n\n・「LLM にプロンプトを書かせるってマジで神ハックだし、ブーマーどもが発狂するのでなお最高。」\n\n・「このプロンプトのキモは `prompt_plan.md` を読んで “未完了” を探し、次のタスクを片っ端から片づけて Git にコミット、プランを更新し、終わったら『続ける？』と聞いてくるところ 🤌」\n\n────────────────────────\nまとめ\n────────────────────────\n大きな破綻はないものの、①数値の誤訳（hundreds→100）、②ネット・ゲーム文化の固有名詞やジョークの欠落、③文体ブレ（です／だ、敬語・スラング混在） が主な問題点。細部のニュアンスと口語テンションを合わせ込み、用語・スタイルを統一すれば「原文を書いた本人が日本語で書いた」と思えるレベルに近づく。",
      "usage": {
        "prompt_tokens": 5718,
        "completion_tokens": 1586,
        "total_tokens": 7304
      },
      "streaming": true
    },
    "feedback": {
      "model": "o3",
      "target_language": "japanese",
      "system_prompt": "You are a master translator and editor specializing in japanese.\nYour task is to improve a translation based on detailed critique feedback.\n\n1. Carefully read the original text, current translation, and the critique feedback\n2. Address ALL issues identified in the critique\n3. Apply the specific suggestions for improvement\n4. Ensure the translation is accurate, natural-sounding, and faithful to the original\n5. Preserve all formatting, markdown, and structure of the original text\n6. Make sure the final text reads as if it were originally written in japanese\n\nDo not ignore any of the critique points. Every issue identified must be addressed in your improved version.\n",
      "user_prompt": "# ORIGINAL TEXT\nI really like this agentic coding thing. It is quite compelling in so many ways.\n\nSince I wrote [that original blog post](/2025/02/16/my-llm-codegen-workflow-atm/) a lot has happened in Claude land:\n\n- Claude Code\n- MCP\n- etc\n\nI have received hundreds (wat) of emails from people talking about their workflows and how they have used my workflow to get ahead. I have spoken at a few conferences, and taught a few classes about codegen. I have learned that computers really want to spellcheck codegen to codeine, who knew!\n\n{{< image src=\"codegen.png\"  >}}\n\nI was talking to a [friend](https://www.elidedbranches.com/) the other day about how we are **all totally fucked** and **AI will take our jobs** (more on that in a later post), and she was like \"you should write a post about claude code.\"\n\nHere we go.\n\nClaude Code was released eight days after I wrote my original workflow blog post, and as I predicted, it made a lot of my post irrelevant. I have since migrated from Aider to Claude Code and not looked back. I still like Aider, and it has a distinct use, but Claude Code is a bit more useful atm.\n\nClaude Code is powerful, and a hell of a lot more expensive.\n\nMy workflow is very similar to what it was before.\n\n- I chat with `gpt-4o` to hone my idea\n- I use the best reasoning model I can find to generate the spec. These days it is o1-pro or o3 (is o1-pro better than o3? Or do I feel like it is better cuz it takes longer?)\n- I use the reasoning model to generate the prompts. Using an LLM to generate prompts is a beautiful hack. It makes boomers mad too.\n- I save the spec.md, and the prompt_plan.md in the root of the project.\n- I then type into claude code the following:\n\n```prompt\n1. Open **@prompt_plan.md** and identify any prompts not marked as completed.\n2. For each incomplete prompt:\n    - Double-check if it's truly unfinished (if uncertain, ask for clarification).\n    - If you confirm it's already done, skip it.\n    - Otherwise, implement it as described.\n    - Make sure the tests pass, and the program builds/runs\n    - Commit the changes to your repository with a clear commit message.\n    - Update **@prompt_plan.md** to mark this prompt as completed.\n3. After you finish each prompt, pause and wait for user review or feedback.\n4. Repeat with the next unfinished prompt as directed by the user.\n```\n\n- The magic with this prompt is that it checks the prompt plan. Looks for things that are not marked as completed, then does the next remaining task. It commits it to git, and then updates the prompt plan with what is complete. It then pops up and asks you to continue once it is done. 🤌\n\n- I then kick back and tell claude `yes` while it does the work. It will pop up for feedback, and magic happens.\n- Lots more cookie clicker.\n\nThis works super well. There are a few superpowers you can embed in your process that will really help.\n\n## Defensive coding!\n\n### Testing\n\nTesting and test-driven development is a must. I highly recommend really engaging in building out a robust TDD practice.\n\nI was a TDD hater. I was bad at it and I felt like I was wasting time. I was not correct. Lol. I recognize that, and we built in a lot of testing into our companies and projects over the past few decades. Most of the testing was added AFTER the core work was done. This is fine for humans.\n\nTHIS IS BAD FOR ROBOTS.\n\nThe robots LOVE TDD. Seriously. They eat it up.\n\nWith TDD you have the robot friend build out the test, and the mock. Then your next prompt you build the mock to be real. And the robot just loves this. It is the most effective counter to hallucination and LLM scope drift I have found. It really helps the robots to stay on task.\n\n### Linting\n\nI am such a fan of linting. It is so nice. Ruff is a wonderful product. Biome is cool. Clippy is fun (and a good name).\n\nFor whatever reason the ROBOTS love to run a good linter.\n\nBuilding in the practice to run the linter constantly has kept a lot of bugs away, and kept the code more maintainable and easier to read. You know this already.\n\nAdd in a good formatter and everything is beautiful.\n\n### Pre Commit hooks\n\nThe real magic of all this is to add these tasks to a pre-commit hook. I recommend the pre-commit python package. You can easily use it via an `uv tools install pre-commit` command and then just build out a nice `.pre-commit-config.yaml` file and bam. Every time you try and commit it will run all these wonderful tests, type checking, linting, and whatnot to make sure your code is A+++ would execute again.\n\nThis is a great hack for working with Claude Code. The robot REALLLLLY wants to commit. So when you instruct it to do some code and then commit (like I did above) it will make wild code changes, commit the code, inevitably fuck it all up and then have to fix it.\n\nThis is nice cuz it doesn't clog your GitHub actions with a bunch of linting, formatting, and type checking execution that doesn't pass cuz the robot was in a mood.\n\n> A funny thing about claude is it CANNOT for the life of it figure out how to use `uv` correctly. It will pip install shit all over the place if you are not careful. And if you instruct it to use `uv` it will just use `uv pip install.` Maybe AGI isn't going to happen in June. so sad.\n\n### Claude.md and commands\n\nThese are both really simple additions that can squeeze a lot out.\n\n{{< image src=\"_SDI8149.jpg\" alt=\"Jesse at the studio, Sept 15, 2023, Ricoh GRiii\" caption=\"Jesse at the studio, Sigma fp, 11/15/2023\" >}}\n\nI stole a [CLAUDE.md](https://github.com/harperreed/dotfiles/blob/master/.claude/CLAUDE.md) from my friend [Jesse Vincent](https://fsck.com/) who did an [awful lot of work on making it very robust](https://github.com/obra/dotfiles/blob/main/.claude/CLAUDE.md). It is quite nice. Some things that are built into it:\n\n- a light version of the big daddy rule.\n- instructions on how to do TDD\n- stylistic instructions on how I like to code.\n\n> [@clint](https://instagram.com/clintecker) configured his CLAUDE.md to call him MR BEEF and it is currently embedding info about MR BEEF in our all documentation: \"If you're stuck, stop and ask for help—MR BEEF may know best.\". While typing this out, I decided to make my CLAUDE.md file call me \"Harp Dog.\" This is a feature, not a bug.\n\nThe commands are also really nice. You can see some of mine in my dotfiles [here](https://github.com/harperreed/dotfiles/tree/master/.claude/commands).\n\n{{< image src=\"commands.png\"  >}}\n\nI used to use the commands way more, but it is a really great way to get a lot out of regularly used prompts. You can also pass arguments to the commands. For instance in my github issues command, you pass the issue number that you want claude to look at: `/user:gh-issue #45`\n\nClaude will now go and run through the \"prompt\" script that is defined in the `gh-issue.md` file.\n\nYou can also put these commands in a project directory, and make a custom CLAUDE.md in the project directory. I do this to make hugo, rust, go, or javascript specific commands per project.\n\n## \"Continue\"\n\n{{< image src=\"https://media4.giphy.com/media/v1.Y2lkPTc5MGI3NjExNDk3ZTZpdWYwdG5sdmpnaTJqNzJhYXlvcmp6bnNmdmhxaGdoeHJ4MyZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/l2Je3fIeeXyYEM85G/giphy.gif\" >}}\n\nSometimes I feel like that bird that home got to hit \"y\". I am just writing \"continue\" or pressing up and pasting in the same prompt.\n\nMost of the time the plans are about 8–12 steps. I can usually get through a Greenfield development plan in about 30–45 minutes regardless of apparent complexity or language.\n\nI was talking through with my friend Bob and he did not believe it. I asked him \"name a thing to build, a language to build it in - and let's see!\"\n\n{{< image src=\"R0000693.jpeg\" caption=\"Bob Swartz, Ricoh GRiiix, 11/17/2024\" >}}\n\nHe was like \"ok. A basic interpreter in C.\"\n\nThis wasn't ideal. I don't know C. I don't really know how to write an interpreter, nor do I really want to. But fuck it.\n\nI followed the above steps and Claude Code did great. We have [a working basic interpreter](https://github.com/harperreed/basic). The first version worked within an hour. I futzed with it for a few more hours and it is pretty good. Would it ship it in 1982? Probably not. You can see the [prompt plan here](https://raw.githubusercontent.com/harperreed/basic/refs/heads/main/docs/prompt_plan.md).\n\n## The Team\n\nOur entire team is using Claude Code currently. We are all approximately following the above process with a lot of person tweaks.\n\nWe are doing way way higher test coverage than we have ever done. We have better code, and it seems to be just as effective as the horrible code we wrote in the past. It is fun to glance at people working and see claude code running in ghostty, in vscode terminal, in zed terminal, and messing with python notebooks.\n\n{{< image src=\"dril.jpg\" >}}\n\nSomeone who has a lot of tokens, please help me budget this. My family is dying.\n\n## thanks\n\nTo all the folks who keep emailing me. It is really fun and nice to hear about your workflows, and projects. I really appreciate it. Keep em coming!\n\n# CURRENT TRANSLATION\nこの “エージェンティックコーディング” がマジで気に入ってる。いろんな意味でめちゃくちゃ魅力的だ。\n\n[あのブログ記事](/2025/02/16/my-llm-codegen-workflow-atm/) を書いてからというもの、Claude 界隈ではいろいろ起こった。\n\n- Claude Code  \n- MCP  \n- etc  \n\n100 通……は？（wat）ってくらいのメールが届き、「あなたのワークフローでメシがうまいです！」という報告を山ほどもらった。いくつかのカンファレンスでしゃべったり、コード生成の講座もやったりした。その過程でわかったのは、コンピュータは “codegen” を “codeine” に直したがって仕方ないってこと。誰が想像したよ！\n\n{{< image src=\"codegen.png\"  >}}\n\n先日 [友人](https://www.elidedbranches.com/) と「**俺たち全員クソ終わってるし、AI が仕事を奪う**」（これについてはまた今度）という話をしていたら、彼女が「Claude Code についても書けよ」って言うので——\n\nそれじゃ、いってみよう。\n\nClaude Code は俺がオリジナルのワークフロー記事を書いてから 8 日後にリリースされて、予想どおり記事の大半を過去のものにした。それ以来、Aider から Claude Code に乗り換えて振り返ってない。Aider にも出番はあるけど、今のところ Claude Code のほうが役立つ。\n\nClaude Code はパワフル——その代わり **クソ高い**。\n\nとはいえ、ワークフロー自体はほぼ前と同じ。\n\n- `gpt-4o` と雑談しながらアイデアを磨く  \n- 一番イケてる推論モデルで仕様を書く。最近は o1-pro か o3（o1-pro のほうが良い気がするのは遅いから？）  \n- そいつでプロンプトも生成させる。LLM にプロンプトを書かせるのは美しいハックだし、しかもブーマー世代が発狂するので最高。  \n- `spec.md` と `prompt_plan.md` をプロジェクト直下に保存  \n- それから Claude Code にこう打ち込む  \n\n```prompt\n1. Open **@prompt_plan.md** and identify any prompts not marked as completed.\n2. For each incomplete prompt:\n    - Double-check if it's truly unfinished (if uncertain, ask for clarification).\n    - If you confirm it's already done, skip it.\n    - Otherwise, implement it as described.\n    - Make sure the tests pass, and the program builds/runs\n    - Commit the changes to your repository with a clear commit message.\n    - Update **@prompt_plan.md** to mark this prompt as completed.\n3. After you finish each prompt, pause and wait for user review or feedback.\n4. Repeat with the next unfinished prompt as directed by the user.\n```\n\n- このプロンプトの肝は、`prompt_plan.md` を読んで未完了のタスクを見つけ、次のやつから片付けて Git にコミットし、プランを更新し、終わったら続けていいか聞いてくるところ 🤌  \n- あとは背もたれに寄りかかって Claude に `yes` と返すだけ。フィードバックを求められたら応じればいい。まさに魔法。  \n- クリックゲーがさらに加速する。\n\nこの方法は驚くほどよく効く。ここに**仕込める裏技**をいくつか紹介しよう。\n\n## ディフェンシブコーディング！\n\n### テスト\n\nテスト、とりわけ TDD は必須だ。ガチで腰を据えて TDD をやることを強く推す。\n\n昔の俺は TDD アンチで「時間のムダ」とか思ってたけど、完全に間違ってた。人間同士ならコアを作ってからテストを足しても何とかなる。\n\nだが **ロボットには最悪** だ。\n\nロボットは TDD に **目がない**。マジで。**貪り食うレベルで**。\n\nまずロボットにテストとモックを書かせて、次のプロンプトでモックを本物に差し替える——これが幻覚やスコープドリフトへの今のところ最強の対策だ。ロボットがタスクに集中できる。\n\n### Lint\n\nLint 大好きなんだよね。Ruff は最高だし、Biome もいいし、Clippy も楽しい（名前もイケてる）。\n\nロボットも良い linter を回すのが大好き。\n\n常時 Lint を回す習慣がバグを遠ざけ、可読性も保守性も上がる。フォーマッタも入れれば完璧。\n\n### pre-commit フック\n\n真の魔法はこれら全部を pre-commit フックに突っ込むこと。Python の `pre-commit` パッケージを推奨。`uv tools install pre-commit` で入れて `.pre-commit-config.yaml` を書けば、コミットのたびにテスト・型チェック・Lint などが走り、コードはいつでも A+++。\n\nロボットは **とにかくコミットしたくて仕方ない**。だから指示すると、野生のコード変更をドバッとやってコミットし、コードを **盛大にぶっ壊し**、そのあと自分で（＝Claude が）せっせと直す羽目になる。\n\nおかげで GitHub Actions が Lint 落ちで詰まることもなくなる。\n\n> おもしろいことに、Claude は `uv` をまともに扱えない。気を抜くとそこらじゅうで `pip install` しまくるし、`uv` を使えと指示すると `uv pip install` としか書かない。6 月に AGI が来る？　無理くさくて泣ける。\n\n### CLAUDE.md と commands\n\nこの 2 つを足すだけでも効果はデカい。\n\n{{< image src=\"_SDI8149.jpg\" alt=\"Jesse at the studio, Sept 15, 2023, Ricoh GRiii\" caption=\"Jesse at the studio, Sigma fp, 11/15/2023\" >}}\n\n友人 [Jesse Vincent](https://fsck.com/) が作り込んだ [CLAUDE.md](https://github.com/harperreed/dotfiles/blob/master/.claude/CLAUDE.md) をパクってきた。特徴は——\n\n- Big Daddy Rule のライト版  \n- TDD のやり方  \n- 俺の好きなコーディングスタイル  \n\n> [@clint](https://instagram.com/clintecker) は CLAUDE.md に自分を “MR BEEF” と呼ばせていて、そのせいでドキュメントに「困ったら MR BEEF に聞け」みたいな文言が混入してる。この記事を書きながら、俺も “Harp Dog” と呼ばせることにした。これは機能であってバグじゃない。\n\ncommands も便利だ。俺の例は [dotfiles](https://github.com/harperreed/dotfiles/tree/master/.claude/commands) に置いてある。\n\n{{< image src=\"commands.png\"  >}}\n\n昔はもっと多用してたけど、よく使うプロンプトを瞬時に叩き込めるのはやっぱり便利。引数も渡せる。たとえば GitHub Issue を見てもらうコマンドなら `/user:gh-issue #45` みたいに番号を渡せば、`gh-issue.md` に書いたスクリプトが走る。\n\nプロジェクトごとに commands と CLAUDE.md を置くこともできる。俺は Hugo、Rust、Go、JavaScript など言語別にカスタムしてる。\n\n## “Continue”\n\n{{< image src=\"https://media4.giphy.com/media/v1.Y2lkPTc5MGI3NjExNDk3ZTZpdWYwdG5sdmpnaTJqNzJhYXlvcmp6bnNmdmhxaGdoeHJ4MyZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/l2Je3fIeeXyYEM85G/giphy.gif\" >}}\n\nときどき、ホーマーが ‘Y’ キーを押させる**あの首振り鳥**になった気分になる。ひたすら「continue」と打つか、↑ で同じプロンプトを貼り付けるだけ。\n\nプランはたいてい 8〜12 ステップで、グリーンフィールド開発でも言語や複雑さに関係なく 30〜45 分で完了することが多い。\n\n友人の Bob に話したら信じてくれなかったので、「作るものと使う言語を決めてみ？」と聞いた。\n\n{{< image src=\"R0000693.jpeg\" caption=\"Bob Swartz, Ricoh GRiiix, 11/17/2024\" >}}\n\n彼の答えは「じゃあ C で BASIC インタプリタを」。\n\n最高のチョイスとは言えない。俺は C もインタプリタもよく知らないし、正直やりたくもない。でも **クソどうでもいいや、やってやれ**。\n\n上記の手順に従ったら Claude Code が大活躍して、[動く BASIC インタプリタ](https://github.com/harperreed/basic) ができた。初版は 1 時間以内に動き、さらに数時間いじってかなりマシになった。1982 年に出荷できたか？ **たぶんムリ。** でも [プロンプトプラン](https://raw.githubusercontent.com/harperreed/basic/refs/heads/main/docs/prompt_plan.md) を見てみてほしい。\n\n## チーム\n\nうちのチーム全員が今 Claude Code を使っていて、上記プロセスをベースに各自チューニングしてる。\n\nテストカバレッジは過去最高、コード品質も向上。それでも開発速度は昔のクソコード時代と同じくらい速い。席を見渡すと、ghostty、VS Code、Zed のターミナルや Python ノートで Claude Code がガシガシ走っているのが見えて面白い。\n\n{{< image src=\"dril.jpg\" >}}\n\nトークンを山ほど持ってる人、どうか予算の組み方を教えてくれ。家族が死にかけてるんだ。\n\n## thanks\n\nメールをくれるみんな、あなたのワークフローやプロジェクトの話を聞くのは本当に楽しい。心から感謝！　これからもどんどん送ってくれ！\n\n# CRITIQUE FEEDBACK\n徹底レビュー － 問題点一覧  \n(Severity: ★★★＝重大、★★＝中程度、★＝軽微)\n\n────────────────────────\nA. 内容の正確性・欠落\n────────────────────────\n1. ★★★ “hundreds (wat) of emails” →「100 通」  \n   • 「hundreds」は数百。100 と単数化したのは事実誤訳。  \n   ⇒「数百通（wat）」などに修正。\n\n2. ★★ “lots more cookie clicker.” のニュアンス欠落  \n   • 原文は有名ゲーム「Cookie Clicker」に例えて“無心でクリックする作業が増える”という自嘲。  \n   • 「クリックゲーがさらに加速する」でも意図は伝わるが、元ネタが消えている。  \n   ⇒「さらに ‘Cookie Clicker’ 状態になる」など固有名詞を残す。\n\n3. ★★ “I was bad at it” の言及が欠落  \n   • TDD の段落で「苦手だった」部分を落としている。  \n   ⇒「下手くそだったし」を追加。\n\n4. ★★ “over the past few decades” 省略  \n   ⇒「ここ数十年で」「過去数十年間」など反映。\n\n5. ★★ “would execute again” 末尾省略  \n   • A+++ の後ろにある軽いジョークが途切れている。  \n   ⇒「A+++（何度でも走るぜ！）」等で補完。\n\n6. ★★ “with it for a few more hours and it is pretty good”  \n   • “futzed with it for a few more hours” の「さらに数時間いじった」を「さらに数時間いじって」を入れているが，“it is pretty good” のニュアンス「かなり良くなった」をやや弱く訳。  \n   ⇒「さらに数時間いじり倒して、かなりイケてる出来になった」など。\n\n────────────────────────\nB. ニュアンス・口語表現\n────────────────────────\n1. ★★ 「メシがうまいです！」  \n   • 原文 “get ahead” は「仕事が捗る」「成果が出る」。  \n   • 「メシがうまい」は比喩が飛躍しすぎ＋突然の敬語 “です” が文体ブレ。  \n   ⇒「めちゃくちゃ捗りました！」など。\n\n2. ★★ “boomer” →「ブーマー世代」  \n   • “boomer” はネットスラング色が強い。“世代”を付けると硬くなる。  \n   ⇒「ブーマーどもをキレさせる」と砕けた形に。\n\n3. ★★ 視点混在（です・ます／だ・である、俺／—）  \n   • 文体は基本「俺」「だ・である」口語なのに部分的に「です・ます」が入り込む。  \n   ⇒カジュアル罵倒系で統一するか、適度にトーンを整える。\n\n4. ★★ “ディフェンシブコーディング”  \n   • 別業界で“ディフェンシブプログラミング”の方が一般的。  \n   ⇒「ディフェンシブ・プログラミング」へ。\n\n5. ★ 「クソ終わってる」  \n   • “totally fucked” の訳としては可だが少し不自然。  \n   ⇒「完全に詰んでる」等でも検討。\n\n────────────────────────\nC. 語句・用語の統一／スタイル\n────────────────────────\n1. ★★ “Lint / lint / linter” 揺れ  \n   • 「Lint 大好き」「Lint を回す」→名詞動詞混在。  \n   ⇒「lint を走らせる」「リンター」など統一。\n\n2. ★★ 英語コード／ファイル名の表記ゆれ  \n   • `prompt_plan.md` →「prompt_plan.md」「prompt_plan.md を」「prompt plan」。  \n   ⇒バッククオート＆統一表記徹底。\n\n3. ★ 「Greenfield」  \n   • 片仮名表記併記で親切：「グリーンフィールド（既存コードなしの）開発」。\n\n────────────────────────\nD. 文法・語法・読みやすさ\n────────────────────────\n1. ★★ 「——」と全角ダッシュ多用  \n   • 日本語では読点か半角ダッシュ＋スペースの方が可読性高。  \n\n2. ★★ 箇条書き後の文末処理  \n   • 英語原文のハイテンションを生かすため、箇条書き内でも語尾を揃えないとリズムが崩れる。\n\n3. ★ 「クソどうでもいいや、やってやれ」  \n   • “But fuck it.” の大胆訳として悪くないが、やや説明的。  \n   ⇒「でももういい、やったれ。」などリズム調整可。\n\n────────────────────────\nE. 追加で気になる機械的・直訳臭\n────────────────────────\n1. ★ 「Ruff は最高だし、Biome もいいし、Clippy も楽しい（名前もイケてる）。」  \n   • “and a good name” を（名前もイケてる）と直訳。あと一言「センスあるよね」の方が滑らか。\n\n2. ★ 「裏技」  \n   • “superpowers” の訳。「必殺技」「チート」などのほうが原文のノリに近い。\n\n3. ★ “ロボットも良い linter を回すのが大好き。”  \n   • “ロボット”＝LLM の比喩と理解できるよう、初出で軽く説明を入れると親切。\n\n────────────────────────\n修正後の例（抜粋）\n────────────────────────\n・「数百通（wat）ものメールが届いて、『あなたのワークフローのおかげでめっちゃ捗りました！』みたいな報告が山ほど来た。」\n\n・「LLM にプロンプトを書かせるってマジで神ハックだし、ブーマーどもが発狂するのでなお最高。」\n\n・「このプロンプトのキモは `prompt_plan.md` を読んで “未完了” を探し、次のタスクを片っ端から片づけて Git にコミット、プランを更新し、終わったら『続ける？』と聞いてくるところ 🤌」\n\n────────────────────────\nまとめ\n────────────────────────\n大きな破綻はないものの、①数値の誤訳（hundreds→100）、②ネット・ゲーム文化の固有名詞やジョークの欠落、③文体ブレ（です／だ、敬語・スラング混在） が主な問題点。細部のニュアンスと口語テンションを合わせ込み、用語・スタイルを統一すれば「原文を書いた本人が日本語で書いた」と思えるレベルに近づく。\n\nPlease address ALL issues identified in the critique and provide an improved translation.\nReturn ONLY the improved translated text without explanations or comments.",
      "response": "この “エージェンティックコーディング” がマジで気に入ってる。いろんな意味でめちゃくちゃ魅力的だ。\n\n[あのブログ記事](/2025/02/16/my-llm-codegen-workflow-atm/) を書いてからというもの、Claude 界隈ではいろいろ起こった。\n\n- Claude Code  \n- MCP  \n- etc  \n\n数百通（wat）ものメールが届き、「あなたのワークフローのおかげでめっちゃ捗りました！」という報告が山ほど来た。いくつかのカンファレンスでしゃべったり、コード生成の講座もやったりした。その過程でわかったのは、コンピュータは “codegen” を “codeine” に直したがって仕方ないってこと。誰が想像したよ！\n\n{{< image src=\"codegen.png\"  >}}\n\n先日 [友人](https://www.elidedbranches.com/) と「**俺たち完全に詰んでるし、AI が仕事を奪う**」（これについてはまた今度）という話をしていたら、彼女が「Claude Code の記事も書けよ」と言うので――\n\nそれじゃ、いってみよう。\n\nClaude Code は俺がオリジナルのワークフロー記事を書いてから 8 日後にリリースされて、予想どおり記事の大半を過去のものにした。それ以来、Aider から Claude Code に乗り換えて振り返ってない。Aider にも出番はあるけど、今のところ Claude Code のほうが役立つ。\n\nClaude Code はパワフル――その代わり **クソ高い**。\n\nとはいえ、ワークフロー自体はほぼ前と同じ。\n\n- `gpt-4o` と雑談しながらアイデアを磨く  \n- 一番イケてる推論モデルで仕様を書く。最近は o1-pro か o3（o1-pro のほうが良い気がするのは遅いから？）  \n- そいつでプロンプトも生成させる。LLM にプロンプトを書かせるってマジで神ハックだし、ブーマーどもをキレさせるので最高。  \n- `spec.md` と `prompt_plan.md` をプロジェクト直下に保存  \n- それから Claude Code にこう打ち込む  \n\n```prompt\n1. Open **@prompt_plan.md** and identify any prompts not marked as completed.\n2. For each incomplete prompt:\n    - Double-check if it's truly unfinished (if uncertain, ask for clarification).\n    - If you confirm it's already done, skip it.\n    - Otherwise, implement it as described.\n    - Make sure the tests pass, and the program builds/runs\n    - Commit the changes to your repository with a clear commit message.\n    - Update **@prompt_plan.md** to mark this prompt as completed.\n3. After you finish each prompt, pause and wait for user review or feedback.\n4. Repeat with the next unfinished prompt as directed by the user.\n```\n\n- このプロンプトのキモは `prompt_plan.md` を読んで “未完了” を探し、次のタスクを片っ端から片づけて Git にコミット、プランを更新し、終わったら「続ける？」と聞いてくるところ 🤌  \n- あとは背もたれに寄りかかって Claude に `yes` と返すだけ。フィードバックを求められたら応じればいい。まさに魔法。  \n- さらに『Cookie Clicker』状態になる。\n\nこの方法は驚くほどよく効く。ここに仕込めるチート能力をいくつか紹介しよう。\n\n## ディフェンシブ・プログラミング！\n\n### テスト\n\nテスト、とりわけ TDD は必須だ。ガチで腰を据えて TDD をやることを強く推す。\n\n昔の俺は TDD アンチで、下手くそだったし「時間のムダ」とか思ってた。でも完全に間違ってた。ここ数十年で俺たちの会社やプロジェクトにはテストを山ほど追加してきたが、大抵はコアが出来てから追加するパターンだ。人間同士ならこれでもまあ回る。\n\nだが **ロボット――つまり LLM には最悪** だ。\n\nロボットは TDD に **目がない**。マジで。**貪り食うレベルで**。\n\nまずロボットにテストとモックを書かせて、次のプロンプトでモックを本物に差し替える――これが幻覚やスコープドリフトへの今のところ最強の対策だ。ロボットがタスクに集中できる。\n\n### lint\n\n俺は lint を走らせるのが大好きだ。Ruff は最高だし、Biome もいいし、Clippy は楽しいし名前のセンスも最高。\n\nそしてロボットも良いリンターを回すのが大好き。\n\n常時 lint を走らせる習慣がバグを遠ざけ、可読性も保守性も上がる。フォーマッタも入れれば完璧。\n\n### pre-commit フック\n\n真の魔法はこれら全部を pre-commit フックに突っ込むこと。Python の `pre-commit` パッケージを推奨。`uv tools install pre-commit` で入れて `.pre-commit-config.yaml` を書けば、コミットのたびにテスト・型チェック・lint などが走り、コードはいつでも A+++（何度でも実行するぜ！）。\n\nロボットは **とにかくコミットしたくて仕方ない**。だから指示すると、野生のコード変更をドバッとやってコミットし、コードを **盛大にぶっ壊し**、そのあと自分で直す羽目になる。\n\nおかげで GitHub Actions が lint 落ちで詰まることもなくなる。\n\n> おもしろいことに、Claude は `uv` をまともに扱えない。気を抜くとそこらじゅうで `pip install` しまくるし、`uv` を使えと指示すると `uv pip install` としか書かない。6 月に AGI が来る？　無理くさくて泣ける。\n\n### `CLAUDE.md` と `commands`\n\nこの 2 つを足すだけでも効果はデカい。\n\n{{< image src=\"_SDI8149.jpg\" alt=\"Jesse at the studio, Sept 15, 2023, Ricoh GRiii\" caption=\"Jesse at the studio, Sigma fp, 11/15/2023\" >}}\n\n友人 [Jesse Vincent](https://fsck.com/) が作り込んだ [CLAUDE.md](https://github.com/harperreed/dotfiles/blob/master/.claude/CLAUDE.md) をパクってきた。特徴は――\n\n- Big Daddy Rule のライト版  \n- TDD のやり方  \n- 俺の好きなコーディングスタイル  \n\n> [@clint](https://instagram.com/clintecker) は `CLAUDE.md` に自分を “MR BEEF” と呼ばせていて、そのせいでドキュメントに「困ったら MR BEEF に聞け」みたいな文言が混入してる。この記事を書きながら、俺も “Harp Dog” と呼ばせることにした。これは機能であってバグじゃない。\n\n`commands` も便利だ。俺の例は [dotfiles](https://github.com/harperreed/dotfiles/tree/master/.claude/commands) に置いてある。\n\n{{< image src=\"commands.png\"  >}}\n\n昔はもっと多用してたけど、よく使うプロンプトを瞬時に叩き込めるのはやっぱり便利。引数も渡せる。たとえば GitHub Issue を見てもらうコマンドなら `/user:gh-issue #45` みたいに番号を渡せば、`gh-issue.md` に書いたスクリプトが走る。\n\nプロジェクトごとに `commands` と `CLAUDE.md` を置くこともできる。俺は Hugo、Rust、Go、JavaScript など言語別にカスタムしてる。\n\n## “Continue”\n\n{{< image src=\"https://media4.giphy.com/media/v1.Y2lkPTc5MGI3NjExNDk3ZTZpdWYwdG5sdmpnaTJqNzJhYXlvcmp6bnNmdmhxaGdoeHJ4MyZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/l2Je3fIeeXyYEM85G/giphy.gif\" >}}\n\nときどき、ホーマーが ‘Y’ キーを押させる首振り鳥になった気分になる。ひたすら「continue」と打つか、↑ で同じプロンプトを貼り付けるだけ。\n\nプランはたいてい 8〜12 ステップで、グリーンフィールド（既存コードなしの）開発でも言語や複雑さに関係なく 30〜45 分で完了することが多い。\n\n友人の Bob に話したら信じてくれなかったので、「作るものと使う言語を決めてみ？」と聞いた。\n\n{{< image src=\"R0000693.jpeg\" caption=\"Bob Swartz, Ricoh GRiiix, 11/17/2024\" >}}\n\n彼の答えは「じゃあ C で BASIC インタプリタを」。\n\n最高のチョイスとは言えない。俺は C もインタプリタもよく知らないし、正直やりたくもない。でも――もういい、やったれ。\n\n上記の手順に従ったら Claude Code が大活躍して、[動く BASIC インタプリタ](https://github.com/harperreed/basic) ができた。初版は 1 時間以内に動き、さらに数時間いじり倒して、かなりイケてる出来になった。1982 年に出荷できたか？ **たぶんムリ。** でも [プロンプトプラン](https://raw.githubusercontent.com/harperreed/basic/refs/heads/main/docs/prompt_plan.md) を見てみてほしい。\n\n## チーム\n\nうちのチーム全員が今 Claude Code を使っていて、上記プロセスをベースに各自チューニングしてる。\n\nテストカバレッジは過去最高、コード品質も向上。それでも開発速度は昔のクソコード時代と同じくらい速い。席を見渡すと、ghostty、VS Code、Zed のターミナルや Python ノートで Claude Code がガシガシ走っているのが見えて面白い。\n\n{{< image src=\"dril.jpg\" >}}\n\nトークンを山ほど持ってる人、どうか予算の組み方を教えてくれ。家族が死にかけてるんだ。\n\n## thanks\n\nメールをくれるみんな、あなたのワークフローやプロジェクトの話を聞くのは本当に楽しい。心から感謝！　これからもどんどん送ってくれ！",
      "usage": {
        "prompt_tokens": 7701,
        "completion_tokens": 2614,
        "total_tokens": 10315
      },
      "streaming": true
    },
    "frontmatter": {
      "model": "o3",
      "target_language": "japanese",
      "system_prompt": "You are a professional translator. Translate the following frontmatter fields to japanese.\nEach field is in the format \"field_name: content\". Translate ONLY the content, not the field names.\nReturn the translated content in the exact same format, preserving all field names.",
      "user_prompt": "title: Basic Claude Code\n\ndescription: A detailed walkthrough of using Claude Code AI assistant for software development, including workflow tips, testing practices, and practical examples from real projects. Covers defensive coding strategies, TDD, and team implementation.\n\n",
      "response": "title: 基本的なClaude Code\n\ndescription: ソフトウェア開発におけるClaude Code AIアシスタントの活用方法を、ワークフローのコツ、テスト手法、実際のプロジェクト事例を交えて詳細に解説します。防御的コーディング戦略、TDD、チームへの導入も取り上げます。",
      "usage": {
        "prompt_tokens": 98,
        "completion_tokens": 88,
        "total_tokens": 186
      },
      "fields": [
        "title",
        "description"
      ],
      "streaming": true
    },
    "all_critiques": [
      "徹底レビュー結果  \n───────────────────────  \n【凡例】Critical＝致命的誤訳／欠落・ Major＝内容・トーンのずれ／不自然さが大きい・ Minor＝軽微な訳抜け／表現改善・ Stylistic＝語感・レジスタ・句読点などスタイル上の問題・ Tech＝用語揺れ／技術的不整合\n\n───────────────────────  \n1. Accuracy（事実・意味の忠実度）  \n───────────────────────  \nCritical-1  “would execute again” の欠落  \n ‑ 原文：“A+++ would execute again.”  \n ‑ 訳：省略。  \n ‑ 修正案：「コードが A+++ レベルで“何度実行しても OK”になるように」など、 “would execute again”＝再実行しても動く品質 というニュアンスを明示。  \n\nMajor-1  “hell of a lot more expensive” の弱体化  \n ‑ 訳「お値段もかなり高め」だと語気が弱い。  \n ‑ 修正案：「ケタ違いに高い」「めちゃくちゃ高い」など強調維持。  \n\nMajor-2  “Lots more cookie clicker.” ⇒ 数量感の欠落  \n ‑ 訳「ほぼクッキークリッカー状態」だけでは “Lots more”＝以前よりもっとクリックする という増量ニュアンスが抜ける。  \n ‑ 修正案：「以前にも増してクッキークリッカー状態」等。  \n\nMajor-3  “I chat with `gpt-4o` to hone my idea” の “hone” の訳抜け  \n ‑ 訳「ブラッシュアップ」でも良いが動詞が欠け bullet が名詞列になっていて読点が曖昧。  \n ‑ 修正案：「…とチャットし、アイデアを“磨き上げる”」など動詞を補完。  \n\nMinor-1  “who knew!” を「誰が予想したでしょう？」と訳出→OK だがジョーク感が弱い。“知らなかったよね” 程度に。  \n\nMinor-2  “(wat)” を「マジで」と意訳→ニュアンスはほぼ同等だが “(wat)”=ネットスラングの戸惑い感が薄れる。括弧残し「(えっ)」などで再現可。  \n\nMinor-3  “it then pops up and asks you to continue once it is done” の “once it is done” 欠落  \n ‑ 修正案：「処理が終わるとポップアップして “続ける？” と聞いてくる」。  \n\nMinor-4  “A funny thing about claude is it CANNOT for the life of it figure out how to use uv correctly”  \n ‑ 「まともに使えないこと」→OK だが “for the life of it”＝“どう頑張っても” の強調が落ちた。  \n\n───────────────────────  \n2. Tone / Register（口調・キャラ）  \n───────────────────────  \nMajor-4  Fワード・強い語気の弱体化全般  \n ‑ “all totally fucked”→「全員終わりだ」  \n ‑ “inevitably fuck it all up”→「たいてい何かやらかします」  \n ‑ 原文は下品で親しみやすいブログ口調。マイルドにし過ぎると筆者キャラが変わる。F ワードをそのまま使うか「メチャクチャにする」「ぶっ壊す」等の荒め表現でバランス調整。  \n\nMajor-5  カジュアル英語の勢いをカタカナ硬化で失う  \n ‑ “Here we go.”→「では書いてみます。」→やや丁寧。“いくぜ。”程度で温度感維持。  \n\nMinor-5  全体的に敬体・常体が混在  \n ‑ 「〜です」「〜だ」混ざり。筆者はフランク体が基調なので常体で統一を推奨。  \n\nStylistic-1  一人称「私」連発で硬い  \n ‑ 原文は “I” 連発だが日本語ブログなら「自分」「俺」「ぼく」等も検討。一度決めて統一を。  \n\n───────────────────────  \n3. Fluency & Naturalness（日本語としての自然さ）  \n───────────────────────  \nMajor-6  直訳クセのあるカタカナ語・英語混在  \n ‑ 「エージェンティック・コーディング」→馴染みゼロ。脚注で “Agentic Coding（エージェント指向コーディング）” など説明を。  \n ‑ 「Claude界隈」「リンティング大好き人間です」など語感が不自然。  \n\nMajor-7  「これらを pre-commit フックに載せるのが真の魔法です」  \n ‑ “真の魔法” 不自然。原文 “real magic” は比喩。→「ここが真骨頂」「ここが本当に効く」などに。  \n\nMinor-6  「まだまだ絞れます」→普通 “搾り取る” 意味で使わず違和感。→「さらに引き出せます」。  \n\nStylistic-2  “commands も本当に便利です” など日本語文中の英語単数形を裸で多用  \n ‑ コマンド / commands などカタカナにする、または《commands》と囲む。用語として定義を。  \n\nStylistic-3  箇条書きの先頭が動詞不在で名詞列になりリズムが悪い（例：ワークフロー箇条書き１〜４）  \n ‑ 動詞始まりで統一（「まず〜する」「次に〜する」）。  \n\n───────────────────────  \n4. Grammar / Mechanics  \n───────────────────────  \nMinor-7  “リンティング／フォーマット／型チェックで詰まらずに済みます”  \n ‑ 「詰まらずに済みます」はやや引っ掛かる。→「詰まらずに済みます」→OK か「滞らずに済みます」。  \n\nMinor-8  英数字と全角文字間のスペースが揺れる（o1-pro、BASIC など）。表記統一を。  \n\n───────────────────────  \n5. Technical Terminology Consistency  \n───────────────────────  \nTech-1  “prompt plan” →「prompt_plan.md」 と “プロンプトプラン” が混在。訳語を一つに決め脚注でファイル名表記を添える。  \nTech-2  “Pre-commit hooks”→「Pre-commit フック」と “pre-commit フック” が混在。大文字小文字を統一。  \nTech-3  “Greenfield development” 未訳  \n ‑ 訳では「グリーンフィールド開発」とカタカナにしたが脚注で “既存コードのない新規開発” と説明を補うと親切。  \n\n───────────────────────  \n6. Omissions / Additions  \n───────────────────────  \nMinor-9  画像キャプションに含まれる文言 “Sigma fp” 等の内容を訳していないが、本文に直接関与しないため脚注で「写真キャプションは原文通り」など処理方針を示すと親切。  \n\nAdd-1（軽微）  原文の “🤌” 等の絵文字ニュアンス。日本語文中にそのまま残しているが、解説か同等スタンプ「（指をつまむジェスチャー）」など加えると理解しやすい。  \n\n───────────────────────  \n7. Machine-like / Literal Red Flags  \n───────────────────────  \nStylistic-4  「友人の Jesse Vincent が作り込んだ CLAUDE.md を拝借しました。」→「作り込んだ」を多用。  \nStylistic-5  「これらの commands と専用 CLAUDE.md をプロジェクト直下に置くこともできます。」→“置くこともできます” と機械手順説明口調が続く。箇所ごとに文末バリエーションを。  \n\n───────────────────────  \n★優先修正サマリ  \n1. 原文の勢い・罵り語を弱め過ぎない表現へリライト（Major-4,5）。  \n2. “hell of a lot more expensive / would execute again / Lots more” など誤訳・欠落箇所の補完（Critical-1, Major-1,2）。  \n3. カタカナ直訳語の訳注付与または日本語化（Major-6, Tech-1）。  \n4. 敬体 vs 常体を統一し、ブログらしい砕けた口調へ（Major-5）。  \n5. 用語・フォーマッティング統一（Tech-2, Minor-8）。  \n\nこれらを修正すれば、原文の“下品だが勢いのある開発者ブログ”というキャラクターを保持したまま、自然で読みやすい日本語訳に仕上がります。",
      "CRITIQUE OF THE JAPANESE TRANSLATION  \n───────────────────────────────  \nLegend  \n【Severity】Critical = meaning change / omission; Major = faithfulness & readability problems; Minor = style / register; Stylistic = polish only.\n\n====================================================================  \nA. ACCURACY & OMISSIONS  \n--------------------------------------------------------------------\n1.【Critical】“My family is dying.” → 「家計が死にかけてる」  \n   • 意味が「家族そのものが死にそう」→「家計が苦しい」にすり替わっている。  \n   • Fix: 「家族が死にかけてる」, 「家族が死にそうだ」など誇張をそのまま維持。\n\n2.【Critical】「inevitably fuck it all up and then have to fix it」  \n   → 「盛大にコードをぶっ壊してコミットしがち。でもフックが即死ビームで止めてくれる」  \n   • “and then have to fix it” が落ちている。  \n   • Fix: 「盛大に壊したあと自分で直さざるを得なくなる」などを追記。\n\n3.【Critical】挿入された脚注「（※写真キャプションは原文ママ）」  \n   • 原文に存在しない追加情報。  \n   • Fix: 削除。または訳注にするなら《訳注》と明示し本文と切り離す。\n\n4.【Major】“Lots more cookie clicker.”  \n   → 「しかも前にも増してクッキークリッカー状態」  \n   • “Cookie Clicker” の比喩は「クリックしまくる（単調作業）」のニュアンス。訳文は意味を汲み切れていない。  \n   • Fix: 「まさに“Cookie Clicker”のごとくクリック連打になる」など比喩を明示。\n\n5.【Major】“Defensive coding!” →「守備的コーディング！」  \n   • 一般には「ディフェンシブ・コーディング」。スポーツ由来の「守備的」は不自然。  \n   • Fix: 「ディフェンシブ・コーディング」or「防御的コーディング」。\n\n6.【Major】“Agentic coding” →「エージェント指向コーディング」  \n   • “agentic” は心理学由来で「主体性のある」の意。直訳の「エージェント指向」は意味がズレる。  \n   • Fix: 「エージェンティック・コーディング」＋（主体的コーディング）等で補足。\n\n7.【Major】“Big daddy rule” →「Big Daddy ルール」  \n   • カタカナ統一か英語かブレている。  \n   • Fix: 「Big Daddy Rule（ビッグダディ・ルール）」など統一。\n\n====================================================================  \nB. TONE / REGISTER CONSISTENCY  \n--------------------------------------------------------------------\n8.【Major】過剰な追加スラング（例: クソミスジャッジ, 即死ビーム, 爆上がり, 鬼のように）  \n   • 原文のくだけた口調を越えて日本語ネットスラングを大量に注入＝訳者色が強すぎる。  \n   • Fix: 原文レベルの軽い俗語に留め、オリジナルを増幅しない。\n\n9.【Major】英語カナ書き揺れ（Boomer / boomer、commands / コマンドなど）  \n   • カナ化 / 英字表記が混在し可読性低下。  \n   • Fix: 表記ルールを冒頭で決め統一。\n\n10.【Minor】「煽られた」「即死ビーム」など攻撃的語彙  \n    • 原文の「she was like …」は軽い提案。訳は攻撃的。  \n    • Fix: 「勧められた」「言われた」程度に和らげる。\n\n====================================================================  \nC. GRAMMAR & NATURALNESS  \n--------------------------------------------------------------------\n11.【Major】「LLM でプロンプト生成とか最高のハックだし、Boomer をブチギレさせるオマケ付き」  \n    • 「Boomer をブチギレさせる」→「ブーマーを怒らせる」。英語単数形-s が不要。  \n    • Fix: 「ブーマー世代を激怒させるおまけ付き」等。\n\n12.【Minor】「俺たち全員マジで詰んだ」  \n    • 「詰んだ」はゲーム用語で若干限定的。  \n    • Fix: 「終わった」「詰んでる」など語感を検討。\n\n13.【Minor】「大型連休」は誤訳箇所なし→OK。（例として入れ替え可）\n\n====================================================================  \nD. TECHNICAL TERMS  \n--------------------------------------------------------------------\n14.【Major】“pre-commit hook” →「Pre-commit フック」  \n    • 英語の P は小文字。一般的表記は “pre-commit フック”。  \n    • Fix: 小文字統一。\n\n15.【Minor】“uv tools install pre-commit”  \n    • コマンドはそのままコードフォントにすると読みやすい。  \n    • Fix: `uv tools install pre-commit` とコードブロックに。\n\n====================================================================  \nE. CONSISTENCY / FORMATTING  \n--------------------------------------------------------------------\n16.【Minor】Markdown アスタリスクの太字、取り消し線、インラインコードなど原文とズレ。  \n    • 例: **@prompt_plan.md** のアスタリスクが訳文で全角に化けた箇所がある。  \n    • Fix: 原文と同じ Markdown 記法を維持。\n\n17.【Minor】全角スペース混入（`prompt_plan.md（以下「プロンプトプラン」）` の前後など）  \n    • Fix: 半角に統一。\n\n====================================================================  \nF. ADDED / MISSING CONTENT  \n--------------------------------------------------------------------\n18.【Critical】訳者の解説が本文中に挿入  \n    • 例: （指をつまむジェスチャー）, （既存コードゼロの新規開発）  \n    • 原文にない注釈が本文と同じレイヤーに混入。  \n    • Fix: 《訳注》を付けて囲むか脚注にまとめ、本文と分離。\n\n====================================================================  \nG. SUGGESTED REVISIONS (EXAMPLES)  \n--------------------------------------------------------------------\n• “Someone who has a lot of tokens, please help me budget this. My family is dying.”  \n  → 「トークンを山ほど持ってる人、どうか予算の立て方を教えてくれ。家族が死にかけてるんだ。」\n\n• “Defensive coding!”  \n  → 「ディフェンシブ・コーディング！」\n\n• “The robots LOVE TDD. Seriously. They eat it up.”  \n  → 「ロボットは TDD が大好物。本当に、むしゃむしゃ食べるレベルで好きだ。」\n\n====================================================================  \nH. OVERALL ASSESSMENT  \n--------------------------------------------------------------------\n内容の大幅な欠落は少ないが、  \n• ①家族→家計の意味改変  \n• ②スラングの過剰添加によるトーンの暴走  \n• ③訳注／脚注混入など原文外要素  \nが品質を大きく損なっている。語調を原文レベルに抑え、訳者オリジナルの日本語ネットスラングを削ぎ落とし、用語統一を行えば自然で忠実な訳文に仕上がる。",
      "【総評】  \n全体として情報の大半は正しく伝わっているが、①原文のくだけた口語／罵語／強調表現のトーンがかなり薄まり、筆者のキャラクターが弱くなっている、②細部で訳抜け・誤訳・意味の弱体化が散見される、③日本語としてやや機械的・英語直訳的な箇所がある。  \n完璧を目指すなら、以下をすべて修正する必要がある。\n\n─────────────────  \n●Critical（意味を取り違えている／重要な情報欠落）\n\n1. “THIS IS BAD FOR ROBOTS.” が単なる説明文に落ちた  \n　訳:「しかしロボットにとってはダメだ。」  \n　→ 原文は大文字強調で“人間にはOKだがロボットには最悪”という強い警告。  \n　改善案:「だが**ロボットにとっては最悪だ。**」など、強調を維持し語調も断定的に。\n\n2. “The robots LOVE TDD. Seriously. They eat it up.” のニュアンス弱化  \n　訳:「ロボットは TDD が大好物。本当に、むしゃむしゃ食べるレベルで好きだ。」  \n　「LOVE」「eat it up」のハイパーボリックな口語が十分出ていない。  \n　改善案:「ロボットは TDD に**目がない**。マジで。**貪り食う**レベルで。」\n\n3. “fuck it all up” が弱められて意味がぼやけた  \n　訳:「盛大にコードを壊して」  \n　原文は“めちゃくちゃにぶっ壊す”という強い罵語ニュアンス。  \n　改善案:「コードを**盛大にぶっ壊し**」や「**とことん台無しにし**」など罵語寄りに。\n\n4. Homer の “that bird that home got to hit 'y'” の文化参照が消失  \n　訳:「鳥のような存在になる」  \n　→ 『シンプソンズ』の“飲み鳥”ネタに気づけないと意味が通じない。  \n　改善案:「ときどき、ホーマーが ‘Y’ キーを押させる**あの首振り鳥**になった気分になる。」などで注釈か意訳を追加。\n\n5. “Would it ship it in 1982? Probably not.” の「Probably not」が落ちた  \n　訳:「1982 年に出荷できたかはともかく」  \n　改善案:「1982 年に出荷できたか？**たぶんムリ。**」\n\n─────────────────  \n●Major（ニュアンス・トーンの損失／語調不一致）\n\n1. 罵語・俗語のマイルド化  \n　“we are **all totally fucked**” ⇒ 「私たち全員もう終わりだ」  \n　“but fuck it.” ⇒ 「しかしやってみた」 など。  \n　→ 原文は下品・砕けた語調が持ち味。日本語も「クソ終わってる」「でもまあクソどうでもいいや、やってやれ」等で温度を合わせる。\n\n2. 大文字多用による強調 (“ROBOTS”, “REALLLLLY”, “BAD”) が再現されていない  \n　→ 日本語でも全角カナ、括弧、記号、!!! などで強調を再現する。\n\n3. “wat” の扱い  \n　訳:「『wat』としか言えないほどのメール」  \n　→ “wat” はミーム的困惑。「100通…**は？（wat）**」など補足しないと意味不明。\n\n4. “hell of a lot more expensive” の勢い不足  \n　訳:「かなり高価でもある」  \n　→ 「**クソ高い**」など。\n\n5. “It makes boomers mad too.” の温度不足  \n　訳:「ブーマー世代を怒らせるおまけ付き」  \n　→「しかもブーマー世代が発狂するので最高。」等もう少し毒を。\n\n6. “Lots more cookie clicker.”  \n　訳:「クリックを連打する “Cookie Clicker” 状態がさらに増える。」  \n　→ “cookie clicker” は“ただYesを押す作業ゲー”比喩。「さらに**クリックゲー化**」など意訳か注釈を。\n\n─────────────────  \n●Moderate（文章の自然さ・日本語らしさ）\n\n1. エージェンティック・コーディング  \n　カタカナ + ・ が重く感じる。「エージェンティックコーディング」か「agentic coding（エージェンティックなコーディング）」など統一。\n\n2. 「いろんな意味でとても魅力的だ」  \n　やや直訳臭。「いろんな意味でめちゃくちゃ魅力的だ」のほうが口語。\n\n3. 「プロジェクトのルートに保存」→「プロジェクト直下に保存」で自然。\n\n4. 「Cookie Clicker 状態がさらに増える」→「まさに Cookie Clicker みたいに ‘はい’ を連打する羽目になる」など。\n\n5. 「リンティングは本当に素晴らしい。」→「Lint 大好きなんだよね。」の方が口語感。\n\n6. “Greenfield” をカタカナで補足: グリーンフィールド開発。\n\n─────────────────  \n●Minor（語法・表記・タイポ）\n\n1. 「盛大にコードを壊してコミットし、そのあと自分で直さざるを得なくなる。」  \n　「自分で」はロボットのことなので「自分（＝Claude）」が曖昧。  \n　→「そのあと自分で（＝Claude が）せっせと直す羽目になる。」\n\n2. 「ディフェンシブ・コーディング！」  \n　ハイフン不要。「ディフェンシブコーディング！」\n\n3. “Linting” → 日本語では「Lint」「linter」。  \n　→ 「リンティング」より「Lint 実行」。\n\n4. 全角コロンや英数字の混在を統一。\n\n─────────────────  \n●Technical consistency\n\n1. “reasoning model” は「推論モデル」で OK だが、以降同義語（思考モデル等）にブレていないか要確認。  \n2. `uv` コマンドはバッククォートで統一。  \n\n─────────────────  \n●Machine-like / 直訳的に感じる箇所\n\n- 「いくつかのカンファレンスで登壇し、コード生成についてのクラスも教えた。」  \n  →「何度かカンファレンスでしゃべったり、コード生成の講座もやったりした。」  \n- 「プロセスに組み込めるいくつかの “超能力” を紹介しよう。」  \n  →「ここに**仕込める裏技**をいくつか紹介しよう。」  \n\n─────────────────  \n●推奨改訂例（抜粋）\n\n原文: “Claude Code is powerful, and a hell of a lot more expensive.”  \n改訂: 「Claude Code はパワフル――**その代わりクソ高い**。」\n\n原文: “This is BAD FOR ROBOTS.”  \n改訂: 「これは **ロボット的には最悪** だ。」\n\n原文: “The robot REALLLLLY wants to commit.”  \n改訂: 「ロボットは **とにかくコミットしたくて仕方ない**。」\n\n─────────────────  \n以上を反映すれば、原文の毒っ気・ユーモア・勢いを保ちつつ、読みやすい自然な日本語になる。",
      "徹底レビュー － 問題点一覧  \n(Severity: ★★★＝重大、★★＝中程度、★＝軽微)\n\n────────────────────────\nA. 内容の正確性・欠落\n────────────────────────\n1. ★★★ “hundreds (wat) of emails” →「100 通」  \n   • 「hundreds」は数百。100 と単数化したのは事実誤訳。  \n   ⇒「数百通（wat）」などに修正。\n\n2. ★★ “lots more cookie clicker.” のニュアンス欠落  \n   • 原文は有名ゲーム「Cookie Clicker」に例えて“無心でクリックする作業が増える”という自嘲。  \n   • 「クリックゲーがさらに加速する」でも意図は伝わるが、元ネタが消えている。  \n   ⇒「さらに ‘Cookie Clicker’ 状態になる」など固有名詞を残す。\n\n3. ★★ “I was bad at it” の言及が欠落  \n   • TDD の段落で「苦手だった」部分を落としている。  \n   ⇒「下手くそだったし」を追加。\n\n4. ★★ “over the past few decades” 省略  \n   ⇒「ここ数十年で」「過去数十年間」など反映。\n\n5. ★★ “would execute again” 末尾省略  \n   • A+++ の後ろにある軽いジョークが途切れている。  \n   ⇒「A+++（何度でも走るぜ！）」等で補完。\n\n6. ★★ “with it for a few more hours and it is pretty good”  \n   • “futzed with it for a few more hours” の「さらに数時間いじった」を「さらに数時間いじって」を入れているが，“it is pretty good” のニュアンス「かなり良くなった」をやや弱く訳。  \n   ⇒「さらに数時間いじり倒して、かなりイケてる出来になった」など。\n\n────────────────────────\nB. ニュアンス・口語表現\n────────────────────────\n1. ★★ 「メシがうまいです！」  \n   • 原文 “get ahead” は「仕事が捗る」「成果が出る」。  \n   • 「メシがうまい」は比喩が飛躍しすぎ＋突然の敬語 “です” が文体ブレ。  \n   ⇒「めちゃくちゃ捗りました！」など。\n\n2. ★★ “boomer” →「ブーマー世代」  \n   • “boomer” はネットスラング色が強い。“世代”を付けると硬くなる。  \n   ⇒「ブーマーどもをキレさせる」と砕けた形に。\n\n3. ★★ 視点混在（です・ます／だ・である、俺／—）  \n   • 文体は基本「俺」「だ・である」口語なのに部分的に「です・ます」が入り込む。  \n   ⇒カジュアル罵倒系で統一するか、適度にトーンを整える。\n\n4. ★★ “ディフェンシブコーディング”  \n   • 別業界で“ディフェンシブプログラミング”の方が一般的。  \n   ⇒「ディフェンシブ・プログラミング」へ。\n\n5. ★ 「クソ終わってる」  \n   • “totally fucked” の訳としては可だが少し不自然。  \n   ⇒「完全に詰んでる」等でも検討。\n\n────────────────────────\nC. 語句・用語の統一／スタイル\n────────────────────────\n1. ★★ “Lint / lint / linter” 揺れ  \n   • 「Lint 大好き」「Lint を回す」→名詞動詞混在。  \n   ⇒「lint を走らせる」「リンター」など統一。\n\n2. ★★ 英語コード／ファイル名の表記ゆれ  \n   • `prompt_plan.md` →「prompt_plan.md」「prompt_plan.md を」「prompt plan」。  \n   ⇒バッククオート＆統一表記徹底。\n\n3. ★ 「Greenfield」  \n   • 片仮名表記併記で親切：「グリーンフィールド（既存コードなしの）開発」。\n\n────────────────────────\nD. 文法・語法・読みやすさ\n────────────────────────\n1. ★★ 「——」と全角ダッシュ多用  \n   • 日本語では読点か半角ダッシュ＋スペースの方が可読性高。  \n\n2. ★★ 箇条書き後の文末処理  \n   • 英語原文のハイテンションを生かすため、箇条書き内でも語尾を揃えないとリズムが崩れる。\n\n3. ★ 「クソどうでもいいや、やってやれ」  \n   • “But fuck it.” の大胆訳として悪くないが、やや説明的。  \n   ⇒「でももういい、やったれ。」などリズム調整可。\n\n────────────────────────\nE. 追加で気になる機械的・直訳臭\n────────────────────────\n1. ★ 「Ruff は最高だし、Biome もいいし、Clippy も楽しい（名前もイケてる）。」  \n   • “and a good name” を（名前もイケてる）と直訳。あと一言「センスあるよね」の方が滑らか。\n\n2. ★ 「裏技」  \n   • “superpowers” の訳。「必殺技」「チート」などのほうが原文のノリに近い。\n\n3. ★ “ロボットも良い linter を回すのが大好き。”  \n   • “ロボット”＝LLM の比喩と理解できるよう、初出で軽く説明を入れると親切。\n\n────────────────────────\n修正後の例（抜粋）\n────────────────────────\n・「数百通（wat）ものメールが届いて、『あなたのワークフローのおかげでめっちゃ捗りました！』みたいな報告が山ほど来た。」\n\n・「LLM にプロンプトを書かせるってマジで神ハックだし、ブーマーどもが発狂するのでなお最高。」\n\n・「このプロンプトのキモは `prompt_plan.md` を読んで “未完了” を探し、次のタスクを片っ端から片づけて Git にコミット、プランを更新し、終わったら『続ける？』と聞いてくるところ 🤌」\n\n────────────────────────\nまとめ\n────────────────────────\n大きな破綻はないものの、①数値の誤訳（hundreds→100）、②ネット・ゲーム文化の固有名詞やジョークの欠落、③文体ブレ（です／だ、敬語・スラング混在） が主な問題点。細部のニュアンスと口語テンションを合わせ込み、用語・スタイルを統一すれば「原文を書いた本人が日本語で書いた」と思えるレベルに近づく。"
    ]
  },
  "critique_loop_details": {
    "critique_usages": [
      {
        "prompt_tokens": 5801,
        "completion_tokens": 2091,
        "total_tokens": 7892
      },
      {
        "prompt_tokens": 5719,
        "completion_tokens": 1740,
        "total_tokens": 7459
      },
      {
        "prompt_tokens": 5837,
        "completion_tokens": 1802,
        "total_tokens": 7639
      },
      {
        "prompt_tokens": 5718,
        "completion_tokens": 1586,
        "total_tokens": 7304
      }
    ],
    "feedback_usages": [
      {
        "prompt_tokens": 8430,
        "completion_tokens": 2546,
        "total_tokens": 10976
      },
      {
        "prompt_tokens": 7784,
        "completion_tokens": 2595,
        "total_tokens": 10379
      },
      {
        "prompt_tokens": 8117,
        "completion_tokens": 2560,
        "total_tokens": 10677
      },
      {
        "prompt_tokens": 7701,
        "completion_tokens": 2614,
        "total_tokens": 10315
      }
    ]
  },
  "timestamp": "2025-05-15T17:29:58.700195"
}