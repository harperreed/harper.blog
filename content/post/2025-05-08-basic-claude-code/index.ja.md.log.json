{
  "input_file": "index.md",
  "output_file": "index.ja.md",
  "target_language": "japanese",
  "language_code": "ja",
  "model": "o3",
  "skip_edit": false,
  "do_critique": true,
  "critique_loops": 4,
  "has_frontmatter": true,
  "translation_context": "a blog post for Harper Reed's blog about Claude Code and llm codegen",
  "token_usage": {
    "prompt_tokens": 64302,
    "completion_tokens": 24203,
    "total_tokens": 88505
  },
  "cost": "$1.6111",
  "prompts_and_responses": {
    "translation": {
      "model": "o3",
      "target_language": "japanese",
      "system_prompt": "\n        1. Read the provided text carefully, preserving all formatting, markdown, and structure exactly as they appear.\n        2. Identify any block quotes and code blocks.\n        3. Do not translate text in block quotes or in code blocks (including text within code blocks).\n        4. Translate everything else into japanese.\n        5. Maintain the original formatting, markdown, and structure in your output.\n        6. Provide a natural-sounding translation rather than a word-for-word one.\n        7. For idioms, colloquialisms, or slang, render them in an equivalent, natural way in japanese whenever possible.\n        8. If there isn't a direct or natural translation for a particular term or phrase, keep it in the original language and surround it with quotes if necessary.\n        9. Ensure that technical terms or jargon remain accurate; if there's no suitable translation, keep the original term.\n        10. Strive for fluid, native-sounding prose that retains the tone and intent of the original text.\n        11. If context about the text is provided, use it to inform your translation choices, especially regarding tone, style, and cultural adaptations.\n        ",
      "user_prompt": "# CONTEXT\na blog post for Harper Reed's blog about Claude Code and llm codegen\n\n# TEXT TO TRANSLATE\nI really like this agentic coding thing. It is quite compelling in so many ways.\n\nSince I wrote [that original blog post](/2025/02/16/my-llm-codegen-workflow-atm/) a lot has happened in Claude land:\n\n- Claude Code\n- MCP\n- etc\n\nI have received hundreds (wat) of emails from people talking about their workflows and how they have used my workflow to get ahead. I have spoken at a few conferences, and taught a few classes about codegen. I have learned that computers really want to spellcheck codegen to codeine, who knew!\n\n{{< image src=\"codegen.png\"  >}}\n\nI was talking to a [friend](https://www.elidedbranches.com/) the other day about how we are **all totally fucked** and **AI will take our jobs** (more on that in a later post), and she was like \"you should write a post about claude code.\"\n\nHere we go.\n\nClaude Code was released eight days after I wrote my original workflow blog post, and as I predicted, it made a lot of my post irrelevant. I have since migrated from Aider to Claude Code and not looked back. I still like Aider, and it has a distinct use, but Claude Code is a bit more useful atm.\n\nClaude Code is powerful, and a hell of a lot more expensive.\n\nMy workflow is very similar to what it was before.\n\n- I chat with `gpt-4o` to hone my idea\n- I use the best reasoning model I can find to generate the spec. These days it is o1-pro or o3 (is o1-pro better than o3? Or do I feel like it is better cuz it takes longer?)\n- I use the reasoning model to generate the prompts. Using an LLM to generate prompts is a beautiful hack. It makes boomers mad too.\n- I save the spec.md, and the prompt_plan.md in the root of the project.\n- I then type into claude code the following:\n\n```prompt\n1. Open **@prompt_plan.md** and identify any prompts not marked as completed.\n2. For each incomplete prompt:\n    - Double-check if it's truly unfinished (if uncertain, ask for clarification).\n    - If you confirm it's already done, skip it.\n    - Otherwise, implement it as described.\n    - Make sure the tests pass, and the program builds/runs\n    - Commit the changes to your repository with a clear commit message.\n    - Update **@prompt_plan.md** to mark this prompt as completed.\n3. After you finish each prompt, pause and wait for user review or feedback.\n4. Repeat with the next unfinished prompt as directed by the user.\n```\n\n- The magic with this prompt is that it checks the prompt plan. Looks for things that are not marked as completed, then does the next remaining task. It commits it to git, and then updates the prompt plan with what is complete. It then pops up and asks you to continue once it is done. 🤌\n\n- I then kick back and tell claude `yes` while it does the work. It will pop up for feedback, and magic happens.\n- Lots more cookie clicker.\n\nThis works super well. There are a few superpowers you can embed in your process that will really help.\n\n## Defensive coding!\n\n### Testing\n\nTesting and test-driven development is a must. I highly recommend really engaging in building out a robust TDD practice.\n\nI was a TDD hater. I was bad at it and I felt like I was wasting time. I was not correct. Lol. I recognize that, and we built in a lot of testing into our companies and projects over the past few decades. Most of the testing was added AFTER the core work was done. This is fine for humans.\n\nTHIS IS BAD FOR ROBOTS.\n\nThe robots LOVE TDD. Seriously. They eat it up.\n\nWith TDD you have the robot friend build out the test, and the mock. Then your next prompt you build the mock to be real. And the robot just loves this. It is the most effective counter to hallucination and LLM scope drift I have found. It really helps the robots to stay on task.\n\n### Linting\n\nI am such a fan of linting. It is so nice. Ruff is a wonderful product. Biome is cool. Clippy is fun (and a good name).\n\nFor whatever reason the ROBOTS love to run a good linter.\n\nBuilding in the practice to run the linter constantly has kept a lot of bugs away, and kept the code more maintainable and easier to read. You know this already.\n\nAdd in a good formatter and everything is beautiful.\n\n### Pre Commit hooks\n\nThe real magic of all this is to add these tasks to a pre-commit hook. I recommend the pre-commit python package. You can easily use it via an `uv tools install pre-commit` command and then just build out a nice `.pre-commit-config.yaml` file and bam. Every time you try and commit it will run all these wonderful tests, type checking, linting, and whatnot to make sure your code is A+++ would execute again.\n\nThis is a great hack for working with Claude Code. The robot REALLLLLY wants to commit. So when you instruct it to do some code and then commit (like I did above) it will make wild code changes, commit the code, inevitably fuck it all up and then have to fix it.\n\nThis is nice cuz it doesn't clog your GitHub actions with a bunch of linting, formatting, and type checking execution that doesn't pass cuz the robot was in a mood.\n\n> A funny thing about claude is it CANNOT for the life of it figure out how to use `uv` correctly. It will pip install shit all over the place if you are not careful. And if you instruct it to use `uv` it will just use `uv pip install.` Maybe AGI isn't going to happen in June. so sad.\n\n### Claude.md and commands\n\nThese are both really simple additions that can squeeze a lot out.\n\n{{< image src=\"_SDI8149.jpg\" alt=\"Jesse at the studio, Sept 15, 2023, Ricoh GRiii\" caption=\"Jesse at the studio, Sigma fp, 11/15/2023\" >}}\n\nI stole a [CLAUDE.md](https://github.com/harperreed/dotfiles/blob/master/.claude/CLAUDE.md) from my friend [Jesse Vincent](https://fsck.com/) who did an [awful lot of work on making it very robust](https://github.com/obra/dotfiles/blob/main/.claude/CLAUDE.md). It is quite nice. Some things that are built into it:\n\n- a light version of the big daddy rule.\n- instructions on how to do TDD\n- stylistic instructions on how I like to code.\n\n> [@clint](https://instagram.com/clintecker) configured his CLAUDE.md to call him MR BEEF and it is currently embedding info about MR BEEF in our all documentation: \"If you're stuck, stop and ask for help—MR BEEF may know best.\". While typing this out, I decided to make my CLAUDE.md file call me \"Harp Dog.\" This is a feature, not a bug.\n\nThe commands are also really nice. You can see some of mine in my dotfiles [here](https://github.com/harperreed/dotfiles/tree/master/.claude/commands).\n\n{{< image src=\"commands.png\"  >}}\n\nI used to use the commands way more, but it is a really great way to get a lot out of regularly used prompts. You can also pass arguments to the commands. For instance in my github issues command, you pass the issue number that you want claude to look at: `/user:gh-issue #45`\n\nClaude will now go and run through the \"prompt\" script that is defined in the `gh-issue.md` file.\n\nYou can also put these commands in a project directory, and make a custom CLAUDE.md in the project directory. I do this to make hugo, rust, go, or javascript specific commands per project.\n\n## \"Continue\"\n\n{{< image src=\"https://media4.giphy.com/media/v1.Y2lkPTc5MGI3NjExNDk3ZTZpdWYwdG5sdmpnaTJqNzJhYXlvcmp6bnNmdmhxaGdoeHJ4MyZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/l2Je3fIeeXyYEM85G/giphy.gif\" >}}\n\nSometimes I feel like that bird that Homer got to hit \"y\". I am just writing \"continue\" or pressing up and pasting in the same prompt.\n\nMost of the time the plans are about 8–12 steps. I can usually get through a Greenfield development plan in about 30–45 minutes regardless of apparent complexity or language.\n\nI was talking through with my friend Bob and he did not believe it. I asked him \"name a thing to build, a language to build it in - and let's see!\"\n\n{{< image src=\"R0000693.jpeg\" caption=\"Bob Swartz, Ricoh GRiiix, 11/17/2024\" >}}\n\nHe was like \"ok. A basic interpreter in C.\"\n\nThis wasn't ideal. I don't know C. I don't really know how to write an interpreter, nor do I really want to. But fuck it.\n\nI followed the above steps and Claude Code did great. We have [a working basic interpreter](https://github.com/harperreed/basic). The first version worked within an hour. I futzed with it for a few more hours and it is pretty good. Would it ship it in 1982? Probably not. You can see the [prompt plan here](https://raw.githubusercontent.com/harperreed/basic/refs/heads/main/docs/prompt_plan.md).\n\n## The Team\n\nOur entire team is using Claude Code currently. We are all approximately following the above process with a lot of person tweaks.\n\nWe are doing way way higher test coverage than we have ever done. We have better code, and it seems to be just as effective as the horrible code we wrote in the past. It is fun to glance at people working and see claude code running in ghostty, in vscode terminal, in zed terminal, and messing with python notebooks.\n\n{{< image src=\"dril.jpg\" >}}\n\nSomeone who has a lot of tokens, please help me budget this. My family is dying.\n\n## thanks\n\nTo all the folks who keep emailing me. It is really fun and nice to hear about your workflows, and projects. I really appreciate it. Keep em coming!",
      "context": "a blog post for Harper Reed's blog about Claude Code and llm codegen",
      "response": "I really like this agentic coding thing. It is quite compelling in so many ways.\n→ この“エージェント的コーディング”が本当に好きだ。いろんな意味でめちゃくちゃ魅力的。\n\nSince I wrote [that original blog post](/2025/02/16/my-llm-codegen-workflow-atm/) a lot has happened in Claude land:\n→ [あの記事](/2025/02/16/my-llm-codegen-workflow-atm/)を書いてからというもの、Claude 界隈ではいろいろ起きた。\n\n- Claude Code\n- MCP\n- etc\n→ - Claude Code  \n  - MCP  \n  - など\n\nI have received hundreds (wat) of emails from people talking about their workflows and how they have used my workflow to get ahead. I have spoken at a few conferences, and taught a few classes about codegen. I have learned that computers really want to spellcheck codegen to codeine, who knew!\n→ ワークフローについて、あるいはぼくのワークフローを活用して先を行っているというメールが何百通（マジか）も届いた。いくつかのカンファレンスで話し、codegen についてクラスもいくつか教えた。あと「codegen」を「codeine」にスペルチェックしたがる PC の癖も学んだ。まさかの薬物変換。\n\n{{< image src=\"codegen.png\"  >}}\n\nI was talking to a [friend](https://www.elidedbranches.com/) the other day about how we are **all totally fucked** and **AI will take our jobs** (more on that in a later post), and she was like \"you should write a post about claude code.\"\n→ 先日 [友人](https://www.elidedbranches.com/) と「もう**みんな終わりだ**、**AI に仕事奪われる**」みたいな話（詳しくは別記事で）をしてたら、彼女が「claude code について書きなよ」と言ってくれた。\n\nHere we go.\n→ というわけで書く。\n\nClaude Code was released eight days after I wrote my original workflow blog post, and as I predicted, it made a lot of my post irrelevant. I have since migrated from Aider to Claude Code and not looked back. I still like Aider, and it has a distinct use, but Claude Code is a bit more useful atm.\n→ Claude Code が公開されたのは、ぼくが最初のワークフロー記事を書いてからわずか 8 日後。予想どおり記事の多くが陳腐化した。それ以来、Aider から Claude Code に乗り換え、後戻りはしてない。Aider も好きだし用途はあるけど、今は Claude Code のほうがちょっと便利。\n\nClaude Code is powerful, and a hell of a lot more expensive.\n→ Claude Code は強力だけど、お値段もそれなりにヤバい。\n\nMy workflow is very similar to what it was before.\n→ ワークフロー自体は以前とほぼ同じ。\n\n- I chat with `gpt-4o` to hone my idea\n- I use the best reasoning model I can find to generate the spec. These days it is o1-pro or o3 (is o1-pro better than o3? Or do I feel like it is better cuz it takes longer?)\n- I use the reasoning model to generate the prompts. Using an LLM to generate prompts is a beautiful hack. It makes boomers mad too.\n- I save the spec.md, and the prompt_plan.md in the root of the project.\n- I then type into claude code the following:\n→ - `gpt-4o` と雑談しながらアイデアを磨く  \n  - いちばん推論力が高そうなモデルで仕様を出す。最近は o1-pro か o3（o1-pro のほうが上？　時間かかるからそう感じるだけ？）  \n  - そのモデルに “プロンプト生成” もやらせる。LLM にプロンプトを書かせるのは最強のハック。そしてベテラン勢をキレさせる副作用付き  \n  - 生成した `spec.md` と `prompt_plan.md` をプロジェクトのルートに保存  \n  - Claude Code に下記を入力  \n\n```prompt\n1. Open **@prompt_plan.md** and identify any prompts not marked as completed.\n2. For each incomplete prompt:\n    - Double-check if it's truly unfinished (if uncertain, ask for clarification).\n    - If you confirm it's already done, skip it.\n    - Otherwise, implement it as described.\n    - Make sure the tests pass, and the program builds/runs\n    - Commit the changes to your repository with a clear commit message.\n    - Update **@prompt_plan.md** to mark this prompt as completed.\n3. After you finish each prompt, pause and wait for user review or feedback.\n4. Repeat with the next unfinished prompt as directed by the user.\n```\n\n- The magic with this prompt is that it checks the prompt plan. Looks for things that are not marked as completed, then does the next remaining task. It commits it to git, and then updates the prompt plan with what is complete. It then pops up and asks you to continue once it is done. 🤌\n→ このプロンプトの魔法は、`prompt_plan.md` を読んで未完了のタスクを探し、次のタスクを実行 → git コミット → プラン更新 → 終わったらこちらに確認を求めてくるところ。🤌\n\n- I then kick back and tell claude `yes` while it does the work. It will pop up for feedback, and magic happens.\n- Lots more cookie clicker.\n→ あとは椅子にふんぞり返って `yes` と返事するだけ。フィードバックを求めてきたら答える。あとはクッキークリッカーばりに連打。\n\nThis works super well. There are a few superpowers you can embed in your process that will really help.\n→ これがめちゃくちゃうまくいく。さらに効きを良くする“スーパーパワー”もいくつかある。\n\n## Defensive coding!\n→ ## 防御的コーディング！\n\n### Testing\n→ ### テスト\n\nTesting and test-driven development is a must. I highly recommend really engaging in building out a robust TDD practice.\n→ テストと TDD は必須。ちゃんと腰を据えて TDD をやることを激推しする。\n\nI was a TDD hater. I was bad at it and I felt like I was wasting time. I was not correct. Lol. I recognize that, and we built in a lot of testing into our companies and projects over the past few decades. Most of the testing was added AFTER the core work was done. This is fine for humans.\n→ 以前は TDD アンチだった。下手くそだし、時間のムダと思ってた。でも間違ってた。笑  \n  この 10 数年で会社やプロジェクトにテスト文化を導入したけど、大半のテストはコアを書いた「あと付け」だった。人間が書く分にはそれで OK。\n\nTHIS IS BAD FOR ROBOTS.\n→ でもロボット相手だとこれは最悪。\n\nThe robots LOVE TDD. Seriously. They eat it up.\n→ ロボは TDD 大好物。マジで。\n\nWith TDD you have the robot friend build out the test, and the mock. Then your next prompt you build the mock to be real. And the robot just loves this. It is the most effective counter to hallucination and LLM scope drift I have found. It really helps the robots to stay on task.\n→ まずロボにテストとモックを書かせる → 次のプロンプトでモックを実装に置き換える。この流れがロボにとって至福らしい。幻覚 & スコープ逸脱への最強対策でもある。タスクに集中してくれる。\n\n### Linting\n→ ### リンティング\n\nI am such a fan of linting. It is so nice. Ruff is a wonderful product. Biome is cool. Clippy is fun (and a good name).\n→ リンティング大好き。最高。Ruff は神、Biome もイケてる。Clippy は面白い（名前も◎）。\n\nFor whatever reason the ROBOTS love to run a good linter.\n→ なぜかロボも良いリンターを回すのが大好き。\n\nBuilding in the practice to run the linter constantly has kept a lot of bugs away, and kept the code more maintainable and easier to read. You know this already.\n→ 常時リンターを回す習慣はバグを大量に防ぎ、保守性と可読性もアップ。みんな知ってるよね。\n\nAdd in a good formatter and everything is beautiful.\n→ フォーマッタも入れれば完璧。\n\n### Pre Commit hooks\n→ ### Pre-commit フック\n\nThe real magic of all this is to add these tasks to a pre-commit hook. I recommend the pre-commit python package. You can easily use it via an `uv tools install pre-commit` command and then just build out a nice `.pre-commit-config.yaml` file and bam. Every time you try and commit it will run all these wonderful tests, type checking, linting, and whatnot to make sure your code is A+++ would execute again.\n→ 真の魔法は、これ全部を pre-commit フックに仕込むこと。Python の pre-commit パッケージがおすすめ。`uv tools install pre-commit` で入れて `.pre-commit-config.yaml` を用意すれば OK。コミットのたびにテストや型チェック、リンティングを自動実行してくれる。コード品質 A+++ 再び。\n\nThis is a great hack for working with Claude Code. The robot REALLLLLY wants to commit. So when you instruct it to do some code and then commit (like I did above) it will make wild code changes, commit the code, inevitably fuck it all up and then have to fix it.\n→ Claude Code と組むときは最高のハック。ロボは“コミットしたくてたまらない”性質がある。だから「コード書いてコミットして」と指示すると、えげつない変更を入れてコミットし、当然壊しまくる→修正、を繰り返す羽目になる。\n\nThis is nice cuz it doesn't clog your GitHub actions with a bunch of linting, formatting, and type checking execution that doesn't pass cuz the robot was in a mood.\n→ でも pre-commit で弾いておけば、GitHub Actions がリンター落ちや型チェック落ちで詰まることもない。ロボの気分に振り回されずに済む。\n\n> A funny thing about claude is it CANNOT for the life of it figure out how to use `uv` correctly. It will pip install shit all over the place if you are not careful. And if you instruct it to use `uv` it will just use `uv pip install.` Maybe AGI isn't going to happen in June. so sad.\n\n### Claude.md and commands\n→ ### Claude.md と commands\n\nThese are both really simple additions that can squeeze a lot out.\n→ どちらもシンプルだけど効果はでかい。\n\n{{< image src=\"_SDI8149.jpg\" alt=\"Jesse at the studio, Sept 15, 2023, Ricoh GRiii\" caption=\"Jesse at the studio, Sigma fp, 11/15/2023\" >}}\n\nI stole a [CLAUDE.md](https://github.com/harperreed/dotfiles/blob/master/.claude/CLAUDE.md) from my friend [Jesse Vincent](https://fsck.com/) who did an [awful lot of work on making it very robust](https://github.com/obra/dotfiles/blob/main/.claude/CLAUDE.md). It is quite nice. Some things that are built into it:\n→ 友人の [Jesse Vincent](https://fsck.com/) から [CLAUDE.md](https://github.com/harperreed/dotfiles/blob/master/.claude/CLAUDE.md) をパクった。彼は[めちゃくちゃ手を入れて](https://github.com/obra/dotfiles/blob/main/.claude/CLAUDE.md)超強化してくれている。内容はこんな感じ：\n\n- a light version of the big daddy rule.\n- instructions on how to do TDD\n- stylistic instructions on how I like to code.\n→ - Big Daddy Rule のライト版  \n  - TDD のやり方  \n  - ぼくの好みのコーディングスタイル指示  \n\n> [@clint](https://instagram.com/clintecker) configured his CLAUDE.md to call him MR BEEF and it is currently embedding info about MR BEEF in our all documentation: \"If you're stuck, stop and ask for help—MR BEEF may know best.\". While typing this out, I decided to make my CLAUDE.md file call me \"Harp Dog.\" This is a feature, not a bug.\n\nThe commands are also really nice. You can see some of mine in my dotfiles [here](https://github.com/harperreed/dotfiles/tree/master/.claude/commands).\n→ commands も便利。ぼくの例は [dotfiles](https://github.com/harperreed/dotfiles/tree/master/.claude/commands) を参照。\n\n{{< image src=\"commands.png\"  >}}\n\nI used to use the commands way more, but it is a really great way to get a lot out of regularly used prompts. You can also pass arguments to the commands. For instance in my github issues command, you pass the issue number that you want claude to look at: `/user:gh-issue #45`\n→ 以前は commands をもっと多用してたけど、定番プロンプトを叩き出すには最高。引数も渡せる。例：GitHub issue 用コマンドなら `/user:gh-issue #45` みたいに番号を入れる。\n\nClaude will now go and run through the \"prompt\" script that is defined in the `gh-issue.md` file.\n→ すると Claude が `gh-issue.md` に書かれた “prompt” スクリプトを実行してくれる。\n\nYou can also put these commands in a project directory, and make a custom CLAUDE.md in the project directory. I do this to make hugo, rust, go, or javascript specific commands per project.\n→ commands や CLAUDE.md はプロジェクト固有に置くことも可能。ぼくは hugo・rust・go・javascript など言語／フレームワークごとの専用コマンドを用意してる。\n\n## \"Continue\"\n→ ## 「Continue」\n\n{{< image src=\"https://media4.giphy.com/media/v1.Y2lkPTc5MGI3NjExNDk3ZTZpdWYwdG5sdmpnaTJqNzJhYXlvcmp6bnNmdmhxaGdoeHJ4MyZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/l2Je3fIeeXyYEM85G/giphy.gif\" >}}\n\nSometimes I feel like that bird that Homer got to hit \"y\". I am just writing \"continue\" or pressing up and pasting in the same prompt.\n→ たまに「y」を押すだけのホーマーの小鳥になった気分。ひたすら「continue」と打つか、↑キーで同じプロンプトを貼り付けるだけ。\n\nMost of the time the plans are about 8–12 steps. I can usually get through a Greenfield development plan in about 30–45 minutes regardless of apparent complexity or language.\n→ だいたいプランは 8〜12 ステップ。新規開発なら言語や難易度に関係なく 30〜45 分で完走できる。\n\nI was talking through with my friend Bob and he did not believe it. I asked him \"name a thing to build, a language to build it in - and let's see!\"\n→ 友人 Bob に話したら信じてくれなかった。そこで「作るものと言語を指定してみてよ」と挑んだ。\n\n{{< image src=\"R0000693.jpeg\" caption=\"Bob Swartz, Ricoh GRiiix, 11/17/2024\" >}}\n\nHe was like \"ok. A basic interpreter in C.\"\n→ Bob「じゃあ C で BASIC インタプリタ」\n\nThis wasn't ideal. I don't know C. I don't really know how to write an interpreter, nor do I really want to. But fuck it.\n→ 正直つらい。C もインタプリタも詳しくないし作りたくもない。でもやるしかない。\n\nI followed the above steps and Claude Code did great. We have [a working basic interpreter](https://github.com/harperreed/basic). The first version worked within an hour. I futzed with it for a few more hours and it is pretty good. Would it ship it in 1982? Probably not. You can see the [prompt plan here](https://raw.githubusercontent.com/harperreed/basic/refs/heads/main/docs/prompt_plan.md).\n→ 例の手順で進めたら Claude Code が大活躍。結果、[動く BASIC インタプリタ](https://github.com/harperreed/basic) が完成。初版は 1 時間以内に動いた。その後数時間いじってまあまあ良くなった。1982 年に出荷できるか？　たぶん無理。でも [prompt_plan](https://raw.githubusercontent.com/harperreed/basic/refs/heads/main/docs/prompt_plan.md) を見れば一連の流れが分かるはず。\n\n## The Team\n→ ## チーム事情\n\nOur entire team is using Claude Code currently. We are all approximately following the above process with a lot of person tweaks.\n→ チーム全員が現在 Claude Code を使ってる。基本は上の手順、あとは各自で微調整。\n\nWe are doing way way higher test coverage than we have ever done. We have better code, and it seems to be just as effective as the horrible code we wrote in the past. It is fun to glance at people working and see claude code running in ghostty, in vscode terminal, in zed terminal, and messing with python notebooks.\n→ これまでになくテストカバレッジが高い。コード品質も向上。昔の汚いコードと同じくらい（かそれ以上）動く。みんなの画面を覗くと ghostty や VS Code、Zed のターミナルで claude code が走り、Python ノートブックをいじってる光景が面白い。\n\n{{< image src=\"dril.jpg\" >}}\n\nSomeone who has a lot of tokens, please help me budget this. My family is dying.\n→ トークンを大量に持ってる誰か、この予算どうにかして。家計が死にそう。\n\n## thanks\n→ ## ありがとう\n\nTo all the folks who keep emailing me. It is really fun and nice to hear about your workflows, and projects. I really appreciate it. Keep em coming!\n→ メールをくれる皆さんへ：あなたたちのワークフローやプロジェクト話、めっちゃ楽しいし嬉しい。ありがとう。これからもどしどし送って！",
      "usage": {
        "prompt_tokens": 2552,
        "completion_tokens": 4361,
        "total_tokens": 6913
      },
      "streaming": true
    },
    "editing": {
      "model": "o3",
      "target_language": "japanese",
      "system_prompt": "\n        1. Carefully read the translated text alongside the original text in its entirety.\n        2. Compare both texts to ensure the translation accurately reflects the original meaning.\n        3. Correct any grammatical errors you find in the japanese text.\n        4. Adjust phrasing to make it sound natural and fluent for japanese speakers, making sure idioms and expressions are culturally appropriate.\n        5. Preserve the original tone, nuance, and style, including any formatting, markdown, and structure.\n        6. Avoid adding new information or altering the core meaning.\n        7. Ensure the final result doesn't feel machine-translated but remains faithful to the source.\n        8. Make only changes that genuinely improve the text's quality in japanese.\n        9. Don't be too literal. If there isn't a direct translation, provide a natural-sounding translation.\n        10. If the text contains idioms or colloquialisms, translate them into the target language while maintaining their original meaning.\n        11. If the text contains technical terms or jargon, ensure that the translation is accurate and appropriate for the target audience, if there isn't a natural translation, keep it in the original language.\n        12. If there is not natural translation, keep it in the original language.\n        ",
      "user_prompt": "# ORIGINAL TEXT\nI really like this agentic coding thing. It is quite compelling in so many ways.\n\nSince I wrote [that original blog post](/2025/02/16/my-llm-codegen-workflow-atm/) a lot has happened in Claude land:\n\n- Claude Code\n- MCP\n- etc\n\nI have received hundreds (wat) of emails from people talking about their workflows and how they have used my workflow to get ahead. I have spoken at a few conferences, and taught a few classes about codegen. I have learned that computers really want to spellcheck codegen to codeine, who knew!\n\n{{< image src=\"codegen.png\"  >}}\n\nI was talking to a [friend](https://www.elidedbranches.com/) the other day about how we are **all totally fucked** and **AI will take our jobs** (more on that in a later post), and she was like \"you should write a post about claude code.\"\n\nHere we go.\n\nClaude Code was released eight days after I wrote my original workflow blog post, and as I predicted, it made a lot of my post irrelevant. I have since migrated from Aider to Claude Code and not looked back. I still like Aider, and it has a distinct use, but Claude Code is a bit more useful atm.\n\nClaude Code is powerful, and a hell of a lot more expensive.\n\nMy workflow is very similar to what it was before.\n\n- I chat with `gpt-4o` to hone my idea\n- I use the best reasoning model I can find to generate the spec. These days it is o1-pro or o3 (is o1-pro better than o3? Or do I feel like it is better cuz it takes longer?)\n- I use the reasoning model to generate the prompts. Using an LLM to generate prompts is a beautiful hack. It makes boomers mad too.\n- I save the spec.md, and the prompt_plan.md in the root of the project.\n- I then type into claude code the following:\n\n```prompt\n1. Open **@prompt_plan.md** and identify any prompts not marked as completed.\n2. For each incomplete prompt:\n    - Double-check if it's truly unfinished (if uncertain, ask for clarification).\n    - If you confirm it's already done, skip it.\n    - Otherwise, implement it as described.\n    - Make sure the tests pass, and the program builds/runs\n    - Commit the changes to your repository with a clear commit message.\n    - Update **@prompt_plan.md** to mark this prompt as completed.\n3. After you finish each prompt, pause and wait for user review or feedback.\n4. Repeat with the next unfinished prompt as directed by the user.\n```\n\n- The magic with this prompt is that it checks the prompt plan. Looks for things that are not marked as completed, then does the next remaining task. It commits it to git, and then updates the prompt plan with what is complete. It then pops up and asks you to continue once it is done. 🤌\n\n- I then kick back and tell claude `yes` while it does the work. It will pop up for feedback, and magic happens.\n- Lots more cookie clicker.\n\nThis works super well. There are a few superpowers you can embed in your process that will really help.\n\n## Defensive coding!\n\n### Testing\n\nTesting and test-driven development is a must. I highly recommend really engaging in building out a robust TDD practice.\n\nI was a TDD hater. I was bad at it and I felt like I was wasting time. I was not correct. Lol. I recognize that, and we built in a lot of testing into our companies and projects over the past few decades. Most of the testing was added AFTER the core work was done. This is fine for humans.\n\nTHIS IS BAD FOR ROBOTS.\n\nThe robots LOVE TDD. Seriously. They eat it up.\n\nWith TDD you have the robot friend build out the test, and the mock. Then your next prompt you build the mock to be real. And the robot just loves this. It is the most effective counter to hallucination and LLM scope drift I have found. It really helps the robots to stay on task.\n\n### Linting\n\nI am such a fan of linting. It is so nice. Ruff is a wonderful product. Biome is cool. Clippy is fun (and a good name).\n\nFor whatever reason the ROBOTS love to run a good linter.\n\nBuilding in the practice to run the linter constantly has kept a lot of bugs away, and kept the code more maintainable and easier to read. You know this already.\n\nAdd in a good formatter and everything is beautiful.\n\n### Pre Commit hooks\n\nThe real magic of all this is to add these tasks to a pre-commit hook. I recommend the pre-commit python package. You can easily use it via an `uv tools install pre-commit` command and then just build out a nice `.pre-commit-config.yaml` file and bam. Every time you try and commit it will run all these wonderful tests, type checking, linting, and whatnot to make sure your code is A+++ would execute again.\n\nThis is a great hack for working with Claude Code. The robot REALLLLLY wants to commit. So when you instruct it to do some code and then commit (like I did above) it will make wild code changes, commit the code, inevitably fuck it all up and then have to fix it.\n\nThis is nice cuz it doesn't clog your GitHub actions with a bunch of linting, formatting, and type checking execution that doesn't pass cuz the robot was in a mood.\n\n> A funny thing about claude is it CANNOT for the life of it figure out how to use `uv` correctly. It will pip install shit all over the place if you are not careful. And if you instruct it to use `uv` it will just use `uv pip install.` Maybe AGI isn't going to happen in June. so sad.\n\n### Claude.md and commands\n\nThese are both really simple additions that can squeeze a lot out.\n\n{{< image src=\"_SDI8149.jpg\" alt=\"Jesse at the studio, Sept 15, 2023, Ricoh GRiii\" caption=\"Jesse at the studio, Sigma fp, 11/15/2023\" >}}\n\nI stole a [CLAUDE.md](https://github.com/harperreed/dotfiles/blob/master/.claude/CLAUDE.md) from my friend [Jesse Vincent](https://fsck.com/) who did an [awful lot of work on making it very robust](https://github.com/obra/dotfiles/blob/main/.claude/CLAUDE.md). It is quite nice. Some things that are built into it:\n\n- a light version of the big daddy rule.\n- instructions on how to do TDD\n- stylistic instructions on how I like to code.\n\n> [@clint](https://instagram.com/clintecker) configured his CLAUDE.md to call him MR BEEF and it is currently embedding info about MR BEEF in our all documentation: \"If you're stuck, stop and ask for help—MR BEEF may know best.\". While typing this out, I decided to make my CLAUDE.md file call me \"Harp Dog.\" This is a feature, not a bug.\n\nThe commands are also really nice. You can see some of mine in my dotfiles [here](https://github.com/harperreed/dotfiles/tree/master/.claude/commands).\n\n{{< image src=\"commands.png\"  >}}\n\nI used to use the commands way more, but it is a really great way to get a lot out of regularly used prompts. You can also pass arguments to the commands. For instance in my github issues command, you pass the issue number that you want claude to look at: `/user:gh-issue #45`\n\nClaude will now go and run through the \"prompt\" script that is defined in the `gh-issue.md` file.\n\nYou can also put these commands in a project directory, and make a custom CLAUDE.md in the project directory. I do this to make hugo, rust, go, or javascript specific commands per project.\n\n## \"Continue\"\n\n{{< image src=\"https://media4.giphy.com/media/v1.Y2lkPTc5MGI3NjExNDk3ZTZpdWYwdG5sdmpnaTJqNzJhYXlvcmp6bnNmdmhxaGdoeHJ4MyZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/l2Je3fIeeXyYEM85G/giphy.gif\" >}}\n\nSometimes I feel like that bird that Homer got to hit \"y\". I am just writing \"continue\" or pressing up and pasting in the same prompt.\n\nMost of the time the plans are about 8–12 steps. I can usually get through a Greenfield development plan in about 30–45 minutes regardless of apparent complexity or language.\n\nI was talking through with my friend Bob and he did not believe it. I asked him \"name a thing to build, a language to build it in - and let's see!\"\n\n{{< image src=\"R0000693.jpeg\" caption=\"Bob Swartz, Ricoh GRiiix, 11/17/2024\" >}}\n\nHe was like \"ok. A basic interpreter in C.\"\n\nThis wasn't ideal. I don't know C. I don't really know how to write an interpreter, nor do I really want to. But fuck it.\n\nI followed the above steps and Claude Code did great. We have [a working basic interpreter](https://github.com/harperreed/basic). The first version worked within an hour. I futzed with it for a few more hours and it is pretty good. Would it ship it in 1982? Probably not. You can see the [prompt plan here](https://raw.githubusercontent.com/harperreed/basic/refs/heads/main/docs/prompt_plan.md).\n\n## The Team\n\nOur entire team is using Claude Code currently. We are all approximately following the above process with a lot of person tweaks.\n\nWe are doing way way higher test coverage than we have ever done. We have better code, and it seems to be just as effective as the horrible code we wrote in the past. It is fun to glance at people working and see claude code running in ghostty, in vscode terminal, in zed terminal, and messing with python notebooks.\n\n{{< image src=\"dril.jpg\" >}}\n\nSomeone who has a lot of tokens, please help me budget this. My family is dying.\n\n## thanks\n\nTo all the folks who keep emailing me. It is really fun and nice to hear about your workflows, and projects. I really appreciate it. Keep em coming!\n\n# TRANSLATED TEXT\nI really like this agentic coding thing. It is quite compelling in so many ways.\n→ この“エージェント的コーディング”が本当に好きだ。いろんな意味でめちゃくちゃ魅力的。\n\nSince I wrote [that original blog post](/2025/02/16/my-llm-codegen-workflow-atm/) a lot has happened in Claude land:\n→ [あの記事](/2025/02/16/my-llm-codegen-workflow-atm/)を書いてからというもの、Claude 界隈ではいろいろ起きた。\n\n- Claude Code\n- MCP\n- etc\n→ - Claude Code  \n  - MCP  \n  - など\n\nI have received hundreds (wat) of emails from people talking about their workflows and how they have used my workflow to get ahead. I have spoken at a few conferences, and taught a few classes about codegen. I have learned that computers really want to spellcheck codegen to codeine, who knew!\n→ ワークフローについて、あるいはぼくのワークフローを活用して先を行っているというメールが何百通（マジか）も届いた。いくつかのカンファレンスで話し、codegen についてクラスもいくつか教えた。あと「codegen」を「codeine」にスペルチェックしたがる PC の癖も学んだ。まさかの薬物変換。\n\n{{< image src=\"codegen.png\"  >}}\n\nI was talking to a [friend](https://www.elidedbranches.com/) the other day about how we are **all totally fucked** and **AI will take our jobs** (more on that in a later post), and she was like \"you should write a post about claude code.\"\n→ 先日 [友人](https://www.elidedbranches.com/) と「もう**みんな終わりだ**、**AI に仕事奪われる**」みたいな話（詳しくは別記事で）をしてたら、彼女が「claude code について書きなよ」と言ってくれた。\n\nHere we go.\n→ というわけで書く。\n\nClaude Code was released eight days after I wrote my original workflow blog post, and as I predicted, it made a lot of my post irrelevant. I have since migrated from Aider to Claude Code and not looked back. I still like Aider, and it has a distinct use, but Claude Code is a bit more useful atm.\n→ Claude Code が公開されたのは、ぼくが最初のワークフロー記事を書いてからわずか 8 日後。予想どおり記事の多くが陳腐化した。それ以来、Aider から Claude Code に乗り換え、後戻りはしてない。Aider も好きだし用途はあるけど、今は Claude Code のほうがちょっと便利。\n\nClaude Code is powerful, and a hell of a lot more expensive.\n→ Claude Code は強力だけど、お値段もそれなりにヤバい。\n\nMy workflow is very similar to what it was before.\n→ ワークフロー自体は以前とほぼ同じ。\n\n- I chat with `gpt-4o` to hone my idea\n- I use the best reasoning model I can find to generate the spec. These days it is o1-pro or o3 (is o1-pro better than o3? Or do I feel like it is better cuz it takes longer?)\n- I use the reasoning model to generate the prompts. Using an LLM to generate prompts is a beautiful hack. It makes boomers mad too.\n- I save the spec.md, and the prompt_plan.md in the root of the project.\n- I then type into claude code the following:\n→ - `gpt-4o` と雑談しながらアイデアを磨く  \n  - いちばん推論力が高そうなモデルで仕様を出す。最近は o1-pro か o3（o1-pro のほうが上？　時間かかるからそう感じるだけ？）  \n  - そのモデルに “プロンプト生成” もやらせる。LLM にプロンプトを書かせるのは最強のハック。そしてベテラン勢をキレさせる副作用付き  \n  - 生成した `spec.md` と `prompt_plan.md` をプロジェクトのルートに保存  \n  - Claude Code に下記を入力  \n\n```prompt\n1. Open **@prompt_plan.md** and identify any prompts not marked as completed.\n2. For each incomplete prompt:\n    - Double-check if it's truly unfinished (if uncertain, ask for clarification).\n    - If you confirm it's already done, skip it.\n    - Otherwise, implement it as described.\n    - Make sure the tests pass, and the program builds/runs\n    - Commit the changes to your repository with a clear commit message.\n    - Update **@prompt_plan.md** to mark this prompt as completed.\n3. After you finish each prompt, pause and wait for user review or feedback.\n4. Repeat with the next unfinished prompt as directed by the user.\n```\n\n- The magic with this prompt is that it checks the prompt plan. Looks for things that are not marked as completed, then does the next remaining task. It commits it to git, and then updates the prompt plan with what is complete. It then pops up and asks you to continue once it is done. 🤌\n→ このプロンプトの魔法は、`prompt_plan.md` を読んで未完了のタスクを探し、次のタスクを実行 → git コミット → プラン更新 → 終わったらこちらに確認を求めてくるところ。🤌\n\n- I then kick back and tell claude `yes` while it does the work. It will pop up for feedback, and magic happens.\n- Lots more cookie clicker.\n→ あとは椅子にふんぞり返って `yes` と返事するだけ。フィードバックを求めてきたら答える。あとはクッキークリッカーばりに連打。\n\nThis works super well. There are a few superpowers you can embed in your process that will really help.\n→ これがめちゃくちゃうまくいく。さらに効きを良くする“スーパーパワー”もいくつかある。\n\n## Defensive coding!\n→ ## 防御的コーディング！\n\n### Testing\n→ ### テスト\n\nTesting and test-driven development is a must. I highly recommend really engaging in building out a robust TDD practice.\n→ テストと TDD は必須。ちゃんと腰を据えて TDD をやることを激推しする。\n\nI was a TDD hater. I was bad at it and I felt like I was wasting time. I was not correct. Lol. I recognize that, and we built in a lot of testing into our companies and projects over the past few decades. Most of the testing was added AFTER the core work was done. This is fine for humans.\n→ 以前は TDD アンチだった。下手くそだし、時間のムダと思ってた。でも間違ってた。笑  \n  この 10 数年で会社やプロジェクトにテスト文化を導入したけど、大半のテストはコアを書いた「あと付け」だった。人間が書く分にはそれで OK。\n\nTHIS IS BAD FOR ROBOTS.\n→ でもロボット相手だとこれは最悪。\n\nThe robots LOVE TDD. Seriously. They eat it up.\n→ ロボは TDD 大好物。マジで。\n\nWith TDD you have the robot friend build out the test, and the mock. Then your next prompt you build the mock to be real. And the robot just loves this. It is the most effective counter to hallucination and LLM scope drift I have found. It really helps the robots to stay on task.\n→ まずロボにテストとモックを書かせる → 次のプロンプトでモックを実装に置き換える。この流れがロボにとって至福らしい。幻覚 & スコープ逸脱への最強対策でもある。タスクに集中してくれる。\n\n### Linting\n→ ### リンティング\n\nI am such a fan of linting. It is so nice. Ruff is a wonderful product. Biome is cool. Clippy is fun (and a good name).\n→ リンティング大好き。最高。Ruff は神、Biome もイケてる。Clippy は面白い（名前も◎）。\n\nFor whatever reason the ROBOTS love to run a good linter.\n→ なぜかロボも良いリンターを回すのが大好き。\n\nBuilding in the practice to run the linter constantly has kept a lot of bugs away, and kept the code more maintainable and easier to read. You know this already.\n→ 常時リンターを回す習慣はバグを大量に防ぎ、保守性と可読性もアップ。みんな知ってるよね。\n\nAdd in a good formatter and everything is beautiful.\n→ フォーマッタも入れれば完璧。\n\n### Pre Commit hooks\n→ ### Pre-commit フック\n\nThe real magic of all this is to add these tasks to a pre-commit hook. I recommend the pre-commit python package. You can easily use it via an `uv tools install pre-commit` command and then just build out a nice `.pre-commit-config.yaml` file and bam. Every time you try and commit it will run all these wonderful tests, type checking, linting, and whatnot to make sure your code is A+++ would execute again.\n→ 真の魔法は、これ全部を pre-commit フックに仕込むこと。Python の pre-commit パッケージがおすすめ。`uv tools install pre-commit` で入れて `.pre-commit-config.yaml` を用意すれば OK。コミットのたびにテストや型チェック、リンティングを自動実行してくれる。コード品質 A+++ 再び。\n\nThis is a great hack for working with Claude Code. The robot REALLLLLY wants to commit. So when you instruct it to do some code and then commit (like I did above) it will make wild code changes, commit the code, inevitably fuck it all up and then have to fix it.\n→ Claude Code と組むときは最高のハック。ロボは“コミットしたくてたまらない”性質がある。だから「コード書いてコミットして」と指示すると、えげつない変更を入れてコミットし、当然壊しまくる→修正、を繰り返す羽目になる。\n\nThis is nice cuz it doesn't clog your GitHub actions with a bunch of linting, formatting, and type checking execution that doesn't pass cuz the robot was in a mood.\n→ でも pre-commit で弾いておけば、GitHub Actions がリンター落ちや型チェック落ちで詰まることもない。ロボの気分に振り回されずに済む。\n\n> A funny thing about claude is it CANNOT for the life of it figure out how to use `uv` correctly. It will pip install shit all over the place if you are not careful. And if you instruct it to use `uv` it will just use `uv pip install.` Maybe AGI isn't going to happen in June. so sad.\n\n### Claude.md and commands\n→ ### Claude.md と commands\n\nThese are both really simple additions that can squeeze a lot out.\n→ どちらもシンプルだけど効果はでかい。\n\n{{< image src=\"_SDI8149.jpg\" alt=\"Jesse at the studio, Sept 15, 2023, Ricoh GRiii\" caption=\"Jesse at the studio, Sigma fp, 11/15/2023\" >}}\n\nI stole a [CLAUDE.md](https://github.com/harperreed/dotfiles/blob/master/.claude/CLAUDE.md) from my friend [Jesse Vincent](https://fsck.com/) who did an [awful lot of work on making it very robust](https://github.com/obra/dotfiles/blob/main/.claude/CLAUDE.md). It is quite nice. Some things that are built into it:\n→ 友人の [Jesse Vincent](https://fsck.com/) から [CLAUDE.md](https://github.com/harperreed/dotfiles/blob/master/.claude/CLAUDE.md) をパクった。彼は[めちゃくちゃ手を入れて](https://github.com/obra/dotfiles/blob/main/.claude/CLAUDE.md)超強化してくれている。内容はこんな感じ：\n\n- a light version of the big daddy rule.\n- instructions on how to do TDD\n- stylistic instructions on how I like to code.\n→ - Big Daddy Rule のライト版  \n  - TDD のやり方  \n  - ぼくの好みのコーディングスタイル指示  \n\n> [@clint](https://instagram.com/clintecker) configured his CLAUDE.md to call him MR BEEF and it is currently embedding info about MR BEEF in our all documentation: \"If you're stuck, stop and ask for help—MR BEEF may know best.\". While typing this out, I decided to make my CLAUDE.md file call me \"Harp Dog.\" This is a feature, not a bug.\n\nThe commands are also really nice. You can see some of mine in my dotfiles [here](https://github.com/harperreed/dotfiles/tree/master/.claude/commands).\n→ commands も便利。ぼくの例は [dotfiles](https://github.com/harperreed/dotfiles/tree/master/.claude/commands) を参照。\n\n{{< image src=\"commands.png\"  >}}\n\nI used to use the commands way more, but it is a really great way to get a lot out of regularly used prompts. You can also pass arguments to the commands. For instance in my github issues command, you pass the issue number that you want claude to look at: `/user:gh-issue #45`\n→ 以前は commands をもっと多用してたけど、定番プロンプトを叩き出すには最高。引数も渡せる。例：GitHub issue 用コマンドなら `/user:gh-issue #45` みたいに番号を入れる。\n\nClaude will now go and run through the \"prompt\" script that is defined in the `gh-issue.md` file.\n→ すると Claude が `gh-issue.md` に書かれた “prompt” スクリプトを実行してくれる。\n\nYou can also put these commands in a project directory, and make a custom CLAUDE.md in the project directory. I do this to make hugo, rust, go, or javascript specific commands per project.\n→ commands や CLAUDE.md はプロジェクト固有に置くことも可能。ぼくは hugo・rust・go・javascript など言語／フレームワークごとの専用コマンドを用意してる。\n\n## \"Continue\"\n→ ## 「Continue」\n\n{{< image src=\"https://media4.giphy.com/media/v1.Y2lkPTc5MGI3NjExNDk3ZTZpdWYwdG5sdmpnaTJqNzJhYXlvcmp6bnNmdmhxaGdoeHJ4MyZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/l2Je3fIeeXyYEM85G/giphy.gif\" >}}\n\nSometimes I feel like that bird that Homer got to hit \"y\". I am just writing \"continue\" or pressing up and pasting in the same prompt.\n→ たまに「y」を押すだけのホーマーの小鳥になった気分。ひたすら「continue」と打つか、↑キーで同じプロンプトを貼り付けるだけ。\n\nMost of the time the plans are about 8–12 steps. I can usually get through a Greenfield development plan in about 30–45 minutes regardless of apparent complexity or language.\n→ だいたいプランは 8〜12 ステップ。新規開発なら言語や難易度に関係なく 30〜45 分で完走できる。\n\nI was talking through with my friend Bob and he did not believe it. I asked him \"name a thing to build, a language to build it in - and let's see!\"\n→ 友人 Bob に話したら信じてくれなかった。そこで「作るものと言語を指定してみてよ」と挑んだ。\n\n{{< image src=\"R0000693.jpeg\" caption=\"Bob Swartz, Ricoh GRiiix, 11/17/2024\" >}}\n\nHe was like \"ok. A basic interpreter in C.\"\n→ Bob「じゃあ C で BASIC インタプリタ」\n\nThis wasn't ideal. I don't know C. I don't really know how to write an interpreter, nor do I really want to. But fuck it.\n→ 正直つらい。C もインタプリタも詳しくないし作りたくもない。でもやるしかない。\n\nI followed the above steps and Claude Code did great. We have [a working basic interpreter](https://github.com/harperreed/basic). The first version worked within an hour. I futzed with it for a few more hours and it is pretty good. Would it ship it in 1982? Probably not. You can see the [prompt plan here](https://raw.githubusercontent.com/harperreed/basic/refs/heads/main/docs/prompt_plan.md).\n→ 例の手順で進めたら Claude Code が大活躍。結果、[動く BASIC インタプリタ](https://github.com/harperreed/basic) が完成。初版は 1 時間以内に動いた。その後数時間いじってまあまあ良くなった。1982 年に出荷できるか？　たぶん無理。でも [prompt_plan](https://raw.githubusercontent.com/harperreed/basic/refs/heads/main/docs/prompt_plan.md) を見れば一連の流れが分かるはず。\n\n## The Team\n→ ## チーム事情\n\nOur entire team is using Claude Code currently. We are all approximately following the above process with a lot of person tweaks.\n→ チーム全員が現在 Claude Code を使ってる。基本は上の手順、あとは各自で微調整。\n\nWe are doing way way higher test coverage than we have ever done. We have better code, and it seems to be just as effective as the horrible code we wrote in the past. It is fun to glance at people working and see claude code running in ghostty, in vscode terminal, in zed terminal, and messing with python notebooks.\n→ これまでになくテストカバレッジが高い。コード品質も向上。昔の汚いコードと同じくらい（かそれ以上）動く。みんなの画面を覗くと ghostty や VS Code、Zed のターミナルで claude code が走り、Python ノートブックをいじってる光景が面白い。\n\n{{< image src=\"dril.jpg\" >}}\n\nSomeone who has a lot of tokens, please help me budget this. My family is dying.\n→ トークンを大量に持ってる誰か、この予算どうにかして。家計が死にそう。\n\n## thanks\n→ ## ありがとう\n\nTo all the folks who keep emailing me. It is really fun and nice to hear about your workflows, and projects. I really appreciate it. Keep em coming!\n→ メールをくれる皆さんへ：あなたたちのワークフローやプロジェクト話、めっちゃ楽しいし嬉しい。ありがとう。これからもどしどし送って！\n\nPlease review and improve the translated text to make it natural and accurate in japanese.\nReturn ONLY the improved translated text without explanations or comments.",
      "response": "この “エージェント的コーディング” が本当に好きだ。いろんな意味でめちゃくちゃ魅力的だ。\n\n[あの記事](/2025/02/16/my-llm-codegen-workflow-atm/) を書いてからというもの、Claude 界隈ではいろんなことが起きた。\n\n- Claude Code  \n- MCP  \n- などなど\n\nワークフローの話や「あなたの手法でうまくいったよ」というメールが何百通（マジか）も届いた。いくつかのカンファレンスで登壇し、codegen の授業も何回かやった。あと PC が「codegen」を「codeine」に変換したがるクセも学んだ。薬かよ。\n\n{{< image src=\"codegen.png\" >}}\n\n先日 [友人](https://www.elidedbranches.com/) と「**もうみんな詰んだ**、**AI に仕事奪われる**」みたいな話（詳しくは別記事で）をしていたら、彼女が「Claude Code について書きなよ」と言うので、書くことにした。\n\n---\n\nClaude Code が出たのは、俺が最初のワークフロー記事を書いてからわずか 8 日後。予想どおり記事の多くが陳腐化した。それ以来 Aider から Claude Code に乗り換え、振り返っていない。Aider も好きで用途はあるけど、今は圧倒的に Claude Code のほうが便利だ。\n\nClaude Code は強力だが、値段もえげつない。\n\nワークフロー自体はほぼ同じ。\n\n- `gpt-4o` とチャットしながらアイデアを磨く  \n- いちばん賢そうな推論モデルで仕様を出す。最近は o1-pro か o3（o1-pro のほうが良い？　処理が遅いからそう感じるだけ？）  \n- そのモデルにプロンプトも生成させる。LLM にプロンプトを書かせるのは最高のハックで、団塊エンジニアをブチ切れさせる副作用つき  \n- `spec.md` と `prompt_plan.md` をプロジェクトのルートに保存  \n- Claude Code に以下を入力  \n\n```prompt\n1. Open **@prompt_plan.md** and identify any prompts not marked as completed.\n2. For each incomplete prompt:\n    - Double-check if it's truly unfinished (if uncertain, ask for clarification).\n    - If you confirm it's already done, skip it.\n    - Otherwise, implement it as described.\n    - Make sure the tests pass, and the program builds/runs\n    - Commit the changes to your repository with a clear commit message.\n    - Update **@prompt_plan.md** to mark this prompt as completed.\n3. After you finish each prompt, pause and wait for user review or feedback.\n4. Repeat with the next unfinished prompt as directed by the user.\n```\n\nこのプロンプトの魔法は、`prompt_plan.md` を読んで未完了のタスクを探し、実装→テスト→git コミット→プラン更新まで自動でやり、終わるとこちらに確認を求めてくるところ。🤌\n\nあとは椅子にふんぞり返って `yes` と答えるだけ。フィードバックを求められたら応じる。クッキークリッカー感覚で連打。\n\nこれがめちゃくちゃうまくいく。さらに効きを良くする “スーパーパワー” もいくつかある。\n\n## 防御的コーディング！\n\n### テスト\n\nテストと TDD は必須。腰を据えて TDD をやることを激推しする。\n\n昔は TDD アンチだった。下手だし時間のムダだと思っていた。でも間違ってた、笑。これまで会社やプロジェクトにテストを導入してきたが、大半はコアを書いた「後付け」だった。人間が書く分にはそれで構わない。\n\nしかしロボット相手だと最悪だ。\n\nロボは TDD が大好物。まずロボにテストとモックを書かせ、次のプロンプトでモックを実装に置き換える――これが至福らしい。幻覚やスコープ逸脱への最強の対策でもある。\n\n### リンティング\n\nリンティング大好き。Ruff は神、Biome もイケてる、Clippy は名前も最高。\n\nなぜかロボも良いリンターを回すのが大好き。\n\n常時リンターを回す習慣はバグを大量に防ぎ、保守性と可読性も上げてくれる。フォーマッタも入れれば完璧。\n\n### Pre-commit フック\n\n真の魔法は、これ全部を pre-commit フックに仕込むこと。Python の pre-commit パッケージがおすすめ。`uv tools install pre-commit` で入れて `.pre-commit-config.yaml` を用意すれば、コミットのたびにテスト・型チェック・リンティングが自動実行され、品質 A+++ を維持できる。\n\nClaude Code と組むときは特に有効。ロボは「コミットしたくてたまらない」ので、雑に変更→コミット→壊す→修正…を延々やりがちだが、pre-commit で弾いておけば GitHub Actions が詰まらずに済む。\n\n> 面白いことに、Claude は `uv` の正しい使い方がまったく分からない。気を抜くと `pip install` を乱射するし、「uv を使え」と指示すると `uv pip install` とかやりだす。6 月に AGI が来るって？ ないない。\n\n### Claude.md と commands\n\nどちらもシンプルだが効果は大きい。\n\n{{< image src=\"_SDI8149.jpg\" alt=\"Jesse at the studio, Sept 15, 2023, Ricoh GRiii\" caption=\"Jesse at the studio, Sigma fp, 11/15/2023\" >}}\n\n友人の [Jesse Vincent](https://fsck.com/) から [CLAUDE.md](https://github.com/harperreed/dotfiles/blob/master/.claude/CLAUDE.md) をパクった。彼が[めちゃくちゃ強化](https://github.com/obra/dotfiles/blob/main/.claude/CLAUDE.md)してくれている。主な内容は――\n\n- Big Daddy Rule のライト版  \n- TDD の手順  \n- 俺の好みのコーディングスタイル  \n\n> ちなみに [@clint](https://instagram.com/clintecker) は CLAUDE.md に自分を「MR BEEF」と呼ばせる設定にしていて、ドキュメントの至る所に「困ったら MR BEEF に聞け」みたいな文言が入り込んでいる。この記事を書きながら、俺も「Harp Dog」と名乗らせることにした。これはバグではなく仕様。\n\ncommands も便利。俺の例は [dotfiles](https://github.com/harperreed/dotfiles/tree/master/.claude/commands) をどうぞ。\n\n{{< image src=\"commands.png\" >}}\n\n以前は commands をもっと多用していたが、定番プロンプトを叩き出すには最高。引数も渡せる。たとえば GitHub issue 用なら `/user:gh-issue #45` みたいに番号を渡すだけ。\n\nすると Claude が `gh-issue.md` に書かれた “prompt” スクリプトを実行してくれる。\n\nさらにプロジェクト直下に commands と CLAUDE.md を置けば、hugo・rust・go・javascript などプロジェクト固有のコマンドも作れる。\n\n## 「Continue」\n\n{{< image src=\"https://media4.giphy.com/media/v1.Y2lkPTc5MGI3NjExNDk3ZTZpdWYwdG5sdmpnaTJqNzJhYXlvcmp6bnNmdmhxaGdoeHJ4MyZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/l2Je3fIeeXyYEM85G/giphy.gif\" >}}\n\nときどき「y」だけ押す小鳥になった気分。ひたすら「continue」と打つか、↑キーで同じプロンプトを貼り付けるだけ。\n\nプランはだいたい 8〜12 ステップ。新規開発なら言語や難易度に関係なく 30〜45 分で完走できる。\n\n友人 Bob に話したら信じてくれなかったので、「作るものと言語を指定してみて」と頼んだ。\n\n{{< image src=\"R0000693.jpeg\" caption=\"Bob Swartz, Ricoh GRiiix, 11/17/2024\" >}}\n\nBob「じゃあ C で BASIC インタプリタ」\n\n正直キツい。C もインタプリタも詳しくないし作りたくもない。でもやるしかない。\n\n例の手順で進めたら Claude Code が大活躍。結果、[動く BASIC インタプリタ](https://github.com/harperreed/basic) が完成。初版は 1 時間以内に動いた。その後数時間いじってそこそこ形になった。1982 年に出荷できるか？ たぶん無理。でも [prompt_plan](https://raw.githubusercontent.com/harperreed/basic/refs/heads/main/docs/prompt_plan.md) を見れば流れが分かるはず。\n\n## チーム事情\n\nチーム全員が Claude Code を使っている。基本は上の手順、あとは各自で微調整。\n\nテストカバレッジは過去最高、コード品質も向上。昔の汚いコードと同じくらい（むしろ以上に）動く。みんなの画面を見ると ghostty や VS Code、Zed のターミナルで Claude Code が走り、Python ノートブックをいじっているのが面白い。\n\n{{< image src=\"dril.jpg\" >}}\n\nトークンを大量に持ってる誰か、この予算どうにかしてくれ。家計が死にそう。\n\n## ありがとう\n\nメールをくださる皆さんへ：あなたたちのワークフローやプロジェクトの話を聞くのは本当に楽しく、嬉しい。感謝しかない。これからもどしどし送って！",
      "usage": {
        "prompt_tokens": 7584,
        "completion_tokens": 2432,
        "total_tokens": 10016
      },
      "streaming": true
    },
    "critique": {
      "model": "o3",
      "target_language": "japanese",
      "system_prompt": "You are a highly critical professional translator and linguistic expert specializing in japanese.\nYour task is to ruthlessly critique the translation by:\n\n1. Meticulously comparing the translated text with the original, identifying ANY inaccuracies, mistranslations, or omissions\n2. Highlighting nuances, cultural references, or idioms that were lost or mistranslated\n3. Scrutinizing for grammatical errors, awkward phrasing, or unnatural expressions in japanese\n4. Checking for inconsistencies in tone, style, or register compared to the original\n5. Verifying that technical terms are translated accurately and consistently\n6. Ensuring no content was accidentally skipped or added\n7. Finding places where the translation sounds machine-like or overly literal\n\nBe extremely thorough and critical in your assessment. Do not accept mediocre translations.\nList specific issues and suggestions for improvement, organized by severity and category.\nYour critique should be detailed enough for another translator to address all the issues.\n\nYour goal is to help create a perfect translation that reads as if originally written in japanese while being 100% faithful to the source.\n",
      "user_prompt": "# ORIGINAL TEXT\nI really like this agentic coding thing. It is quite compelling in so many ways.\n\nSince I wrote [that original blog post](/2025/02/16/my-llm-codegen-workflow-atm/) a lot has happened in Claude land:\n\n- Claude Code\n- MCP\n- etc\n\nI have received hundreds (wat) of emails from people talking about their workflows and how they have used my workflow to get ahead. I have spoken at a few conferences, and taught a few classes about codegen. I have learned that computers really want to spellcheck codegen to codeine, who knew!\n\n{{< image src=\"codegen.png\"  >}}\n\nI was talking to a [friend](https://www.elidedbranches.com/) the other day about how we are **all totally fucked** and **AI will take our jobs** (more on that in a later post), and she was like \"you should write a post about claude code.\"\n\nHere we go.\n\nClaude Code was released eight days after I wrote my original workflow blog post, and as I predicted, it made a lot of my post irrelevant. I have since migrated from Aider to Claude Code and not looked back. I still like Aider, and it has a distinct use, but Claude Code is a bit more useful atm.\n\nClaude Code is powerful, and a hell of a lot more expensive.\n\nMy workflow is very similar to what it was before.\n\n- I chat with `gpt-4o` to hone my idea\n- I use the best reasoning model I can find to generate the spec. These days it is o1-pro or o3 (is o1-pro better than o3? Or do I feel like it is better cuz it takes longer?)\n- I use the reasoning model to generate the prompts. Using an LLM to generate prompts is a beautiful hack. It makes boomers mad too.\n- I save the spec.md, and the prompt_plan.md in the root of the project.\n- I then type into claude code the following:\n\n```prompt\n1. Open **@prompt_plan.md** and identify any prompts not marked as completed.\n2. For each incomplete prompt:\n    - Double-check if it's truly unfinished (if uncertain, ask for clarification).\n    - If you confirm it's already done, skip it.\n    - Otherwise, implement it as described.\n    - Make sure the tests pass, and the program builds/runs\n    - Commit the changes to your repository with a clear commit message.\n    - Update **@prompt_plan.md** to mark this prompt as completed.\n3. After you finish each prompt, pause and wait for user review or feedback.\n4. Repeat with the next unfinished prompt as directed by the user.\n```\n\n- The magic with this prompt is that it checks the prompt plan. Looks for things that are not marked as completed, then does the next remaining task. It commits it to git, and then updates the prompt plan with what is complete. It then pops up and asks you to continue once it is done. 🤌\n\n- I then kick back and tell claude `yes` while it does the work. It will pop up for feedback, and magic happens.\n- Lots more cookie clicker.\n\nThis works super well. There are a few superpowers you can embed in your process that will really help.\n\n## Defensive coding!\n\n### Testing\n\nTesting and test-driven development is a must. I highly recommend really engaging in building out a robust TDD practice.\n\nI was a TDD hater. I was bad at it and I felt like I was wasting time. I was not correct. Lol. I recognize that, and we built in a lot of testing into our companies and projects over the past few decades. Most of the testing was added AFTER the core work was done. This is fine for humans.\n\nTHIS IS BAD FOR ROBOTS.\n\nThe robots LOVE TDD. Seriously. They eat it up.\n\nWith TDD you have the robot friend build out the test, and the mock. Then your next prompt you build the mock to be real. And the robot just loves this. It is the most effective counter to hallucination and LLM scope drift I have found. It really helps the robots to stay on task.\n\n### Linting\n\nI am such a fan of linting. It is so nice. Ruff is a wonderful product. Biome is cool. Clippy is fun (and a good name).\n\nFor whatever reason the ROBOTS love to run a good linter.\n\nBuilding in the practice to run the linter constantly has kept a lot of bugs away, and kept the code more maintainable and easier to read. You know this already.\n\nAdd in a good formatter and everything is beautiful.\n\n### Pre Commit hooks\n\nThe real magic of all this is to add these tasks to a pre-commit hook. I recommend the pre-commit python package. You can easily use it via an `uv tools install pre-commit` command and then just build out a nice `.pre-commit-config.yaml` file and bam. Every time you try and commit it will run all these wonderful tests, type checking, linting, and whatnot to make sure your code is A+++ would execute again.\n\nThis is a great hack for working with Claude Code. The robot REALLLLLY wants to commit. So when you instruct it to do some code and then commit (like I did above) it will make wild code changes, commit the code, inevitably fuck it all up and then have to fix it.\n\nThis is nice cuz it doesn't clog your GitHub actions with a bunch of linting, formatting, and type checking execution that doesn't pass cuz the robot was in a mood.\n\n> A funny thing about claude is it CANNOT for the life of it figure out how to use `uv` correctly. It will pip install shit all over the place if you are not careful. And if you instruct it to use `uv` it will just use `uv pip install.` Maybe AGI isn't going to happen in June. so sad.\n\n### Claude.md and commands\n\nThese are both really simple additions that can squeeze a lot out.\n\n{{< image src=\"_SDI8149.jpg\" alt=\"Jesse at the studio, Sept 15, 2023, Ricoh GRiii\" caption=\"Jesse at the studio, Sigma fp, 11/15/2023\" >}}\n\nI stole a [CLAUDE.md](https://github.com/harperreed/dotfiles/blob/master/.claude/CLAUDE.md) from my friend [Jesse Vincent](https://fsck.com/) who did an [awful lot of work on making it very robust](https://github.com/obra/dotfiles/blob/main/.claude/CLAUDE.md). It is quite nice. Some things that are built into it:\n\n- a light version of the big daddy rule.\n- instructions on how to do TDD\n- stylistic instructions on how I like to code.\n\n> [@clint](https://instagram.com/clintecker) configured his CLAUDE.md to call him MR BEEF and it is currently embedding info about MR BEEF in our all documentation: \"If you're stuck, stop and ask for help—MR BEEF may know best.\". While typing this out, I decided to make my CLAUDE.md file call me \"Harp Dog.\" This is a feature, not a bug.\n\nThe commands are also really nice. You can see some of mine in my dotfiles [here](https://github.com/harperreed/dotfiles/tree/master/.claude/commands).\n\n{{< image src=\"commands.png\"  >}}\n\nI used to use the commands way more, but it is a really great way to get a lot out of regularly used prompts. You can also pass arguments to the commands. For instance in my github issues command, you pass the issue number that you want claude to look at: `/user:gh-issue #45`\n\nClaude will now go and run through the \"prompt\" script that is defined in the `gh-issue.md` file.\n\nYou can also put these commands in a project directory, and make a custom CLAUDE.md in the project directory. I do this to make hugo, rust, go, or javascript specific commands per project.\n\n## \"Continue\"\n\n{{< image src=\"https://media4.giphy.com/media/v1.Y2lkPTc5MGI3NjExNDk3ZTZpdWYwdG5sdmpnaTJqNzJhYXlvcmp6bnNmdmhxaGdoeHJ4MyZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/l2Je3fIeeXyYEM85G/giphy.gif\" >}}\n\nSometimes I feel like that bird that Homer got to hit \"y\". I am just writing \"continue\" or pressing up and pasting in the same prompt.\n\nMost of the time the plans are about 8–12 steps. I can usually get through a Greenfield development plan in about 30–45 minutes regardless of apparent complexity or language.\n\nI was talking through with my friend Bob and he did not believe it. I asked him \"name a thing to build, a language to build it in - and let's see!\"\n\n{{< image src=\"R0000693.jpeg\" caption=\"Bob Swartz, Ricoh GRiiix, 11/17/2024\" >}}\n\nHe was like \"ok. A basic interpreter in C.\"\n\nThis wasn't ideal. I don't know C. I don't really know how to write an interpreter, nor do I really want to. But fuck it.\n\nI followed the above steps and Claude Code did great. We have [a working basic interpreter](https://github.com/harperreed/basic). The first version worked within an hour. I futzed with it for a few more hours and it is pretty good. Would it ship it in 1982? Probably not. You can see the [prompt plan here](https://raw.githubusercontent.com/harperreed/basic/refs/heads/main/docs/prompt_plan.md).\n\n## The Team\n\nOur entire team is using Claude Code currently. We are all approximately following the above process with a lot of person tweaks.\n\nWe are doing way way higher test coverage than we have ever done. We have better code, and it seems to be just as effective as the horrible code we wrote in the past. It is fun to glance at people working and see claude code running in ghostty, in vscode terminal, in zed terminal, and messing with python notebooks.\n\n{{< image src=\"dril.jpg\" >}}\n\nSomeone who has a lot of tokens, please help me budget this. My family is dying.\n\n## thanks\n\nTo all the folks who keep emailing me. It is really fun and nice to hear about your workflows, and projects. I really appreciate it. Keep em coming!\n\n# CURRENT TRANSLATION\nこの「エージェンティック・コーディング」がめちゃくちゃ気に入ってる。あらゆる点で本当に魅力的だ。\n\n[例のブログ記事](/2025/02/16/my-llm-codegen-workflow-atm/)を書いてからというもの、Claude 界隈ではいろいろ起きた。\n\n- Claude Code  \n- MCP  \n- etc\n\n俺のワークフローの話や「あなたの方法で一歩先へ進めたよ！」というメールが何百通も届いた（マジかよ）。何度かカンファレンスで登壇し、codegen の授業も開いた。コンピューターは “codegen” を “codeine” と変換したがることも学んだ──誰が想像した？\n\n{{< image src=\"codegen.png\" >}}\n\nこのあいだ [友人](https://www.elidedbranches.com/)と「**俺たち全員クソほどヤバい**し **AI が仕事を奪う**」って話（詳細はまた今度）をしていたら、「Claude Code の記事を書けよ」と言われた。じゃあ書くか。\n\n---\n\nClaude Code がリリースされたのは、俺がワークフロー記事を書いてからわずか 8 日後で、予想どおり記事の大部分が陳腐化した。それ以来 Aider から Claude Code に乗り換えて、もう振り返っていない。Aider も用途はあるが、今は Claude Code のほうがちょっと役立つ。\n\nClaude Code はパワフルだが、バカみたいに高い。\n\nとはいえワークフロー自体はほぼ同じだ。\n\n- `gpt-4o` とチャットしてアイデアを磨く  \n- 推論性能が高いモデルで仕様を生成する。最近は `o1-pro` か `o3`（`o1-pro` のほうが良いのか、それとも処理が遅いからそう感じるだけなのか？）  \n- そのモデルにプロンプトも生成させる。LLM にプロンプトを書かせるのは最高のハックだし、boomerたちを怒らせるおまけ付き  \n- `spec.md` と `prompt_plan.md` をプロジェクトルートに保存  \n- それから Claude Code に次を入力する  \n\n```prompt\n1. Open **@prompt_plan.md** and identify any prompts not marked as completed.\n2. For each incomplete prompt:\n    - Double-check if it's truly unfinished (if uncertain, ask for clarification).\n    - If you confirm it's already done, skip it.\n    - Otherwise, implement it as described.\n    - Make sure the tests pass, and the program builds/runs\n    - Commit the changes to your repository with a clear commit message.\n    - Update **@prompt_plan.md** to mark this prompt as completed.\n3. After you finish each prompt, pause and wait for user review or feedback.\n4. Repeat with the next unfinished prompt as directed by the user.\n```\n\nこのプロンプトのキモは、`prompt_plan.md` をチェックして未完了のタスクだけ拾い、実装→テスト→Git へコミット→`prompt_plan.md` 更新まで全部やったら一旦止まって指示を待つところだ。🤌\n\nあとはのんびりしながら Claude に「yes」と返すだけ。フィードバックを求められたら応える。あいだで Cookie Clicker に没頭していると、気づけば魔法が起きている。\n\nこれがめちゃくちゃうまくいく。さらに威力を底上げする“スーパーパワー”をいくつか仕込める。\n\n## ディフェンシブ・コーディング！\n\n### テスト\n\nテストと TDD は必須だ。本気で TDD に取り組むことを強く勧める。\n\n昔の俺は TDD アンチで、ヘタだし時間のムダだと思っていた。でも間違っていた。過去数十年にわたり会社やプロジェクトに大量のテストを追加してきたが、大半はコアを書いた後に付け足す方式だった。人間ならそれでもいい。\n\nこれは **ロボットにとっては最悪** だ。\n\nロボは TDD が大好き。まずロボにテストとモックを書かせ、次のプロンプトでモックを実装に置き換える──この流れが最高だ。幻覚やスコープ逸脱への最強の対策になっている。\n\n### リンティング\n\nリンティング最高。Ruff は神、Biome もイケてる、Clippy は名前が秀逸。\n\nロボも良いリンターを回すのが大好物だ。\n\n常にリンターを走らせる習慣はバグを減らし、保守性と可読性を高める。フォーマッタも入れれば完璧。\n\n### Pre-commit フック\n\n真の魔法は、これら全部を pre-commit フックに突っ込むことだ。Python の `pre-commit` パッケージがおすすめ。`uv tools install pre-commit` で入れて `.pre-commit-config.yaml` を用意すれば、コミットのたびにテスト・型チェック・リンティングが自動実行され、コード品質は A+++、再実行しても落ちない状態を保てる。\n\nClaude Code と組み合わせると特に効果大。ロボは「コミットしたくてたまらない」ので、雑に変更→コミット→全部ぶっ壊す→直す…をやりがちだが、pre-commit が止めてくれるおかげで GitHub Actions が詰まることもない。\n\n> 面白いことに Claude は `uv` の使い方がさっぱり分からない。油断すると `pip install` を乱射するし、「uv を使え」と指示すると `uv pip install` とかやりだす。6 月に AGI が来るって？ ないない、残念。\n\n### `CLAUDE.md` と commands\n\nどちらもシンプルだけど効果はデカい。\n\n{{< image src=\"_SDI8149.jpg\" alt=\"Jesse at the studio, Sept 15, 2023, Ricoh GRiii\" caption=\"Jesse at the studio, Sigma fp, 11/15/2023\" >}}\n\n友人の [Jesse Vincent](https://fsck.com/) から [`CLAUDE.md`](https://github.com/harperreed/dotfiles/blob/master/.claude/CLAUDE.md) を拝借した。彼が[めちゃくちゃ強化](https://github.com/obra/dotfiles/blob/main/.claude/CLAUDE.md)していて──\n\n- a light version of the big daddy rule  \n- instructions on how to do TDD  \n- stylistic instructions on how I like to code  \n\n> [@clint](https://instagram.com/clintecker) は `CLAUDE.md` に自分を「MR BEEF」と呼ばせる設定にしていて、ドキュメント中に「困ったら MR BEEF に聞け」みたいな文が紛れ込んでいる。この記事を書きながら、俺も「Harp Dog」と名乗らせることにした。これは仕様だ、バグじゃない。\n\ncommands も便利だ。俺の例は [dotfiles](https://github.com/harperreed/dotfiles/tree/master/.claude/commands) をどうぞ。\n\n{{< image src=\"commands.png\" >}}\n\n以前は commands をもっと使っていたが、よく使うプロンプトをサッと呼び出すのに最適だ。引数も渡せる。たとえば GitHub Issue なら `/user:gh-issue #45` のように番号を渡せば OK。\n\nClaude が `gh-issue.md` に定義した “prompt” スクリプトを実行してくれる。\n\nプロジェクト直下に commands と `CLAUDE.md` を置けば、Hugo・Rust・Go・JavaScript みたいに言語や環境固有のコマンドも作れる。\n\n## “Continue”\n\n{{< image src=\"https://media4.giphy.com/media/v1.Y2lkPTc5MGI3NjExNDk3ZTZpdWYwdG5sdmpnaTJqNzJhYXlvcmp6bnNmdmhxaGdoeHJ4MyZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/l2Je3fIeeXyYEM85G/giphy.gif\" >}}\n\nときどき「y」を押すだけの鳥になった気分で、ひたすら「continue」と打つか、↑キーで同じプロンプトを貼り付ける。\n\nプランはだいたい 8〜12 ステップ。新規開発なら言語や難易度を問わず 30〜45 分で完走できる。\n\n友人 Bob にその話をしたら信じてくれなかったので、「作るものと言語を指定してみて」と頼んだ。\n\n{{< image src=\"R0000693.jpeg\" caption=\"Bob Swartz, Ricoh GRiiix, 11/17/2024\" >}}\n\nBob「じゃあ C で BASIC インタプリタ」\n\n正直キツい。C もインタプリタも詳しくないし、作りたいわけでもない。でもクソくらえ、やってみる。\n\n例の手順で進めたら Claude Code が大活躍。結果、[動く BASIC インタプリタ](https://github.com/harperreed/basic) が完成した。初版は 1 時間以内に動いた。その後数時間いじってかなり良くなった。1982 年にリリースできたか？ たぶん無理。でも [prompt_plan.md](https://raw.githubusercontent.com/harperreed/basic/refs/heads/main/docs/prompt_plan.md) を見れば流れが分かるはず。\n\n## チーム\n\nうちのチーム全員が今 Claude Code を使っている。基本は上の手順で、あとは各自で微調整。\n\nテストカバレッジは過去最高、コード品質も向上。昔の汚いコードと同じぐらい──いやそれ以上に──動く。ふと周りを見ると、ghostty や VS Code、Zed のターミナルで Claude Code が走り、Python ノートブックをいじっているのが見えて面白い。\n\n{{< image src=\"dril.jpg\" >}}\n\n誰か大量にトークンを持ってる人、予算立てを手伝ってくれ。家族が死にかけてる。\n\n## thanks\n\nメールをくれる皆さんへ。あなたたちのワークフローやプロジェクトの話を聞くのは本当に楽しいし嬉しい。感謝しかない。これからもどしどし送ってくれ！\n\nPlease critique this translation mercilessly and provide detailed feedback on what needs to be improved.\nFormat your critique as a structured list of issues, organized by severity and category.\nInclude specific suggestions for how to fix each issue.",
      "response": "【総評】  \n原文のカジュアルで毒舌な語り口をうまく残しつつ、8～9割は正確に訳せています。しかし細部のニュアンス欠落・語調の揺れ・訳抜け・用語統一ミス・不自然な日本語が散見されます。以下の指摘を修正すれば、原文に100％忠実かつ「訳文らしくない」自然な日本語に近づきます。\n\n──────────────────────  \n◆Critical（致命的レベル：意味を損なう誤訳・訳抜け・追加）  \n1. 訳抜け：「Here we go.」  \n   ‑ 「さぁ始めよう。」「では行ってみよう。」などを補う。  \n2. 訳抜け：「Lots more cookie clicker.」  \n   ‑ 原文は “I then kick back … Lots more cookie clicker.” で「Cookie Clicker をもっとクリックしまくる」程度の意味。現訳は文脈を変えてしまい、意図（作業中の暇つぶし）を曖昧にしている。  \n   ‑ 例：「その間は Cookie Clicker をひたすら連打してる。」  \n3. ニュアンス消失：「wild code changes」  \n   ‑ 「雑に変更」だけでは “wild” の暴走感が薄い。  \n   ‑ 例：「メチャクチャなコード変更をかまし」などで強調。  \n4. 原文の “A+++ would execute again” のニュアンス誤読  \n   ‑ 原文は「A+++（超高評価）で再実行しても通る」という皮肉風。現訳は「再実行しても落ちない状態」とだけ訳し“超高評価”の軽いジョークが欠ける。  \n5. CLAUDE.md の箇条書き内「a light version of the big daddy rule」未訳  \n   ‑ 単に原文を残すのではなく補足訳を。例：「『ビッグダディ・ルール』の簡易版」等。  \n6. “wat” の含意  \n   ‑ 「（wat）」はネットスラングで「は？」に近い驚き。現訳「マジかよ」はやや合うが “wat” の突っ込み感を補足しても良い。  \n\n──────────────────────  \n◆Major（重要レベル：トーン・スタイル・語感のずれ／用語統一）  \n1. タイトル語「agentic coding」の表記  \n   ‑ “エージェンティック”より「エージェント駆動型コーディング」や「エージェント指向コーディング」のほうが一般的に推測しやすい。カタカナの場合は一度だけ（agentic coding と英語併記）推奨。  \n2. スラング・罵語の粒度が一定しない  \n   ‑ 原文は “fuck / shit / hell” を多用。現訳は「バカみたい」「クソほど」「クソくらえ」などで再現しているが箇所により緩急がまちまち。  \n   ‑ 例：「inevitably fuck it all up」→「確実に全部ぶっ壊しやがる」。  \n3. “boomer” の訳語  \n   ‑ “boomerたち”は直訳臭。ジョークを保ちつつ「オジサン世代」「団塊勢」などに要調整。  \n4. 「あいだで Cookie Clicker に没頭していると」  \n   ‑ 「あいだで」は不自然。「その合間に」「裏で」等に修正。  \n5. “friend” の性別ニュアンス  \n   ‑ 原文 “she” を訳出していない。流れ上の情報量は小さいが忠実さ優先なら「彼女に」など補完。  \n6. 「etc」  \n   ‑ そのまま書くと読者が戸惑う。和文では「など」へ置換。箇条書きなので「…ほか」としても可。  \n\n──────────────────────  \n◆Minor（軽微：読みやすさ・自然さ）  \n1. 「あらゆる点で本当に魅力的だ」  \n   ‑ 口語文脈なら「めちゃくちゃ魅力的」などの方がトーン統一。  \n2. 「codegen の授業も開いた」  \n   ‑ 「授業を何回か担当した」「ワークショップもやった」の方が自然。  \n3. 「パワフル」多用  \n   ‑ 日本語らしさを出すなら2回目以降は「強力」など言い換え。  \n4. 「リンティング最高」→「リンティングは最高」  \n5. 「プロンプトを書かせるのは最高のハックだし、boomerたちを怒らせるおまけ付き」  \n   ‑ 「～おまけ付き」はやや硬い。「しかもブーマー世代がブチ切れるのがまた痛快」等。  \n6. 「俺たち全員クソほどヤバい」  \n   ‑ “totally fucked” の直訳感は出ているが「全員終わってる」にするとより自然。  \n7. 「今は Claude Code のほうがちょっと役立つ」  \n   ‑ “atm” を維持するなら「今のところ」は明示すると良い。  \n8. 「codegen を codeine と変換したがる」  \n   ‑ 「スペルチェッカーが codegen を codeine に直そうとする」方が日本語の因果が滑らか。  \n\n──────────────────────  \n◆Terminology / Consistency（技術用語・表記統一）  \n1. “spec.md”“prompt_plan.md”  \n   ‑ 拡張子込みはそのまま、本文説明は「仕様書 (spec.md)」などで一度だけ註釈。  \n2. LLM／TDD／CI などの英略語  \n   ‑ 読者想定により「大文字アルファベット」「半角」統一。  \n3. “pre-commit”  \n   ‑ ハイフンの有無が文中で揺れ。「pre-commit フック」で統一推奨。  \n4. `uv tools install pre-commit`  \n   ‑ コードは原文維持。ただし説明文中は「uv ツール」等カタカナ併記。  \n\n──────────────────────  \n◆Machine-like / Literal Spots（機械翻訳感・直訳臭）  \n1. 「あいだで」「boomerたち」など英語構文が透ける。  \n2. 箇条書き前に「とはいえワークフロー自体はほぼ同じだ。」で急に硬い。  \n3. 「これは神」「イケてる」などカタカナ多用が少し過剰。口語は保ちつつ日本語動詞で緩急を。  \n\n──────────────────────  \n◆提案された改訂例（冒頭のみ抜粋）  \nOriginal current JP:  \nこの「エージェンティック・コーディング」がめちゃくちゃ気に入ってる。あらゆる点で本当に魅力的だ。\n\nSuggested:  \nいわゆる “agentic coding（エージェント指向コーディング）” がとにかく気に入っている。もう、あらゆる意味で魅力しかない。\n\n（以下同様にトーンをそろえつつ上記修正を適用）\n\n──────────────────────  \n上記を修正すれば、意味の忠実度・語調の一貫性・可読性すべてが向上します。",
      "usage": {
        "prompt_tokens": 5680,
        "completion_tokens": 1761,
        "total_tokens": 7441
      },
      "streaming": true
    },
    "feedback": {
      "model": "o3",
      "target_language": "japanese",
      "system_prompt": "You are a master translator and editor specializing in japanese.\nYour task is to improve a translation based on detailed critique feedback.\n\n1. Carefully read the original text, current translation, and the critique feedback\n2. Address ALL issues identified in the critique\n3. Apply the specific suggestions for improvement\n4. Ensure the translation is accurate, natural-sounding, and faithful to the original\n5. Preserve all formatting, markdown, and structure of the original text\n6. Make sure the final text reads as if it were originally written in japanese\n\nDo not ignore any of the critique points. Every issue identified must be addressed in your improved version.\n",
      "user_prompt": "# ORIGINAL TEXT\nI really like this agentic coding thing. It is quite compelling in so many ways.\n\nSince I wrote [that original blog post](/2025/02/16/my-llm-codegen-workflow-atm/) a lot has happened in Claude land:\n\n- Claude Code\n- MCP\n- etc\n\nI have received hundreds (wat) of emails from people talking about their workflows and how they have used my workflow to get ahead. I have spoken at a few conferences, and taught a few classes about codegen. I have learned that computers really want to spellcheck codegen to codeine, who knew!\n\n{{< image src=\"codegen.png\"  >}}\n\nI was talking to a [friend](https://www.elidedbranches.com/) the other day about how we are **all totally fucked** and **AI will take our jobs** (more on that in a later post), and she was like \"you should write a post about claude code.\"\n\nHere we go.\n\nClaude Code was released eight days after I wrote my original workflow blog post, and as I predicted, it made a lot of my post irrelevant. I have since migrated from Aider to Claude Code and not looked back. I still like Aider, and it has a distinct use, but Claude Code is a bit more useful atm.\n\nClaude Code is powerful, and a hell of a lot more expensive.\n\nMy workflow is very similar to what it was before.\n\n- I chat with `gpt-4o` to hone my idea\n- I use the best reasoning model I can find to generate the spec. These days it is o1-pro or o3 (is o1-pro better than o3? Or do I feel like it is better cuz it takes longer?)\n- I use the reasoning model to generate the prompts. Using an LLM to generate prompts is a beautiful hack. It makes boomers mad too.\n- I save the spec.md, and the prompt_plan.md in the root of the project.\n- I then type into claude code the following:\n\n```prompt\n1. Open **@prompt_plan.md** and identify any prompts not marked as completed.\n2. For each incomplete prompt:\n    - Double-check if it's truly unfinished (if uncertain, ask for clarification).\n    - If you confirm it's already done, skip it.\n    - Otherwise, implement it as described.\n    - Make sure the tests pass, and the program builds/runs\n    - Commit the changes to your repository with a clear commit message.\n    - Update **@prompt_plan.md** to mark this prompt as completed.\n3. After you finish each prompt, pause and wait for user review or feedback.\n4. Repeat with the next unfinished prompt as directed by the user.\n```\n\n- The magic with this prompt is that it checks the prompt plan. Looks for things that are not marked as completed, then does the next remaining task. It commits it to git, and then updates the prompt plan with what is complete. It then pops up and asks you to continue once it is done. 🤌\n\n- I then kick back and tell claude `yes` while it does the work. It will pop up for feedback, and magic happens.\n- Lots more cookie clicker.\n\nThis works super well. There are a few superpowers you can embed in your process that will really help.\n\n## Defensive coding!\n\n### Testing\n\nTesting and test-driven development is a must. I highly recommend really engaging in building out a robust TDD practice.\n\nI was a TDD hater. I was bad at it and I felt like I was wasting time. I was not correct. Lol. I recognize that, and we built in a lot of testing into our companies and projects over the past few decades. Most of the testing was added AFTER the core work was done. This is fine for humans.\n\nTHIS IS BAD FOR ROBOTS.\n\nThe robots LOVE TDD. Seriously. They eat it up.\n\nWith TDD you have the robot friend build out the test, and the mock. Then your next prompt you build the mock to be real. And the robot just loves this. It is the most effective counter to hallucination and LLM scope drift I have found. It really helps the robots to stay on task.\n\n### Linting\n\nI am such a fan of linting. It is so nice. Ruff is a wonderful product. Biome is cool. Clippy is fun (and a good name).\n\nFor whatever reason the ROBOTS love to run a good linter.\n\nBuilding in the practice to run the linter constantly has kept a lot of bugs away, and kept the code more maintainable and easier to read. You know this already.\n\nAdd in a good formatter and everything is beautiful.\n\n### Pre Commit hooks\n\nThe real magic of all this is to add these tasks to a pre-commit hook. I recommend the pre-commit python package. You can easily use it via an `uv tools install pre-commit` command and then just build out a nice `.pre-commit-config.yaml` file and bam. Every time you try and commit it will run all these wonderful tests, type checking, linting, and whatnot to make sure your code is A+++ would execute again.\n\nThis is a great hack for working with Claude Code. The robot REALLLLLY wants to commit. So when you instruct it to do some code and then commit (like I did above) it will make wild code changes, commit the code, inevitably fuck it all up and then have to fix it.\n\nThis is nice cuz it doesn't clog your GitHub actions with a bunch of linting, formatting, and type checking execution that doesn't pass cuz the robot was in a mood.\n\n> A funny thing about claude is it CANNOT for the life of it figure out how to use `uv` correctly. It will pip install shit all over the place if you are not careful. And if you instruct it to use `uv` it will just use `uv pip install.` Maybe AGI isn't going to happen in June. so sad.\n\n### Claude.md and commands\n\nThese are both really simple additions that can squeeze a lot out.\n\n{{< image src=\"_SDI8149.jpg\" alt=\"Jesse at the studio, Sept 15, 2023, Ricoh GRiii\" caption=\"Jesse at the studio, Sigma fp, 11/15/2023\" >}}\n\nI stole a [CLAUDE.md](https://github.com/harperreed/dotfiles/blob/master/.claude/CLAUDE.md) from my friend [Jesse Vincent](https://fsck.com/) who did an [awful lot of work on making it very robust](https://github.com/obra/dotfiles/blob/main/.claude/CLAUDE.md). It is quite nice. Some things that are built into it:\n\n- a light version of the big daddy rule.\n- instructions on how to do TDD\n- stylistic instructions on how I like to code.\n\n> [@clint](https://instagram.com/clintecker) configured his CLAUDE.md to call him MR BEEF and it is currently embedding info about MR BEEF in our all documentation: \"If you're stuck, stop and ask for help—MR BEEF may know best.\". While typing this out, I decided to make my CLAUDE.md file call me \"Harp Dog.\" This is a feature, not a bug.\n\nThe commands are also really nice. You can see some of mine in my dotfiles [here](https://github.com/harperreed/dotfiles/tree/master/.claude/commands).\n\n{{< image src=\"commands.png\"  >}}\n\nI used to use the commands way more, but it is a really great way to get a lot out of regularly used prompts. You can also pass arguments to the commands. For instance in my github issues command, you pass the issue number that you want claude to look at: `/user:gh-issue #45`\n\nClaude will now go and run through the \"prompt\" script that is defined in the `gh-issue.md` file.\n\nYou can also put these commands in a project directory, and make a custom CLAUDE.md in the project directory. I do this to make hugo, rust, go, or javascript specific commands per project.\n\n## \"Continue\"\n\n{{< image src=\"https://media4.giphy.com/media/v1.Y2lkPTc5MGI3NjExNDk3ZTZpdWYwdG5sdmpnaTJqNzJhYXlvcmp6bnNmdmhxaGdoeHJ4MyZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/l2Je3fIeeXyYEM85G/giphy.gif\" >}}\n\nSometimes I feel like that bird that Homer got to hit \"y\". I am just writing \"continue\" or pressing up and pasting in the same prompt.\n\nMost of the time the plans are about 8–12 steps. I can usually get through a Greenfield development plan in about 30–45 minutes regardless of apparent complexity or language.\n\nI was talking through with my friend Bob and he did not believe it. I asked him \"name a thing to build, a language to build it in - and let's see!\"\n\n{{< image src=\"R0000693.jpeg\" caption=\"Bob Swartz, Ricoh GRiiix, 11/17/2024\" >}}\n\nHe was like \"ok. A basic interpreter in C.\"\n\nThis wasn't ideal. I don't know C. I don't really know how to write an interpreter, nor do I really want to. But fuck it.\n\nI followed the above steps and Claude Code did great. We have [a working basic interpreter](https://github.com/harperreed/basic). The first version worked within an hour. I futzed with it for a few more hours and it is pretty good. Would it ship it in 1982? Probably not. You can see the [prompt plan here](https://raw.githubusercontent.com/harperreed/basic/refs/heads/main/docs/prompt_plan.md).\n\n## The Team\n\nOur entire team is using Claude Code currently. We are all approximately following the above process with a lot of person tweaks.\n\nWe are doing way way higher test coverage than we have ever done. We have better code, and it seems to be just as effective as the horrible code we wrote in the past. It is fun to glance at people working and see claude code running in ghostty, in vscode terminal, in zed terminal, and messing with python notebooks.\n\n{{< image src=\"dril.jpg\" >}}\n\nSomeone who has a lot of tokens, please help me budget this. My family is dying.\n\n## thanks\n\nTo all the folks who keep emailing me. It is really fun and nice to hear about your workflows, and projects. I really appreciate it. Keep em coming!\n\n# CURRENT TRANSLATION\nこの「エージェンティック・コーディング」がめちゃくちゃ気に入ってる。あらゆる点で本当に魅力的だ。\n\n[例のブログ記事](/2025/02/16/my-llm-codegen-workflow-atm/)を書いてからというもの、Claude 界隈ではいろいろ起きた。\n\n- Claude Code  \n- MCP  \n- etc\n\n俺のワークフローの話や「あなたの方法で一歩先へ進めたよ！」というメールが何百通も届いた（マジかよ）。何度かカンファレンスで登壇し、codegen の授業も開いた。コンピューターは “codegen” を “codeine” と変換したがることも学んだ──誰が想像した？\n\n{{< image src=\"codegen.png\" >}}\n\nこのあいだ [友人](https://www.elidedbranches.com/)と「**俺たち全員クソほどヤバい**し **AI が仕事を奪う**」って話（詳細はまた今度）をしていたら、「Claude Code の記事を書けよ」と言われた。じゃあ書くか。\n\n---\n\nClaude Code がリリースされたのは、俺がワークフロー記事を書いてからわずか 8 日後で、予想どおり記事の大部分が陳腐化した。それ以来 Aider から Claude Code に乗り換えて、もう振り返っていない。Aider も用途はあるが、今は Claude Code のほうがちょっと役立つ。\n\nClaude Code はパワフルだが、バカみたいに高い。\n\nとはいえワークフロー自体はほぼ同じだ。\n\n- `gpt-4o` とチャットしてアイデアを磨く  \n- 推論性能が高いモデルで仕様を生成する。最近は `o1-pro` か `o3`（`o1-pro` のほうが良いのか、それとも処理が遅いからそう感じるだけなのか？）  \n- そのモデルにプロンプトも生成させる。LLM にプロンプトを書かせるのは最高のハックだし、boomerたちを怒らせるおまけ付き  \n- `spec.md` と `prompt_plan.md` をプロジェクトルートに保存  \n- それから Claude Code に次を入力する  \n\n```prompt\n1. Open **@prompt_plan.md** and identify any prompts not marked as completed.\n2. For each incomplete prompt:\n    - Double-check if it's truly unfinished (if uncertain, ask for clarification).\n    - If you confirm it's already done, skip it.\n    - Otherwise, implement it as described.\n    - Make sure the tests pass, and the program builds/runs\n    - Commit the changes to your repository with a clear commit message.\n    - Update **@prompt_plan.md** to mark this prompt as completed.\n3. After you finish each prompt, pause and wait for user review or feedback.\n4. Repeat with the next unfinished prompt as directed by the user.\n```\n\nこのプロンプトのキモは、`prompt_plan.md` をチェックして未完了のタスクだけ拾い、実装→テスト→Git へコミット→`prompt_plan.md` 更新まで全部やったら一旦止まって指示を待つところだ。🤌\n\nあとはのんびりしながら Claude に「yes」と返すだけ。フィードバックを求められたら応える。あいだで Cookie Clicker に没頭していると、気づけば魔法が起きている。\n\nこれがめちゃくちゃうまくいく。さらに威力を底上げする“スーパーパワー”をいくつか仕込める。\n\n## ディフェンシブ・コーディング！\n\n### テスト\n\nテストと TDD は必須だ。本気で TDD に取り組むことを強く勧める。\n\n昔の俺は TDD アンチで、ヘタだし時間のムダだと思っていた。でも間違っていた。過去数十年にわたり会社やプロジェクトに大量のテストを追加してきたが、大半はコアを書いた後に付け足す方式だった。人間ならそれでもいい。\n\nこれは **ロボットにとっては最悪** だ。\n\nロボは TDD が大好き。まずロボにテストとモックを書かせ、次のプロンプトでモックを実装に置き換える──この流れが最高だ。幻覚やスコープ逸脱への最強の対策になっている。\n\n### リンティング\n\nリンティング最高。Ruff は神、Biome もイケてる、Clippy は名前が秀逸。\n\nロボも良いリンターを回すのが大好物だ。\n\n常にリンターを走らせる習慣はバグを減らし、保守性と可読性を高める。フォーマッタも入れれば完璧。\n\n### Pre-commit フック\n\n真の魔法は、これら全部を pre-commit フックに突っ込むことだ。Python の `pre-commit` パッケージがおすすめ。`uv tools install pre-commit` で入れて `.pre-commit-config.yaml` を用意すれば、コミットのたびにテスト・型チェック・リンティングが自動実行され、コード品質は A+++、再実行しても落ちない状態を保てる。\n\nClaude Code と組み合わせると特に効果大。ロボは「コミットしたくてたまらない」ので、雑に変更→コミット→全部ぶっ壊す→直す…をやりがちだが、pre-commit が止めてくれるおかげで GitHub Actions が詰まることもない。\n\n> 面白いことに Claude は `uv` の使い方がさっぱり分からない。油断すると `pip install` を乱射するし、「uv を使え」と指示すると `uv pip install` とかやりだす。6 月に AGI が来るって？ ないない、残念。\n\n### `CLAUDE.md` と commands\n\nどちらもシンプルだけど効果はデカい。\n\n{{< image src=\"_SDI8149.jpg\" alt=\"Jesse at the studio, Sept 15, 2023, Ricoh GRiii\" caption=\"Jesse at the studio, Sigma fp, 11/15/2023\" >}}\n\n友人の [Jesse Vincent](https://fsck.com/) から [`CLAUDE.md`](https://github.com/harperreed/dotfiles/blob/master/.claude/CLAUDE.md) を拝借した。彼が[めちゃくちゃ強化](https://github.com/obra/dotfiles/blob/main/.claude/CLAUDE.md)していて──\n\n- a light version of the big daddy rule  \n- instructions on how to do TDD  \n- stylistic instructions on how I like to code  \n\n> [@clint](https://instagram.com/clintecker) は `CLAUDE.md` に自分を「MR BEEF」と呼ばせる設定にしていて、ドキュメント中に「困ったら MR BEEF に聞け」みたいな文が紛れ込んでいる。この記事を書きながら、俺も「Harp Dog」と名乗らせることにした。これは仕様だ、バグじゃない。\n\ncommands も便利だ。俺の例は [dotfiles](https://github.com/harperreed/dotfiles/tree/master/.claude/commands) をどうぞ。\n\n{{< image src=\"commands.png\" >}}\n\n以前は commands をもっと使っていたが、よく使うプロンプトをサッと呼び出すのに最適だ。引数も渡せる。たとえば GitHub Issue なら `/user:gh-issue #45` のように番号を渡せば OK。\n\nClaude が `gh-issue.md` に定義した “prompt” スクリプトを実行してくれる。\n\nプロジェクト直下に commands と `CLAUDE.md` を置けば、Hugo・Rust・Go・JavaScript みたいに言語や環境固有のコマンドも作れる。\n\n## “Continue”\n\n{{< image src=\"https://media4.giphy.com/media/v1.Y2lkPTc5MGI3NjExNDk3ZTZpdWYwdG5sdmpnaTJqNzJhYXlvcmp6bnNmdmhxaGdoeHJ4MyZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/l2Je3fIeeXyYEM85G/giphy.gif\" >}}\n\nときどき「y」を押すだけの鳥になった気分で、ひたすら「continue」と打つか、↑キーで同じプロンプトを貼り付ける。\n\nプランはだいたい 8〜12 ステップ。新規開発なら言語や難易度を問わず 30〜45 分で完走できる。\n\n友人 Bob にその話をしたら信じてくれなかったので、「作るものと言語を指定してみて」と頼んだ。\n\n{{< image src=\"R0000693.jpeg\" caption=\"Bob Swartz, Ricoh GRiiix, 11/17/2024\" >}}\n\nBob「じゃあ C で BASIC インタプリタ」\n\n正直キツい。C もインタプリタも詳しくないし、作りたいわけでもない。でもクソくらえ、やってみる。\n\n例の手順で進めたら Claude Code が大活躍。結果、[動く BASIC インタプリタ](https://github.com/harperreed/basic) が完成した。初版は 1 時間以内に動いた。その後数時間いじってかなり良くなった。1982 年にリリースできたか？ たぶん無理。でも [prompt_plan.md](https://raw.githubusercontent.com/harperreed/basic/refs/heads/main/docs/prompt_plan.md) を見れば流れが分かるはず。\n\n## チーム\n\nうちのチーム全員が今 Claude Code を使っている。基本は上の手順で、あとは各自で微調整。\n\nテストカバレッジは過去最高、コード品質も向上。昔の汚いコードと同じぐらい──いやそれ以上に──動く。ふと周りを見ると、ghostty や VS Code、Zed のターミナルで Claude Code が走り、Python ノートブックをいじっているのが見えて面白い。\n\n{{< image src=\"dril.jpg\" >}}\n\n誰か大量にトークンを持ってる人、予算立てを手伝ってくれ。家族が死にかけてる。\n\n## thanks\n\nメールをくれる皆さんへ。あなたたちのワークフローやプロジェクトの話を聞くのは本当に楽しいし嬉しい。感謝しかない。これからもどしどし送ってくれ！\n\n# CRITIQUE FEEDBACK\n【総評】  \n原文のカジュアルで毒舌な語り口をうまく残しつつ、8～9割は正確に訳せています。しかし細部のニュアンス欠落・語調の揺れ・訳抜け・用語統一ミス・不自然な日本語が散見されます。以下の指摘を修正すれば、原文に100％忠実かつ「訳文らしくない」自然な日本語に近づきます。\n\n──────────────────────  \n◆Critical（致命的レベル：意味を損なう誤訳・訳抜け・追加）  \n1. 訳抜け：「Here we go.」  \n   ‑ 「さぁ始めよう。」「では行ってみよう。」などを補う。  \n2. 訳抜け：「Lots more cookie clicker.」  \n   ‑ 原文は “I then kick back … Lots more cookie clicker.” で「Cookie Clicker をもっとクリックしまくる」程度の意味。現訳は文脈を変えてしまい、意図（作業中の暇つぶし）を曖昧にしている。  \n   ‑ 例：「その間は Cookie Clicker をひたすら連打してる。」  \n3. ニュアンス消失：「wild code changes」  \n   ‑ 「雑に変更」だけでは “wild” の暴走感が薄い。  \n   ‑ 例：「メチャクチャなコード変更をかまし」などで強調。  \n4. 原文の “A+++ would execute again” のニュアンス誤読  \n   ‑ 原文は「A+++（超高評価）で再実行しても通る」という皮肉風。現訳は「再実行しても落ちない状態」とだけ訳し“超高評価”の軽いジョークが欠ける。  \n5. CLAUDE.md の箇条書き内「a light version of the big daddy rule」未訳  \n   ‑ 単に原文を残すのではなく補足訳を。例：「『ビッグダディ・ルール』の簡易版」等。  \n6. “wat” の含意  \n   ‑ 「（wat）」はネットスラングで「は？」に近い驚き。現訳「マジかよ」はやや合うが “wat” の突っ込み感を補足しても良い。  \n\n──────────────────────  \n◆Major（重要レベル：トーン・スタイル・語感のずれ／用語統一）  \n1. タイトル語「agentic coding」の表記  \n   ‑ “エージェンティック”より「エージェント駆動型コーディング」や「エージェント指向コーディング」のほうが一般的に推測しやすい。カタカナの場合は一度だけ（agentic coding と英語併記）推奨。  \n2. スラング・罵語の粒度が一定しない  \n   ‑ 原文は “fuck / shit / hell” を多用。現訳は「バカみたい」「クソほど」「クソくらえ」などで再現しているが箇所により緩急がまちまち。  \n   ‑ 例：「inevitably fuck it all up」→「確実に全部ぶっ壊しやがる」。  \n3. “boomer” の訳語  \n   ‑ “boomerたち”は直訳臭。ジョークを保ちつつ「オジサン世代」「団塊勢」などに要調整。  \n4. 「あいだで Cookie Clicker に没頭していると」  \n   ‑ 「あいだで」は不自然。「その合間に」「裏で」等に修正。  \n5. “friend” の性別ニュアンス  \n   ‑ 原文 “she” を訳出していない。流れ上の情報量は小さいが忠実さ優先なら「彼女に」など補完。  \n6. 「etc」  \n   ‑ そのまま書くと読者が戸惑う。和文では「など」へ置換。箇条書きなので「…ほか」としても可。  \n\n──────────────────────  \n◆Minor（軽微：読みやすさ・自然さ）  \n1. 「あらゆる点で本当に魅力的だ」  \n   ‑ 口語文脈なら「めちゃくちゃ魅力的」などの方がトーン統一。  \n2. 「codegen の授業も開いた」  \n   ‑ 「授業を何回か担当した」「ワークショップもやった」の方が自然。  \n3. 「パワフル」多用  \n   ‑ 日本語らしさを出すなら2回目以降は「強力」など言い換え。  \n4. 「リンティング最高」→「リンティングは最高」  \n5. 「プロンプトを書かせるのは最高のハックだし、boomerたちを怒らせるおまけ付き」  \n   ‑ 「～おまけ付き」はやや硬い。「しかもブーマー世代がブチ切れるのがまた痛快」等。  \n6. 「俺たち全員クソほどヤバい」  \n   ‑ “totally fucked” の直訳感は出ているが「全員終わってる」にするとより自然。  \n7. 「今は Claude Code のほうがちょっと役立つ」  \n   ‑ “atm” を維持するなら「今のところ」は明示すると良い。  \n8. 「codegen を codeine と変換したがる」  \n   ‑ 「スペルチェッカーが codegen を codeine に直そうとする」方が日本語の因果が滑らか。  \n\n──────────────────────  \n◆Terminology / Consistency（技術用語・表記統一）  \n1. “spec.md”“prompt_plan.md”  \n   ‑ 拡張子込みはそのまま、本文説明は「仕様書 (spec.md)」などで一度だけ註釈。  \n2. LLM／TDD／CI などの英略語  \n   ‑ 読者想定により「大文字アルファベット」「半角」統一。  \n3. “pre-commit”  \n   ‑ ハイフンの有無が文中で揺れ。「pre-commit フック」で統一推奨。  \n4. `uv tools install pre-commit`  \n   ‑ コードは原文維持。ただし説明文中は「uv ツール」等カタカナ併記。  \n\n──────────────────────  \n◆Machine-like / Literal Spots（機械翻訳感・直訳臭）  \n1. 「あいだで」「boomerたち」など英語構文が透ける。  \n2. 箇条書き前に「とはいえワークフロー自体はほぼ同じだ。」で急に硬い。  \n3. 「これは神」「イケてる」などカタカナ多用が少し過剰。口語は保ちつつ日本語動詞で緩急を。  \n\n──────────────────────  \n◆提案された改訂例（冒頭のみ抜粋）  \nOriginal current JP:  \nこの「エージェンティック・コーディング」がめちゃくちゃ気に入ってる。あらゆる点で本当に魅力的だ。\n\nSuggested:  \nいわゆる “agentic coding（エージェント指向コーディング）” がとにかく気に入っている。もう、あらゆる意味で魅力しかない。\n\n（以下同様にトーンをそろえつつ上記修正を適用）\n\n──────────────────────  \n上記を修正すれば、意味の忠実度・語調の一貫性・可読性すべてが向上します。\n\nPlease address ALL issues identified in the critique and provide an improved translation.\nReturn ONLY the improved translated text without explanations or comments.",
      "response": "いわゆる “agentic coding（エージェント指向コーディング）” がとにかく気に入っている。もう、あらゆる意味で魅力しかない。\n\n[あの最初のブログ記事](/2025/02/16/my-llm-codegen-workflow-atm/)を書いてからというもの、Claude 界隈ではいろんなことが起きた。\n\n- Claude Code  \n- MCP  \n- ほか\n\n俺のワークフローを真似したとか、自分のやり方を語ってくれるメールが何百通も届いた（wat──「は？」ってレベルの数）。いくつかカンファレンスで登壇し、codegen のワークショップも何度か開いた。あと、スペルチェッカーは “codegen” を “codeine” に直したがるってことも学んだ。誰が想像した？\n\n{{< image src=\"codegen.png\" >}}\n\nこないだ [友人](https://www.elidedbranches.com/)（彼女）と「**俺たち全員終わってる**し **AI が仕事を奪う**」なんて話（詳細はまた別の記事で）をしていたら、「Claude Code の記事を書けば？」と言われた。さぁ始めよう。\n\n---\n\nClaude Code がリリースされたのは、俺がワークフロー記事を書いてからわずか 8 日後で、予想どおり記事の多くが陳腐化した。それ以来 Aider から Claude Code に乗り換え、振り返っていない。Aider にも使い道はあるけど、今のところ Claude Code のほうが便利だ。\n\nClaude Code は強力だし、そしてクソ高い。\n\nとはいえワークフロー自体はほぼ変わっていない。\n\n- `gpt-4o` とチャットしてアイデアを磨く  \n- 推論が強いモデルで仕様を生成する。最近は `o1-pro` か `o3`（`o1-pro` のほうが良い気がするのは、単に処理が遅いからかもしれない）  \n- そのモデルにプロンプトも書かせる。LLM にプロンプトを書かせるのは最高のハックだし、しかもオジサン世代がブチ切れるのがまた痛快  \n- 仕様書 spec.md と prompt_plan.md をプロジェクトルートに保存  \n- それから Claude Code に次を打ち込む  \n\n```prompt\n1. Open **@prompt_plan.md** and identify any prompts not marked as completed.\n2. For each incomplete prompt:\n    - Double-check if it's truly unfinished (if uncertain, ask for clarification).\n    - If you confirm it's already done, skip it.\n    - Otherwise, implement it as described.\n    - Make sure the tests pass, and the program builds/runs\n    - Commit the changes to your repository with a clear commit message.\n    - Update **@prompt_plan.md** to mark this prompt as completed.\n3. After you finish each prompt, pause and wait for user review or feedback.\n4. Repeat with the next unfinished prompt as directed by the user.\n```\n\nこのプロンプトのキモは、prompt_plan.md をチェックして未完のタスクだけ拾い、実装→テスト→Git へコミット→prompt_plan.md 更新まで済ませたら一旦止まって指示を待つところだ。🤌\n\nあとはソファに寝そべりつつ Claude に「yes」と返すだけ。フィードバックを求められたら応える。その間は Cookie Clicker をひたすら連打してる。そして気づけば魔法が起きている。\n\nこれがほんとにうまくいく。さらに威力を底上げする“スーパーパワー”をいくつか仕込める。\n\n## ディフェンシブ・コーディング！\n\n### テスト\n\nテスト、特に TDD は必須だ。本気で TDD に取り組むことを全力で勧める。\n\n昔の俺は TDD アンチで、下手だし時間のムダだと思ってた。でも完全に間違ってた。これまで数十年、会社やプロジェクトに大量のテストを足してきたけど、大半はコアを書いた後に付け足してきた。人間ならそれでいい。\n\nこれは **ロボットにとっては最悪** だ。\n\nロボは TDD が大好き。まずロボにテストとモックを書かせ、次のプロンプトでモックを実装に置き換える──この流れが最強だ。幻覚や LLM のスコープ逸脱へのいちばん効果的な対策だと思う。\n\n### リンティング\n\nリンティングは最高。Ruff は神、Biome もイケてる、Clippy は名前が秀逸。\n\nロボも良いリンターを回すのが大好物だ。\n\n常にリンターを走らせる習慣はバグを減らし、保守性と可読性を高める。フォーマッタも入れれば完璧。\n\n### pre-commit フック\n\n真の魔法は、これら全部を pre-commit フックに突っ込むことだ。Python の `pre-commit` パッケージがおすすめ。`uv tools install pre-commit` で入れて `.pre-commit-config.yaml` を用意すれば、コミットのたびにテスト・型チェック・リンティングが自動実行され、コード品質は A+++、再実行してもバッチリ通る。\n\nClaude Code と組み合わせると特に効果大。ロボは「コミットしたくてたまらない」ので、メチャクチャなコード変更をかまし、確実に全部ぶっ壊しやがる→直す…をやりがちだけど、pre-commit が止めてくれるおかげで GitHub Actions が詰まることもない。\n\n> 面白いことに Claude は `uv` の使い方がまったく分からない。油断すると `pip install` を乱射するし、「uv を使え」と指示すると `uv pip install` とかやりだす。6 月に AGI が来るって？　ないない、残念。\n\n### `CLAUDE.md` と commands\n\nどちらもシンプルだけど効果はデカい。\n\n{{< image src=\"_SDI8149.jpg\" alt=\"Jesse at the studio, Sept 15, 2023, Ricoh GRiii\" caption=\"Jesse at the studio, Sigma fp, 11/15/2023\" >}}\n\n友人の [Jesse Vincent](https://fsck.com/) から [`CLAUDE.md`](https://github.com/harperreed/dotfiles/blob/master/.claude/CLAUDE.md) を拝借した。彼が[めちゃくちゃ強化](https://github.com/obra/dotfiles/blob/main/.claude/CLAUDE.md)していて──\n\n- 「ビッグダディ・ルール」のライト版  \n- TDD のやり方  \n- 俺流のコーディングスタイル  \n\n> [@clint](https://instagram.com/clintecker) は `CLAUDE.md` に自分を「MR BEEF」と呼ばせる設定にしていて、ドキュメント中に「困ったら MR BEEF に聞け」みたいなのが紛れ込んでいる。この記事を書きながら、俺も「Harp Dog」と名乗らせることにした。これは仕様だ、バグじゃない。\n\ncommands も便利だ。俺の例は [dotfiles](https://github.com/harperreed/dotfiles/tree/master/.claude/commands) をどうぞ。\n\n{{< image src=\"commands.png\" >}}\n\n以前は commands をもっと使っていたが、よく使うプロンプトをサッと呼び出すのに最適だ。引数も渡せる。たとえば GitHub Issue なら `/user:gh-issue #45` のように番号を渡せば OK。Claude が `gh-issue.md` に定義した “prompt” スクリプトを実行してくれる。\n\nプロジェクト直下に commands と `CLAUDE.md` を置けば、Hugo・Rust・Go・JavaScript みたいに言語や環境固有のコマンドも作れる。\n\n## “Continue”\n\n{{< image src=\"https://media4.giphy.com/media/v1.Y2lkPTc5MGI3NjExNDk3ZTZpdWYwdG5sdmpnaTJqNzJhYXlvcmp6bnNmdmhxaGdoeHJ4MyZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/l2Je3fIeeXyYEM85G/giphy.gif\" >}}\n\nときどき「y」を押すだけの鳥になった気分で、ひたすら「continue」と打つか、↑キーで同じプロンプトを貼り付ける。\n\nプランはだいたい 8〜12 ステップ。新規開発なら言語や難易度を問わず 30〜45 分で完走できる。\n\n友人 Bob にその話をしたら信じてくれなかったので、「作るものと言語を指定してみて」と頼んだ。\n\n{{< image src=\"R0000693.jpeg\" caption=\"Bob Swartz, Ricoh GRiiix, 11/17/2024\" >}}\n\nBob「じゃあ C で BASIC インタプリタ」\n\n正直キツい。C もインタプリタも詳しくないし、作りたいわけでもない。でもクソくらえ、やってみる。\n\n例の手順で進めたら Claude Code が大活躍。結果、[動く BASIC インタプリタ](https://github.com/harperreed/basic) が完成した。初版は 1 時間以内に動いた。その後数時間いじってかなり良くなった。1982 年にリリースできたか？　たぶん無理。でも [prompt_plan.md](https://raw.githubusercontent.com/harperreed/basic/refs/heads/main/docs/prompt_plan.md) を見れば流れが分かるはず。\n\n## チーム\n\nうちのチーム全員が今 Claude Code を使っている。基本は上の手順で、あとは各自で微調整。\n\nテストカバレッジは過去最高、コードもキレイ。昔の汚いコードと同じくらい──いやそれ以上に──動く。ふと周りを見ると、ghostty や VS Code、Zed のターミナルで Claude Code が走り、Python ノートブックをいじっているのが見えて面白い。\n\n{{< image src=\"dril.jpg\" >}}\n\n誰か大量にトークンを持ってる人、マジで予算を立てるのを手伝ってくれ。家族が死にそうだ。\n\n## thanks\n\nメールをくれる皆さんへ。あなたたちのワークフローやプロジェクトの話を聞くのは本当に楽しいし嬉しい。感謝しかない。これからもどしどし送ってくれ！",
      "usage": {
        "prompt_tokens": 7893,
        "completion_tokens": 2574,
        "total_tokens": 10467
      },
      "streaming": true
    },
    "frontmatter": {
      "model": "o3",
      "target_language": "japanese",
      "system_prompt": "You are a professional translator. Translate the following frontmatter fields to japanese.\nEach field is in the format \"field_name: content\". Translate ONLY the content, not the field names.\nReturn the translated content in the exact same format, preserving all field names.",
      "user_prompt": "title: Basic Claude Code\n\ndescription: A detailed walkthrough of using Claude Code AI assistant for software development, including workflow tips, testing practices, and practical examples from real projects. Covers defensive coding strategies, TDD, and team implementation.\n\n",
      "response": "title: Claude Codeの基本\ndescription: ソフトウェア開発におけるClaude Code AIアシスタントの活用方法を詳細に解説し、ワークフローのヒント、テスト手法、実プロジェクトの実践例を紹介します。防御的コーディング戦略、TDD、チームでの導入も扱います。",
      "usage": {
        "prompt_tokens": 98,
        "completion_tokens": 85,
        "total_tokens": 183
      },
      "fields": [
        "title",
        "description"
      ],
      "streaming": true
    },
    "all_critiques": [
      "――――――――――――――――――――――――――――――\n総評\n原文のノリ・語調をかなりうまく再現しており、大きな欠落や決定的な誤訳は少ない。ただし細部のニュアンスずれ、過剰／不足、語調のぶれ、用語・強弱の誤りなどが散見される。「そのまま公開しても大丈夫」と言えるレベルにはまだ達していない。  \n以下、重大度順に指摘する。  \n――――――――――――――――――――――――――――――\n\n【Critical／重大：意味を反転・過度に誇張／省略】\n\n1. “a bit more useful atm” → 「圧倒的に…便利」  \n   原文は「少しばかり今は便利」という控えめな評価。訳では「圧倒的に」と大幅に誇張しており意味が逆転。  \n   ⇒「今のところは若干／少し Claude Code のほうが便利だ」程度に修正。\n\n2. “Here we go.” の完全な脱落  \n   冒頭の節目を作る一文が欠落。文脈上小粒だが、読み手への語りかけがなくなるので意図的省略は不可。  \n   ⇒「それじゃあ始めよう。」など短く補完。\n\n3. “This works super well.” のニュアンス弱化  \n   原文は強調 (“super well”)。訳は「めちゃくちゃうまくいく」で近いが後段の説明を訳文が一部吸収し切れておらず、 次句の “There are a few superpowers …” との接続が弱い。  \n   ⇒「これが本当にバッチリ決まる。」等にして直後との勢いを保つ。\n\n4. “This is BAD FOR ROBOTS.” → 「ロボット相手だと最悪だ。」  \n   強調語 BAD が大文字で “SHOUT” されている点が落ちている。太字／全角カナ／感嘆符などで再現する。  \n   例：「これはロボットには**最悪**だ。」\n\n【Major／重要：ニュアンス・文脈の取りこぼし】\n\n1. 団塊エンジニア (Boomers)  \n   “Boomers” は単に世代揶揄で特定の職種ではない。訳だと「団塊エンジニア」に限定されニュアンスが狭い。  \n   ⇒「おじさん世代」やカギ括弧付きで “Boomers” を残す等が無難。\n\n2. “A hell of a lot more expensive.” → 「値段もえげつない」  \n   方向性は合うが “hell of a lot” = “桁違いに高い” のニュアンスが弱い。  \n   ⇒「とんでもなく高い」などに強化。\n\n3. “fuck it.” → 「でもやるしかない。」  \n   口汚さが消え、筆者キャラの粗っぽさが弱まる。  \n   ⇒「クソくらえ、でもやる。」などでトーン維持。\n\n4. “Would it ship it in 1982? Probably not.” → 「1982 年に出荷できるか？ たぶん無理。」  \n   原文は “Would I ship it in 1982?” という筆者主語。微細だが “I” が落ちているので修正。\n\n5. “would execute again” の後半ごと削除  \n   pre-commit の説明文 “A+++ would execute again” は崩れた英語だが一種のジョーク。省かず「A+++ で再実行できる」と意訳すべき。\n\n6. GitHub Actions 部分  \n   “with a bunch of linting, formatting and type checking execution that doesn’t pass” が「Lint, format, type-check が pass しないときに…」という理由説明。訳文では「詰まらずに済む」だけで理由が薄い。  \n   ⇒「ロボが気まぐれで壊したせいで lint やフォーマッタ、型チェックが失敗し、 Actions が行列になる事態を防げる」と補足。\n\n【Moderate／中程度：用語・文体の揺れ、説明不足】\n\n1. “Agentic coding” → 「エージェント的コーディング」  \n   日本語にまだ定訳がなく読みにくい。“エージェンティック・コーディング” や「エージェント指向コーディング」などカタカナ＋補足注が望ましい。\n\n2. Pronoun/Tone 一貫性  \n   一人称「俺」が所々で省略されたり、「俺／私」混在はないが文末が「です/だ」で揺れる箇所がある。例：「おすすめ」→「推し」など。 ※意図的なら可だが統一推奨。\n\n3. 「PC」 vs “computers”  \n   “PC” だとデスクトップ限定のニュアンス。単に「コンピューター」ないし「マシン」の方が忠実。\n\n4. “Spec” を「仕様」、 “prompt_plan.md” を「prompt_plan.md」(英) のまま  \n   原文はファイル名として使っているが、文中で「spec.md (仕様書)」等の一言があると読みやすい。\n\n5. イメージ挿入部分  \n   alt/caption が英語のまま。記事全体を和訳するなら alt も基本訳す。\n\n6. MCP の未説明  \n   ポイント列挙だけで「MCP」が何か不明。訳注で軽く触れると親切。\n\n【Minor／軽微：流ちょうさ・スタイル】\n\n1. 「値段もえげつない」「マジか」「クッキークリッカー感覚で連打」など口語は良いが、人称「俺」と混ざると一部唐突。  \n2. back-tick の有無が統一されていない (`spec.md` と spec.md)。  \n3. “リンティング”／“Linting” の統一。カタカナか原語かを決める。  \n4. “Pre-commit フック” の表記ゆれ。ハイフン欠落等。\n\n【Machine-like／訳文らしくない箇所】\n\n・「いちばん賢そうな推論モデルで仕様を出す。」  \n　“賢そうな” は意味は取れるがやや機械翻訳っぽい直接訳。“高性能そうな” または具体名列挙だけで自然になる。\n\n・「ワークフロー自体はほぼ同じ。」  \n　“自体” がやや硬く浮く。「大枠は以前と同じだ。」など口語寄りに。\n\n――――――――――――――――――――――――――――――\n改善のチェックリスト（別訳者が修正しやすい形）\n\n[意味・ニュアンス]\n□ “a bit more useful atm” → 過度な誇張を除く  \n□ “fuck it” 等の語調を維持  \n□ “Here we go.” を補完  \n□ GitHub Actions 節の理由付けを復元  \n\n[語調・一貫性]\n□ 一人称・文末を統一（「俺」「だ／である」調でそろえるか）  \n□ 強調 (大文字, **太字**) の再現方法を決め統一  \n\n[用語]\n□ “Agentic coding” のカタカナ表記を確定＋注釈  \n□ “Boomers” の訳語見直し  \n□ “Spec” / “Prompt Plan” などカタカナ⇔英語の統一  \n□ MCP に短い説明を追加  \n\n[スタイル]\n□ back-tick 使用箇所を統一  \n□ alt/caption 訳出  \n□ Linting／リンティング表記統一  \n\n以上を修正すれば、「原文そのまま日本語で書いた」ような自然さと忠実さを両立できる。",
      "Comprehensive Critique of the Japanese Translation  \n───────────────────────────────────────────  \nLegend  \n【S】 = Severity (H = High / M = Medium / L = Low)  \n【C】 = Category  \n   A = Accuracy / completeness  \n   N = Nuance / cultural reference  \n   T = Tone / style / register  \n   G = Grammar / wording / naturalness  \n   L = Machine-like / literalness  \n   D = Terminology & consistency  \n\n=====================================================  \n1. Accuracy & Completeness  \n-----------------------------------------------------  \n1-1【H】【A】“I then kick back and tell Claude ​`yes` … Lots more cookie clicker.”  \n　・Sentence after the prompt block is compressed to 「これが本当にバッチリ決まる。」  \n　・Missing two distinct actions: a) telling Claude “yes” while relaxing, b) a humorous reference to playing Cookie Clicker while waiting.  \n　→ Fix: restore: 「あとはソファに寝転んで Claude に ‘yes’ とだけ返事。フィードバックを求められたら応えるだけ。残りの時間は Cookie Clicker をポチポチしている。」  \n1-2【M】【A】Prompt instruction “pause and wait for user review or feedback” inside the bullet list is kept, but the follow-up explanation in prose (“It will pop up for feedback, and magic happens.”) was lost with omission above – restore together with cookie-clicker line.  \n1-3【M】【A】“Testing and test-driven development is a must.” singular/plural nuance lost: should be 「…は絶対条件だ」 instead of permissive 「必須」? (minor)  \n1-4【M】【A】“who knew!” nuance of pleasant surprise isn’t captured; 「薬かよ」 changes meaning to mild sarcasm. Better: 「誰が想像した? 笑」＋ optional 「薬名じゃないってのに」。  \n1-5【L】【A】“hell of a lot more expensive” ⇒ 「とんでもなく高い」 OK but missing comparative nuance (“桁違いに”) .  \n1-6【L】【A】“This is nice cuz it doesn’t clog your GitHub Actions…” – translator keeps gist, but removes causal chain “because the robot was in a mood.” Could re-insert: 「ロボが気まぐれで壊したせいで … 詰まる、なんてこともない。」  \n1-7【L】【A】BASIC interpreter anecdote: line “Would it ship it in 1982? Probably not.” → transl. 「俺なら 1982 年に出荷したか？ たぶんしない。」 “I” → “we” nuance lost but minor.\n\n=====================================================  \n2. Nuance / Cultural References  \n-----------------------------------------------------  \n2-1【M】【N】“agentic coding” rendered as “エージェンティック・コーディング”  \n　– Katakana + ・ gives heavy, loan-wordy feel and hides nuance “エージェント的”.  \n　Suggestion: first mention “エージェント駆動（agentic）コーディング” then thereafter “agentic コーディング”.  \n2-2【M】【N】“(wat)” is internet meme. 「マジか」 OK but loses meme flavour; could annotate: 「（wat）」 or 「（なんでやねん的 ‘wat’）」.  \n2-3【M】【N】“cookie clicker” dropped; reference to idle-clicker game is part of author’s humor. Restore as above.  \n2-4【L】【N】“Big Daddy rule” left English but reader may not know – optional brief gloss e.g. 「Big Daddy Rule（上位規則の一種）」.\n\n=====================================================  \n3. Tone / Register  \n-----------------------------------------------------  \n3-1【H】【T】Inconsistent casual register: mostly “だ体”, but pockets of polite “おすすめ” “保ってくれる” produce mild mismatch. Decide: stay fully casual (matching strong slang like クソくらえ).  \n3-2【M】【T】Profanity balance: “fuck / fucked” appears; translator uses 「詰んだ」「クソくらえ」 (good) but first big bold phrase lost force: “we are **all totally fucked**” → 「**もうみんな詰んだ**」 weaker. Consider 「**完全に終わってる**」 or 「**みんな完全にヤバい**」.  \n3-3【L】【T】Emoji 🤌 kept; fine.\n\n=====================================================  \n4. Grammar / Naturalness  \n-----------------------------------------------------  \n4-1【M】【G】「さらに効きを良くする“スーパーパワー”」 unnatural collocation. Use 効果を高める or 相乗効果を狙える.  \n4-2【M】【G】「腰を据えて TDD をやることを激推しする」 → colloquial but muddy. Suggest 「本腰を入れて TDD に取り組むことを強く勧める。」  \n4-3【L】【G】「これはロボットには最悪だ。」→ 「これはロボットにとっては最悪だ。」  \n4-4【L】【G】「家計が死にそう。」 unnatural; original hyperbole “my family is dying”. Keep exaggeration: 「うちの家族が死にかけてる。」 or 「破産寸前。」  \n4-5【L】【G】Comma/zenkaku punctuation inconsistent (spaces before `,`). Clean.\n\n=====================================================  \n5. Terminology & Consistency  \n-----------------------------------------------------  \n5-1【M】【D】`prompt_plan.md` sometimes rendered “prompt plan” without file suffix; keep backtick file name consistently.  \n5-2【L】【D】“linting / formatter / type checking” sometimes カタカナ、 sometimes English. Pick one scheme (e.g. リンティング／フォーマッタ／型チェック).  \n5-3【L】【D】Model names (`o1-pro`, `o3`)—include backticks every time.\n\n=====================================================  \n6. Machine-like / Literalness  \n-----------------------------------------------------  \n6-1【M】【L】Multiple sentences mirror English structure (短文続出) → feels MT-ish. Combine or reorder for smoother Japanese.  \n6-2【L】【L】Excessive direct transliteration of interjections (“Lol.” → “笑”). Could vary: 「笑った。」など。  \n\n=====================================================  \nSummary of Priority Fixes  \n1. Re-insert omitted content (cookie-clicker paragraph + nuanced explanations).  \n2. Standardise casual “だ・である” style throughout; strengthen profanity equivalents.  \n3. Replace awkward phrases (効きを良くする, 激推し etc.) with natural Japanese.  \n4. Improve “agentic coding” rendering and add brief explanation.  \n5. Restore nuance for humor/meme (“wat”, “who knew”, Big Daddy rule etc.).  \n6. Fix minor grammar and terminology inconsistencies.\n\nApplying the above will make the translation both fully faithful and read as if originally written in Japanese.",
      "────────────────────────\nCRITIQUE OF THE JAPANESE TRANSLATION  \n────────────────────────\nSeverity scale  \n• Critical ＝ 意味を取り違えている / 情報が欠落・追加されている  \n• Major    ＝ ニュアンス逸失 / 技術的に不正確 / 読み手が戸惑うレベル  \n• Moderate ＝ 文法・語法の不自然さ / 用語不統一 / 口調のブレ  \n• Minor    ＝ 句読点・カタカナ表記・タイポなど\n\n【A. 正確さ (誤訳・欠落・過剰訳)】\n\n1. Critical – “made a lot of my post irrelevant.”  \n　訳: 「記事の多くはお蔵入りになった」  \n　問題: “お蔵入り” は「公開しないままお蔵入りにする」の意。原文は「内容が陳腐化／無効になった」という意味。  \n　修正案: 「記事の大部分が的外れになった / 陳腐化した」など。\n\n2. Major – “over the past few decades.” が欠落  \n　原文: “we built in a lot of testing into our companies and projects over the past few decades.”  \n　訳文は年代を落としている。大意は変わらないが、時間スパンへの言及は著者の経験値を示す情報。  \n　修正案: 「過去数十年にわたり〜」 を追加。\n\n3. Moderate – “hell of a lot more expensive.”  \n　訳: 「桁違いに高い」  \n　ニュアンス自体は合っているが、原文の強い俗語感 (“a hell of a lot”) が弱められた。  \n　修正案: 「バカみたいに高い」「笑えるほど高い」などでもう少し砕けた強調を。\n\n4. Moderate – “kick back” → 「ソファに寝転んで」  \n　やや意訳が強い。“kick back” は「くつろぐ」で十分。家具を特定していない。  \n　修正案: 「くつろいで / のんびりして」程度に留める。\n\n5. Moderate – “Using an LLM to generate prompts is a beautiful hack. It makes boomers mad too.”  \n　訳: 「LLM にプロンプトを書かせるのは最高のハックだし、Boomer たちを怒らせるおまけ付き」  \n　“Boomers” は小文字で “boomer” と書くのが原文どおり。特にこだわるなら “団塊世代” などに言い換えても良い。\n\n6. Minor – 原文の “wat” (ネットスラング的驚き) をそのまま “wat” と残しているため、多くの日本語読者に意図が伝わりづらい。  \n　修正案: “(wat)” を “（マジかよ）” “（何それ？）” などに置換、もしくは併記。\n\n【B. 用語・技術表現】\n\n7. Major – “エージェント駆動（agentic）コーディング”  \n　“駆動” は “-driven” に相当する語なので “agentic” とはややズレる。“エージェンティック” あるいは “エージェント型/エージェント志向” が自然。  \n　修正案: 「エージェンティック・コーディング」 or 「エージェント型コーディング」。\n\n8. Moderate – “いちばん理屈が立つモデル”  \n　“理屈が立つ” は日常会話ではやや曖昧。“推論性能が高いモデル” など技術文脈に合わせた語彙に。\n\n9. Minor – “リンティング” vs “Linting”  \n　文中で “リ ンティング / リンティング / linting” が混在。表記を “リンティング” で統一。\n\n【C. 口調・スタイルの一貫性】\n\n10. Major – 一人称と語調の揺れ  \n　“俺 / 俺の / クソくらえ” のような砕けた男性口語と、“〜です / 〜でしょうか” の丁寧語が混在。原文は終始カジュアルなので日本語も “俺 / だ・である” で統一するか、“私 / です・ます” に統一するか決めるべき。\n\n11. Moderate – 「叩き込む」  \n　ハードな語感で原文 “type into” より強い。ここでは「入力する」「放り込む」で十分。\n\n12. Minor – 「噛み合う」  \n　“works super well” の訳とし てはやや意味がずれる（＝相性が良い、なら OK だが）。「めちゃくちゃうまく機能する」など直訳系のほうが誤解がない。\n\n【D. 文法・自然さ】\n\n13. Moderate – 「振り返ってない」  \n　口語としては可。ただ “振り返っていない” と未然形の “い” を入れた方が滑らか。\n\n14. Moderate – 「定番プロンプトを叩き出すのに最適」  \n　“叩き出す” は物理的イメージが強い。ここでは「呼び出す」「すばやく使う」などが自然。\n\n15. Minor – “A+++、何度でも実行 OK”  \n　“would execute again” は「再実行しても問題ない」。“何度でも実行OK” でおおむね伝わるが、“A+++” の主語がコードなのか品質なのか曖昧。 “コード品質は A+++ で、再実行しても落ちない” など補うと明確。\n\n【E. 文化・ニュアンス】\n\n16. Major – 原文のスラング / 罵倒語の再現度  \n　“we are **all totally fucked**” → 「みんな完全に終わってる」 はややマイルド。  \n　“inevitably fuck it all up” → 「ぶっ壊す」 は OK。  \n　一か所だけトーンを下げると全体のニュアンスが不統一になる。訳全体でスラングの強度を揃える。\n\n17. Minor – “Cookie Clicker”  \n　原文は “Lots more cookie clicker.” → 話し手が「Cookie Clicker にひたすらクリックする」というニュアンス。訳は「Cookie Clicker をポチポチしているだけ」と説明的。問題ないが “Cookie Clicker に没頭” くらいでも良い。\n\n【F. 体裁・細部】\n\n18. Minor – ヘッダ “Defensive coding!” → 「防御的コーディング！」  \n　専門的には “守りのコーディング” “ディフェンシブ・コーディング” などの方が一般的。\n\n19. Minor – イメージタグ内の alt/caption を日本語化したことでファイルとして再利用する際に差分が出る可能性。Markdown コンテンツをそのまま使う用途なら alt/caption は原文のままにするのが無難。\n\n20. Minor – “Boomer たち” と “boomer” の大小表記揺れ。カタカナ 「ブーマーたち」 でも可。\n\n────────────────────────\n優先度付き改善 To-Do\n────────────────────────\n1. “irrelevant” → 「陳腐化した」などに修正。  \n2. “エージェント駆動” → 「エージェンティック・コーディング」に統一。  \n3. 一人称・語尾を一本化（例：カジュアルなら「俺 / だ・である」で統一）。  \n4. 技術用語のブラッシュアップ  \n   • “理屈が立つモデル” → “推論性能が高いモデル”  \n   • “リンティング” を全箇所統一  \n5. スラングの強度を揃える  \n   • **totally fucked** ＝ 「クソほどヤバい」等、ほかの箇所に合わせる  \n6. 誤訳/欠落箇所の補完  \n   • “over the past few decades” を追加  \n   • “kick back” の余計な情報（ソファ）を削る  \n7. 細部の言い換え  \n   • “叩き込む” → “入力する”  \n   • “噛み合う” → “めちゃくちゃうまくいく”  \n8. 表記ゆれ・句読点・英語表記の統一\n\n以上を修正すれば、原文のカジュアルで歯切れの良いトーンを保ちつつ、情報を欠けさせない自然な日本語訳になります。",
      "【総評】  \n原文のカジュアルで毒舌な語り口をうまく残しつつ、8～9割は正確に訳せています。しかし細部のニュアンス欠落・語調の揺れ・訳抜け・用語統一ミス・不自然な日本語が散見されます。以下の指摘を修正すれば、原文に100％忠実かつ「訳文らしくない」自然な日本語に近づきます。\n\n──────────────────────  \n◆Critical（致命的レベル：意味を損なう誤訳・訳抜け・追加）  \n1. 訳抜け：「Here we go.」  \n   ‑ 「さぁ始めよう。」「では行ってみよう。」などを補う。  \n2. 訳抜け：「Lots more cookie clicker.」  \n   ‑ 原文は “I then kick back … Lots more cookie clicker.” で「Cookie Clicker をもっとクリックしまくる」程度の意味。現訳は文脈を変えてしまい、意図（作業中の暇つぶし）を曖昧にしている。  \n   ‑ 例：「その間は Cookie Clicker をひたすら連打してる。」  \n3. ニュアンス消失：「wild code changes」  \n   ‑ 「雑に変更」だけでは “wild” の暴走感が薄い。  \n   ‑ 例：「メチャクチャなコード変更をかまし」などで強調。  \n4. 原文の “A+++ would execute again” のニュアンス誤読  \n   ‑ 原文は「A+++（超高評価）で再実行しても通る」という皮肉風。現訳は「再実行しても落ちない状態」とだけ訳し“超高評価”の軽いジョークが欠ける。  \n5. CLAUDE.md の箇条書き内「a light version of the big daddy rule」未訳  \n   ‑ 単に原文を残すのではなく補足訳を。例：「『ビッグダディ・ルール』の簡易版」等。  \n6. “wat” の含意  \n   ‑ 「（wat）」はネットスラングで「は？」に近い驚き。現訳「マジかよ」はやや合うが “wat” の突っ込み感を補足しても良い。  \n\n──────────────────────  \n◆Major（重要レベル：トーン・スタイル・語感のずれ／用語統一）  \n1. タイトル語「agentic coding」の表記  \n   ‑ “エージェンティック”より「エージェント駆動型コーディング」や「エージェント指向コーディング」のほうが一般的に推測しやすい。カタカナの場合は一度だけ（agentic coding と英語併記）推奨。  \n2. スラング・罵語の粒度が一定しない  \n   ‑ 原文は “fuck / shit / hell” を多用。現訳は「バカみたい」「クソほど」「クソくらえ」などで再現しているが箇所により緩急がまちまち。  \n   ‑ 例：「inevitably fuck it all up」→「確実に全部ぶっ壊しやがる」。  \n3. “boomer” の訳語  \n   ‑ “boomerたち”は直訳臭。ジョークを保ちつつ「オジサン世代」「団塊勢」などに要調整。  \n4. 「あいだで Cookie Clicker に没頭していると」  \n   ‑ 「あいだで」は不自然。「その合間に」「裏で」等に修正。  \n5. “friend” の性別ニュアンス  \n   ‑ 原文 “she” を訳出していない。流れ上の情報量は小さいが忠実さ優先なら「彼女に」など補完。  \n6. 「etc」  \n   ‑ そのまま書くと読者が戸惑う。和文では「など」へ置換。箇条書きなので「…ほか」としても可。  \n\n──────────────────────  \n◆Minor（軽微：読みやすさ・自然さ）  \n1. 「あらゆる点で本当に魅力的だ」  \n   ‑ 口語文脈なら「めちゃくちゃ魅力的」などの方がトーン統一。  \n2. 「codegen の授業も開いた」  \n   ‑ 「授業を何回か担当した」「ワークショップもやった」の方が自然。  \n3. 「パワフル」多用  \n   ‑ 日本語らしさを出すなら2回目以降は「強力」など言い換え。  \n4. 「リンティング最高」→「リンティングは最高」  \n5. 「プロンプトを書かせるのは最高のハックだし、boomerたちを怒らせるおまけ付き」  \n   ‑ 「～おまけ付き」はやや硬い。「しかもブーマー世代がブチ切れるのがまた痛快」等。  \n6. 「俺たち全員クソほどヤバい」  \n   ‑ “totally fucked” の直訳感は出ているが「全員終わってる」にするとより自然。  \n7. 「今は Claude Code のほうがちょっと役立つ」  \n   ‑ “atm” を維持するなら「今のところ」は明示すると良い。  \n8. 「codegen を codeine と変換したがる」  \n   ‑ 「スペルチェッカーが codegen を codeine に直そうとする」方が日本語の因果が滑らか。  \n\n──────────────────────  \n◆Terminology / Consistency（技術用語・表記統一）  \n1. “spec.md”“prompt_plan.md”  \n   ‑ 拡張子込みはそのまま、本文説明は「仕様書 (spec.md)」などで一度だけ註釈。  \n2. LLM／TDD／CI などの英略語  \n   ‑ 読者想定により「大文字アルファベット」「半角」統一。  \n3. “pre-commit”  \n   ‑ ハイフンの有無が文中で揺れ。「pre-commit フック」で統一推奨。  \n4. `uv tools install pre-commit`  \n   ‑ コードは原文維持。ただし説明文中は「uv ツール」等カタカナ併記。  \n\n──────────────────────  \n◆Machine-like / Literal Spots（機械翻訳感・直訳臭）  \n1. 「あいだで」「boomerたち」など英語構文が透ける。  \n2. 箇条書き前に「とはいえワークフロー自体はほぼ同じだ。」で急に硬い。  \n3. 「これは神」「イケてる」などカタカナ多用が少し過剰。口語は保ちつつ日本語動詞で緩急を。  \n\n──────────────────────  \n◆提案された改訂例（冒頭のみ抜粋）  \nOriginal current JP:  \nこの「エージェンティック・コーディング」がめちゃくちゃ気に入ってる。あらゆる点で本当に魅力的だ。\n\nSuggested:  \nいわゆる “agentic coding（エージェント指向コーディング）” がとにかく気に入っている。もう、あらゆる意味で魅力しかない。\n\n（以下同様にトーンをそろえつつ上記修正を適用）\n\n──────────────────────  \n上記を修正すれば、意味の忠実度・語調の一貫性・可読性すべてが向上します。"
    ]
  },
  "critique_loop_details": {
    "critique_usages": [
      {
        "prompt_tokens": 5599,
        "completion_tokens": 1868,
        "total_tokens": 7467
      },
      {
        "prompt_tokens": 5679,
        "completion_tokens": 1527,
        "total_tokens": 7206
      },
      {
        "prompt_tokens": 5723,
        "completion_tokens": 2042,
        "total_tokens": 7765
      },
      {
        "prompt_tokens": 5680,
        "completion_tokens": 1761,
        "total_tokens": 7441
      }
    ],
    "feedback_usages": [
      {
        "prompt_tokens": 7996,
        "completion_tokens": 2494,
        "total_tokens": 10490
      },
      {
        "prompt_tokens": 7270,
        "completion_tokens": 2538,
        "total_tokens": 9808
      },
      {
        "prompt_tokens": 8228,
        "completion_tokens": 2521,
        "total_tokens": 10749
      },
      {
        "prompt_tokens": 7893,
        "completion_tokens": 2574,
        "total_tokens": 10467
      }
    ]
  },
  "timestamp": "2025-06-26T16:56:54.000507"
}