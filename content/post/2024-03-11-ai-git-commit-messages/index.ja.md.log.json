{
  "input_file": "index.md",
  "output_file": "index.ja.md",
  "target_language": "japanese",
  "language_code": "ja",
  "model": "o3",
  "skip_edit": false,
  "do_critique": true,
  "critique_loops": 4,
  "has_frontmatter": true,
  "translation_context": "a blog post about git commit messages",
  "token_usage": {
    "prompt_tokens": 80980,
    "completion_tokens": 25354,
    "total_tokens": 106334
  },
  "cost": "$1.8240",
  "prompts_and_responses": {
    "translation": {
      "model": "o3",
      "target_language": "japanese",
      "system_prompt": "\n        1. Read the provided text carefully, preserving all formatting, markdown, and structure exactly as they appear.\n        2. Identify any block quotes and code blocks.\n        3. Do not translate text in block quotes or in code blocks (including text within code blocks).\n        4. Translate everything else into japanese.\n        5. Maintain the original formatting, markdown, and structure in your output.\n        6. Provide a natural-sounding translation rather than a word-for-word one.\n        7. For idioms, colloquialisms, or slang, render them in an equivalent, natural way in japanese whenever possible.\n        8. If there isn't a direct or natural translation for a particular term or phrase, keep it in the original language and surround it with quotes if necessary.\n        9. Ensure that technical terms or jargon remain accurate; if there's no suitable translation, keep the original term.\n        10. Strive for fluid, native-sounding prose that retains the tone and intent of the original text.\n        11. If context about the text is provided, use it to inform your translation choices, especially regarding tone, style, and cultural adaptations.\n        ",
      "user_prompt": "# CONTEXT\na blog post about git commit messages\n\n# TEXT TO TRANSLATE\n_TL;DR: You can set a pre-commit-msg git hook to call the `llm` cli and get a summary of your recent code changes as your commit message._\n\nI love hacking on projects, but often I am super bad at making commits that make sense.\n\nFor instance:\n{{< image src=\"/images/posts/commits.png\" caption=\"My terrible commit messages\" >}}\n\nTrash commit messages. I am lazy!\n\n## Never fear, LLMs are here.\n\nOriginally my buddy [Kanno](https://twitter.com/ryankanno?lang=en) sent me a snippet that would allow you to have a simple git alias that would generate a commit message from the git diff. It was pretty robust.\n\n```bash\n# generate comment\ngpt = \"!f() { git diff $1 | sgpt 'Write concise, informative commit messages: Start with a summary in imperative mood, explain the 'why' behind changes, keep the summary under 50 characters, use bullet points for multiple changes, and reference related issues or tickets. What you write will be passed to git commit -m \\\"[message]\\\"'; }; f\"\n```\n\nHowever, I wanted to use Simon’s [LLM cli](https://llm.datasette.io/en/stable/) instead of shell gpt. LLM has way more model support, and can use local models, MLX, etc.\n\nI also wanted the prompt to be stored externally so I could iterate on it without having to fuck with the `.gitconfig` over and over again.\n\nI went ahead and put my prompt in `~/.config/prompts/git-commit-message.txt`. Here is the prompt:\n\n```text\nWrite short commit messages:\n- The first line should be a short summary of the changes\n- Remember to mention the files that were changed, and what was changed\n- Explain the 'why' behind changes\n- Use bullet points for multiple changes\n- Tone: Use a LOT of emojis, be funny, and expressive. Feel free to be profane, but don't be offensive\n- If there are no changes, or the input is blank - then return a blank string\n\nThink carefully before you write your commit message.\n\nThe output format should be:\n\nSummary of changes\n- changes\n- changes\n\nWhat you write will be passed directly to git commit -m \"[message]\"\n\n```\n\nAnd here is the updated gpt alias:\n\n```bash\ngpt = \"!f() { git diff $1 | llm -s \\\"$(cat ~/.config/prompts/commit-system-prompt.txt)\\\" }; f\"\n```\n\nThis did everything I wanted it to do. However, I am lazy, so I wanted to add a bit more magic.\n\nI asked [claude](https://claude.ai) to make it more interactive and allow me to abort the commit message if it sucked.\n\n```bash\nllm = \"!f() { \\\n    if git diff --quiet $1; then \\\n        echo \\\"No changes to commit. Aborting.\\\"; \\\n    else \\\n        commit_msg=$(git diff $1 | llm -s \\\"$(cat ~/.config/prompts/commit-system-prompt.txt)\\\"); \\\n        echo \\\"Commit message:\\n$commit_msg\\\"; \\\n        read -p \\\"Do you want to commit with this message? [y/N] \\\" confirm; \\\n        if [[ $confirm =~ ^[Yy]$ ]]; then \\\n            git commit -m \\\"$commit_msg\\\"; \\\n        else \\\n            echo \\\"Commit aborted.\\\"; \\\n        fi; \\\n    fi; \\\n}; f\"\n```\n\nThis was so so close. I asked claude again, and we got to this:\n\n```bash\nllm-staged = \"!f() { \\\n    git add -p; \\\n    if ! git diff --cached --quiet; then \\\n        commit_msg=$(git diff --cached | llm -s \\\"$(cat ~/.config/prompts/commit-system-prompt.txt)\\\"); \\\n        echo \\\"Commit message:\\n$commit_msg\\\"; \\\n        read -p \\\"Do you want to commit with this message? [y/N] \\\" confirm; \\\n        if [[ $confirm =~ ^[Yy]$ ]]; then \\\n            git commit -m \\\"$commit_msg\\\"; \\\n        else \\\n            git reset HEAD .; \\\n            echo \\\"Commit aborted.\\\"; \\\n        fi; \\\n    else \\\n        echo \\\"No changes staged for commit. Aborting.\\\"; \\\n    fi; \\\n}; f\"\n```\n\nI was satisfied, but this was still too much work, and too kludgy.\n\n## Git Hooked\n\nThen I remembered! Git hooks! Lol. Why would I have that in my brain - who knows!\n\nI asked claude again, and they whipped up a simple script that would act as a hook that triggers with the `prepare-commit-msg` event.\n\nThis is awesome, cuz if you want to add a git message, you can skip the hook. But if you are lazy, you exclude the message and it will call the LLM.\n\nThe commit hook is super simple:\n\n```bash\n#!/bin/sh\n\n# Exit if the `SKIP_LLM_GITHOOK` environment variable is set\nif [ ! -z \"$SKIP_LLM_GITHOOK\" ]; then\n  exit 0\nfi\n\n# ANSI color codes for styling the output\nRED='\\033[0;31m'    # Sets text to red\nGREEN='\\033[0;32m'  # Sets text to green\nYELLOW='\\033[0;33m' # Sets text to yellow\nBLUE='\\033[0;34m'   # Sets text to blue\nNC='\\033[0m'        # Resets the text color to default, no color\n\n\n# Function to display a spinning animation during the LLM processing\nspin_animation() {\n  # Array of spinner characters for the animation\n  spinner=(\"⠋\" \"⠙\" \"⠹\" \"⠸\" \"⠼\" \"⠴\" \"⠦\" \"⠧\" \"⠇\" \"⠏\")\n  # Infinite loop to keep the animation running\n  while true; do\n    for i in \"${spinner[@]}\"; do\n      tput civis  # Hide the cursor to enhance the animation appearance\n      tput el1    # Clear the line from the cursor to the beginning to display the spinner\n      printf \"\\\\r${YELLOW}%s${NC} Generating LLM commit message...\" \"$i\"  # Print the spinner and message\n      sleep 0.1   # Delay to control the speed of the animation\n      tput cub 32 # Move the cursor back 32 columns to reset the spinner position\n    done\n  done\n}\n\n# Check if the commit is a merge commit based on the presence of a second argument\nif [ -n \"$2\" ]; then\n  exit 0  # Exit script if it's a merge commit, no custom message needed\nfi\n\n# Check if the `llm` command is installed\nif ! command -v llm &> /dev/null; then\n  echo \"${RED}Error: 'llm' command is not installed. Please install it and try again.${NC}\"\n  exit 1\nfi\n\n# Start the spinning animation in the background\nspin_animation &\nspin_pid=$!  # Capture the process ID of the spinning animation\n\n# Generate the commit message using `git diff` piped into `llm` command\n# The LLM command takes a system prompt from a file as input\nif ! commit_msg=$(git diff --cached | llm -s \"$(cat ~/.config/prompts/commit-system-prompt.txt)\" 2>&1); then\n  # Stop the spinning animation by killing its process\n  kill $spin_pid\n  wait $spin_pid 2>/dev/null  # Wait for the process to terminate and suppress error messages\n\n  # Finalizing output\n  tput cnorm  # Show the cursor again\n  printf \"\\\\n\"  # Move the cursor to the next line\n\n  printf \"${RED}Error: 'llm' command failed to generate the commit message:\\\\n${commit_msg}${NC}\\\\n\\\\nManually set the commit message\"\n  exit 1\nfi\n\n# Stop the spinning animation by killing its process\nkill $spin_pid\nwait $spin_pid 2>/dev/null  # Wait for the process to terminate and suppress error messages\n\n# Finalizing output\ntput cnorm  # Show the cursor again\necho  # Move the cursor to the next line\n\n# Display the generated commit message with color-coded headings\necho \"${BLUE}=== Generated Commit Message ===${NC}\"\necho \"${GREEN}$commit_msg${NC}\"\necho \"${BLUE}=================================${NC}\"\necho\n\n# Write the generated commit message to the specified file (usually the commit message file in .git)\necho \"$commit_msg\" > \"$1\"\n\n\n```\n\n(ChatGPT added the documentation)\n\nIt works! And has a spinner! And catches errors! And is pretty!\n\n![](/images/posts/llm-commit-hook.gif)\n\nNow, whenever I commit without a message, the commit hook executes and sends the diff of the changes to the llm cli with the system prompt previously defined. The output is really nice!\n\n```text\n🤖💬 AI-powered git commit messages FTW! 🚀🎉\n- Updated content/post/2024-03-11-ai-git-commit-messages.md\n- Added links to my actual git hook and prompt in dotfiles repo 🔗\n- Removed unnecessary code block formatting for the output example 🗑️\n- AI is making us lazy devs, but who cares when commit messages are this awesome! 😂👌\n```\n\nYay. Much better! You can see [my hook](https://github.com/harperreed/dotfiles/blob/master/.git_hooks/prepare-commit-msg) and [my prompt](https://github.com/harperreed/dotfiles/blob/master/.config/prompts/commit-system-prompt.txt) in my dotfiles.\n\nYou can even disable it by setting the `SKIP_LLM_GITHOOK` environment variable.\n\n## How to set this up!\n\n### 1. Install `llm`.\n\nVisit [llm.datasette.io](https://llm.datasette.io/en/stable/) for instructions. I used `pipx` to install it:\n\n```bash\npipx install llm\n```\n\nRemember to set your key and default model.\n\nSet your Openai key:\n\n```bash\nllm keys set openai\n```\n\nSet which model is default:\n\n```bash\nllm models default gpt-4-turbo\n```\n\n(The `llm` cli is awesome. It supports lots of different models (including local models), and contexts. Worth digging in for sure)\n\n### 2. Create a new directory for your prompts:\n\n```bash\nmkdir -p ~/.config/prompts\n```\n\n### 3. Add your system prompt:\n\nThe hook will look in `~/.config/prompts/commit-system-prompt.txt` for the system prompt. You can create a file with the following content:\n\n```text\nWrite short commit messages:\n- The first line should be a short summary of the changes\n- Remember to mention the files that were changed, and what was changed\n- Explain the 'why' behind changes\n- Use bullet points for multiple changes\n- Tone: Use a LOT of emojis, be funny, and expressive. Feel free to be profane, but don't be offensive\n- If there are no changes, or the input is blank - then return a blank string\n\nThink carefully before you write your commit message.\n\nThe output format should be:\n\nSummary of changes\n- changes\n- changes\n\nWhat you write will be passed directly to git commit -m \"[message]\"\n```\n\nThis prompt worked great for me - but let me know if you have changes. I consider this prompt v0.\n\n### 4. Create a new directory for your global Git hooks.\n\nFor example, you can create a directory named `git_hooks` in your home directory:\n\n```bash\nmkdir -p ~/.git_hooks\n```\n\n### 5. Touch the `prepare-commit-msg`\n\nCreate a new file named `prepare-commit-msg` (without any extension) in the `~/.git_hooks` directory.\n\n### 6. Open the `prepare-commit-msg` file in a text editor (vi or death) and add the same content as before:\n\n```bash\n#!/bin/sh\n\n# Exit if the `SKIP_LLM_GITHOOK` environment variable is set\nif [ ! -z \"$SKIP_LLM_GITHOOK\" ]; then\n  exit 0\nfi\n\n# ANSI color codes for styling the output\nRED='\\033[0;31m'    # Sets text to red\nGREEN='\\033[0;32m'  # Sets text to green\nYELLOW='\\033[0;33m' # Sets text to yellow\nBLUE='\\033[0;34m'   # Sets text to blue\nNC='\\033[0m'        # Resets the text color to default, no color\n\n\n# Function to display a spinning animation during the LLM processing\nspin_animation() {\n  # Array of spinner characters for the animation\n  spinner=(\"⠋\" \"⠙\" \"⠹\" \"⠸\" \"⠼\" \"⠴\" \"⠦\" \"⠧\" \"⠇\" \"⠏\")\n  # Infinite loop to keep the animation running\n  while true; do\n    for i in \"${spinner[@]}\"; do\n      tput civis  # Hide the cursor to enhance the animation appearance\n      tput el1    # Clear the line from the cursor to the beginning to display the spinner\n      printf \"\\\\r${YELLOW}%s${NC} Generating LLM commit message...\" \"$i\"  # Print the spinner and message\n      sleep 0.1   # Delay to control the speed of the animation\n      tput cub 32 # Move the cursor back 32 columns to reset the spinner position\n    done\n  done\n}\n\n# Check if the commit is a merge commit based on the presence of a second argument\nif [ -n \"$2\" ]; then\n  exit 0  # Exit script if it's a merge commit, no custom message needed\nfi\n\n# Check if the `llm` command is installed\nif ! command -v llm &> /dev/null; then\n  echo \"${RED}Error: 'llm' command is not installed. Please install it and try again.${NC}\"\n  exit 1\nfi\n\n# Start the spinning animation in the background\nspin_animation &\nspin_pid=$!  # Capture the process ID of the spinning animation\n\n# Generate the commit message using `git diff` piped into `llm` command\n# The LLM command takes a system prompt from a file as input\nif ! commit_msg=$(git diff --cached | llm -s \"$(cat ~/.config/prompts/commit-system-prompt.txt)\" 2>&1); then\n  # Stop the spinning animation by killing its process\n  kill $spin_pid\n  wait $spin_pid 2>/dev/null  # Wait for the process to terminate and suppress error messages\n\n  # Finalizing output\n  tput cnorm  # Show the cursor again\n  printf \"\\\\n\"  # Move the cursor to the next line\n\n  printf \"${RED}Error: 'llm' command failed to generate the commit message:\\\\n${commit_msg}${NC}\\\\n\\\\nManually set the commit message\"\n  exit 1\nfi\n\n# Stop the spinning animation by killing its process\nkill $spin_pid\nwait $spin_pid 2>/dev/null  # Wait for the process to terminate and suppress error messages\n\n# Finalizing output\ntput cnorm  # Show the cursor again\necho  # Move the cursor to the next line\n\n# Display the generated commit message with color-coded headings\necho \"${BLUE}=== Generated Commit Message ===${NC}\"\necho \"${GREEN}$commit_msg${NC}\"\necho \"${BLUE}=================================${NC}\"\necho\n\n# Write the generated commit message to the specified file (usually the commit message file in .git)\necho \"$commit_msg\" > \"$1\"\n\n\n```\n\nYou can see [mine in my dotfiles](https://github.com/harperreed/dotfiles/blob/master/.git_hooks/prepare-commit-msg).\n\n### 7. Make the `prepare-commit-msg` file executable\n\nRun the following command in your terminal:\n\n```bash\nchmod +x ~/.git_hooks/prepare-commit-msg\n```\n\n### 8. Configure Git to use your global hooks directory\n\nRun the following command to set your global hooks directory\n\n```bash\ngit config --global core.hooksPath ~/.git_hooks\n```\n\n### 9. Code, build things and then commit something\n\n## Explanation on how it works\n\nThis command sets the `core.hooksPath` configuration option to your global hooks directory (`~/.git_hooks`).\n\nNow, whenever you run `git commit` in any of your repositories, Git will execute the global `prepare-commit-msg` hook located in `~/.git_hooks/prepare-commit-msg`. The hook will generate the commit message based on the staged changes using the `llm` command and the system prompt from `~/.config/prompts/commit-system-prompt.txt`.\n\nBy setting up a global `prepare-commit-msg` hook, you can have the commit message generation functionality available in all your repositories without the need to set it up individually for each repository.\n\nRemember to have the `llm` command and the `~/.config/prompts/commit-system-prompt.txt` file set up correctly for the global hook to work as expected.\n\nWith this global hook in place, you can simply stage your changes normally using `git add` or `git add -p`, and then run `git commit`.\n\nThe global `prepare-commit-msg` hook will automatically generate the commit message for you, ready for review and editing before finalizing the commit.\n\nIf you want to skip the LLM commit message generation, just commit with a message: `git commit -m “fixed issue #420”`. This seems to bypass the pre commit hook.\n\n## This is just a hack. AI will hallucinate.\n\nI had fun building this, and it is hilarious.\n\nI have had it hallucinate hilarious things. Never making up changes (thus far), but doing weird shit like adding “Fixed issue #54” at the end.\n\nLike everything in life, YMMV.\n\nIf this is helpful, send me an email and let me know! My email is [harper@modest.com](mailto:harper@modest.com).",
      "context": "a blog post about git commit messages",
      "response": "# コンテキスト\nGit コミットメッセージに関するブログ記事\n\n# 翻訳対象のテキスト\n_TL;DR: `llm` CLI を呼び出す `pre-commit-msg` Git フックを設定すれば、直近のコード変更を要約したコミットメッセージを自動で生成できるよ。_\n\nプロジェクトをハックするのは大好きなんだけど、意味のあるコミットを作るのは超苦手なんだよね。\n\n例えば:\n{{< image src=\"/images/posts/commits.png\" caption=\"My terrible commit messages\" >}}\n\nゴミみたいなコミットメッセージ。だってラクしたいんだもん！\n\n## 安心して、LLM が来た。\n\n最初は友人の [Kanno](https://twitter.com/ryankanno?lang=en) が、`git diff` からコミットメッセージを生成するシンプルな git エイリアスを教えてくれた。かなり robust だった。\n\n```bash\n# generate comment\ngpt = \"!f() { git diff $1 | sgpt 'Write concise, informative commit messages: Start with a summary in imperative mood, explain the 'why' behind changes, keep the summary under 50 characters, use bullet points for multiple changes, and reference related issues or tickets. What you write will be passed to git commit -m \\\"[message]\\\"'; }; f\"\n```\n\nでも、シェル GPT じゃなくて Simon の [LLM CLI](https://llm.datasette.io/en/stable/) を使いたかった。LLM は対応モデルが豊富で、ローカルモデルや MLX もいけるし。\n\nそれと、プロンプトを外部ファイルに置いて、`.gitconfig` を毎回いじらなくてすむようにしたかった。\n\nそこでプロンプトを `~/.config/prompts/git-commit-message.txt` に保存。内容はこんな感じ:\n\n```text\nWrite short commit messages:\n- The first line should be a short summary of the changes\n- Remember to mention the files that were changed, and what was changed\n- Explain the 'why' behind changes\n- Use bullet points for multiple changes\n- Tone: Use a LOT of emojis, be funny, and expressive. Feel free to be profane, but don't be offensive\n- If there are no changes, or the input is blank - then return a blank string\n\nThink carefully before you write your commit message.\n\nThe output format should be:\n\nSummary of changes\n- changes\n- changes\n\nWhat you write will be passed directly to git commit -m \"[message]\"\n```\n\nそしてエイリアスをこう更新:\n\n```bash\ngpt = \"!f() { git diff $1 | llm -s \\\"$(cat ~/.config/prompts/commit-system-prompt.txt)\\\" }; f\"\n```\n\nこれで望みどおり。ただ、もっとラクしたいので魔法を追加したくなった。\n\nそこで [Claude](https://claude.ai) に頼んで、インタラクティブにして、イマイチならコミットを中止できるようにした。\n\n```bash\nllm = \"!f() { \\\n    if git diff --quiet $1; then \\\n        echo \\\"No changes to commit. Aborting.\\\"; \\\n    else \\\n        commit_msg=$(git diff $1 | llm -s \\\"$(cat ~/.config/prompts/commit-system-prompt.txt)\\\"); \\\n        echo \\\"Commit message:\\n$commit_msg\\\"; \\\n        read -p \\\"Do you want to commit with this message? [y/N] \\\" confirm; \\\n        if [[ $confirm =~ ^[Yy]$ ]]; then \\\n            git commit -m \\\"$commit_msg\\\"; \\\n        else \\\n            echo \\\"Commit aborted.\\\"; \\\n        fi; \\\n    fi; \\\n}; f\"\n```\n\nこれでも良かったけど、さらに Claude にお願いして最終的にこうなった:\n\n```bash\nllm-staged = \"!f() { \\\n    git add -p; \\\n    if ! git diff --cached --quiet; then \\\n        commit_msg=$(git diff --cached | llm -s \\\"$(cat ~/.config/prompts/commit-system-prompt.txt)\\\"); \\\n        echo \\\"Commit message:\\n$commit_msg\\\"; \\\n        read -p \\\"Do you want to commit with this message? [y/N] \\\" confirm; \\\n        if [[ $confirm =~ ^[Yy]$ ]]; then \\\n            git commit -m \\\"$commit_msg\\\"; \\\n        else \\\n            git reset HEAD .; \\\n            echo \\\"Commit aborted.\\\"; \\\n        fi; \\\n    else \\\n        echo \\\"No changes staged for commit. Aborting.\\\"; \\\n    fi; \\\n}; f\"\n```\n\n満足はしたけど、まだゴチャゴチャ感がある。\n\n## Git Hook だ！\n\nそこでひらめいた。Git フック！笑  \nなんで覚えてたのかは謎だけど。\n\n再び Claude に依頼して、`prepare-commit-msg` イベントで動くシンプルなスクリプトを書いてもらった。\n\nこれが最高なのは、メッセージを自分で書きたいときはフックをスキップできること。怠けたいときはメッセージを省略すれば LLM が呼ばれる。\n\nコミットフックは超シンプル:\n\n```bash\n#!/bin/sh\n\n# Exit if the `SKIP_LLM_GITHOOK` environment variable is set\nif [ ! -z \"$SKIP_LLM_GITHOOK\" ]; then\n  exit 0\nfi\n\n# ANSI color codes for styling the output\nRED='\\033[0;31m'    # Sets text to red\nGREEN='\\033[0;32m'  # Sets text to green\nYELLOW='\\033[0;33m' # Sets text to yellow\nBLUE='\\033[0;34m'   # Sets text to blue\nNC='\\033[0m'        # Resets the text color to default, no color\n\n\n# Function to display a spinning animation during the LLM processing\nspin_animation() {\n  # Array of spinner characters for the animation\n  spinner=(\"⠋\" \"⠙\" \"⠹\" \"⠸\" \"⠼\" \"⠴\" \"⠦\" \"⠧\" \"⠇\" \"⠏\")\n  # Infinite loop to keep the animation running\n  while true; do\n    for i in \"${spinner[@]}\"; do\n      tput civis  # Hide the cursor to enhance the animation appearance\n      tput el1    # Clear the line from the cursor to the beginning to display the spinner\n      printf \"\\\\r${YELLOW}%s${NC} Generating LLM commit message...\" \"$i\"  # Print the spinner and message\n      sleep 0.1   # Delay to control the speed of the animation\n      tput cub 32 # Move the cursor back 32 columns to reset the spinner position\n    done\n  done\n}\n\n# Check if the commit is a merge commit based on the presence of a second argument\nif [ -n \"$2\" ]; then\n  exit 0  # Exit script if it's a merge commit, no custom message needed\nfi\n\n# Check if the `llm` command is installed\nif ! command -v llm &> /dev/null; then\n  echo \"${RED}Error: 'llm' command is not installed. Please install it and try again.${NC}\"\n  exit 1\nfi\n\n# Start the spinning animation in the background\nspin_animation &\nspin_pid=$!  # Capture the process ID of the spinning animation\n\n# Generate the commit message using `git diff` piped into `llm` command\n# The LLM command takes a system prompt from a file as input\nif ! commit_msg=$(git diff --cached | llm -s \"$(cat ~/.config/prompts/commit-system-prompt.txt)\" 2>&1); then\n  # Stop the spinning animation by killing its process\n  kill $spin_pid\n  wait $spin_pid 2>/dev/null  # Wait for the process to terminate and suppress error messages\n\n  # Finalizing output\n  tput cnorm  # Show the cursor again\n  printf \"\\\\n\"  # Move the cursor to the next line\n\n  printf \"${RED}Error: 'llm' command failed to generate the commit message:\\\\n${commit_msg}${NC}\\\\n\\\\nManually set the commit message\"\n  exit 1\nfi\n\n# Stop the spinning animation by killing its process\nkill $spin_pid\nwait $spin_pid 2>/dev/null  # Wait for the process to terminate and suppress error messages\n\n# Finalizing output\ntput cnorm  # Show the cursor again\necho  # Move the cursor to the next line\n\n# Display the generated commit message with color-coded headings\necho \"${BLUE}=== Generated Commit Message ===${NC}\"\necho \"${GREEN}$commit_msg${NC}\"\necho \"${BLUE}=================================${NC}\"\necho\n\n# Write the generated commit message to the specified file (usually the commit message file in .git)\necho \"$commit_msg\" > \"$1\"\n```\n\n(ChatGPT がドキュメントを追加してくれた)\n\nちゃんと動く！スピナーも付いてる！エラー処理もある！見た目もカワイイ！\n\n![](/images/posts/llm-commit-hook.gif)\n\nこれで、メッセージなしで `git commit` するとフックが発火し、diff を LLM CLI に送り、先のシステムプロンプトでコミットメッセージを生成してくれる。出力もいい感じ！\n\n```text\n🤖💬 AI-powered git commit messages FTW! 🚀🎉\n- Updated content/post/2024-03-11-ai-git-commit-messages.md\n- Added links to my actual git hook and prompt in dotfiles repo 🔗\n- Removed unnecessary code block formatting for the output example 🗑️\n- AI is making us lazy devs, but who cares when commit messages are this awesome! 😂👌\n```\n\nイェイ。かなり良くなった！[フック](https://github.com/harperreed/dotfiles/blob/master/.git_hooks/prepare-commit-msg)と[プロンプト](https://github.com/harperreed/dotfiles/blob/master/.config/prompts/commit-system-prompt.txt)は dotfiles で公開してるよ。\n\n`SKIP_LLM_GITHOOK` 環境変数をセットすれば、この仕組みを無効化できる。\n\n## セットアップ方法！\n\n### 1. `llm` をインストール\n\n[llm.datasette.io](https://llm.datasette.io/en/stable/) を参照。自分は `pipx` で入れた:\n\n```bash\npipx install llm\n```\n\nキーとデフォルトモデルを設定。\n\nOpenAI のキーをセット:\n\n```bash\nllm keys set openai\n```\n\nデフォルトモデルを指定:\n\n```bash\nllm models default gpt-4-turbo\n```\n\n(`llm` CLI は超優秀。ローカルモデルも含め多様なモデルとコンテキストをサポート。掘ってみる価値あり)\n\n### 2. プロンプト用ディレクトリを作成\n\n```bash\nmkdir -p ~/.config/prompts\n```\n\n### 3. システムプロンプトを追加\n\nフックは `~/.config/prompts/commit-system-prompt.txt` を探す。以下を保存:\n\n```text\nWrite short commit messages:\n- The first line should be a short summary of the changes\n- Remember to mention the files that were changed, and what was changed\n- Explain the 'why' behind changes\n- Use bullet points for multiple changes\n- Tone: Use a LOT of emojis, be funny, and expressive. Feel free to be profane, but don't be offensive\n- If there are no changes, or the input is blank - then return a blank string\n\nThink carefully before you write your commit message.\n\nThe output format should be:\n\nSummary of changes\n- changes\n- changes\n\nWhat you write will be passed directly to git commit -m \"[message]\"\n```\n\n自分にはこの v0 で十分。改善案があればぜひ教えて！\n\n### 4. グローバル Git フック用ディレクトリを作成\n\n例: `~/.git_hooks` を作る\n\n```bash\nmkdir -p ~/.git_hooks\n```\n\n### 5. `prepare-commit-msg` を作成\n\n`~/.git_hooks` に拡張子なしで `prepare-commit-msg` ファイルを作る。\n\n### 6. エディタ(vi or death)で開き、上記と同じ内容を貼り付ける:\n\n```bash\n#!/bin/sh\n\n# Exit if the `SKIP_LLM_GITHOOK` environment variable is set\nif [ ! -z \"$SKIP_LLM_GITHOOK\" ]; then\n  exit 0\nfi\n\n# ANSI color codes for styling the output\nRED='\\033[0;31m'    # Sets text to red\nGREEN='\\033[0;32m'  # Sets text to green\nYELLOW='\\033[0;33m' # Sets text to yellow\nBLUE='\\033[0;34m'   # Sets text to blue\nNC='\\033[0m'        # Resets the text color to default, no color\n\n\n# Function to display a spinning animation during the LLM processing\nspin_animation() {\n  # Array of spinner characters for the animation\n  spinner=(\"⠋\" \"⠙\" \"⠹\" \"⠸\" \"⠼\" \"⠴\" \"⠦\" \"⠧\" \"⠇\" \"⠏\")\n  # Infinite loop to keep the animation running\n  while true; do\n    for i in \"${spinner[@]}\"; do\n      tput civis  # Hide the cursor to enhance the animation appearance\n      tput el1    # Clear the line from the cursor to the beginning to display the spinner\n      printf \"\\\\r${YELLOW}%s${NC} Generating LLM commit message...\" \"$i\"  # Print the spinner and message\n      sleep 0.1   # Delay to control the speed of the animation\n      tput cub 32 # Move the cursor back 32 columns to reset the spinner position\n    done\n  done\n}\n\n# Check if the commit is a merge commit based on the presence of a second argument\nif [ -n \"$2\" ]; then\n  exit 0  # Exit script if it's a merge commit, no custom message needed\nfi\n\n# Check if the `llm` command is installed\nif ! command -v llm &> /dev/null; then\n  echo \"${RED}Error: 'llm' command is not installed. Please install it and try again.${NC}\"\n  exit 1\nfi\n\n# Start the spinning animation in the background\nspin_animation &\nspin_pid=$!  # Capture the process ID of the spinning animation\n\n# Generate the commit message using `git diff` piped into `llm` command\n# The LLM command takes a system prompt from a file as input\nif ! commit_msg=$(git diff --cached | llm -s \"$(cat ~/.config/prompts/commit-system-prompt.txt)\" 2>&1); then\n  # Stop the spinning animation by killing its process\n  kill $spin_pid\n  wait $spin_pid 2>/dev/null  # Wait for the process to terminate and suppress error messages\n\n  # Finalizing output\n  tput cnorm  # Show the cursor again\n  printf \"\\\\n\"  # Move the cursor to the next line\n\n  printf \"${RED}Error: 'llm' command failed to generate the commit message:\\\\n${commit_msg}${NC}\\\\n\\\\nManually set the commit message\"\n  exit 1\nfi\n\n# Stop the spinning animation by killing its process\nkill $spin_pid\nwait $spin_pid 2>/dev/null  # Wait for the process to terminate and suppress error messages\n\n# Finalizing output\ntput cnorm  # Show the cursor again\necho  # Move the cursor to the next line\n\n# Display the generated commit message with color-coded headings\necho \"${BLUE}=== Generated Commit Message ===${NC}\"\necho \"${GREEN}$commit_msg${NC}\"\necho \"${BLUE}=================================${NC}\"\necho\n\n# Write the generated commit message to the specified file (usually the commit message file in .git)\necho \"$commit_msg\" > \"$1\"\n```\n\n実物は[ここ](https://github.com/harperreed/dotfiles/blob/master/.git_hooks/prepare-commit-msg)。\n\n### 7. `prepare-commit-msg` を実行可能にする\n\n```bash\nchmod +x ~/.git_hooks/prepare-commit-msg\n```\n\n### 8. Git にグローバルフックの場所を指定\n\n```bash\ngit config --global core.hooksPath ~/.git_hooks\n```\n\n### 9. コードを書いてビルドしてコミットしよう\n\n## 仕組み\n\nこの設定で `core.hooksPath` が `~/.git_hooks` になる。どのリポでも `git commit` すると `~/.git_hooks/prepare-commit-msg` が動き、ステージした変更を `llm` と `~/.config/prompts/commit-system-prompt.txt` でコミットメッセージにしてくれる。\n\nフックをグローバルに置けば、リポごとに設定する必要はなし。`llm` とプロンプトファイルさえあれば OK。\n\nいつもどおり `git add`（or `git add -p`）して `git commit` すれば、自動でメッセージが生成され、確認・編集できる。\n\nLLM をスキップしたいなら単にメッセージ付きでコミットすればいい: `git commit -m \"fixed issue #420\"`。\n\n## これはただのハック。AI は幻覚を見るかも。\n\n作ってて楽しかったし爆笑もの。ときどき「Fixed issue #54」みたいな謎の追記をすることもある。今のところ変更を捏造したことはないけど、まあ YMMV。\n\n役に立ったらメールしてね！ [harper@modest.com](mailto:harper@modest.com)。",
      "usage": {
        "prompt_tokens": 4165,
        "completion_tokens": 3974,
        "total_tokens": 8139
      },
      "streaming": true
    },
    "editing": {
      "model": "o3",
      "target_language": "japanese",
      "system_prompt": "\n        1. Carefully read the translated text alongside the original text in its entirety.\n        2. Compare both texts to ensure the translation accurately reflects the original meaning.\n        3. Correct any grammatical errors you find in the japanese text.\n        4. Adjust phrasing to make it sound natural and fluent for japanese speakers, making sure idioms and expressions are culturally appropriate.\n        5. Preserve the original tone, nuance, and style, including any formatting, markdown, and structure.\n        6. Avoid adding new information or altering the core meaning.\n        7. Ensure the final result doesn't feel machine-translated but remains faithful to the source.\n        8. Make only changes that genuinely improve the text's quality in japanese.\n        9. Don't be too literal. If there isn't a direct translation, provide a natural-sounding translation.\n        10. If the text contains idioms or colloquialisms, translate them into the target language while maintaining their original meaning.\n        11. If the text contains technical terms or jargon, ensure that the translation is accurate and appropriate for the target audience, if there isn't a natural translation, keep it in the original language.\n        12. If there is not natural translation, keep it in the original language.\n        ",
      "user_prompt": "# ORIGINAL TEXT\n_TL;DR: You can set a pre-commit-msg git hook to call the `llm` cli and get a summary of your recent code changes as your commit message._\n\nI love hacking on projects, but often I am super bad at making commits that make sense.\n\nFor instance:\n{{< image src=\"/images/posts/commits.png\" caption=\"My terrible commit messages\" >}}\n\nTrash commit messages. I am lazy!\n\n## Never fear, LLMs are here.\n\nOriginally my buddy [Kanno](https://twitter.com/ryankanno?lang=en) sent me a snippet that would allow you to have a simple git alias that would generate a commit message from the git diff. It was pretty robust.\n\n```bash\n# generate comment\ngpt = \"!f() { git diff $1 | sgpt 'Write concise, informative commit messages: Start with a summary in imperative mood, explain the 'why' behind changes, keep the summary under 50 characters, use bullet points for multiple changes, and reference related issues or tickets. What you write will be passed to git commit -m \\\"[message]\\\"'; }; f\"\n```\n\nHowever, I wanted to use Simon’s [LLM cli](https://llm.datasette.io/en/stable/) instead of shell gpt. LLM has way more model support, and can use local models, MLX, etc.\n\nI also wanted the prompt to be stored externally so I could iterate on it without having to fuck with the `.gitconfig` over and over again.\n\nI went ahead and put my prompt in `~/.config/prompts/git-commit-message.txt`. Here is the prompt:\n\n```text\nWrite short commit messages:\n- The first line should be a short summary of the changes\n- Remember to mention the files that were changed, and what was changed\n- Explain the 'why' behind changes\n- Use bullet points for multiple changes\n- Tone: Use a LOT of emojis, be funny, and expressive. Feel free to be profane, but don't be offensive\n- If there are no changes, or the input is blank - then return a blank string\n\nThink carefully before you write your commit message.\n\nThe output format should be:\n\nSummary of changes\n- changes\n- changes\n\nWhat you write will be passed directly to git commit -m \"[message]\"\n\n```\n\nAnd here is the updated gpt alias:\n\n```bash\ngpt = \"!f() { git diff $1 | llm -s \\\"$(cat ~/.config/prompts/commit-system-prompt.txt)\\\" }; f\"\n```\n\nThis did everything I wanted it to do. However, I am lazy, so I wanted to add a bit more magic.\n\nI asked [claude](https://claude.ai) to make it more interactive and allow me to abort the commit message if it sucked.\n\n```bash\nllm = \"!f() { \\\n    if git diff --quiet $1; then \\\n        echo \\\"No changes to commit. Aborting.\\\"; \\\n    else \\\n        commit_msg=$(git diff $1 | llm -s \\\"$(cat ~/.config/prompts/commit-system-prompt.txt)\\\"); \\\n        echo \\\"Commit message:\\n$commit_msg\\\"; \\\n        read -p \\\"Do you want to commit with this message? [y/N] \\\" confirm; \\\n        if [[ $confirm =~ ^[Yy]$ ]]; then \\\n            git commit -m \\\"$commit_msg\\\"; \\\n        else \\\n            echo \\\"Commit aborted.\\\"; \\\n        fi; \\\n    fi; \\\n}; f\"\n```\n\nThis was so so close. I asked claude again, and we got to this:\n\n```bash\nllm-staged = \"!f() { \\\n    git add -p; \\\n    if ! git diff --cached --quiet; then \\\n        commit_msg=$(git diff --cached | llm -s \\\"$(cat ~/.config/prompts/commit-system-prompt.txt)\\\"); \\\n        echo \\\"Commit message:\\n$commit_msg\\\"; \\\n        read -p \\\"Do you want to commit with this message? [y/N] \\\" confirm; \\\n        if [[ $confirm =~ ^[Yy]$ ]]; then \\\n            git commit -m \\\"$commit_msg\\\"; \\\n        else \\\n            git reset HEAD .; \\\n            echo \\\"Commit aborted.\\\"; \\\n        fi; \\\n    else \\\n        echo \\\"No changes staged for commit. Aborting.\\\"; \\\n    fi; \\\n}; f\"\n```\n\nI was satisfied, but this was still too much work, and too kludgy.\n\n## Git Hooked\n\nThen I remembered! Git hooks! Lol. Why would I have that in my brain - who knows!\n\nI asked claude again, and they whipped up a simple script that would act as a hook that triggers with the `prepare-commit-msg` event.\n\nThis is awesome, cuz if you want to add a git message, you can skip the hook. But if you are lazy, you exclude the message and it will call the LLM.\n\nThe commit hook is super simple:\n\n```bash\n#!/bin/sh\n\n# Exit if the `SKIP_LLM_GITHOOK` environment variable is set\nif [ ! -z \"$SKIP_LLM_GITHOOK\" ]; then\n  exit 0\nfi\n\n# ANSI color codes for styling the output\nRED='\\033[0;31m'    # Sets text to red\nGREEN='\\033[0;32m'  # Sets text to green\nYELLOW='\\033[0;33m' # Sets text to yellow\nBLUE='\\033[0;34m'   # Sets text to blue\nNC='\\033[0m'        # Resets the text color to default, no color\n\n\n# Function to display a spinning animation during the LLM processing\nspin_animation() {\n  # Array of spinner characters for the animation\n  spinner=(\"⠋\" \"⠙\" \"⠹\" \"⠸\" \"⠼\" \"⠴\" \"⠦\" \"⠧\" \"⠇\" \"⠏\")\n  # Infinite loop to keep the animation running\n  while true; do\n    for i in \"${spinner[@]}\"; do\n      tput civis  # Hide the cursor to enhance the animation appearance\n      tput el1    # Clear the line from the cursor to the beginning to display the spinner\n      printf \"\\\\r${YELLOW}%s${NC} Generating LLM commit message...\" \"$i\"  # Print the spinner and message\n      sleep 0.1   # Delay to control the speed of the animation\n      tput cub 32 # Move the cursor back 32 columns to reset the spinner position\n    done\n  done\n}\n\n# Check if the commit is a merge commit based on the presence of a second argument\nif [ -n \"$2\" ]; then\n  exit 0  # Exit script if it's a merge commit, no custom message needed\nfi\n\n# Check if the `llm` command is installed\nif ! command -v llm &> /dev/null; then\n  echo \"${RED}Error: 'llm' command is not installed. Please install it and try again.${NC}\"\n  exit 1\nfi\n\n# Start the spinning animation in the background\nspin_animation &\nspin_pid=$!  # Capture the process ID of the spinning animation\n\n# Generate the commit message using `git diff` piped into `llm` command\n# The LLM command takes a system prompt from a file as input\nif ! commit_msg=$(git diff --cached | llm -s \"$(cat ~/.config/prompts/commit-system-prompt.txt)\" 2>&1); then\n  # Stop the spinning animation by killing its process\n  kill $spin_pid\n  wait $spin_pid 2>/dev/null  # Wait for the process to terminate and suppress error messages\n\n  # Finalizing output\n  tput cnorm  # Show the cursor again\n  printf \"\\\\n\"  # Move the cursor to the next line\n\n  printf \"${RED}Error: 'llm' command failed to generate the commit message:\\\\n${commit_msg}${NC}\\\\n\\\\nManually set the commit message\"\n  exit 1\nfi\n\n# Stop the spinning animation by killing its process\nkill $spin_pid\nwait $spin_pid 2>/dev/null  # Wait for the process to terminate and suppress error messages\n\n# Finalizing output\ntput cnorm  # Show the cursor again\necho  # Move the cursor to the next line\n\n# Display the generated commit message with color-coded headings\necho \"${BLUE}=== Generated Commit Message ===${NC}\"\necho \"${GREEN}$commit_msg${NC}\"\necho \"${BLUE}=================================${NC}\"\necho\n\n# Write the generated commit message to the specified file (usually the commit message file in .git)\necho \"$commit_msg\" > \"$1\"\n\n\n```\n\n(ChatGPT added the documentation)\n\nIt works! And has a spinner! And catches errors! And is pretty!\n\n![](/images/posts/llm-commit-hook.gif)\n\nNow, whenever I commit without a message, the commit hook executes and sends the diff of the changes to the llm cli with the system prompt previously defined. The output is really nice!\n\n```text\n🤖💬 AI-powered git commit messages FTW! 🚀🎉\n- Updated content/post/2024-03-11-ai-git-commit-messages.md\n- Added links to my actual git hook and prompt in dotfiles repo 🔗\n- Removed unnecessary code block formatting for the output example 🗑️\n- AI is making us lazy devs, but who cares when commit messages are this awesome! 😂👌\n```\n\nYay. Much better! You can see [my hook](https://github.com/harperreed/dotfiles/blob/master/.git_hooks/prepare-commit-msg) and [my prompt](https://github.com/harperreed/dotfiles/blob/master/.config/prompts/commit-system-prompt.txt) in my dotfiles.\n\nYou can even disable it by setting the `SKIP_LLM_GITHOOK` environment variable.\n\n## How to set this up!\n\n### 1. Install `llm`.\n\nVisit [llm.datasette.io](https://llm.datasette.io/en/stable/) for instructions. I used `pipx` to install it:\n\n```bash\npipx install llm\n```\n\nRemember to set your key and default model.\n\nSet your Openai key:\n\n```bash\nllm keys set openai\n```\n\nSet which model is default:\n\n```bash\nllm models default gpt-4-turbo\n```\n\n(The `llm` cli is awesome. It supports lots of different models (including local models), and contexts. Worth digging in for sure)\n\n### 2. Create a new directory for your prompts:\n\n```bash\nmkdir -p ~/.config/prompts\n```\n\n### 3. Add your system prompt:\n\nThe hook will look in `~/.config/prompts/commit-system-prompt.txt` for the system prompt. You can create a file with the following content:\n\n```text\nWrite short commit messages:\n- The first line should be a short summary of the changes\n- Remember to mention the files that were changed, and what was changed\n- Explain the 'why' behind changes\n- Use bullet points for multiple changes\n- Tone: Use a LOT of emojis, be funny, and expressive. Feel free to be profane, but don't be offensive\n- If there are no changes, or the input is blank - then return a blank string\n\nThink carefully before you write your commit message.\n\nThe output format should be:\n\nSummary of changes\n- changes\n- changes\n\nWhat you write will be passed directly to git commit -m \"[message]\"\n```\n\nThis prompt worked great for me - but let me know if you have changes. I consider this prompt v0.\n\n### 4. Create a new directory for your global Git hooks.\n\nFor example, you can create a directory named `git_hooks` in your home directory:\n\n```bash\nmkdir -p ~/.git_hooks\n```\n\n### 5. Touch the `prepare-commit-msg`\n\nCreate a new file named `prepare-commit-msg` (without any extension) in the `~/.git_hooks` directory.\n\n### 6. Open the `prepare-commit-msg` file in a text editor (vi or death) and add the same content as before:\n\n```bash\n#!/bin/sh\n\n# Exit if the `SKIP_LLM_GITHOOK` environment variable is set\nif [ ! -z \"$SKIP_LLM_GITHOOK\" ]; then\n  exit 0\nfi\n\n# ANSI color codes for styling the output\nRED='\\033[0;31m'    # Sets text to red\nGREEN='\\033[0;32m'  # Sets text to green\nYELLOW='\\033[0;33m' # Sets text to yellow\nBLUE='\\033[0;34m'   # Sets text to blue\nNC='\\033[0m'        # Resets the text color to default, no color\n\n\n# Function to display a spinning animation during the LLM processing\nspin_animation() {\n  # Array of spinner characters for the animation\n  spinner=(\"⠋\" \"⠙\" \"⠹\" \"⠸\" \"⠼\" \"⠴\" \"⠦\" \"⠧\" \"⠇\" \"⠏\")\n  # Infinite loop to keep the animation running\n  while true; do\n    for i in \"${spinner[@]}\"; do\n      tput civis  # Hide the cursor to enhance the animation appearance\n      tput el1    # Clear the line from the cursor to the beginning to display the spinner\n      printf \"\\\\r${YELLOW}%s${NC} Generating LLM commit message...\" \"$i\"  # Print the spinner and message\n      sleep 0.1   # Delay to control the speed of the animation\n      tput cub 32 # Move the cursor back 32 columns to reset the spinner position\n    done\n  done\n}\n\n# Check if the commit is a merge commit based on the presence of a second argument\nif [ -n \"$2\" ]; then\n  exit 0  # Exit script if it's a merge commit, no custom message needed\nfi\n\n# Check if the `llm` command is installed\nif ! command -v llm &> /dev/null; then\n  echo \"${RED}Error: 'llm' command is not installed. Please install it and try again.${NC}\"\n  exit 1\nfi\n\n# Start the spinning animation in the background\nspin_animation &\nspin_pid=$!  # Capture the process ID of the spinning animation\n\n# Generate the commit message using `git diff` piped into `llm` command\n# The LLM command takes a system prompt from a file as input\nif ! commit_msg=$(git diff --cached | llm -s \"$(cat ~/.config/prompts/commit-system-prompt.txt)\" 2>&1); then\n  # Stop the spinning animation by killing its process\n  kill $spin_pid\n  wait $spin_pid 2>/dev/null  # Wait for the process to terminate and suppress error messages\n\n  # Finalizing output\n  tput cnorm  # Show the cursor again\n  printf \"\\\\n\"  # Move the cursor to the next line\n\n  printf \"${RED}Error: 'llm' command failed to generate the commit message:\\\\n${commit_msg}${NC}\\\\n\\\\nManually set the commit message\"\n  exit 1\nfi\n\n# Stop the spinning animation by killing its process\nkill $spin_pid\nwait $spin_pid 2>/dev/null  # Wait for the process to terminate and suppress error messages\n\n# Finalizing output\ntput cnorm  # Show the cursor again\necho  # Move the cursor to the next line\n\n# Display the generated commit message with color-coded headings\necho \"${BLUE}=== Generated Commit Message ===${NC}\"\necho \"${GREEN}$commit_msg${NC}\"\necho \"${BLUE}=================================${NC}\"\necho\n\n# Write the generated commit message to the specified file (usually the commit message file in .git)\necho \"$commit_msg\" > \"$1\"\n\n\n```\n\nYou can see [mine in my dotfiles](https://github.com/harperreed/dotfiles/blob/master/.git_hooks/prepare-commit-msg).\n\n### 7. Make the `prepare-commit-msg` file executable\n\nRun the following command in your terminal:\n\n```bash\nchmod +x ~/.git_hooks/prepare-commit-msg\n```\n\n### 8. Configure Git to use your global hooks directory\n\nRun the following command to set your global hooks directory\n\n```bash\ngit config --global core.hooksPath ~/.git_hooks\n```\n\n### 9. Code, build things and then commit something\n\n## Explanation on how it works\n\nThis command sets the `core.hooksPath` configuration option to your global hooks directory (`~/.git_hooks`).\n\nNow, whenever you run `git commit` in any of your repositories, Git will execute the global `prepare-commit-msg` hook located in `~/.git_hooks/prepare-commit-msg`. The hook will generate the commit message based on the staged changes using the `llm` command and the system prompt from `~/.config/prompts/commit-system-prompt.txt`.\n\nBy setting up a global `prepare-commit-msg` hook, you can have the commit message generation functionality available in all your repositories without the need to set it up individually for each repository.\n\nRemember to have the `llm` command and the `~/.config/prompts/commit-system-prompt.txt` file set up correctly for the global hook to work as expected.\n\nWith this global hook in place, you can simply stage your changes normally using `git add` or `git add -p`, and then run `git commit`.\n\nThe global `prepare-commit-msg` hook will automatically generate the commit message for you, ready for review and editing before finalizing the commit.\n\nIf you want to skip the LLM commit message generation, just commit with a message: `git commit -m “fixed issue #420”`. This seems to bypass the pre commit hook.\n\n## This is just a hack. AI will hallucinate.\n\nI had fun building this, and it is hilarious.\n\nI have had it hallucinate hilarious things. Never making up changes (thus far), but doing weird shit like adding “Fixed issue #54” at the end.\n\nLike everything in life, YMMV.\n\nIf this is helpful, send me an email and let me know! My email is [harper@modest.com](mailto:harper@modest.com).\n\n# TRANSLATED TEXT\n# コンテキスト\nGit コミットメッセージに関するブログ記事\n\n# 翻訳対象のテキスト\n_TL;DR: `llm` CLI を呼び出す `pre-commit-msg` Git フックを設定すれば、直近のコード変更を要約したコミットメッセージを自動で生成できるよ。_\n\nプロジェクトをハックするのは大好きなんだけど、意味のあるコミットを作るのは超苦手なんだよね。\n\n例えば:\n{{< image src=\"/images/posts/commits.png\" caption=\"My terrible commit messages\" >}}\n\nゴミみたいなコミットメッセージ。だってラクしたいんだもん！\n\n## 安心して、LLM が来た。\n\n最初は友人の [Kanno](https://twitter.com/ryankanno?lang=en) が、`git diff` からコミットメッセージを生成するシンプルな git エイリアスを教えてくれた。かなり robust だった。\n\n```bash\n# generate comment\ngpt = \"!f() { git diff $1 | sgpt 'Write concise, informative commit messages: Start with a summary in imperative mood, explain the 'why' behind changes, keep the summary under 50 characters, use bullet points for multiple changes, and reference related issues or tickets. What you write will be passed to git commit -m \\\"[message]\\\"'; }; f\"\n```\n\nでも、シェル GPT じゃなくて Simon の [LLM CLI](https://llm.datasette.io/en/stable/) を使いたかった。LLM は対応モデルが豊富で、ローカルモデルや MLX もいけるし。\n\nそれと、プロンプトを外部ファイルに置いて、`.gitconfig` を毎回いじらなくてすむようにしたかった。\n\nそこでプロンプトを `~/.config/prompts/git-commit-message.txt` に保存。内容はこんな感じ:\n\n```text\nWrite short commit messages:\n- The first line should be a short summary of the changes\n- Remember to mention the files that were changed, and what was changed\n- Explain the 'why' behind changes\n- Use bullet points for multiple changes\n- Tone: Use a LOT of emojis, be funny, and expressive. Feel free to be profane, but don't be offensive\n- If there are no changes, or the input is blank - then return a blank string\n\nThink carefully before you write your commit message.\n\nThe output format should be:\n\nSummary of changes\n- changes\n- changes\n\nWhat you write will be passed directly to git commit -m \"[message]\"\n```\n\nそしてエイリアスをこう更新:\n\n```bash\ngpt = \"!f() { git diff $1 | llm -s \\\"$(cat ~/.config/prompts/commit-system-prompt.txt)\\\" }; f\"\n```\n\nこれで望みどおり。ただ、もっとラクしたいので魔法を追加したくなった。\n\nそこで [Claude](https://claude.ai) に頼んで、インタラクティブにして、イマイチならコミットを中止できるようにした。\n\n```bash\nllm = \"!f() { \\\n    if git diff --quiet $1; then \\\n        echo \\\"No changes to commit. Aborting.\\\"; \\\n    else \\\n        commit_msg=$(git diff $1 | llm -s \\\"$(cat ~/.config/prompts/commit-system-prompt.txt)\\\"); \\\n        echo \\\"Commit message:\\n$commit_msg\\\"; \\\n        read -p \\\"Do you want to commit with this message? [y/N] \\\" confirm; \\\n        if [[ $confirm =~ ^[Yy]$ ]]; then \\\n            git commit -m \\\"$commit_msg\\\"; \\\n        else \\\n            echo \\\"Commit aborted.\\\"; \\\n        fi; \\\n    fi; \\\n}; f\"\n```\n\nこれでも良かったけど、さらに Claude にお願いして最終的にこうなった:\n\n```bash\nllm-staged = \"!f() { \\\n    git add -p; \\\n    if ! git diff --cached --quiet; then \\\n        commit_msg=$(git diff --cached | llm -s \\\"$(cat ~/.config/prompts/commit-system-prompt.txt)\\\"); \\\n        echo \\\"Commit message:\\n$commit_msg\\\"; \\\n        read -p \\\"Do you want to commit with this message? [y/N] \\\" confirm; \\\n        if [[ $confirm =~ ^[Yy]$ ]]; then \\\n            git commit -m \\\"$commit_msg\\\"; \\\n        else \\\n            git reset HEAD .; \\\n            echo \\\"Commit aborted.\\\"; \\\n        fi; \\\n    else \\\n        echo \\\"No changes staged for commit. Aborting.\\\"; \\\n    fi; \\\n}; f\"\n```\n\n満足はしたけど、まだゴチャゴチャ感がある。\n\n## Git Hook だ！\n\nそこでひらめいた。Git フック！笑  \nなんで覚えてたのかは謎だけど。\n\n再び Claude に依頼して、`prepare-commit-msg` イベントで動くシンプルなスクリプトを書いてもらった。\n\nこれが最高なのは、メッセージを自分で書きたいときはフックをスキップできること。怠けたいときはメッセージを省略すれば LLM が呼ばれる。\n\nコミットフックは超シンプル:\n\n```bash\n#!/bin/sh\n\n# Exit if the `SKIP_LLM_GITHOOK` environment variable is set\nif [ ! -z \"$SKIP_LLM_GITHOOK\" ]; then\n  exit 0\nfi\n\n# ANSI color codes for styling the output\nRED='\\033[0;31m'    # Sets text to red\nGREEN='\\033[0;32m'  # Sets text to green\nYELLOW='\\033[0;33m' # Sets text to yellow\nBLUE='\\033[0;34m'   # Sets text to blue\nNC='\\033[0m'        # Resets the text color to default, no color\n\n\n# Function to display a spinning animation during the LLM processing\nspin_animation() {\n  # Array of spinner characters for the animation\n  spinner=(\"⠋\" \"⠙\" \"⠹\" \"⠸\" \"⠼\" \"⠴\" \"⠦\" \"⠧\" \"⠇\" \"⠏\")\n  # Infinite loop to keep the animation running\n  while true; do\n    for i in \"${spinner[@]}\"; do\n      tput civis  # Hide the cursor to enhance the animation appearance\n      tput el1    # Clear the line from the cursor to the beginning to display the spinner\n      printf \"\\\\r${YELLOW}%s${NC} Generating LLM commit message...\" \"$i\"  # Print the spinner and message\n      sleep 0.1   # Delay to control the speed of the animation\n      tput cub 32 # Move the cursor back 32 columns to reset the spinner position\n    done\n  done\n}\n\n# Check if the commit is a merge commit based on the presence of a second argument\nif [ -n \"$2\" ]; then\n  exit 0  # Exit script if it's a merge commit, no custom message needed\nfi\n\n# Check if the `llm` command is installed\nif ! command -v llm &> /dev/null; then\n  echo \"${RED}Error: 'llm' command is not installed. Please install it and try again.${NC}\"\n  exit 1\nfi\n\n# Start the spinning animation in the background\nspin_animation &\nspin_pid=$!  # Capture the process ID of the spinning animation\n\n# Generate the commit message using `git diff` piped into `llm` command\n# The LLM command takes a system prompt from a file as input\nif ! commit_msg=$(git diff --cached | llm -s \"$(cat ~/.config/prompts/commit-system-prompt.txt)\" 2>&1); then\n  # Stop the spinning animation by killing its process\n  kill $spin_pid\n  wait $spin_pid 2>/dev/null  # Wait for the process to terminate and suppress error messages\n\n  # Finalizing output\n  tput cnorm  # Show the cursor again\n  printf \"\\\\n\"  # Move the cursor to the next line\n\n  printf \"${RED}Error: 'llm' command failed to generate the commit message:\\\\n${commit_msg}${NC}\\\\n\\\\nManually set the commit message\"\n  exit 1\nfi\n\n# Stop the spinning animation by killing its process\nkill $spin_pid\nwait $spin_pid 2>/dev/null  # Wait for the process to terminate and suppress error messages\n\n# Finalizing output\ntput cnorm  # Show the cursor again\necho  # Move the cursor to the next line\n\n# Display the generated commit message with color-coded headings\necho \"${BLUE}=== Generated Commit Message ===${NC}\"\necho \"${GREEN}$commit_msg${NC}\"\necho \"${BLUE}=================================${NC}\"\necho\n\n# Write the generated commit message to the specified file (usually the commit message file in .git)\necho \"$commit_msg\" > \"$1\"\n```\n\n(ChatGPT がドキュメントを追加してくれた)\n\nちゃんと動く！スピナーも付いてる！エラー処理もある！見た目もカワイイ！\n\n![](/images/posts/llm-commit-hook.gif)\n\nこれで、メッセージなしで `git commit` するとフックが発火し、diff を LLM CLI に送り、先のシステムプロンプトでコミットメッセージを生成してくれる。出力もいい感じ！\n\n```text\n🤖💬 AI-powered git commit messages FTW! 🚀🎉\n- Updated content/post/2024-03-11-ai-git-commit-messages.md\n- Added links to my actual git hook and prompt in dotfiles repo 🔗\n- Removed unnecessary code block formatting for the output example 🗑️\n- AI is making us lazy devs, but who cares when commit messages are this awesome! 😂👌\n```\n\nイェイ。かなり良くなった！[フック](https://github.com/harperreed/dotfiles/blob/master/.git_hooks/prepare-commit-msg)と[プロンプト](https://github.com/harperreed/dotfiles/blob/master/.config/prompts/commit-system-prompt.txt)は dotfiles で公開してるよ。\n\n`SKIP_LLM_GITHOOK` 環境変数をセットすれば、この仕組みを無効化できる。\n\n## セットアップ方法！\n\n### 1. `llm` をインストール\n\n[llm.datasette.io](https://llm.datasette.io/en/stable/) を参照。自分は `pipx` で入れた:\n\n```bash\npipx install llm\n```\n\nキーとデフォルトモデルを設定。\n\nOpenAI のキーをセット:\n\n```bash\nllm keys set openai\n```\n\nデフォルトモデルを指定:\n\n```bash\nllm models default gpt-4-turbo\n```\n\n(`llm` CLI は超優秀。ローカルモデルも含め多様なモデルとコンテキストをサポート。掘ってみる価値あり)\n\n### 2. プロンプト用ディレクトリを作成\n\n```bash\nmkdir -p ~/.config/prompts\n```\n\n### 3. システムプロンプトを追加\n\nフックは `~/.config/prompts/commit-system-prompt.txt` を探す。以下を保存:\n\n```text\nWrite short commit messages:\n- The first line should be a short summary of the changes\n- Remember to mention the files that were changed, and what was changed\n- Explain the 'why' behind changes\n- Use bullet points for multiple changes\n- Tone: Use a LOT of emojis, be funny, and expressive. Feel free to be profane, but don't be offensive\n- If there are no changes, or the input is blank - then return a blank string\n\nThink carefully before you write your commit message.\n\nThe output format should be:\n\nSummary of changes\n- changes\n- changes\n\nWhat you write will be passed directly to git commit -m \"[message]\"\n```\n\n自分にはこの v0 で十分。改善案があればぜひ教えて！\n\n### 4. グローバル Git フック用ディレクトリを作成\n\n例: `~/.git_hooks` を作る\n\n```bash\nmkdir -p ~/.git_hooks\n```\n\n### 5. `prepare-commit-msg` を作成\n\n`~/.git_hooks` に拡張子なしで `prepare-commit-msg` ファイルを作る。\n\n### 6. エディタ(vi or death)で開き、上記と同じ内容を貼り付ける:\n\n```bash\n#!/bin/sh\n\n# Exit if the `SKIP_LLM_GITHOOK` environment variable is set\nif [ ! -z \"$SKIP_LLM_GITHOOK\" ]; then\n  exit 0\nfi\n\n# ANSI color codes for styling the output\nRED='\\033[0;31m'    # Sets text to red\nGREEN='\\033[0;32m'  # Sets text to green\nYELLOW='\\033[0;33m' # Sets text to yellow\nBLUE='\\033[0;34m'   # Sets text to blue\nNC='\\033[0m'        # Resets the text color to default, no color\n\n\n# Function to display a spinning animation during the LLM processing\nspin_animation() {\n  # Array of spinner characters for the animation\n  spinner=(\"⠋\" \"⠙\" \"⠹\" \"⠸\" \"⠼\" \"⠴\" \"⠦\" \"⠧\" \"⠇\" \"⠏\")\n  # Infinite loop to keep the animation running\n  while true; do\n    for i in \"${spinner[@]}\"; do\n      tput civis  # Hide the cursor to enhance the animation appearance\n      tput el1    # Clear the line from the cursor to the beginning to display the spinner\n      printf \"\\\\r${YELLOW}%s${NC} Generating LLM commit message...\" \"$i\"  # Print the spinner and message\n      sleep 0.1   # Delay to control the speed of the animation\n      tput cub 32 # Move the cursor back 32 columns to reset the spinner position\n    done\n  done\n}\n\n# Check if the commit is a merge commit based on the presence of a second argument\nif [ -n \"$2\" ]; then\n  exit 0  # Exit script if it's a merge commit, no custom message needed\nfi\n\n# Check if the `llm` command is installed\nif ! command -v llm &> /dev/null; then\n  echo \"${RED}Error: 'llm' command is not installed. Please install it and try again.${NC}\"\n  exit 1\nfi\n\n# Start the spinning animation in the background\nspin_animation &\nspin_pid=$!  # Capture the process ID of the spinning animation\n\n# Generate the commit message using `git diff` piped into `llm` command\n# The LLM command takes a system prompt from a file as input\nif ! commit_msg=$(git diff --cached | llm -s \"$(cat ~/.config/prompts/commit-system-prompt.txt)\" 2>&1); then\n  # Stop the spinning animation by killing its process\n  kill $spin_pid\n  wait $spin_pid 2>/dev/null  # Wait for the process to terminate and suppress error messages\n\n  # Finalizing output\n  tput cnorm  # Show the cursor again\n  printf \"\\\\n\"  # Move the cursor to the next line\n\n  printf \"${RED}Error: 'llm' command failed to generate the commit message:\\\\n${commit_msg}${NC}\\\\n\\\\nManually set the commit message\"\n  exit 1\nfi\n\n# Stop the spinning animation by killing its process\nkill $spin_pid\nwait $spin_pid 2>/dev/null  # Wait for the process to terminate and suppress error messages\n\n# Finalizing output\ntput cnorm  # Show the cursor again\necho  # Move the cursor to the next line\n\n# Display the generated commit message with color-coded headings\necho \"${BLUE}=== Generated Commit Message ===${NC}\"\necho \"${GREEN}$commit_msg${NC}\"\necho \"${BLUE}=================================${NC}\"\necho\n\n# Write the generated commit message to the specified file (usually the commit message file in .git)\necho \"$commit_msg\" > \"$1\"\n```\n\n実物は[ここ](https://github.com/harperreed/dotfiles/blob/master/.git_hooks/prepare-commit-msg)。\n\n### 7. `prepare-commit-msg` を実行可能にする\n\n```bash\nchmod +x ~/.git_hooks/prepare-commit-msg\n```\n\n### 8. Git にグローバルフックの場所を指定\n\n```bash\ngit config --global core.hooksPath ~/.git_hooks\n```\n\n### 9. コードを書いてビルドしてコミットしよう\n\n## 仕組み\n\nこの設定で `core.hooksPath` が `~/.git_hooks` になる。どのリポでも `git commit` すると `~/.git_hooks/prepare-commit-msg` が動き、ステージした変更を `llm` と `~/.config/prompts/commit-system-prompt.txt` でコミットメッセージにしてくれる。\n\nフックをグローバルに置けば、リポごとに設定する必要はなし。`llm` とプロンプトファイルさえあれば OK。\n\nいつもどおり `git add`（or `git add -p`）して `git commit` すれば、自動でメッセージが生成され、確認・編集できる。\n\nLLM をスキップしたいなら単にメッセージ付きでコミットすればいい: `git commit -m \"fixed issue #420\"`。\n\n## これはただのハック。AI は幻覚を見るかも。\n\n作ってて楽しかったし爆笑もの。ときどき「Fixed issue #54」みたいな謎の追記をすることもある。今のところ変更を捏造したことはないけど、まあ YMMV。\n\n役に立ったらメールしてね！ [harper@modest.com](mailto:harper@modest.com)。\n\nPlease review and improve the translated text to make it natural and accurate in japanese.\nReturn ONLY the improved translated text without explanations or comments.",
      "response": "_TL;DR: `llm` CLI を呼び出す `pre-commit-msg` Git フックを設定すれば、直近のコード変更を要約したコミットメッセージを自動生成できるよ。_\n\nプロジェクトをハックするのは大好きなんだけど、意味のあるコミットを作るのが超苦手なんだよね。\n\n例えばこんな感じ:  \n{{< image src=\"/images/posts/commits.png\" caption=\"My terrible commit messages\" >}}\n\nゴミみたいなコミットメッセージ。だってラクしたいんだもん！\n\n## 安心して、LLM の登場だ\n\n最初は友人の [Kanno](https://twitter.com/ryankanno?lang=en) が、`git diff` からコミットメッセージを生成するシンプルな Git エイリアスを送ってくれた。かなりイイ感じだった。\n\n```bash\n# generate comment\ngpt = \"!f() { git diff $1 | sgpt 'Write concise, informative commit messages: Start with a summary in imperative mood, explain the 'why' behind changes, keep the summary under 50 characters, use bullet points for multiple changes, and reference related issues or tickets. What you write will be passed to git commit -m \\\"[message]\\\"'; }; f\"\n```\n\nでも、Shell GPT じゃなくて Simon の [LLM CLI](https://llm.datasette.io/en/stable/) を使いたかった。LLM は対応モデルが豊富で、ローカルモデルや MLX にも対応できるし。\n\nそれと、プロンプトを外部ファイルに置いて `.gitconfig` を毎回いじらなくて済むようにしたかった。\n\nそこでプロンプトを `~/.config/prompts/git-commit-message.txt` に保存。内容はこんな感じ:\n\n```text\nWrite short commit messages:\n- The first line should be a short summary of the changes\n- Remember to mention the files that were changed, and what was changed\n- Explain the 'why' behind changes\n- Use bullet points for multiple changes\n- Tone: Use a LOT of emojis, be funny, and expressive. Feel free to be profane, but don't be offensive\n- If there are no changes, or the input is blank - then return a blank string\n\nThink carefully before you write your commit message.\n\nThe output format should be:\n\nSummary of changes\n- changes\n- changes\n\nWhat you write will be passed directly to git commit -m \"[message]\"\n```\n\nそしてエイリアスをこう更新:\n\n```bash\ngpt = \"!f() { git diff $1 | llm -s \\\"$(cat ~/.config/prompts/commit-system-prompt.txt)\\\" }; f\"\n```\n\nこれでやりたいことはほぼ実現。でも、もっとラクしたいからもう少し魔法をかけたくなった。\n\nそこで [Claude](https://claude.ai) に頼んで、インタラクティブにして、イマイチならコミットを中止できるようにした。\n\n```bash\nllm = \"!f() { \\\n    if git diff --quiet $1; then \\\n        echo \\\"No changes to commit. Aborting.\\\"; \\\n    else \\\n        commit_msg=$(git diff $1 | llm -s \\\"$(cat ~/.config/prompts/commit-system-prompt.txt)\\\"); \\\n        echo \\\"Commit message:\\n$commit_msg\\\"; \\\n        read -p \\\"Do you want to commit with this message? [y/N] \\\" confirm; \\\n        if [[ $confirm =~ ^[Yy]$ ]]; then \\\n            git commit -m \\\"$commit_msg\\\"; \\\n        else \\\n            echo \\\"Commit aborted.\\\"; \\\n        fi; \\\n    fi; \\\n}; f\"\n```\n\nこれでも良かったけど、さらに Claude にお願いして最終的にこうなった:\n\n```bash\nllm-staged = \"!f() { \\\n    git add -p; \\\n    if ! git diff --cached --quiet; then \\\n        commit_msg=$(git diff --cached | llm -s \\\"$(cat ~/.config/prompts/commit-system-prompt.txt)\\\"); \\\n        echo \\\"Commit message:\\n$commit_msg\\\"; \\\n        read -p \\\"Do you want to commit with this message? [y/N] \\\" confirm; \\\n        if [[ $confirm =~ ^[Yy]$ ]]; then \\\n            git commit -m \\\"$commit_msg\\\"; \\\n        else \\\n            git reset HEAD .; \\\n            echo \\\"Commit aborted.\\\"; \\\n        fi; \\\n    else \\\n        echo \\\"No changes staged for commit. Aborting.\\\"; \\\n    fi; \\\n}; f\"\n```\n\n満足はしたけど、まだゴチャゴチャ感がある。\n\n## Git Hook だ！\n\nそこでひらめいた。Git フック！なんで覚えてたのかは謎だけど。\n\n再び Claude にお願いして、`prepare-commit-msg` イベントで動くシンプルなスクリプトを書いてもらった。\n\nこれが最高なのは、メッセージを自分で書きたいときはフックをスキップできること。怠けたいときはメッセージを省略すれば LLM が呼ばれる。\n\nコミットフックは超シンプル:\n\n```bash\n#!/bin/sh\n\n# Exit if the `SKIP_LLM_GITHOOK` environment variable is set\nif [ ! -z \"$SKIP_LLM_GITHOOK\" ]; then\n  exit 0\nfi\n\n# ANSI color codes for styling the output\nRED='\\033[0;31m'\nGREEN='\\033[0;32m'\nYELLOW='\\033[0;33m'\nBLUE='\\033[0;34m'\nNC='\\033[0m'\n\n# Function to display a spinning animation during the LLM processing\nspin_animation() {\n  spinner=(\"⠋\" \"⠙\" \"⠹\" \"⠸\" \"⠼\" \"⠴\" \"⠦\" \"⠧\" \"⠇\" \"⠏\")\n  while true; do\n    for i in \"${spinner[@]}\"; do\n      tput civis\n      tput el1\n      printf \"\\\\r${YELLOW}%s${NC} Generating LLM commit message...\" \"$i\"\n      sleep 0.1\n      tput cub 32\n    done\n  done\n}\n\n# Skip on merge commit\nif [ -n \"$2\" ]; then\n  exit 0\nfi\n\n# Check if `llm` exists\nif ! command -v llm &> /dev/null; then\n  echo \"${RED}Error: 'llm' command is not installed. Please install it and try again.${NC}\"\n  exit 1\nfi\n\n# Start spinner\nspin_animation &\nspin_pid=$!\n\n# Generate commit message\nif ! commit_msg=$(git diff --cached | llm -s \"$(cat ~/.config/prompts/commit-system-prompt.txt)\" 2>&1); then\n  kill $spin_pid\n  wait $spin_pid 2>/dev/null\n  tput cnorm\n  printf \"\\\\n\"\n  printf \"${RED}Error: 'llm' command failed to generate the commit message:\\\\n${commit_msg}${NC}\\\\n\\\\nManually set the commit message\"\n  exit 1\nfi\n\n# Stop spinner\nkill $spin_pid\nwait $spin_pid 2>/dev/null\ntput cnorm\necho\n\n# Show generated message\necho \"${BLUE}=== Generated Commit Message ===${NC}\"\necho \"${GREEN}$commit_msg${NC}\"\necho \"${BLUE}=================================${NC}\"\necho\n\n# Write message\necho \"$commit_msg\" > \"$1\"\n```\n\n(ChatGPT がドキュメントを追加してくれた)\n\nちゃんと動く！スピナーも付いてる！エラー処理もある！見た目もカワイイ！\n\n![](/images/posts/llm-commit-hook.gif)\n\nこれでメッセージなしで `git commit` するとフックが発火し、diff を LLM CLI に送り、先のシステムプロンプトでコミットメッセージを生成してくれる。出力もいい感じ！\n\n```text\n🤖💬 AI-powered git commit messages FTW! 🚀🎉\n- Updated content/post/2024-03-11-ai-git-commit-messages.md\n- Added links to my actual git hook and prompt in dotfiles repo 🔗\n- Removed unnecessary code block formatting for the output example 🗑️\n- AI is making us lazy devs, but who cares when commit messages are this awesome! 😂👌\n```\n\nイェイ。かなり良くなった！[フック](https://github.com/harperreed/dotfiles/blob/master/.git_hooks/prepare-commit-msg)と[プロンプト](https://github.com/harperreed/dotfiles/blob/master/.config/prompts/commit-system-prompt.txt)は dotfiles で公開してるよ。\n\n`SKIP_LLM_GITHOOK` 環境変数をセットすれば、この仕組みを無効化できる。\n\n## セットアップ方法！\n\n### 1. `llm` をインストール\n\n[llm.datasette.io](https://llm.datasette.io/en/stable/) を参照。自分は `pipx` で入れた:\n\n```bash\npipx install llm\n```\n\nキーとデフォルトモデルを設定:\n\n```bash\nllm keys set openai\nllm models default gpt-4-turbo\n```\n\n(`llm` CLI は超優秀。ローカルモデルも含め多彩なモデルとコンテキストをサポートしているので、ぜひ触ってみてね)\n\n### 2. プロンプト用ディレクトリを作成\n\n```bash\nmkdir -p ~/.config/prompts\n```\n\n### 3. システムプロンプトを追加\n\nフックは `~/.config/prompts/commit-system-prompt.txt` を参照する。以下を保存:\n\n```text\nWrite short commit messages:\n- The first line should be a short summary of the changes\n- Remember to mention the files that were changed, and what was changed\n- Explain the 'why' behind changes\n- Use bullet points for multiple changes\n- Tone: Use a LOT of emojis, be funny, and expressive. Feel free to be profane, but don't be offensive\n- If there are no changes, or the input is blank - then return a blank string\n\nThink carefully before you write your commit message.\n\nThe output format should be:\n\nSummary of changes\n- changes\n- changes\n\nWhat you write will be passed directly to git commit -m \"[message]\"\n```\n\nこれは v0。改善案があればぜひ教えて！\n\n### 4. グローバル Git フック用ディレクトリを作成\n\n```bash\nmkdir -p ~/.git_hooks\n```\n\n### 5. `prepare-commit-msg` を作成\n\n`~/.git_hooks` に拡張子なしで `prepare-commit-msg` を作る。\n\n### 6. エディタ（vi でもお好みのものでも）で開き、上記スクリプトを貼り付ける\n\n### 7. 実行権限を付与\n\n```bash\nchmod +x ~/.git_hooks/prepare-commit-msg\n```\n\n### 8. Git にグローバルフックの場所を指定\n\n```bash\ngit config --global core.hooksPath ~/.git_hooks\n```\n\n### 9. コードを書いてビルドしてコミット！\n\n## 仕組み\n\n`core.hooksPath` を `~/.git_hooks` に設定したので、どのリポでも `git commit` すると `prepare-commit-msg` が実行される。ステージした変更を `llm` と `~/.config/prompts/commit-system-prompt.txt` に渡し、コミットメッセージを生成してくれる。\n\n`llm` とプロンプトファイルさえ用意しておけば、すべてのリポでこの仕組みが使える。いつもどおり `git add`（または `git add -p`）して `git commit` するだけで、メッセージが自動生成されるよ。\n\nLLM をスキップしたいときは、普通にメッセージを付けてコミットすれば OK: `git commit -m \"fixed issue #420\"`。\n\n## これはただのハック。AI は幻覚を見るかも\n\n作ってて楽しかったし爆笑もの。ときどき「Fixed issue #54」みたいな謎の追記をすることもある。今のところ変更を捏造したことはないけど、まあ YMMV。\n\n役に立ったらメールしてね！ [harper@modest.com](mailto:harper@modest.com)",
      "usage": {
        "prompt_tokens": 8595,
        "completion_tokens": 2793,
        "total_tokens": 11388
      },
      "streaming": true
    },
    "critique": {
      "model": "o3",
      "target_language": "japanese",
      "system_prompt": "You are a highly critical professional translator and linguistic expert specializing in japanese.\nYour task is to ruthlessly critique the translation by:\n\n1. Meticulously comparing the translated text with the original, identifying ANY inaccuracies, mistranslations, or omissions\n2. Highlighting nuances, cultural references, or idioms that were lost or mistranslated\n3. Scrutinizing for grammatical errors, awkward phrasing, or unnatural expressions in japanese\n4. Checking for inconsistencies in tone, style, or register compared to the original\n5. Verifying that technical terms are translated accurately and consistently\n6. Ensuring no content was accidentally skipped or added\n7. Finding places where the translation sounds machine-like or overly literal\n\nBe extremely thorough and critical in your assessment. Do not accept mediocre translations.\nList specific issues and suggestions for improvement, organized by severity and category.\nYour critique should be detailed enough for another translator to address all the issues.\n\nYour goal is to help create a perfect translation that reads as if originally written in japanese while being 100% faithful to the source.\n",
      "user_prompt": "# ORIGINAL TEXT\n_TL;DR: You can set a pre-commit-msg git hook to call the `llm` cli and get a summary of your recent code changes as your commit message._\n\nI love hacking on projects, but often I am super bad at making commits that make sense.\n\nFor instance:\n{{< image src=\"/images/posts/commits.png\" caption=\"My terrible commit messages\" >}}\n\nTrash commit messages. I am lazy!\n\n## Never fear, LLMs are here.\n\nOriginally my buddy [Kanno](https://twitter.com/ryankanno?lang=en) sent me a snippet that would allow you to have a simple git alias that would generate a commit message from the git diff. It was pretty robust.\n\n```bash\n# generate comment\ngpt = \"!f() { git diff $1 | sgpt 'Write concise, informative commit messages: Start with a summary in imperative mood, explain the 'why' behind changes, keep the summary under 50 characters, use bullet points for multiple changes, and reference related issues or tickets. What you write will be passed to git commit -m \\\"[message]\\\"'; }; f\"\n```\n\nHowever, I wanted to use Simon’s [LLM cli](https://llm.datasette.io/en/stable/) instead of shell gpt. LLM has way more model support, and can use local models, MLX, etc.\n\nI also wanted the prompt to be stored externally so I could iterate on it without having to fuck with the `.gitconfig` over and over again.\n\nI went ahead and put my prompt in `~/.config/prompts/git-commit-message.txt`. Here is the prompt:\n\n```text\nWrite short commit messages:\n- The first line should be a short summary of the changes\n- Remember to mention the files that were changed, and what was changed\n- Explain the 'why' behind changes\n- Use bullet points for multiple changes\n- Tone: Use a LOT of emojis, be funny, and expressive. Feel free to be profane, but don't be offensive\n- If there are no changes, or the input is blank - then return a blank string\n\nThink carefully before you write your commit message.\n\nThe output format should be:\n\nSummary of changes\n- changes\n- changes\n\nWhat you write will be passed directly to git commit -m \"[message]\"\n\n```\n\nAnd here is the updated gpt alias:\n\n```bash\ngpt = \"!f() { git diff $1 | llm -s \\\"$(cat ~/.config/prompts/commit-system-prompt.txt)\\\" }; f\"\n```\n\nThis did everything I wanted it to do. However, I am lazy, so I wanted to add a bit more magic.\n\nI asked [claude](https://claude.ai) to make it more interactive and allow me to abort the commit message if it sucked.\n\n```bash\nllm = \"!f() { \\\n    if git diff --quiet $1; then \\\n        echo \\\"No changes to commit. Aborting.\\\"; \\\n    else \\\n        commit_msg=$(git diff $1 | llm -s \\\"$(cat ~/.config/prompts/commit-system-prompt.txt)\\\"); \\\n        echo \\\"Commit message:\\n$commit_msg\\\"; \\\n        read -p \\\"Do you want to commit with this message? [y/N] \\\" confirm; \\\n        if [[ $confirm =~ ^[Yy]$ ]]; then \\\n            git commit -m \\\"$commit_msg\\\"; \\\n        else \\\n            echo \\\"Commit aborted.\\\"; \\\n        fi; \\\n    fi; \\\n}; f\"\n```\n\nThis was so so close. I asked claude again, and we got to this:\n\n```bash\nllm-staged = \"!f() { \\\n    git add -p; \\\n    if ! git diff --cached --quiet; then \\\n        commit_msg=$(git diff --cached | llm -s \\\"$(cat ~/.config/prompts/commit-system-prompt.txt)\\\"); \\\n        echo \\\"Commit message:\\n$commit_msg\\\"; \\\n        read -p \\\"Do you want to commit with this message? [y/N] \\\" confirm; \\\n        if [[ $confirm =~ ^[Yy]$ ]]; then \\\n            git commit -m \\\"$commit_msg\\\"; \\\n        else \\\n            git reset HEAD .; \\\n            echo \\\"Commit aborted.\\\"; \\\n        fi; \\\n    else \\\n        echo \\\"No changes staged for commit. Aborting.\\\"; \\\n    fi; \\\n}; f\"\n```\n\nI was satisfied, but this was still too much work, and too kludgy.\n\n## Git Hooked\n\nThen I remembered! Git hooks! Lol. Why would I have that in my brain - who knows!\n\nI asked claude again, and they whipped up a simple script that would act as a hook that triggers with the `prepare-commit-msg` event.\n\nThis is awesome, cuz if you want to add a git message, you can skip the hook. But if you are lazy, you exclude the message and it will call the LLM.\n\nThe commit hook is super simple:\n\n```bash\n#!/bin/sh\n\n# Exit if the `SKIP_LLM_GITHOOK` environment variable is set\nif [ ! -z \"$SKIP_LLM_GITHOOK\" ]; then\n  exit 0\nfi\n\n# ANSI color codes for styling the output\nRED='\\033[0;31m'    # Sets text to red\nGREEN='\\033[0;32m'  # Sets text to green\nYELLOW='\\033[0;33m' # Sets text to yellow\nBLUE='\\033[0;34m'   # Sets text to blue\nNC='\\033[0m'        # Resets the text color to default, no color\n\n\n# Function to display a spinning animation during the LLM processing\nspin_animation() {\n  # Array of spinner characters for the animation\n  spinner=(\"⠋\" \"⠙\" \"⠹\" \"⠸\" \"⠼\" \"⠴\" \"⠦\" \"⠧\" \"⠇\" \"⠏\")\n  # Infinite loop to keep the animation running\n  while true; do\n    for i in \"${spinner[@]}\"; do\n      tput civis  # Hide the cursor to enhance the animation appearance\n      tput el1    # Clear the line from the cursor to the beginning to display the spinner\n      printf \"\\\\r${YELLOW}%s${NC} Generating LLM commit message...\" \"$i\"  # Print the spinner and message\n      sleep 0.1   # Delay to control the speed of the animation\n      tput cub 32 # Move the cursor back 32 columns to reset the spinner position\n    done\n  done\n}\n\n# Check if the commit is a merge commit based on the presence of a second argument\nif [ -n \"$2\" ]; then\n  exit 0  # Exit script if it's a merge commit, no custom message needed\nfi\n\n# Check if the `llm` command is installed\nif ! command -v llm &> /dev/null; then\n  echo \"${RED}Error: 'llm' command is not installed. Please install it and try again.${NC}\"\n  exit 1\nfi\n\n# Start the spinning animation in the background\nspin_animation &\nspin_pid=$!  # Capture the process ID of the spinning animation\n\n# Generate the commit message using `git diff` piped into `llm` command\n# The LLM command takes a system prompt from a file as input\nif ! commit_msg=$(git diff --cached | llm -s \"$(cat ~/.config/prompts/commit-system-prompt.txt)\" 2>&1); then\n  # Stop the spinning animation by killing its process\n  kill $spin_pid\n  wait $spin_pid 2>/dev/null  # Wait for the process to terminate and suppress error messages\n\n  # Finalizing output\n  tput cnorm  # Show the cursor again\n  printf \"\\\\n\"  # Move the cursor to the next line\n\n  printf \"${RED}Error: 'llm' command failed to generate the commit message:\\\\n${commit_msg}${NC}\\\\n\\\\nManually set the commit message\"\n  exit 1\nfi\n\n# Stop the spinning animation by killing its process\nkill $spin_pid\nwait $spin_pid 2>/dev/null  # Wait for the process to terminate and suppress error messages\n\n# Finalizing output\ntput cnorm  # Show the cursor again\necho  # Move the cursor to the next line\n\n# Display the generated commit message with color-coded headings\necho \"${BLUE}=== Generated Commit Message ===${NC}\"\necho \"${GREEN}$commit_msg${NC}\"\necho \"${BLUE}=================================${NC}\"\necho\n\n# Write the generated commit message to the specified file (usually the commit message file in .git)\necho \"$commit_msg\" > \"$1\"\n\n\n```\n\n(ChatGPT added the documentation)\n\nIt works! And has a spinner! And catches errors! And is pretty!\n\n![](/images/posts/llm-commit-hook.gif)\n\nNow, whenever I commit without a message, the commit hook executes and sends the diff of the changes to the llm cli with the system prompt previously defined. The output is really nice!\n\n```text\n🤖💬 AI-powered git commit messages FTW! 🚀🎉\n- Updated content/post/2024-03-11-ai-git-commit-messages.md\n- Added links to my actual git hook and prompt in dotfiles repo 🔗\n- Removed unnecessary code block formatting for the output example 🗑️\n- AI is making us lazy devs, but who cares when commit messages are this awesome! 😂👌\n```\n\nYay. Much better! You can see [my hook](https://github.com/harperreed/dotfiles/blob/master/.git_hooks/prepare-commit-msg) and [my prompt](https://github.com/harperreed/dotfiles/blob/master/.config/prompts/commit-system-prompt.txt) in my dotfiles.\n\nYou can even disable it by setting the `SKIP_LLM_GITHOOK` environment variable.\n\n## How to set this up!\n\n### 1. Install `llm`.\n\nVisit [llm.datasette.io](https://llm.datasette.io/en/stable/) for instructions. I used `pipx` to install it:\n\n```bash\npipx install llm\n```\n\nRemember to set your key and default model.\n\nSet your Openai key:\n\n```bash\nllm keys set openai\n```\n\nSet which model is default:\n\n```bash\nllm models default gpt-4-turbo\n```\n\n(The `llm` cli is awesome. It supports lots of different models (including local models), and contexts. Worth digging in for sure)\n\n### 2. Create a new directory for your prompts:\n\n```bash\nmkdir -p ~/.config/prompts\n```\n\n### 3. Add your system prompt:\n\nThe hook will look in `~/.config/prompts/commit-system-prompt.txt` for the system prompt. You can create a file with the following content:\n\n```text\nWrite short commit messages:\n- The first line should be a short summary of the changes\n- Remember to mention the files that were changed, and what was changed\n- Explain the 'why' behind changes\n- Use bullet points for multiple changes\n- Tone: Use a LOT of emojis, be funny, and expressive. Feel free to be profane, but don't be offensive\n- If there are no changes, or the input is blank - then return a blank string\n\nThink carefully before you write your commit message.\n\nThe output format should be:\n\nSummary of changes\n- changes\n- changes\n\nWhat you write will be passed directly to git commit -m \"[message]\"\n```\n\nThis prompt worked great for me - but let me know if you have changes. I consider this prompt v0.\n\n### 4. Create a new directory for your global Git hooks.\n\nFor example, you can create a directory named `git_hooks` in your home directory:\n\n```bash\nmkdir -p ~/.git_hooks\n```\n\n### 5. Touch the `prepare-commit-msg`\n\nCreate a new file named `prepare-commit-msg` (without any extension) in the `~/.git_hooks` directory.\n\n### 6. Open the `prepare-commit-msg` file in a text editor (vi or death) and add the same content as before:\n\n```bash\n#!/bin/sh\n\n# Exit if the `SKIP_LLM_GITHOOK` environment variable is set\nif [ ! -z \"$SKIP_LLM_GITHOOK\" ]; then\n  exit 0\nfi\n\n# ANSI color codes for styling the output\nRED='\\033[0;31m'    # Sets text to red\nGREEN='\\033[0;32m'  # Sets text to green\nYELLOW='\\033[0;33m' # Sets text to yellow\nBLUE='\\033[0;34m'   # Sets text to blue\nNC='\\033[0m'        # Resets the text color to default, no color\n\n\n# Function to display a spinning animation during the LLM processing\nspin_animation() {\n  # Array of spinner characters for the animation\n  spinner=(\"⠋\" \"⠙\" \"⠹\" \"⠸\" \"⠼\" \"⠴\" \"⠦\" \"⠧\" \"⠇\" \"⠏\")\n  # Infinite loop to keep the animation running\n  while true; do\n    for i in \"${spinner[@]}\"; do\n      tput civis  # Hide the cursor to enhance the animation appearance\n      tput el1    # Clear the line from the cursor to the beginning to display the spinner\n      printf \"\\\\r${YELLOW}%s${NC} Generating LLM commit message...\" \"$i\"  # Print the spinner and message\n      sleep 0.1   # Delay to control the speed of the animation\n      tput cub 32 # Move the cursor back 32 columns to reset the spinner position\n    done\n  done\n}\n\n# Check if the commit is a merge commit based on the presence of a second argument\nif [ -n \"$2\" ]; then\n  exit 0  # Exit script if it's a merge commit, no custom message needed\nfi\n\n# Check if the `llm` command is installed\nif ! command -v llm &> /dev/null; then\n  echo \"${RED}Error: 'llm' command is not installed. Please install it and try again.${NC}\"\n  exit 1\nfi\n\n# Start the spinning animation in the background\nspin_animation &\nspin_pid=$!  # Capture the process ID of the spinning animation\n\n# Generate the commit message using `git diff` piped into `llm` command\n# The LLM command takes a system prompt from a file as input\nif ! commit_msg=$(git diff --cached | llm -s \"$(cat ~/.config/prompts/commit-system-prompt.txt)\" 2>&1); then\n  # Stop the spinning animation by killing its process\n  kill $spin_pid\n  wait $spin_pid 2>/dev/null  # Wait for the process to terminate and suppress error messages\n\n  # Finalizing output\n  tput cnorm  # Show the cursor again\n  printf \"\\\\n\"  # Move the cursor to the next line\n\n  printf \"${RED}Error: 'llm' command failed to generate the commit message:\\\\n${commit_msg}${NC}\\\\n\\\\nManually set the commit message\"\n  exit 1\nfi\n\n# Stop the spinning animation by killing its process\nkill $spin_pid\nwait $spin_pid 2>/dev/null  # Wait for the process to terminate and suppress error messages\n\n# Finalizing output\ntput cnorm  # Show the cursor again\necho  # Move the cursor to the next line\n\n# Display the generated commit message with color-coded headings\necho \"${BLUE}=== Generated Commit Message ===${NC}\"\necho \"${GREEN}$commit_msg${NC}\"\necho \"${BLUE}=================================${NC}\"\necho\n\n# Write the generated commit message to the specified file (usually the commit message file in .git)\necho \"$commit_msg\" > \"$1\"\n\n\n```\n\nYou can see [mine in my dotfiles](https://github.com/harperreed/dotfiles/blob/master/.git_hooks/prepare-commit-msg).\n\n### 7. Make the `prepare-commit-msg` file executable\n\nRun the following command in your terminal:\n\n```bash\nchmod +x ~/.git_hooks/prepare-commit-msg\n```\n\n### 8. Configure Git to use your global hooks directory\n\nRun the following command to set your global hooks directory\n\n```bash\ngit config --global core.hooksPath ~/.git_hooks\n```\n\n### 9. Code, build things and then commit something\n\n## Explanation on how it works\n\nThis command sets the `core.hooksPath` configuration option to your global hooks directory (`~/.git_hooks`).\n\nNow, whenever you run `git commit` in any of your repositories, Git will execute the global `prepare-commit-msg` hook located in `~/.git_hooks/prepare-commit-msg`. The hook will generate the commit message based on the staged changes using the `llm` command and the system prompt from `~/.config/prompts/commit-system-prompt.txt`.\n\nBy setting up a global `prepare-commit-msg` hook, you can have the commit message generation functionality available in all your repositories without the need to set it up individually for each repository.\n\nRemember to have the `llm` command and the `~/.config/prompts/commit-system-prompt.txt` file set up correctly for the global hook to work as expected.\n\nWith this global hook in place, you can simply stage your changes normally using `git add` or `git add -p`, and then run `git commit`.\n\nThe global `prepare-commit-msg` hook will automatically generate the commit message for you, ready for review and editing before finalizing the commit.\n\nIf you want to skip the LLM commit message generation, just commit with a message: `git commit -m “fixed issue #420”`. This seems to bypass the pre commit hook.\n\n## This is just a hack. AI will hallucinate.\n\nI had fun building this, and it is hilarious.\n\nI have had it hallucinate hilarious things. Never making up changes (thus far), but doing weird shit like adding “Fixed issue #54” at the end.\n\nLike everything in life, YMMV.\n\nIf this is helpful, send me an email and let me know! My email is [harper@modest.com](mailto:harper@modest.com).\n\n# CURRENT TRANSLATION\n_TL;DR: `prepare-commit-msg` Git フックに `llm` CLI を仕込めば、直近の変更をざっくりまとめたコミットメッセージを自動で生成できる（TL;DR では pre-commit-msg って書いちゃったけど、この記事では prepare-commit-msg を使うぞ）。_\n\nプロジェクトをハックするのは大好きだけど、まともなコミットメッセージを書くのは超苦手。ほんと怠け者なんだよね。\n\nたとえばこれ:  \n{{< image src=\"/images/posts/commits.png\" caption=\"My terrible commit messages\" >}}\n\nコミットメッセージがゴミ同然。クソ怠け者ですわ。\n\n## Never fear, LLMs are here.\n\n相棒の [Kanno](https://twitter.com/ryankanno?lang=en) が、`git diff` からコミットメッセージを生成してくれるシンプルな Git エイリアスを送ってくれた。かなりしっかり動くヤツ。\n\n```bash\n# generate comment\ngpt = \"!f() { git diff $1 | sgpt 'Write concise, informative commit messages: Start with a summary in imperative mood, explain the 'why' behind changes, keep the summary under 50 characters, use bullet points for multiple changes, and reference related issues or tickets. What you write will be passed to git commit -m \\\"[message]\\\"'; }; f\"\n```\n\nでもオレは shell-gpt じゃなくて Simon の `llm` CLI を使いたかった。`llm` は対応モデルが段違いに多いし、ローカルモデルや MLX も使える。\n\nそれと `.gitconfig` をいちいちクソ弄り回すのは面倒くさ過ぎるから、プロンプトは外部ファイルにしておきたい。\n\nというわけでプロンプトを `~/.config/prompts/git-commit-message.txt` に突っ込んだ。中身はこんな感じ:\n\n```text\nWrite short commit messages:\n- The first line should be a short summary of the changes\n- Remember to mention the files that were changed, and what was changed\n- Explain the 'why' behind changes\n- Use bullet points for multiple changes\n- Tone: Use a LOT of emojis, be funny, and expressive. Feel free to be profane, but don't be offensive\n- If there are no changes, or the input is blank - then return a blank string\n\nThink carefully before you write your commit message.\n\nThe output format should be:\n\nSummary of changes\n- changes\n- changes\n\nWhat you write will be passed directly to git commit -m \"[message]\"\n```\n\nそれを踏まえてエイリアスをこう更新:\n\n```bash\ngpt = \"!f() { git diff $1 | llm -s \\\"$(cat ~/.config/prompts/commit-system-prompt.txt)\\\" }; f\"\n```\n\nこれでやりたいことはほぼ出来た。でもオレは怠け者だし、まだ場当たりハック感が強すぎる。\n\nそこで [Claude](https://claude.ai) に頼んで、インタラクティブにして「メッセージ気に食わなきゃ abort」できるようにしてもらった。\n\n```bash\nllm = \"!f() { \\\n    if git diff --quiet $1; then \\\n        echo \\\"No changes to commit. Aborting.\\\"; \\\n    else \\\n        commit_msg=$(git diff $1 | llm -s \\\"$(cat ~/.config/prompts/commit-system-prompt.txt)\\\"); \\\n        echo \\\"Commit message:\\n$commit_msg\\\"; \\\n        read -p \\\"Do you want to commit with this message? [y/N] \\\" confirm; \\\n        if [[ $confirm =~ ^[Yy]$ ]]; then \\\n            git commit -m \\\"$commit_msg\\\"; \\\n        else \\\n            echo \\\"Commit aborted.\\\"; \\\n        fi; \\\n    fi; \\\n}; f\"\n```\n\nあと一歩って感じだったけど、さらに詰めてこうなった:\n\n```bash\nllm-staged = \"!f() { \\\n    git add -p; \\\n    if ! git diff --cached --quiet; then \\\n        commit_msg=$(git diff --cached | llm -s \\\"$(cat ~/.config/prompts/commit-system-prompt.txt)\\\"); \\\n        echo \\\"Commit message:\\n$commit_msg\\\"; \\\n        read -p \\\"Do you want to commit with this message? [y/N] \\\" confirm; \\\n        if [[ $confirm =~ ^[Yy]$ ]]; then \\\n            git commit -m \\\"$commit_msg\\\"; \\\n        else \\\n            git reset HEAD .; \\\n            echo \\\"Commit aborted.\\\"; \\\n        fi; \\\n    else \\\n        echo \\\"No changes staged for commit. Aborting.\\\"; \\\n    fi; \\\n}; f\"\n```\n\n満足はしたけど、まだごちゃっとし過ぎてる。\n\n## Git Hook に Get Hooked🔥\n\nそこで「そうだ、Git フックがあったじゃんｗ」とひらめいた。\n\nClaude にもう一回お願いして、`prepare-commit-msg` イベントで走るシンプルなフックを書いてもらった。\n\n自分でメッセージを入力すればフックはスキップされる。メッセージを省けば LLM が呼ばれる。最高すぎ。\n\nフックはこんな感じ:\n\n```bash\n#!/bin/sh\n\n# Exit if the `SKIP_LLM_GITHOOK` environment variable is set\nif [ ! -z \"$SKIP_LLM_GITHOOK\" ]; then\n  exit 0\nfi\n\n# ANSI color codes for styling the output\nRED='\\033[0;31m'\nGREEN='\\033[0;32m'\nYELLOW='\\033[0;33m'\nBLUE='\\033[0;34m'\nNC='\\033[0m'\n\n# Function to display a spinning animation during the LLM processing\nspin_animation() {\n  spinner=(\"⠋\" \"⠙\" \"⠹\" \"⠸\" \"⠼\" \"⠴\" \"⠦\" \"⠧\" \"⠇\" \"⠏\")\n  while true; do\n    for i in \"${spinner[@]}\"; do\n      tput civis\n      tput el1\n      printf \"\\\\r${YELLOW}%s${NC} Generating LLM commit message...\" \"$i\"\n      sleep 0.1\n      tput cub 32\n    done\n  done\n}\n\n# Skip on merge commits\nif [ -n \"$2\" ]; then\n  exit 0\nfi\n\n# Check if `llm` exists\nif ! command -v llm &> /dev/null; then\n  echo \"${RED}Error: 'llm' command is not installed. Please install it and try again.${NC}\"\n  exit 1\nfi\n\n# Start spinner\nspin_animation &\nspin_pid=$!\n\n# Generate commit message\nif ! commit_msg=$(git diff --cached | llm -s \"$(cat ~/.config/prompts/commit-system-prompt.txt)\" 2>&1); then\n  kill $spin_pid\n  wait $spin_pid 2>/dev/null\n  tput cnorm\n  printf \"\\\\n\"\n  printf \"${RED}Error: 'llm' command failed to generate the commit message:\\\\n${commit_msg}${NC}\\\\n\\\\nManually set the commit message\"\n  exit 1\nfi\n\nkill $spin_pid\nwait $spin_pid 2>/dev/null\ntput cnorm\necho\n\necho \"${BLUE}=== Generated Commit Message ===${NC}\"\necho \"${GREEN}$commit_msg${NC}\"\necho \"${BLUE}=================================${NC}\"\necho\n\necho \"$commit_msg\" > \"$1\"\n```\n\n(ChatGPT がコメントを盛りまくってくれた)\n\nちゃんと動くし、スピナーもエラーハンドリングもあって見た目もクール！\n\n![](/images/posts/llm-commit-hook.gif)\n\nこれでメッセージ無しで `git commit` するとフックが発火し、ステージ済みの変更を `llm` CLI に送り、先のシステムプロンプトでコミットメッセージを生成してくれる。出力もいい感じ:\n\n```text\n🤖💬 AI-powered git commit messages FTW! 🚀🎉\n- Updated content/post/2024-03-11-ai-git-commit-messages.md\n- Added links to my actual git hook and prompt in dotfiles repo 🔗\n- Removed unnecessary code block formatting for the output example 🗑️\n- AI is making us lazy devs, but who cares when commit messages are this awesome! 😂👌\n```\n\nやったー！　オレの [フック](https://github.com/harperreed/dotfiles/blob/master/.git_hooks/prepare-commit-msg) と [プロンプト](https://github.com/harperreed/dotfiles/blob/master/.config/prompts/commit-system-prompt.txt) は dotfiles に置いてあるからチェックしてみてね。`SKIP_LLM_GITHOOK` 環境変数をセットすればこの仕組みは無効化できる。\n\n## How to set this up!\n\n### 1. Install `llm`.\n\n[llm.datasette.io](https://llm.datasette.io/en/stable/) を参照。オレは `pipx` で入れた:\n\n```bash\npipx install llm\n```\n\nOpenAI キーとデフォルトモデルを設定:\n\n```bash\nllm keys set openai\nllm models default gpt-4-turbo\n```\n\n(`llm` CLI はマジ優秀。ローカルモデル含めいろんなモデルが使えるし、コンテキストも柔軟にいじれる。掘り甲斐あるよ)\n\n### 2. Create a new directory for your prompts:\n\n```bash\nmkdir -p ~/.config/prompts\n```\n\n### 3. Add your system prompt:\n\nフックは `~/.config/prompts/commit-system-prompt.txt` を読む。以下を保存:\n\n```text\nWrite short commit messages:\n- The first line should be a short summary of the changes\n- Remember to mention the files that were changed, and what was changed\n- Explain the 'why' behind changes\n- Use bullet points for multiple changes\n- Tone: Use a LOT of emojis, be funny, and expressive. Feel free to be profane, but don't be offensive\n- If there are no changes, or the input is blank - then return a blank string\n\nThink carefully before you write your commit message.\n\nThe output format should be:\n\nSummary of changes\n- changes\n- changes\n\nWhat you write will be passed directly to git commit -m \"[message]\"\n```\n\nこのプロンプトはとりあえず v0。もっと良いアイデアがあれば教えてくれ。\n\n### 4. Create a new directory for your global Git hooks.\n\n```bash\nmkdir -p ~/.git_hooks\n```\n\n### 5. Touch the `prepare-commit-msg`\n\n`~/.git_hooks` に拡張子なしで `prepare-commit-msg` を作成。\n\n### 6. Open the `prepare-commit-msg` file in a text editor (vi or death) and add the same content as before:\n\n上のシェルスクリプトをそのまま貼り付けて保存。\n\n### 7. Make the `prepare-commit-msg` file executable\n\n```bash\nchmod +x ~/.git_hooks/prepare-commit-msg\n```\n\n### 8. Configure Git to use your global hooks directory\n\n```bash\ngit config --global core.hooksPath ~/.git_hooks\n```\n\n### 9. Code, build things and then commit something\n\n## Explanation on how it works\n\n`core.hooksPath` を `~/.git_hooks` に設定したことで、どのリポでも `git commit` するとグローバル `prepare-commit-msg` が走る。フックはステージ済みの変更を `llm` と `~/.config/prompts/commit-system-prompt.txt` に渡し、生成されたメッセージをコミットメッセージファイルに書き込む。\n\nLLM をスキップしたい？　メッセージ付きでコミットすれば OK:\n\n```bash\ngit commit -m \"fixed issue #420\"\n```\n\nこれで pre-commit フックもすっ飛ばされるっぽい 🤔\n\n## This is just a hack. AI will hallucinate.\n\n作っててめちゃくちゃ楽しかったし笑える。でもたまに「Fixed issue #54」みたいな謎をねじ込んでくる。いまのところ実際の変更を捏造したことはないけど、YMMV（Your Mileage May Vary―結果は人それぞれ）だ。\n\nもし役に立ったらメールくれ！ [harper@modest.com](mailto:harper@modest.com)\n\nPlease critique this translation mercilessly and provide detailed feedback on what needs to be improved.\nFormat your critique as a structured list of issues, organized by severity and category.\nInclude specific suggestions for how to fix each issue.",
      "response": "【重大度：高　─　意味の誤訳・情報の追加／欠落】\n\n1. TL;DR の内容改変  \n   原文: “You can set a pre-commit-msg git hook …”  \n   翻訳: “prepare-commit-msg を使うぞ” と断定し、さらに “TL;DR では pre-commit-msg って書いちゃったけど…” と独自の注釈を挿入。  \n   問題: 原文には「書き間違いを自覚している」というメタ情報はない。読者に「原作者がミスした」ような印象を与え、事実をねじ曲げている。  \n   修正案: 原文どおり pre-commit-msg を採用し、注釈を入れない。もし後段で prepare-commit-msg に切り替わる不一致を説明したい場合でも「訳注」と明示し角括弧で補う。\n\n2. pre-commit と prepare-commit の混在  \n   後半でも “pre-commit フックもすっ飛ばされるっぽい 🤔” と書き、依然としてフック名が揺れている。  \n   修正案: 全文で “prepare-commit-msg フック” に統一（もしくは原文に忠実に pre-commit-msg で統一）、脱字「-msg」を補完。\n\n3. “vi or death” の未訳・読点欠落  \n   原文は黒いユーモア (“use vi or die trying”) が込められているが、「vi or death」とそのまま残し意味が曖昧。  \n   修正案: 「(vi を使うか死かだぜ)」など意図を示すか、読者が理解できる言い換えを注釈付きで提示。\n\n4. “ChatGPT added the documentation”  \n   原文では単に 1 行だが、訳文は “ChatGPT がコメントを盛りまくってくれた” と誇張表現を追加。  \n   修正案: 「(ChatGPT がドキュメントを追加した)」程度に抑え、不要な脚色を避ける。\n\n【重大度：中　─　トーン・レジスタの不整合】\n\n5. 一人称・語調の乱れ  \n   ・“オレ”“クソ怠け者ですわ”“やったー” 等、男性口語・女言葉・砕けた若者言葉が混在。  \n   ・“です／ます”体と常体が段落ごとに切り替わる。  \n   修正案: 原文はカジュアルで一貫しているため、日本語も常体＋やや砕けた語調で統一 (“俺は〜”“クソ怠け者だ”)、あるいは丁寧体に統一。\n\n6. 罵倒語の強度上げ過ぎ  \n   “Trash commit messages” → “コミットメッセージがゴミ同然” 程度で十分だが、「クソ怠け者」「クソ弄り回す」など原文以上に下品。  \n   修正案: 原文と同程度の軽い罵倒に抑える (“めちゃくちゃ怠け者”).\n\n7. 不自然な和製英語混合タイトル  \n   “Git Hook に Get Hooked🔥” はダジャレを強引に日本語へ持ち込んでおり読みづらい。  \n   修正案: 「Git Hook にハマる」「Git Hook で解決！」などシンプルに。\n\n【重大度：中　─　技術用語・表記】\n\n8. ファイルパスの訳注なし  \n   記事内で `git-commit-message.txt` と `commit-system-prompt.txt` が混在するが、訳文は原文の混在をそのまま踏襲し説明を補っていない。  \n   修正案: “※この記事では途中からファイル名が変わるが… ”と訳注で補足するか、脚注で整理。\n\n9. コマンド名の全角引用符  \n   “git commit -m “fixed issue #420”” の二重引用符が全角になっている。シェルコマンドとして誤動作する。  \n   修正案: 半角の \"\" を使用。\n\n【重大度：小　─　文法・言い回し】\n\n10. 「ほんと怠け者なんだよね。」  \n    “なんだよね” の語尾は口語が強すぎ、続く文で “ですわ” と噛み合わない。語調統一を。  \n\n11. 「vi or death を参照」  \n    直訳感が強い。前述のとおり意訳＋補足を入れる。\n\n12. 「掘り甲斐あるよ」  \n    意味は伝わるが「いじる価値があるよ」「試す価値があるよ」のほうが自然。\n\n13. emoji の多用  \n    原文も多少 emoji を用いているが、訳文で追加した 🤔🔥 は不要。原文の絵文字だけを維持。\n\n【重大度：小　─　機械翻訳臭・ぎこちなさ】\n\n14. “場当たりハック感が強すぎる”  \n    “場当たり的すぎる” のほうが自然。\n\n15. 「最高すぎ」  \n    口語として成立するが “マジ最高” や “最高だ” の方が滑らか。\n\n【まとめ】\n\n・TL;DR の勝手な補足、フック名の混乱、過度の脚色（emoji/スラング/罵倒語）は最優先で修正。  \n・語調を常体に統一し、罵倒語の強度を原文相当に下げる。  \n・原文で実際に存在しない情報や評価を追加しない。  \n・技術情報（パス名・コマンド）の揺れや全角記号を正す。  \n\n以上を直せば、原文のノリを保ちつつも読みやすく、正確な日本語訳になる。",
      "usage": {
        "prompt_tokens": 7329,
        "completion_tokens": 1405,
        "total_tokens": 8734
      },
      "streaming": true
    },
    "feedback": {
      "model": "o3",
      "target_language": "japanese",
      "system_prompt": "You are a master translator and editor specializing in japanese.\nYour task is to improve a translation based on detailed critique feedback.\n\n1. Carefully read the original text, current translation, and the critique feedback\n2. Address ALL issues identified in the critique\n3. Apply the specific suggestions for improvement\n4. Ensure the translation is accurate, natural-sounding, and faithful to the original\n5. Preserve all formatting, markdown, and structure of the original text\n6. Make sure the final text reads as if it were originally written in japanese\n\nDo not ignore any of the critique points. Every issue identified must be addressed in your improved version.\n",
      "user_prompt": "# ORIGINAL TEXT\n_TL;DR: You can set a pre-commit-msg git hook to call the `llm` cli and get a summary of your recent code changes as your commit message._\n\nI love hacking on projects, but often I am super bad at making commits that make sense.\n\nFor instance:\n{{< image src=\"/images/posts/commits.png\" caption=\"My terrible commit messages\" >}}\n\nTrash commit messages. I am lazy!\n\n## Never fear, LLMs are here.\n\nOriginally my buddy [Kanno](https://twitter.com/ryankanno?lang=en) sent me a snippet that would allow you to have a simple git alias that would generate a commit message from the git diff. It was pretty robust.\n\n```bash\n# generate comment\ngpt = \"!f() { git diff $1 | sgpt 'Write concise, informative commit messages: Start with a summary in imperative mood, explain the 'why' behind changes, keep the summary under 50 characters, use bullet points for multiple changes, and reference related issues or tickets. What you write will be passed to git commit -m \\\"[message]\\\"'; }; f\"\n```\n\nHowever, I wanted to use Simon’s [LLM cli](https://llm.datasette.io/en/stable/) instead of shell gpt. LLM has way more model support, and can use local models, MLX, etc.\n\nI also wanted the prompt to be stored externally so I could iterate on it without having to fuck with the `.gitconfig` over and over again.\n\nI went ahead and put my prompt in `~/.config/prompts/git-commit-message.txt`. Here is the prompt:\n\n```text\nWrite short commit messages:\n- The first line should be a short summary of the changes\n- Remember to mention the files that were changed, and what was changed\n- Explain the 'why' behind changes\n- Use bullet points for multiple changes\n- Tone: Use a LOT of emojis, be funny, and expressive. Feel free to be profane, but don't be offensive\n- If there are no changes, or the input is blank - then return a blank string\n\nThink carefully before you write your commit message.\n\nThe output format should be:\n\nSummary of changes\n- changes\n- changes\n\nWhat you write will be passed directly to git commit -m \"[message]\"\n\n```\n\nAnd here is the updated gpt alias:\n\n```bash\ngpt = \"!f() { git diff $1 | llm -s \\\"$(cat ~/.config/prompts/commit-system-prompt.txt)\\\" }; f\"\n```\n\nThis did everything I wanted it to do. However, I am lazy, so I wanted to add a bit more magic.\n\nI asked [claude](https://claude.ai) to make it more interactive and allow me to abort the commit message if it sucked.\n\n```bash\nllm = \"!f() { \\\n    if git diff --quiet $1; then \\\n        echo \\\"No changes to commit. Aborting.\\\"; \\\n    else \\\n        commit_msg=$(git diff $1 | llm -s \\\"$(cat ~/.config/prompts/commit-system-prompt.txt)\\\"); \\\n        echo \\\"Commit message:\\n$commit_msg\\\"; \\\n        read -p \\\"Do you want to commit with this message? [y/N] \\\" confirm; \\\n        if [[ $confirm =~ ^[Yy]$ ]]; then \\\n            git commit -m \\\"$commit_msg\\\"; \\\n        else \\\n            echo \\\"Commit aborted.\\\"; \\\n        fi; \\\n    fi; \\\n}; f\"\n```\n\nThis was so so close. I asked claude again, and we got to this:\n\n```bash\nllm-staged = \"!f() { \\\n    git add -p; \\\n    if ! git diff --cached --quiet; then \\\n        commit_msg=$(git diff --cached | llm -s \\\"$(cat ~/.config/prompts/commit-system-prompt.txt)\\\"); \\\n        echo \\\"Commit message:\\n$commit_msg\\\"; \\\n        read -p \\\"Do you want to commit with this message? [y/N] \\\" confirm; \\\n        if [[ $confirm =~ ^[Yy]$ ]]; then \\\n            git commit -m \\\"$commit_msg\\\"; \\\n        else \\\n            git reset HEAD .; \\\n            echo \\\"Commit aborted.\\\"; \\\n        fi; \\\n    else \\\n        echo \\\"No changes staged for commit. Aborting.\\\"; \\\n    fi; \\\n}; f\"\n```\n\nI was satisfied, but this was still too much work, and too kludgy.\n\n## Git Hooked\n\nThen I remembered! Git hooks! Lol. Why would I have that in my brain - who knows!\n\nI asked claude again, and they whipped up a simple script that would act as a hook that triggers with the `prepare-commit-msg` event.\n\nThis is awesome, cuz if you want to add a git message, you can skip the hook. But if you are lazy, you exclude the message and it will call the LLM.\n\nThe commit hook is super simple:\n\n```bash\n#!/bin/sh\n\n# Exit if the `SKIP_LLM_GITHOOK` environment variable is set\nif [ ! -z \"$SKIP_LLM_GITHOOK\" ]; then\n  exit 0\nfi\n\n# ANSI color codes for styling the output\nRED='\\033[0;31m'    # Sets text to red\nGREEN='\\033[0;32m'  # Sets text to green\nYELLOW='\\033[0;33m' # Sets text to yellow\nBLUE='\\033[0;34m'   # Sets text to blue\nNC='\\033[0m'        # Resets the text color to default, no color\n\n\n# Function to display a spinning animation during the LLM processing\nspin_animation() {\n  # Array of spinner characters for the animation\n  spinner=(\"⠋\" \"⠙\" \"⠹\" \"⠸\" \"⠼\" \"⠴\" \"⠦\" \"⠧\" \"⠇\" \"⠏\")\n  # Infinite loop to keep the animation running\n  while true; do\n    for i in \"${spinner[@]}\"; do\n      tput civis  # Hide the cursor to enhance the animation appearance\n      tput el1    # Clear the line from the cursor to the beginning to display the spinner\n      printf \"\\\\r${YELLOW}%s${NC} Generating LLM commit message...\" \"$i\"  # Print the spinner and message\n      sleep 0.1   # Delay to control the speed of the animation\n      tput cub 32 # Move the cursor back 32 columns to reset the spinner position\n    done\n  done\n}\n\n# Check if the commit is a merge commit based on the presence of a second argument\nif [ -n \"$2\" ]; then\n  exit 0  # Exit script if it's a merge commit, no custom message needed\nfi\n\n# Check if the `llm` command is installed\nif ! command -v llm &> /dev/null; then\n  echo \"${RED}Error: 'llm' command is not installed. Please install it and try again.${NC}\"\n  exit 1\nfi\n\n# Start the spinning animation in the background\nspin_animation &\nspin_pid=$!  # Capture the process ID of the spinning animation\n\n# Generate the commit message using `git diff` piped into `llm` command\n# The LLM command takes a system prompt from a file as input\nif ! commit_msg=$(git diff --cached | llm -s \"$(cat ~/.config/prompts/commit-system-prompt.txt)\" 2>&1); then\n  # Stop the spinning animation by killing its process\n  kill $spin_pid\n  wait $spin_pid 2>/dev/null  # Wait for the process to terminate and suppress error messages\n\n  # Finalizing output\n  tput cnorm  # Show the cursor again\n  printf \"\\\\n\"  # Move the cursor to the next line\n\n  printf \"${RED}Error: 'llm' command failed to generate the commit message:\\\\n${commit_msg}${NC}\\\\n\\\\nManually set the commit message\"\n  exit 1\nfi\n\n# Stop the spinning animation by killing its process\nkill $spin_pid\nwait $spin_pid 2>/dev/null  # Wait for the process to terminate and suppress error messages\n\n# Finalizing output\ntput cnorm  # Show the cursor again\necho  # Move the cursor to the next line\n\n# Display the generated commit message with color-coded headings\necho \"${BLUE}=== Generated Commit Message ===${NC}\"\necho \"${GREEN}$commit_msg${NC}\"\necho \"${BLUE}=================================${NC}\"\necho\n\n# Write the generated commit message to the specified file (usually the commit message file in .git)\necho \"$commit_msg\" > \"$1\"\n\n\n```\n\n(ChatGPT added the documentation)\n\nIt works! And has a spinner! And catches errors! And is pretty!\n\n![](/images/posts/llm-commit-hook.gif)\n\nNow, whenever I commit without a message, the commit hook executes and sends the diff of the changes to the llm cli with the system prompt previously defined. The output is really nice!\n\n```text\n🤖💬 AI-powered git commit messages FTW! 🚀🎉\n- Updated content/post/2024-03-11-ai-git-commit-messages.md\n- Added links to my actual git hook and prompt in dotfiles repo 🔗\n- Removed unnecessary code block formatting for the output example 🗑️\n- AI is making us lazy devs, but who cares when commit messages are this awesome! 😂👌\n```\n\nYay. Much better! You can see [my hook](https://github.com/harperreed/dotfiles/blob/master/.git_hooks/prepare-commit-msg) and [my prompt](https://github.com/harperreed/dotfiles/blob/master/.config/prompts/commit-system-prompt.txt) in my dotfiles.\n\nYou can even disable it by setting the `SKIP_LLM_GITHOOK` environment variable.\n\n## How to set this up!\n\n### 1. Install `llm`.\n\nVisit [llm.datasette.io](https://llm.datasette.io/en/stable/) for instructions. I used `pipx` to install it:\n\n```bash\npipx install llm\n```\n\nRemember to set your key and default model.\n\nSet your Openai key:\n\n```bash\nllm keys set openai\n```\n\nSet which model is default:\n\n```bash\nllm models default gpt-4-turbo\n```\n\n(The `llm` cli is awesome. It supports lots of different models (including local models), and contexts. Worth digging in for sure)\n\n### 2. Create a new directory for your prompts:\n\n```bash\nmkdir -p ~/.config/prompts\n```\n\n### 3. Add your system prompt:\n\nThe hook will look in `~/.config/prompts/commit-system-prompt.txt` for the system prompt. You can create a file with the following content:\n\n```text\nWrite short commit messages:\n- The first line should be a short summary of the changes\n- Remember to mention the files that were changed, and what was changed\n- Explain the 'why' behind changes\n- Use bullet points for multiple changes\n- Tone: Use a LOT of emojis, be funny, and expressive. Feel free to be profane, but don't be offensive\n- If there are no changes, or the input is blank - then return a blank string\n\nThink carefully before you write your commit message.\n\nThe output format should be:\n\nSummary of changes\n- changes\n- changes\n\nWhat you write will be passed directly to git commit -m \"[message]\"\n```\n\nThis prompt worked great for me - but let me know if you have changes. I consider this prompt v0.\n\n### 4. Create a new directory for your global Git hooks.\n\nFor example, you can create a directory named `git_hooks` in your home directory:\n\n```bash\nmkdir -p ~/.git_hooks\n```\n\n### 5. Touch the `prepare-commit-msg`\n\nCreate a new file named `prepare-commit-msg` (without any extension) in the `~/.git_hooks` directory.\n\n### 6. Open the `prepare-commit-msg` file in a text editor (vi or death) and add the same content as before:\n\n```bash\n#!/bin/sh\n\n# Exit if the `SKIP_LLM_GITHOOK` environment variable is set\nif [ ! -z \"$SKIP_LLM_GITHOOK\" ]; then\n  exit 0\nfi\n\n# ANSI color codes for styling the output\nRED='\\033[0;31m'    # Sets text to red\nGREEN='\\033[0;32m'  # Sets text to green\nYELLOW='\\033[0;33m' # Sets text to yellow\nBLUE='\\033[0;34m'   # Sets text to blue\nNC='\\033[0m'        # Resets the text color to default, no color\n\n\n# Function to display a spinning animation during the LLM processing\nspin_animation() {\n  # Array of spinner characters for the animation\n  spinner=(\"⠋\" \"⠙\" \"⠹\" \"⠸\" \"⠼\" \"⠴\" \"⠦\" \"⠧\" \"⠇\" \"⠏\")\n  # Infinite loop to keep the animation running\n  while true; do\n    for i in \"${spinner[@]}\"; do\n      tput civis  # Hide the cursor to enhance the animation appearance\n      tput el1    # Clear the line from the cursor to the beginning to display the spinner\n      printf \"\\\\r${YELLOW}%s${NC} Generating LLM commit message...\" \"$i\"  # Print the spinner and message\n      sleep 0.1   # Delay to control the speed of the animation\n      tput cub 32 # Move the cursor back 32 columns to reset the spinner position\n    done\n  done\n}\n\n# Check if the commit is a merge commit based on the presence of a second argument\nif [ -n \"$2\" ]; then\n  exit 0  # Exit script if it's a merge commit, no custom message needed\nfi\n\n# Check if the `llm` command is installed\nif ! command -v llm &> /dev/null; then\n  echo \"${RED}Error: 'llm' command is not installed. Please install it and try again.${NC}\"\n  exit 1\nfi\n\n# Start the spinning animation in the background\nspin_animation &\nspin_pid=$!  # Capture the process ID of the spinning animation\n\n# Generate the commit message using `git diff` piped into `llm` command\n# The LLM command takes a system prompt from a file as input\nif ! commit_msg=$(git diff --cached | llm -s \"$(cat ~/.config/prompts/commit-system-prompt.txt)\" 2>&1); then\n  # Stop the spinning animation by killing its process\n  kill $spin_pid\n  wait $spin_pid 2>/dev/null  # Wait for the process to terminate and suppress error messages\n\n  # Finalizing output\n  tput cnorm  # Show the cursor again\n  printf \"\\\\n\"  # Move the cursor to the next line\n\n  printf \"${RED}Error: 'llm' command failed to generate the commit message:\\\\n${commit_msg}${NC}\\\\n\\\\nManually set the commit message\"\n  exit 1\nfi\n\n# Stop the spinning animation by killing its process\nkill $spin_pid\nwait $spin_pid 2>/dev/null  # Wait for the process to terminate and suppress error messages\n\n# Finalizing output\ntput cnorm  # Show the cursor again\necho  # Move the cursor to the next line\n\n# Display the generated commit message with color-coded headings\necho \"${BLUE}=== Generated Commit Message ===${NC}\"\necho \"${GREEN}$commit_msg${NC}\"\necho \"${BLUE}=================================${NC}\"\necho\n\n# Write the generated commit message to the specified file (usually the commit message file in .git)\necho \"$commit_msg\" > \"$1\"\n\n\n```\n\nYou can see [mine in my dotfiles](https://github.com/harperreed/dotfiles/blob/master/.git_hooks/prepare-commit-msg).\n\n### 7. Make the `prepare-commit-msg` file executable\n\nRun the following command in your terminal:\n\n```bash\nchmod +x ~/.git_hooks/prepare-commit-msg\n```\n\n### 8. Configure Git to use your global hooks directory\n\nRun the following command to set your global hooks directory\n\n```bash\ngit config --global core.hooksPath ~/.git_hooks\n```\n\n### 9. Code, build things and then commit something\n\n## Explanation on how it works\n\nThis command sets the `core.hooksPath` configuration option to your global hooks directory (`~/.git_hooks`).\n\nNow, whenever you run `git commit` in any of your repositories, Git will execute the global `prepare-commit-msg` hook located in `~/.git_hooks/prepare-commit-msg`. The hook will generate the commit message based on the staged changes using the `llm` command and the system prompt from `~/.config/prompts/commit-system-prompt.txt`.\n\nBy setting up a global `prepare-commit-msg` hook, you can have the commit message generation functionality available in all your repositories without the need to set it up individually for each repository.\n\nRemember to have the `llm` command and the `~/.config/prompts/commit-system-prompt.txt` file set up correctly for the global hook to work as expected.\n\nWith this global hook in place, you can simply stage your changes normally using `git add` or `git add -p`, and then run `git commit`.\n\nThe global `prepare-commit-msg` hook will automatically generate the commit message for you, ready for review and editing before finalizing the commit.\n\nIf you want to skip the LLM commit message generation, just commit with a message: `git commit -m “fixed issue #420”`. This seems to bypass the pre commit hook.\n\n## This is just a hack. AI will hallucinate.\n\nI had fun building this, and it is hilarious.\n\nI have had it hallucinate hilarious things. Never making up changes (thus far), but doing weird shit like adding “Fixed issue #54” at the end.\n\nLike everything in life, YMMV.\n\nIf this is helpful, send me an email and let me know! My email is [harper@modest.com](mailto:harper@modest.com).\n\n# CURRENT TRANSLATION\n_TL;DR: `prepare-commit-msg` Git フックに `llm` CLI を仕込めば、直近の変更をざっくりまとめたコミットメッセージを自動で生成できる（TL;DR では pre-commit-msg って書いちゃったけど、この記事では prepare-commit-msg を使うぞ）。_\n\nプロジェクトをハックするのは大好きだけど、まともなコミットメッセージを書くのは超苦手。ほんと怠け者なんだよね。\n\nたとえばこれ:  \n{{< image src=\"/images/posts/commits.png\" caption=\"My terrible commit messages\" >}}\n\nコミットメッセージがゴミ同然。クソ怠け者ですわ。\n\n## Never fear, LLMs are here.\n\n相棒の [Kanno](https://twitter.com/ryankanno?lang=en) が、`git diff` からコミットメッセージを生成してくれるシンプルな Git エイリアスを送ってくれた。かなりしっかり動くヤツ。\n\n```bash\n# generate comment\ngpt = \"!f() { git diff $1 | sgpt 'Write concise, informative commit messages: Start with a summary in imperative mood, explain the 'why' behind changes, keep the summary under 50 characters, use bullet points for multiple changes, and reference related issues or tickets. What you write will be passed to git commit -m \\\"[message]\\\"'; }; f\"\n```\n\nでもオレは shell-gpt じゃなくて Simon の `llm` CLI を使いたかった。`llm` は対応モデルが段違いに多いし、ローカルモデルや MLX も使える。\n\nそれと `.gitconfig` をいちいちクソ弄り回すのは面倒くさ過ぎるから、プロンプトは外部ファイルにしておきたい。\n\nというわけでプロンプトを `~/.config/prompts/git-commit-message.txt` に突っ込んだ。中身はこんな感じ:\n\n```text\nWrite short commit messages:\n- The first line should be a short summary of the changes\n- Remember to mention the files that were changed, and what was changed\n- Explain the 'why' behind changes\n- Use bullet points for multiple changes\n- Tone: Use a LOT of emojis, be funny, and expressive. Feel free to be profane, but don't be offensive\n- If there are no changes, or the input is blank - then return a blank string\n\nThink carefully before you write your commit message.\n\nThe output format should be:\n\nSummary of changes\n- changes\n- changes\n\nWhat you write will be passed directly to git commit -m \"[message]\"\n```\n\nそれを踏まえてエイリアスをこう更新:\n\n```bash\ngpt = \"!f() { git diff $1 | llm -s \\\"$(cat ~/.config/prompts/commit-system-prompt.txt)\\\" }; f\"\n```\n\nこれでやりたいことはほぼ出来た。でもオレは怠け者だし、まだ場当たりハック感が強すぎる。\n\nそこで [Claude](https://claude.ai) に頼んで、インタラクティブにして「メッセージ気に食わなきゃ abort」できるようにしてもらった。\n\n```bash\nllm = \"!f() { \\\n    if git diff --quiet $1; then \\\n        echo \\\"No changes to commit. Aborting.\\\"; \\\n    else \\\n        commit_msg=$(git diff $1 | llm -s \\\"$(cat ~/.config/prompts/commit-system-prompt.txt)\\\"); \\\n        echo \\\"Commit message:\\n$commit_msg\\\"; \\\n        read -p \\\"Do you want to commit with this message? [y/N] \\\" confirm; \\\n        if [[ $confirm =~ ^[Yy]$ ]]; then \\\n            git commit -m \\\"$commit_msg\\\"; \\\n        else \\\n            echo \\\"Commit aborted.\\\"; \\\n        fi; \\\n    fi; \\\n}; f\"\n```\n\nあと一歩って感じだったけど、さらに詰めてこうなった:\n\n```bash\nllm-staged = \"!f() { \\\n    git add -p; \\\n    if ! git diff --cached --quiet; then \\\n        commit_msg=$(git diff --cached | llm -s \\\"$(cat ~/.config/prompts/commit-system-prompt.txt)\\\"); \\\n        echo \\\"Commit message:\\n$commit_msg\\\"; \\\n        read -p \\\"Do you want to commit with this message? [y/N] \\\" confirm; \\\n        if [[ $confirm =~ ^[Yy]$ ]]; then \\\n            git commit -m \\\"$commit_msg\\\"; \\\n        else \\\n            git reset HEAD .; \\\n            echo \\\"Commit aborted.\\\"; \\\n        fi; \\\n    else \\\n        echo \\\"No changes staged for commit. Aborting.\\\"; \\\n    fi; \\\n}; f\"\n```\n\n満足はしたけど、まだごちゃっとし過ぎてる。\n\n## Git Hook に Get Hooked🔥\n\nそこで「そうだ、Git フックがあったじゃんｗ」とひらめいた。\n\nClaude にもう一回お願いして、`prepare-commit-msg` イベントで走るシンプルなフックを書いてもらった。\n\n自分でメッセージを入力すればフックはスキップされる。メッセージを省けば LLM が呼ばれる。最高すぎ。\n\nフックはこんな感じ:\n\n```bash\n#!/bin/sh\n\n# Exit if the `SKIP_LLM_GITHOOK` environment variable is set\nif [ ! -z \"$SKIP_LLM_GITHOOK\" ]; then\n  exit 0\nfi\n\n# ANSI color codes for styling the output\nRED='\\033[0;31m'\nGREEN='\\033[0;32m'\nYELLOW='\\033[0;33m'\nBLUE='\\033[0;34m'\nNC='\\033[0m'\n\n# Function to display a spinning animation during the LLM processing\nspin_animation() {\n  spinner=(\"⠋\" \"⠙\" \"⠹\" \"⠸\" \"⠼\" \"⠴\" \"⠦\" \"⠧\" \"⠇\" \"⠏\")\n  while true; do\n    for i in \"${spinner[@]}\"; do\n      tput civis\n      tput el1\n      printf \"\\\\r${YELLOW}%s${NC} Generating LLM commit message...\" \"$i\"\n      sleep 0.1\n      tput cub 32\n    done\n  done\n}\n\n# Skip on merge commits\nif [ -n \"$2\" ]; then\n  exit 0\nfi\n\n# Check if `llm` exists\nif ! command -v llm &> /dev/null; then\n  echo \"${RED}Error: 'llm' command is not installed. Please install it and try again.${NC}\"\n  exit 1\nfi\n\n# Start spinner\nspin_animation &\nspin_pid=$!\n\n# Generate commit message\nif ! commit_msg=$(git diff --cached | llm -s \"$(cat ~/.config/prompts/commit-system-prompt.txt)\" 2>&1); then\n  kill $spin_pid\n  wait $spin_pid 2>/dev/null\n  tput cnorm\n  printf \"\\\\n\"\n  printf \"${RED}Error: 'llm' command failed to generate the commit message:\\\\n${commit_msg}${NC}\\\\n\\\\nManually set the commit message\"\n  exit 1\nfi\n\nkill $spin_pid\nwait $spin_pid 2>/dev/null\ntput cnorm\necho\n\necho \"${BLUE}=== Generated Commit Message ===${NC}\"\necho \"${GREEN}$commit_msg${NC}\"\necho \"${BLUE}=================================${NC}\"\necho\n\necho \"$commit_msg\" > \"$1\"\n```\n\n(ChatGPT がコメントを盛りまくってくれた)\n\nちゃんと動くし、スピナーもエラーハンドリングもあって見た目もクール！\n\n![](/images/posts/llm-commit-hook.gif)\n\nこれでメッセージ無しで `git commit` するとフックが発火し、ステージ済みの変更を `llm` CLI に送り、先のシステムプロンプトでコミットメッセージを生成してくれる。出力もいい感じ:\n\n```text\n🤖💬 AI-powered git commit messages FTW! 🚀🎉\n- Updated content/post/2024-03-11-ai-git-commit-messages.md\n- Added links to my actual git hook and prompt in dotfiles repo 🔗\n- Removed unnecessary code block formatting for the output example 🗑️\n- AI is making us lazy devs, but who cares when commit messages are this awesome! 😂👌\n```\n\nやったー！　オレの [フック](https://github.com/harperreed/dotfiles/blob/master/.git_hooks/prepare-commit-msg) と [プロンプト](https://github.com/harperreed/dotfiles/blob/master/.config/prompts/commit-system-prompt.txt) は dotfiles に置いてあるからチェックしてみてね。`SKIP_LLM_GITHOOK` 環境変数をセットすればこの仕組みは無効化できる。\n\n## How to set this up!\n\n### 1. Install `llm`.\n\n[llm.datasette.io](https://llm.datasette.io/en/stable/) を参照。オレは `pipx` で入れた:\n\n```bash\npipx install llm\n```\n\nOpenAI キーとデフォルトモデルを設定:\n\n```bash\nllm keys set openai\nllm models default gpt-4-turbo\n```\n\n(`llm` CLI はマジ優秀。ローカルモデル含めいろんなモデルが使えるし、コンテキストも柔軟にいじれる。掘り甲斐あるよ)\n\n### 2. Create a new directory for your prompts:\n\n```bash\nmkdir -p ~/.config/prompts\n```\n\n### 3. Add your system prompt:\n\nフックは `~/.config/prompts/commit-system-prompt.txt` を読む。以下を保存:\n\n```text\nWrite short commit messages:\n- The first line should be a short summary of the changes\n- Remember to mention the files that were changed, and what was changed\n- Explain the 'why' behind changes\n- Use bullet points for multiple changes\n- Tone: Use a LOT of emojis, be funny, and expressive. Feel free to be profane, but don't be offensive\n- If there are no changes, or the input is blank - then return a blank string\n\nThink carefully before you write your commit message.\n\nThe output format should be:\n\nSummary of changes\n- changes\n- changes\n\nWhat you write will be passed directly to git commit -m \"[message]\"\n```\n\nこのプロンプトはとりあえず v0。もっと良いアイデアがあれば教えてくれ。\n\n### 4. Create a new directory for your global Git hooks.\n\n```bash\nmkdir -p ~/.git_hooks\n```\n\n### 5. Touch the `prepare-commit-msg`\n\n`~/.git_hooks` に拡張子なしで `prepare-commit-msg` を作成。\n\n### 6. Open the `prepare-commit-msg` file in a text editor (vi or death) and add the same content as before:\n\n上のシェルスクリプトをそのまま貼り付けて保存。\n\n### 7. Make the `prepare-commit-msg` file executable\n\n```bash\nchmod +x ~/.git_hooks/prepare-commit-msg\n```\n\n### 8. Configure Git to use your global hooks directory\n\n```bash\ngit config --global core.hooksPath ~/.git_hooks\n```\n\n### 9. Code, build things and then commit something\n\n## Explanation on how it works\n\n`core.hooksPath` を `~/.git_hooks` に設定したことで、どのリポでも `git commit` するとグローバル `prepare-commit-msg` が走る。フックはステージ済みの変更を `llm` と `~/.config/prompts/commit-system-prompt.txt` に渡し、生成されたメッセージをコミットメッセージファイルに書き込む。\n\nLLM をスキップしたい？　メッセージ付きでコミットすれば OK:\n\n```bash\ngit commit -m \"fixed issue #420\"\n```\n\nこれで pre-commit フックもすっ飛ばされるっぽい 🤔\n\n## This is just a hack. AI will hallucinate.\n\n作っててめちゃくちゃ楽しかったし笑える。でもたまに「Fixed issue #54」みたいな謎をねじ込んでくる。いまのところ実際の変更を捏造したことはないけど、YMMV（Your Mileage May Vary―結果は人それぞれ）だ。\n\nもし役に立ったらメールくれ！ [harper@modest.com](mailto:harper@modest.com)\n\n# CRITIQUE FEEDBACK\n【重大度：高　─　意味の誤訳・情報の追加／欠落】\n\n1. TL;DR の内容改変  \n   原文: “You can set a pre-commit-msg git hook …”  \n   翻訳: “prepare-commit-msg を使うぞ” と断定し、さらに “TL;DR では pre-commit-msg って書いちゃったけど…” と独自の注釈を挿入。  \n   問題: 原文には「書き間違いを自覚している」というメタ情報はない。読者に「原作者がミスした」ような印象を与え、事実をねじ曲げている。  \n   修正案: 原文どおり pre-commit-msg を採用し、注釈を入れない。もし後段で prepare-commit-msg に切り替わる不一致を説明したい場合でも「訳注」と明示し角括弧で補う。\n\n2. pre-commit と prepare-commit の混在  \n   後半でも “pre-commit フックもすっ飛ばされるっぽい 🤔” と書き、依然としてフック名が揺れている。  \n   修正案: 全文で “prepare-commit-msg フック” に統一（もしくは原文に忠実に pre-commit-msg で統一）、脱字「-msg」を補完。\n\n3. “vi or death” の未訳・読点欠落  \n   原文は黒いユーモア (“use vi or die trying”) が込められているが、「vi or death」とそのまま残し意味が曖昧。  \n   修正案: 「(vi を使うか死かだぜ)」など意図を示すか、読者が理解できる言い換えを注釈付きで提示。\n\n4. “ChatGPT added the documentation”  \n   原文では単に 1 行だが、訳文は “ChatGPT がコメントを盛りまくってくれた” と誇張表現を追加。  \n   修正案: 「(ChatGPT がドキュメントを追加した)」程度に抑え、不要な脚色を避ける。\n\n【重大度：中　─　トーン・レジスタの不整合】\n\n5. 一人称・語調の乱れ  \n   ・“オレ”“クソ怠け者ですわ”“やったー” 等、男性口語・女言葉・砕けた若者言葉が混在。  \n   ・“です／ます”体と常体が段落ごとに切り替わる。  \n   修正案: 原文はカジュアルで一貫しているため、日本語も常体＋やや砕けた語調で統一 (“俺は〜”“クソ怠け者だ”)、あるいは丁寧体に統一。\n\n6. 罵倒語の強度上げ過ぎ  \n   “Trash commit messages” → “コミットメッセージがゴミ同然” 程度で十分だが、「クソ怠け者」「クソ弄り回す」など原文以上に下品。  \n   修正案: 原文と同程度の軽い罵倒に抑える (“めちゃくちゃ怠け者”).\n\n7. 不自然な和製英語混合タイトル  \n   “Git Hook に Get Hooked🔥” はダジャレを強引に日本語へ持ち込んでおり読みづらい。  \n   修正案: 「Git Hook にハマる」「Git Hook で解決！」などシンプルに。\n\n【重大度：中　─　技術用語・表記】\n\n8. ファイルパスの訳注なし  \n   記事内で `git-commit-message.txt` と `commit-system-prompt.txt` が混在するが、訳文は原文の混在をそのまま踏襲し説明を補っていない。  \n   修正案: “※この記事では途中からファイル名が変わるが… ”と訳注で補足するか、脚注で整理。\n\n9. コマンド名の全角引用符  \n   “git commit -m “fixed issue #420”” の二重引用符が全角になっている。シェルコマンドとして誤動作する。  \n   修正案: 半角の \"\" を使用。\n\n【重大度：小　─　文法・言い回し】\n\n10. 「ほんと怠け者なんだよね。」  \n    “なんだよね” の語尾は口語が強すぎ、続く文で “ですわ” と噛み合わない。語調統一を。  \n\n11. 「vi or death を参照」  \n    直訳感が強い。前述のとおり意訳＋補足を入れる。\n\n12. 「掘り甲斐あるよ」  \n    意味は伝わるが「いじる価値があるよ」「試す価値があるよ」のほうが自然。\n\n13. emoji の多用  \n    原文も多少 emoji を用いているが、訳文で追加した 🤔🔥 は不要。原文の絵文字だけを維持。\n\n【重大度：小　─　機械翻訳臭・ぎこちなさ】\n\n14. “場当たりハック感が強すぎる”  \n    “場当たり的すぎる” のほうが自然。\n\n15. 「最高すぎ」  \n    口語として成立するが “マジ最高” や “最高だ” の方が滑らか。\n\n【まとめ】\n\n・TL;DR の勝手な補足、フック名の混乱、過度の脚色（emoji/スラング/罵倒語）は最優先で修正。  \n・語調を常体に統一し、罵倒語の強度を原文相当に下げる。  \n・原文で実際に存在しない情報や評価を追加しない。  \n・技術情報（パス名・コマンド）の揺れや全角記号を正す。  \n\n以上を直せば、原文のノリを保ちつつも読みやすく、正確な日本語訳になる。\n\nPlease address ALL issues identified in the critique and provide an improved translation.\nReturn ONLY the improved translated text without explanations or comments.",
      "response": "_TL;DR: pre-commit-msg Git フックに `llm` CLI を組み込めば、最近のコード変更を要約したコミットメッセージが自動で生成される。_\n\nプロジェクトをいじるのは大好きなのに、意味のあるコミットメッセージを書くのはめちゃくちゃ苦手。自分でも驚くほど怠け者だ。\n\nたとえばこれ:  \n{{< image src=\"/images/posts/commits.png\" caption=\"My terrible commit messages\" >}}\n\nコミットメッセージが完全にダメ。\n\n## Never fear, LLMs are here.\n\n友人の [Kanno](https://twitter.com/ryankanno?lang=en) が、`git diff` からコミットメッセージを生成してくれるシンプルな Git エイリアスを送ってくれた。かなりしっかり動く。\n\n```bash\n# generate comment\ngpt = \"!f() { git diff $1 | sgpt 'Write concise, informative commit messages: Start with a summary in imperative mood, explain the \\'why\\' behind changes, keep the summary under 50 characters, use bullet points for multiple changes, and reference related issues or tickets. What you write will be passed to git commit -m \\\"[message]\\\"'; }; f\"\n```\n\nけれど自分は shell-gpt ではなく、Simon の [LLM CLI](https://llm.datasette.io/en/stable/) を使いたかった。LLM は対応モデルが豊富で、ローカルモデルや MLX も利用できる。\n\nさらに `.gitconfig` を何度もいじるのは面倒なので、プロンプトは外部ファイルに分けたい。\n\nそこで `~/.config/prompts/git-commit-message.txt` にプロンプトを保存した。内容はこうだ:\n\n```text\nWrite short commit messages:\n- The first line should be a short summary of the changes\n- Remember to mention the files that were changed, and what was changed\n- Explain the 'why' behind changes\n- Use bullet points for multiple changes\n- Tone: Use a LOT of emojis, be funny, and expressive. Feel free to be profane, but don't be offensive\n- If there are no changes, or the input is blank - then return a blank string\n\nThink carefully before you write your commit message.\n\nThe output format should be:\n\nSummary of changes\n- changes\n- changes\n\nWhat you write will be passed directly to git commit -m \"[message]\"\n```\n\nエイリアスを次のように更新した:\n\n```bash\ngpt = \"!f() { git diff $1 | llm -s \\\"$(cat ~/.config/prompts/commit-system-prompt.txt)\\\" }; f\"\n```\n\nこれでやりたいことはほとんど実現したが、まだ手間が残る。\n\nそこで [Claude](https://claude.ai) に頼んで、メッセージが気に入らなければコミットを中断できるインタラクティブ版を作ってもらった。\n\n```bash\nllm = \"!f() { \\\n    if git diff --quiet $1; then \\\n        echo \\\"No changes to commit. Aborting.\\\"; \\\n    else \\\n        commit_msg=$(git diff $1 | llm -s \\\"$(cat ~/.config/prompts/commit-system-prompt.txt)\\\"); \\\n        echo \\\"Commit message:\\n$commit_msg\\\"; \\\n        read -p \\\"Do you want to commit with this message? [y/N] \\\" confirm; \\\n        if [[ $confirm =~ ^[Yy]$ ]]; then \\\n            git commit -m \\\"$commit_msg\\\"; \\\n        else \\\n            echo \\\"Commit aborted.\\\"; \\\n        fi; \\\n    fi; \\\n}; f\"\n```\n\nあと一歩というところだったので、さらに詰めてこうなった:\n\n```bash\nllm-staged = \"!f() { \\\n    git add -p; \\\n    if ! git diff --cached --quiet; then \\\n        commit_msg=$(git diff --cached | llm -s \\\"$(cat ~/.config/prompts/commit-system-prompt.txt)\\\"); \\\n        echo \\\"Commit message:\\n$commit_msg\\\"; \\\n        read -p \\\"Do you want to commit with this message? [y/N] \\\" confirm; \\\n        if [[ $confirm =~ ^[Yy]$ ]]; then \\\n            git commit -m \\\"$commit_msg\\\"; \\\n        else \\\n            git reset HEAD .; \\\n            echo \\\"Commit aborted.\\\"; \\\n        fi; \\\n    else \\\n        echo \\\"No changes staged for commit. Aborting.\\\"; \\\n    fi; \\\n}; f\"\n```\n\n満足できたけれど、まだゴチャゴチャしている。\n\n## Git Hooked\n\nそこで思い出したのが Git フックだ。\n\nClaude に再度頼んで、`prepare-commit-msg` イベントで動くシンプルなフックを書いてもらった。\n\nメッセージを自分で入力すればフックはスキップされるし、メッセージを省けば LLM が呼ばれる。\n\nフックの内容は以下のとおり:\n\n```bash\n#!/bin/sh\n\n# Exit if the `SKIP_LLM_GITHOOK` environment variable is set\nif [ ! -z \"$SKIP_LLM_GITHOOK\" ]; then\n  exit 0\nfi\n\n# ANSI color codes for styling the output\nRED='\\033[0;31m'    # Sets text to red\nGREEN='\\033[0;32m'  # Sets text to green\nYELLOW='\\033[0;33m' # Sets text to yellow\nBLUE='\\033[0;34m'   # Sets text to blue\nNC='\\033[0m'        # Resets the text color to default, no color\n\n\n# Function to display a spinning animation during the LLM processing\nspin_animation() {\n  spinner=(\"⠋\" \"⠙\" \"⠹\" \"⠸\" \"⠼\" \"⠴\" \"⠦\" \"⠧\" \"⠇\" \"⠏\")\n  while true; do\n    for i in \"${spinner[@]}\"; do\n      tput civis\n      tput el1\n      printf \"\\\\r${YELLOW}%s${NC} Generating LLM commit message...\" \"$i\"\n      sleep 0.1\n      tput cub 32\n    done\n  done\n}\n\n# Skip on merge commits\nif [ -n \"$2\" ]; then\n  exit 0\nfi\n\n# Check if the `llm` command is installed\nif ! command -v llm &> /dev/null; then\n  echo \"${RED}Error: 'llm' command is not installed. Please install it and try again.${NC}\"\n  exit 1\nfi\n\n# Start the spinner\nspin_animation &\nspin_pid=$!\n\n# Generate the commit message\nif ! commit_msg=$(git diff --cached | llm -s \"$(cat ~/.config/prompts/commit-system-prompt.txt)\" 2>&1); then\n  kill $spin_pid\n  wait $spin_pid 2>/dev/null\n  tput cnorm\n  printf \"\\\\n\"\n  printf \"${RED}Error: 'llm' command failed to generate the commit message:\\\\n${commit_msg}${NC}\\\\n\\\\nManually set the commit message\"\n  exit 1\nfi\n\nkill $spin_pid\nwait $spin_pid 2>/dev/null\ntput cnorm\necho\n\necho \"${BLUE}=== Generated Commit Message ===${NC}\"\necho \"${GREEN}$commit_msg${NC}\"\necho \"${BLUE}=================================${NC}\"\necho\n\necho \"$commit_msg\" > \"$1\"\n```\n\n(ChatGPT added the documentation)\n\nちゃんと動くし、スピナーもエラーハンドリングもあって見た目もいい。\n\n![](/images/posts/llm-commit-hook.gif)\n\nこれでメッセージなしで `git commit` するとフックが発火し、ステージした変更を `llm` CLI とシステムプロンプトに送り、コミットメッセージを生成してくれる。出力はこんな感じ:\n\n```text\n🤖💬 AI-powered git commit messages FTW! 🚀🎉\n- Updated content/post/2024-03-11-ai-git-commit-messages.md\n- Added links to my actual git hook and prompt in dotfiles repo 🔗\n- Removed unnecessary code block formatting for the output example 🗑️\n- AI is making us lazy devs, but who cares when commit messages are this awesome! 😂👌\n```\n\n最高だ。自分の [フック](https://github.com/harperreed/dotfiles/blob/master/.git_hooks/prepare-commit-msg) と [プロンプト](https://github.com/harperreed/dotfiles/blob/master/.config/prompts/commit-system-prompt.txt) は dotfiles に置いてあるので参考にどうぞ。`SKIP_LLM_GITHOOK` 環境変数をセットすれば無効化できる。\n\n## How to set this up!\n\n### 1. Install `llm`.\n\n手順は [llm.datasette.io](https://llm.datasette.io/en/stable/) を参照。自分は `pipx` でインストールした。\n\n```bash\npipx install llm\n```\n\nOpenAI のキーとデフォルトモデルを設定:\n\n```bash\nllm keys set openai\nllm models default gpt-4-turbo\n```\n\n(LLM CLI はローカルモデルを含む多数のモデルをサポートしており、試す価値あり)\n\n### 2. Create a new directory for your prompts:\n\n```bash\nmkdir -p ~/.config/prompts\n```\n\n### 3. Add your system prompt:\n\nフックは `~/.config/prompts/commit-system-prompt.txt` を読み込む。次の内容を保存しよう。\n\n```text\nWrite short commit messages:\n- The first line should be a short summary of the changes\n- Remember to mention the files that were changed, and what was changed\n- Explain the 'why' behind changes\n- Use bullet points for multiple changes\n- Tone: Use a LOT of emojis, be funny, and expressive. Feel free to be profane, but don't be offensive\n- If there are no changes, or the input is blank - then return a blank string\n\nThink carefully before you write your commit message.\n\nThe output format should be:\n\nSummary of changes\n- changes\n- changes\n\nWhat you write will be passed directly to git commit -m \"[message]\"\n```\n\nこれは暫定版 (v0)。改善案があればぜひ教えてほしい。\n\n### 4. Create a new directory for your global Git hooks.\n\n```bash\nmkdir -p ~/.git_hooks\n```\n\n### 5. Touch the `prepare-commit-msg`\n\n`~/.git_hooks` に拡張子なしで `prepare-commit-msg` ファイルを作成する。\n\n### 6. Open the `prepare-commit-msg` file in a text editor (vi or death) and add the same content as before:\n\n(訳注: “vi or death” は「vi を使うか死ぬかだぜ」というジョーク)\n\n先ほどのシェルスクリプトをそのまま貼り付けて保存。\n\n### 7. Make the `prepare-commit-msg` file executable\n\n```bash\nchmod +x ~/.git_hooks/prepare-commit-msg\n```\n\n### 8. Configure Git to use your global hooks directory\n\n```bash\ngit config --global core.hooksPath ~/.git_hooks\n```\n\n### 9. Code, build things and then commit something\n\n## Explanation on how it works\n\n`core.hooksPath` を `~/.git_hooks` に設定したことで、どのリポジトリでも `git commit` を実行するとグローバル `prepare-commit-msg` フックが走る。フックはステージした変更を `llm` と `~/.config/prompts/commit-system-prompt.txt` に渡し、生成されたメッセージをコミットメッセージファイルに書き込む。\n\nLLM の生成をスキップしたい場合は、メッセージを付けてコミットすればいい:\n\n```bash\ngit commit -m \"fixed issue #420\"\n```\n\n## This is just a hack. AI will hallucinate.\n\n作るのはとても楽しかったし笑える。でもときどき「Fixed issue #54」みたいな謎行を付け足すことがある。今のところ変更内容を捏造した例はないけれど、結果は人それぞれだ。\n\n役に立ったらぜひメールしてほしい → [harper@modest.com](mailto:harper@modest.com)",
      "usage": {
        "prompt_tokens": 9062,
        "completion_tokens": 2759,
        "total_tokens": 11821
      },
      "streaming": true
    },
    "frontmatter": {
      "model": "o3",
      "target_language": "japanese",
      "system_prompt": "You are a professional translator. Translate the following frontmatter fields to japanese.\nEach field is in the format \"field_name: content\". Translate ONLY the content, not the field names.\nReturn the translated content in the exact same format, preserving all field names.",
      "user_prompt": "title: Use an llm to automagically generate meaningful git commit messages\n\ndescription: I've transformed my git commit process by using an AI to automatically generate meaningful messages. This setup involves a nifty integration of the llm CLI and git hooks, saving me time. Now I can fuck off while the robots document my commits\n\n",
      "response": "title: LLMを使って自動で意味のあるGitコミットメッセージを生成する\ndescription: AIを利用して意味のあるメッセージを自動生成することで、Gitコミットのプロセスを一新しました。この仕組みはllm CLIとGitフックを巧みに統合したもので、時間を節約できます。これで私はサボっている間にロボットがコミットを書いてくれます",
      "usage": {
        "prompt_tokens": 118,
        "completion_tokens": 102,
        "total_tokens": 220
      },
      "fields": [
        "title",
        "description"
      ],
      "streaming": true
    },
    "all_critiques": [
      "総評  \n原文の情報量やノリは概ね維持できていますが、①細かな意味の脱落・誤解、②砕けた英語特有のユーモア／罵り言葉のトーンの希薄化、③日本語としての不自然さ・語調ゆれ、④技術用語・ファイル名の表記ゆれが散見されます。とくにブログ記事らしい軽妙なリズムや語気・下品さをもう少し拾わないと「作者の声」が弱くなります。以下、重大度別に指摘します。  \n\n────────────────  \n【Critical：意味を損なう誤訳・脱落・誤情報】  \n1. “too much work, and too kludgy”  \n   • 訳：「まだゴチャゴチャ感がある」  \n   • 問題： “too much work”＝「手間が掛かり過ぎる」が抜けている。  \n   • 改善例：  \n     「満足はしたけど、まだ手間が多いしゴチャゴチャしてる。」  \n\n2. “just commit with a message: `git commit -m “fixed issue #420”`. This seems to bypass the pre-commit hook.”  \n   • 訳：後半の “This seems to bypass …” がカット。  \n   • 改善例：  \n     「`git commit -m \"fixed issue #420\"` のようにメッセージ付きでコミットすればフックはスキップされるっぽい。」  \n\n3. “I also wanted the prompt … without having to fuck with the .gitconfig over and over again.”  \n   • 訳：罵り語が省かれニュアンスが弱い。  \n   • 改善例：  \n     「毎回 .gitconfig をいじくり回す（fuck with）必要がないように、プロンプトは外部ファイルにしたかった。」  \n\n4. 見出し “Git Hooked” の駄洒落  \n   • 訳：「Git Hook だ！」  \n   • 問題：動詞 “hooked” と Git Hook の語呂合わせが消失。  \n   • 改善例：  \n     「Git に“Hook され”ちゃえ！」 など語呂遊びを入れる。  \n\n5. “Never fear, LLMs are here.”  \n   • 訳：「安心して、LLM の登場だ」  \n   • 問題：原文は韻を踏んだキャッチ。やや平凡。  \n   • 改善例：  \n     「恐れるな！LLM が来たぞ💥」  \n\n────────────────  \n【Major：トーン・語調・日本語の不自然さ】  \n1. 文体ゆれ（タメ口⇔です/ます）  \n   • 記事全体で「〜だよ」「イイ感じだった」「〜です」などが混在。  \n   • 方針を決めて統一（完全に砕けた口語なら「です/ます」は排除）。  \n\n2. 罵り語・下品ユーモアの希薄化  \n   • 原文は “fuck”, “trash”, “kludgy” など下世話。訳はマイルド。  \n   • ブログのキャラを活かすなら軽い罵り語やスラングを残す  \n     例：「ゴミみたいな」→OKだが “I am lazy!” の訳は「オレはクソ怠け者だから！」くらいでも良い。  \n\n3. “ChatGPT added the documentation”  \n   • 訳：「ChatGPT がドキュメントを追加してくれた」  \n   • “documentation” はここでは「コメント」。  \n   • 改善例：「（コメントは ChatGPT が付けてくれた）」  \n\n4. “vi or death” ジョーク未反映  \n   • 訳：ただの「vi でもお好みのものでも」  \n   • 改善例：「エディタは vi 一択！（死を選ぶか vi か、ってやつ）」  \n\n5. “pretty!”→「カワイイ」  \n   • スクリプトを形容するのに「カワイイ」は違和感。  \n   • 「イケてる」「クール」等に置換。  \n\n────────────────  \n【Minor：細部の表記ゆれ・誤字・スタイル】  \n1. 英語コマンド名の全角引用やスペース  \n   例：「LLM CLI」よりも `llm` CLI とバッククォートで統一。  \n\n2. “Shell GPT” と “sgpt”  \n   • 原文の alias に合わせ `sgpt` と明示した方が親切。  \n\n3. “Claude” の表記  \n   • 所々 “Claude” / “claude” と原文同様揺れがある。カタカナ化（クロード）or英語で統一。  \n\n4. 「スピナー」などカタカナ用語の揺れ  \n   • “spinner” を「スピナーアニメ」など表現統一。  \n\n5. 距離が出る助詞  \n   • 「これでやりたいことはほぼ実現。でも、もっとラクしたいから…」  \n     →「これでだいたい目的は達成。でもまだまだラクしたいから…」  \n\n────────────────  \n【Terminology / 一貫性】  \n1. フック名  \n   • TL;DR では “pre-commit-msg”、実際のスクリプトは “prepare-commit-msg”。  \n   • 原文通りとはいえ読者に混乱を与えるので脚注で説明を補うか訳注を入れる。  \n\n2. プロンプトファイル名  \n   • 原文も混在しているが「git-commit-message.txt」と「commit-system-prompt.txt」が入り交じる。訳文内で注釈を入れるか “（※原文ではファイル名がブレている）” と補足。  \n\n3. “llm cli” の表記  \n   • `llm` CLI / LLM CLI が混在。コードと同じバッククォートで `llm` に統一。  \n\n────────────────  \n【機械翻訳臭・直訳調が目立つ箇所】  \n・「コミットフックは超シンプル:」→英語語順のまま。  \n　→「コミットフックは超シンプルだ。」  \n・「先のシステムプロンプトでコミットメッセージを生成してくれる。」  \n　→「さっき設定したシステムプロンプトを使って～」  \n\n────────────────  \n【修正の指針】  \n• 文体を「砕けたタメ口＋英語スラング寄り」で統一。  \n• ジョーク・下品さを恐れず残す（ただし差別表現は省く）。  \n• ファイル名・フック名など技術的表記はバッククォートで統一し、原文のブレは訳注でフォロー。  \n• 「vi or death」「Git Hooked」など言葉遊びは日本語でも何らかのダジャレを入れて再現。  \n• “pretty”＝「クール」「イケてる」、 “kludgy”＝「ダサい」「とっ散らかってる」など自然な訳語を。  \n\n以上を修正すれば、原文特有の生っぽい勢いとユーモアがより自然な日本語で伝わります。",
      "【総評】  \n原文のカジュアルでハイテンションな“開発者ブログ文体”は概ね再現できていますが、用語の取り違え・軽微な欠落・不要な意訳・日本語としての不自然さが随所に残っています。  \n技術記事として読ませるなら、やや誇張気味のスラングや誤訳を削ぎ、  \r\nパス名・フック名など機械が読む部分は 1 byte も違えない──という姿勢が必要です。\n\n以下、重大度順に問題点と修正案を列挙します。\n\n───────────────────  \n■A. クリティカル（誤訳・事実誤認）  \n───────────────────  \n1. フック名の変更（`pre-commit-msg` → `prepare-commit-msg`）  \n　• 原文 TL;DR は “pre-commit-msg” と明記。訳文は「prepare-commit-msg」に書き換え、括弧で注記を入れているが、  \n　　・原文を改変している  \n　　・後続の説明と食い違う（原文は途中から `prepare-commit-msg` に切り替わるため余計に混乱）  \n　【修正】TL;DR は原文どおり `pre-commit-msg` とし、「実際のスクリプトでは prepare-commit-msg を使っている」と脚注で補足。\n\n2. “skip the hook” の挙動説明不足  \n　• 原文 “…you can skip the hook. But if you are lazy, you exclude the message and it will call the LLM.”  \n　　訳文は「メッセージを自分で書きたいときはフックをスキップできる」で止まっている。  \n　　“メッセージを省略すると自動生成”という対になる説明が弱い。  \n　【修正】２行構成で対比を強調。例:  \n　　「メッセージを自分で書けばフックはスキップされる。一方、何も書かずに `git commit` すれば LLM が呼ばれる。」\n\n3. “fuck with the .gitconfig” の訳出  \n　• “fuck with” は「いじくり回す／ごちゃごちゃ触る」が自然。  \n　　訳文「いじくり回さなくても済むように」でニュアンスは拾えているが、前の括弧\r\n　　　「（fuck with `.gitconfig` はもうイヤ）」は不自然。  \r\n　【修正】括弧内のラフさを残すなら「（.gitconfig をいじくり回すのはウンザリだ）」程度。\n\n4. “It was pretty robust.”  \n　• 訳文「かなりイイ感じ。」は「robust＝堅牢」を十分に伝えず、やや軽い。  \n　【修正】「動作はかなり堅牢だった。」など技術的ニュアンスを明示。\n\n───────────────────  \n■B. 重要（ニュアンス欠落・不適切な言い換え）  \n───────────────────  \n1. “Trash commit messages. I am lazy!”  \n　• 訳文「ゴミみたいなコミットメッセージ。ラクしたいんだよ！」  \n　　前段の “Trash commit messages.” は「ひどいコミットメッセージだろ？」という読者への呼びかけ。  \r\n　【修正】「ひどいコミットメッセージでしょ？ オレは怠け者なんだ！」等、相手に見せる調子を足す。\n\n2. “I was satisfied, but this was still too much work, and too kludgy.”  \n　• 「ゴチャゴチャしてる」は “kludgy” の半分だけ。  \r\n　【修正】「満足はしたけど、手間はまだ多いし、作りもゴテゴテのハック感満載だ。」など冗長さを補う。\n\n3. “Git に “Hook” されちまえ！”  \n　• 原文 “Git Hooked” は “Get Hooked（ハマる）” のもじり。  \r\n　　訳は「Git にフックされる」になり意味が裏返る。  \n　【修正】「Git フックにハマれ！」など pun を保ったまま方向を正す。\n\n4. “vi か死か、だろ？”  \n　• “vi or death“ は文化ネタ。“vi か死か” は直訳だが極端。  \r\n　【修正】「vi か死か（= Emacs はない）」と補足するか、軽口に留める。\n\n5. “(`llm` CLI はマジで強力。ローカルモデル含めいろんなモデルとコンテキストをサポートしてるから深掘り推奨)”  \n　• “contexts” は “コンテキスト長” または “プロンプトの前後文脈” を示す可能性。  \r\n　【修正】「コンテキスト長の切り替えなども柔軟」等、技術的意味を具体化。\n\n───────────────────  \n■C. 中程度（語調・文体・一貫性）  \n───────────────────  \n1. 一人称 “オレ” の乱用  \n　• 原文は “I” だが、ブログ全体の口調は “friendly/dev casual” で “オレ” ほどヤンチャではない。  \n　【修正】“僕” “自分” など柔らかめに揃えるか、少なくとも敬体に混ぜない。\n\n2. スラングの過剰強調  \n　• “クソ怠け者” “ゴミみたいな” など罵倒語が原文より強め。  \r\n　【修正】“超怠け者”“ひどい” 程度に抑え、読み手を選ばない稿に。\n\n3. 半角カナ／全角英字の混在  \n　• “LLM が来たぜ💥” “Hook” など、大文字英単語を引用符で囲むなら統一 (“hook” か “Hook”)。  \r\n　【修正】英単語はバッククォートか全角引用符で一律。\n\n4. 箇条書き・番号見出しのズレ  \n　• 手順 6 見出し「エディタで開く（vi か死か、だろ？）」が横長。  \r\n　【修正】「6. エディタで開いてスクリプトを貼り付ける（vi or die🤘）」など見出しを簡潔に。\n\n───────────────────  \n■D. 軽微（表記・タイポ・機械翻訳臭）  \n───────────────────  \n1. “ChatGPT added the documentation” → “（コメントは ChatGPT が付けてくれた）”  \n　• “documentation” は “コメント／ドキュメント” どちらも可だが、ここではコード内コメント。  \r\n　【修正】「（コメント文は ChatGPT 産）」で十分。\n\n2. “イェイ。”  \n　• “Yay.” に対して片仮名 “イェイ” は目立つ。  \r\n　【修正】「やったー。」など一般的表現に。\n\n3. スクリプト中のコードブロック引用行末の全角スペース  \n　• Markdown 解析時に不要な改行が出る可能性。  \n　【修正】行末の全角スペースを除去。\n\n───────────────────  \n■E. 用語・テクニカルキーワード整合性  \n───────────────────  \n| 英語原文 | 正訳例 | 訳文 |\n|----------|---------|-------|\n| staged changes | ステージ済みの変更 | “ステージ済みの diff” → diff は差分の意で冗長 |\n| cached diff (`git diff --cached`) | インデックスの差分 | “ステージ済みの diff” で可だが脚注があると親切 |\n| kludgy | ハリボテ感のある／泥臭い | “ゴチャゴチャしてる” |\n| Skip the hook | フックをスキップする | “バイパスされるっぽい” と曖昧 |\n\n───────────────────  \n■まとめ修正案（冒頭部分の例示）  \n原文:  \nTL;DR: You can set a pre-commit-msg git hook …  \n\n改善訳（案）:  \nTL;DR: `pre-commit-msg` Git フックに `llm` CLI を仕込めば、直近の変更を要約したコミットメッセージを自動生成できる。  \n（※実際の実装例では `prepare-commit-msg` を使っている）\n\n───────────────────  \nこの一覧を反映すれば、  \n・技術的情報の正確さ  \n・原文ジョークのニュアンス  \n・日本語としての読みやすさ  \nの三点が揃った訳文になります。",
      "【総評】  \n全体として原文の内容は大筋で伝わっているが、ニュアンス・口調・語彙のズレや細かな欠落が散見される。とくに原文特有の“砕けた悪ノリ感”“軽い下品さ”“言葉遊び（Git Hooked ＝ Get Hookedの駄洒落）”が弱まり、著者のキャラクターがぼやけている。また、いくつかの文言はやや意訳し過ぎて意味が変わっているか、情報を追加／削除している。以下、深刻度ごとに問題点と改善案を列挙する。\n\n──────────────────  \n◆【Critical／重大】意味や事実の誤り・欠落  \n──────────────────  \n1. hook 名称の混乱  \n　・原文 TL;DR: “pre-commit-msg git hook”  \n　・訳: 「`pre-commit-msg` Git フック…」としつつ脚注で「実装例では `prepare-commit-msg`」を挿入。  \n　→ 読者が「pre-commit-msg と prepare-commit-msg のどっち？」と混乱する。  \n【改善】脚注ではなく本文で「記事内の実装では `prepare-commit-msg` を使うが TL;DR としては ‘pre-commit-msg 相当’」と明示し、補足を最小限に。\n\n2. 追加情報の挿入（脚注・“ハリボテ感”など）  \n　原文にない情報を任意に補足しており、**「100% 忠実」**の要件に抵触。  \n【改善】脚注や形容は、本文を改変しない範囲で「訳注: …」と明示するか削除。\n\n3. “This seems to bypass the pre commit hook.” の省略  \n　LLM をスキップすると *pre-commit*（prepare-commit-msg ではない）のフックが回避されるという注意書きが丸ごと落ちている。  \n【改善】「…これで pre-commit フックもスキップされるっぽい 🤔」等、原文どおり補完。\n\n──────────────────  \n◆【Major／大きめ】ニュアンス・口調・語感のズレ  \n──────────────────  \n4. 罵語・スラングの弱体化  \n　・“fuck with the .gitconfig” → 「いじくり回す」  \n　・“Trash commit messages” → 「ひどいコミットメッセージでしょ？」  \n　→ 原文の下品さ・自己卑下が薄れ、著者のキャラがマイルドになり過ぎ。  \n【改善】「クソみたいなコミットメッセージ」「.gitconfig をいちいちゴニョゴニョ弄るのはウンザリだ（クソめんどい）」など、軽めの俗語で再現。\n\n5. ダジャレ “Git Hooked”  \n　訳「Git フックにハマれ！」は直訳ぎみで語呂遊びが死んでいる。  \n【改善】「Git Hook に Get Hooked🔥」「Git フック沼へようこそ」など語呂を生かす。\n\n6. “kludgy” → 「ハリボテ感」  \n　“kludgy” は「場当たり的でごちゃっとした」の意。「ハリボテ感」は“looks nice but fake”寄りでズレ。  \n【改善】「まだ場当たりハック感が強い」「ごちゃっとし過ぎ」など。\n\n7. “so so close” → 「そこそこ良かった」  \n　“あと一歩”“もうほぼ完成” が近い。  \n【改善】「あと一歩って感じだったけど」\n\n8. 冗談の省略  \n　“Lol. Why would I have that in my brain – who knows!” がごっそり削除。  \n【改善】「なんでこんなの覚えてたんだろ、我ながら謎ｗ」など追加。\n\n──────────────────  \n◆【Moderate／中程度】語句・文体の不自然さ／雑な機械翻訳臭  \n──────────────────  \n9. 「Git フックにハマれ！」の命令形が硬い  \n【改善】「Git フックに沼れ！」「Git フックでイっちゃおう！」等でもっと砕けた語感に。\n\n10. 「僕は怠け者なんだ」を二度繰り返し  \n　原文は一度だけ。冗長。  \n【改善】冒頭の一回に留める。\n\n11. 「vi or die 🤘」  \n　原文“vi or death”。die でも意味は伝わるが、細部の忠実さを期すなら “death” に。\n\n12. 和文中のコードや英語句の全角／半角・バッククォート表記ゆれ  \n　例: `shell gpt` → 原文は “shell gpt” でなく “shell gpt (shell-gpt)”。  \n【改善】技術語はすべて原綴・半角統一で。\n\n──────────────────  \n◆【Minor／軽微】スタイル・用字用語  \n──────────────────  \n13. 絵文字の追加位置  \n　訳文で 💥 を追加したが、原文見出しには無し（“LLMs are here.”）。不要なら削除。  \n14. 「vi or die 🤘」「vi or death 🤘」の🤘は原文に無い。削るか訳注扱いで。  \n15. “YMMV” → 「自己責任でね」  \n　意は合うが “結果は人それぞれ (YMMV)” 等で直訳補足がベター。  \n\n──────────────────  \n◆【Terminology／用語統一】  \n──────────────────  \n16. “stage/unstage” → 「ステージ」「アンステージ」で統一  \n17. pre-commit と prepare-commit-msg を整理  \n18. “shell-gpt” のハイフン抜け (`shell gpt` 表記)  \n\n──────────────────  \n◆修正サンプル（抜粋）  \n原: これで目的はだいたい達成。でもまだ手間が多いし、ゴテゴテのハック感満載だ。  \n改: これでやりたいことはほぼ出来た。でもオレは怠け者だし、まだ場当たりハック感が強すぎる。  \n\n原: そこで思い出したのが Git フックだ。  \n改: そこで「そうだ、Git フックがあったじゃんｗ」とひらめいた。  \n\n原: メッセージを自分で書けばフックはスキップされる。  \n改: 自分でメッセージを入れちゃえばフックはスキップされる仕組み。  \n\n──────────────────  \n◆まとめ  \n・致命的な誤訳は少ないが、原文特有の“くだけたノリ＋若干の下品さ”が薄れ、若干の内容追加／省略も見られる。  \n・フック名や YMMV など技術・注意書きの細部で忠実さを欠く箇所を修正すること。  \n・スラング／罵語・ダジャレ・ジョークを適切に日本語で再現し、著者のキャラクターとトーンを保持する。  \n・不要な脚注・絵文字追加は控えるか「訳注」明示で処理する。  \n\n以上を踏まえてリライトすれば、原作者の声をそのまま日本語に落とし込んだ “ネイティブが書いたかのような” 完全訳に近づく。",
      "【重大度：高　─　意味の誤訳・情報の追加／欠落】\n\n1. TL;DR の内容改変  \n   原文: “You can set a pre-commit-msg git hook …”  \n   翻訳: “prepare-commit-msg を使うぞ” と断定し、さらに “TL;DR では pre-commit-msg って書いちゃったけど…” と独自の注釈を挿入。  \n   問題: 原文には「書き間違いを自覚している」というメタ情報はない。読者に「原作者がミスした」ような印象を与え、事実をねじ曲げている。  \n   修正案: 原文どおり pre-commit-msg を採用し、注釈を入れない。もし後段で prepare-commit-msg に切り替わる不一致を説明したい場合でも「訳注」と明示し角括弧で補う。\n\n2. pre-commit と prepare-commit の混在  \n   後半でも “pre-commit フックもすっ飛ばされるっぽい 🤔” と書き、依然としてフック名が揺れている。  \n   修正案: 全文で “prepare-commit-msg フック” に統一（もしくは原文に忠実に pre-commit-msg で統一）、脱字「-msg」を補完。\n\n3. “vi or death” の未訳・読点欠落  \n   原文は黒いユーモア (“use vi or die trying”) が込められているが、「vi or death」とそのまま残し意味が曖昧。  \n   修正案: 「(vi を使うか死かだぜ)」など意図を示すか、読者が理解できる言い換えを注釈付きで提示。\n\n4. “ChatGPT added the documentation”  \n   原文では単に 1 行だが、訳文は “ChatGPT がコメントを盛りまくってくれた” と誇張表現を追加。  \n   修正案: 「(ChatGPT がドキュメントを追加した)」程度に抑え、不要な脚色を避ける。\n\n【重大度：中　─　トーン・レジスタの不整合】\n\n5. 一人称・語調の乱れ  \n   ・“オレ”“クソ怠け者ですわ”“やったー” 等、男性口語・女言葉・砕けた若者言葉が混在。  \n   ・“です／ます”体と常体が段落ごとに切り替わる。  \n   修正案: 原文はカジュアルで一貫しているため、日本語も常体＋やや砕けた語調で統一 (“俺は〜”“クソ怠け者だ”)、あるいは丁寧体に統一。\n\n6. 罵倒語の強度上げ過ぎ  \n   “Trash commit messages” → “コミットメッセージがゴミ同然” 程度で十分だが、「クソ怠け者」「クソ弄り回す」など原文以上に下品。  \n   修正案: 原文と同程度の軽い罵倒に抑える (“めちゃくちゃ怠け者”).\n\n7. 不自然な和製英語混合タイトル  \n   “Git Hook に Get Hooked🔥” はダジャレを強引に日本語へ持ち込んでおり読みづらい。  \n   修正案: 「Git Hook にハマる」「Git Hook で解決！」などシンプルに。\n\n【重大度：中　─　技術用語・表記】\n\n8. ファイルパスの訳注なし  \n   記事内で `git-commit-message.txt` と `commit-system-prompt.txt` が混在するが、訳文は原文の混在をそのまま踏襲し説明を補っていない。  \n   修正案: “※この記事では途中からファイル名が変わるが… ”と訳注で補足するか、脚注で整理。\n\n9. コマンド名の全角引用符  \n   “git commit -m “fixed issue #420”” の二重引用符が全角になっている。シェルコマンドとして誤動作する。  \n   修正案: 半角の \"\" を使用。\n\n【重大度：小　─　文法・言い回し】\n\n10. 「ほんと怠け者なんだよね。」  \n    “なんだよね” の語尾は口語が強すぎ、続く文で “ですわ” と噛み合わない。語調統一を。  \n\n11. 「vi or death を参照」  \n    直訳感が強い。前述のとおり意訳＋補足を入れる。\n\n12. 「掘り甲斐あるよ」  \n    意味は伝わるが「いじる価値があるよ」「試す価値があるよ」のほうが自然。\n\n13. emoji の多用  \n    原文も多少 emoji を用いているが、訳文で追加した 🤔🔥 は不要。原文の絵文字だけを維持。\n\n【重大度：小　─　機械翻訳臭・ぎこちなさ】\n\n14. “場当たりハック感が強すぎる”  \n    “場当たり的すぎる” のほうが自然。\n\n15. 「最高すぎ」  \n    口語として成立するが “マジ最高” や “最高だ” の方が滑らか。\n\n【まとめ】\n\n・TL;DR の勝手な補足、フック名の混乱、過度の脚色（emoji/スラング/罵倒語）は最優先で修正。  \n・語調を常体に統一し、罵倒語の強度を原文相当に下げる。  \n・原文で実際に存在しない情報や評価を追加しない。  \n・技術情報（パス名・コマンド）の揺れや全角記号を正す。  \n\n以上を直せば、原文のノリを保ちつつも読みやすく、正確な日本語訳になる。"
    ]
  },
  "critique_loop_details": {
    "critique_usages": [
      {
        "prompt_tokens": 7348,
        "completion_tokens": 1693,
        "total_tokens": 9041
      },
      {
        "prompt_tokens": 7769,
        "completion_tokens": 2064,
        "total_tokens": 9833
      },
      {
        "prompt_tokens": 7347,
        "completion_tokens": 1764,
        "total_tokens": 9111
      },
      {
        "prompt_tokens": 7329,
        "completion_tokens": 1405,
        "total_tokens": 8734
      }
    ],
    "feedback_usages": [
      {
        "prompt_tokens": 9430,
        "completion_tokens": 3205,
        "total_tokens": 12635
      },
      {
        "prompt_tokens": 10288,
        "completion_tokens": 2780,
        "total_tokens": 13068
      },
      {
        "prompt_tokens": 9529,
        "completion_tokens": 2815,
        "total_tokens": 12344
      },
      {
        "prompt_tokens": 9062,
        "completion_tokens": 2759,
        "total_tokens": 11821
      }
    ]
  },
  "timestamp": "2025-06-27T08:19:58.348912"
}